[
    {
        "func_name": "create_reader",
        "original": "def create_reader(path, is_training, input_dim, label_dim):\n    return C.io.MinibatchSource(C.io.CTFDeserializer(path, C.io.StreamDefs(features=C.io.StreamDef(field='features', shape=input_dim), labels=C.io.StreamDef(field='labels', shape=label_dim))), randomize=is_training, max_sweeps=C.io.INFINITELY_REPEAT if is_training else 1)",
        "mutated": [
            "def create_reader(path, is_training, input_dim, label_dim):\n    if False:\n        i = 10\n    return C.io.MinibatchSource(C.io.CTFDeserializer(path, C.io.StreamDefs(features=C.io.StreamDef(field='features', shape=input_dim), labels=C.io.StreamDef(field='labels', shape=label_dim))), randomize=is_training, max_sweeps=C.io.INFINITELY_REPEAT if is_training else 1)",
            "def create_reader(path, is_training, input_dim, label_dim):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return C.io.MinibatchSource(C.io.CTFDeserializer(path, C.io.StreamDefs(features=C.io.StreamDef(field='features', shape=input_dim), labels=C.io.StreamDef(field='labels', shape=label_dim))), randomize=is_training, max_sweeps=C.io.INFINITELY_REPEAT if is_training else 1)",
            "def create_reader(path, is_training, input_dim, label_dim):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return C.io.MinibatchSource(C.io.CTFDeserializer(path, C.io.StreamDefs(features=C.io.StreamDef(field='features', shape=input_dim), labels=C.io.StreamDef(field='labels', shape=label_dim))), randomize=is_training, max_sweeps=C.io.INFINITELY_REPEAT if is_training else 1)",
            "def create_reader(path, is_training, input_dim, label_dim):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return C.io.MinibatchSource(C.io.CTFDeserializer(path, C.io.StreamDefs(features=C.io.StreamDef(field='features', shape=input_dim), labels=C.io.StreamDef(field='labels', shape=label_dim))), randomize=is_training, max_sweeps=C.io.INFINITELY_REPEAT if is_training else 1)",
            "def create_reader(path, is_training, input_dim, label_dim):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return C.io.MinibatchSource(C.io.CTFDeserializer(path, C.io.StreamDefs(features=C.io.StreamDef(field='features', shape=input_dim), labels=C.io.StreamDef(field='labels', shape=label_dim))), randomize=is_training, max_sweeps=C.io.INFINITELY_REPEAT if is_training else 1)"
        ]
    },
    {
        "func_name": "convnet_cifar10",
        "original": "def convnet_cifar10(debug_output=False, data_path=data_path, epoch_size=50000, minibatch_size=64, max_epochs=30):\n    _cntk_py.set_computation_network_trace_level(0)\n    image_height = 32\n    image_width = 32\n    num_channels = 3\n    input_dim = image_height * image_width * num_channels\n    num_output_classes = 10\n    input_var = C.ops.input_variable((num_channels, image_height, image_width), np.float32)\n    label_var = C.ops.input_variable(num_output_classes, np.float32)\n    input_removemean = C.ops.minus(input_var, C.ops.constant(128))\n    scaled_input = C.ops.element_times(C.ops.constant(0.00390625), input_removemean)\n    with C.layers.default_options(activation=C.ops.relu, pad=True):\n        z = C.layers.Sequential([C.layers.For(range(2), lambda : [C.layers.Convolution2D((3, 3), 64), C.layers.Convolution2D((3, 3), 64), C.layers.MaxPooling((3, 3), (2, 2))]), C.layers.For(range(2), lambda i: [C.layers.Dense([256, 128][i]), C.layers.Dropout(0.5)]), C.layers.Dense(num_output_classes, activation=None)])(scaled_input)\n    ce = C.losses.cross_entropy_with_softmax(z, label_var)\n    pe = C.metrics.classification_error(z, label_var)\n    reader_train = create_reader(os.path.join(data_path, 'Train_cntk_text.txt'), True, input_dim, num_output_classes)\n    lr_per_sample = [0.0015625] * 10 + [0.00046875] * 10 + [0.00015625]\n    lr_schedule = C.learning_parameter_schedule(lr_per_sample, minibatch_size=1, epoch_size=epoch_size)\n    mm = [0.9] * 20\n    mm_schedule = C.learners.momentum_schedule(mm, epoch_size=epoch_size, minibatch_size=minibatch_size)\n    l2_reg_weight = 0.002\n    learner = C.learners.momentum_sgd(z.parameters, lr_schedule, mm_schedule, minibatch_size=minibatch_size, l2_regularization_weight=l2_reg_weight)\n    progress_printer = C.logging.ProgressPrinter(tag='Training', num_epochs=max_epochs)\n    trainer = C.Trainer(z, (ce, pe), learner, progress_printer)\n    input_map = {input_var: reader_train.streams.features, label_var: reader_train.streams.labels}\n    C.logging.log_number_of_parameters(z)\n    print()\n    for epoch in range(max_epochs):\n        sample_count = 0\n        while sample_count < epoch_size:\n            data = reader_train.next_minibatch(min(minibatch_size, epoch_size - sample_count), input_map=input_map)\n            trainer.train_minibatch(data)\n            sample_count += trainer.previous_minibatch_sample_count\n        trainer.summarize_training_progress()\n        z.save(os.path.join(model_path, 'ConvNet_CIFAR10_{}.dnn'.format(epoch)))\n    reader_test = create_reader(os.path.join(data_path, 'Test_cntk_text.txt'), False, input_dim, num_output_classes)\n    input_map = {input_var: reader_test.streams.features, label_var: reader_test.streams.labels}\n    epoch_size = 10000\n    minibatch_size = 16\n    metric_numer = 0\n    metric_denom = 0\n    sample_count = 0\n    minibatch_index = 0\n    while sample_count < epoch_size:\n        current_minibatch = min(minibatch_size, epoch_size - sample_count)\n        data = reader_test.next_minibatch(current_minibatch, input_map=input_map)\n        metric_numer += trainer.test_minibatch(data) * current_minibatch\n        metric_denom += current_minibatch\n        sample_count += data[label_var].num_samples\n        minibatch_index += 1\n    print('')\n    print('Final Results: Minibatch[1-{}]: errs = {:0.2f}% * {}'.format(minibatch_index + 1, metric_numer * 100.0 / metric_denom, metric_denom))\n    print('')\n    return metric_numer / metric_denom",
        "mutated": [
            "def convnet_cifar10(debug_output=False, data_path=data_path, epoch_size=50000, minibatch_size=64, max_epochs=30):\n    if False:\n        i = 10\n    _cntk_py.set_computation_network_trace_level(0)\n    image_height = 32\n    image_width = 32\n    num_channels = 3\n    input_dim = image_height * image_width * num_channels\n    num_output_classes = 10\n    input_var = C.ops.input_variable((num_channels, image_height, image_width), np.float32)\n    label_var = C.ops.input_variable(num_output_classes, np.float32)\n    input_removemean = C.ops.minus(input_var, C.ops.constant(128))\n    scaled_input = C.ops.element_times(C.ops.constant(0.00390625), input_removemean)\n    with C.layers.default_options(activation=C.ops.relu, pad=True):\n        z = C.layers.Sequential([C.layers.For(range(2), lambda : [C.layers.Convolution2D((3, 3), 64), C.layers.Convolution2D((3, 3), 64), C.layers.MaxPooling((3, 3), (2, 2))]), C.layers.For(range(2), lambda i: [C.layers.Dense([256, 128][i]), C.layers.Dropout(0.5)]), C.layers.Dense(num_output_classes, activation=None)])(scaled_input)\n    ce = C.losses.cross_entropy_with_softmax(z, label_var)\n    pe = C.metrics.classification_error(z, label_var)\n    reader_train = create_reader(os.path.join(data_path, 'Train_cntk_text.txt'), True, input_dim, num_output_classes)\n    lr_per_sample = [0.0015625] * 10 + [0.00046875] * 10 + [0.00015625]\n    lr_schedule = C.learning_parameter_schedule(lr_per_sample, minibatch_size=1, epoch_size=epoch_size)\n    mm = [0.9] * 20\n    mm_schedule = C.learners.momentum_schedule(mm, epoch_size=epoch_size, minibatch_size=minibatch_size)\n    l2_reg_weight = 0.002\n    learner = C.learners.momentum_sgd(z.parameters, lr_schedule, mm_schedule, minibatch_size=minibatch_size, l2_regularization_weight=l2_reg_weight)\n    progress_printer = C.logging.ProgressPrinter(tag='Training', num_epochs=max_epochs)\n    trainer = C.Trainer(z, (ce, pe), learner, progress_printer)\n    input_map = {input_var: reader_train.streams.features, label_var: reader_train.streams.labels}\n    C.logging.log_number_of_parameters(z)\n    print()\n    for epoch in range(max_epochs):\n        sample_count = 0\n        while sample_count < epoch_size:\n            data = reader_train.next_minibatch(min(minibatch_size, epoch_size - sample_count), input_map=input_map)\n            trainer.train_minibatch(data)\n            sample_count += trainer.previous_minibatch_sample_count\n        trainer.summarize_training_progress()\n        z.save(os.path.join(model_path, 'ConvNet_CIFAR10_{}.dnn'.format(epoch)))\n    reader_test = create_reader(os.path.join(data_path, 'Test_cntk_text.txt'), False, input_dim, num_output_classes)\n    input_map = {input_var: reader_test.streams.features, label_var: reader_test.streams.labels}\n    epoch_size = 10000\n    minibatch_size = 16\n    metric_numer = 0\n    metric_denom = 0\n    sample_count = 0\n    minibatch_index = 0\n    while sample_count < epoch_size:\n        current_minibatch = min(minibatch_size, epoch_size - sample_count)\n        data = reader_test.next_minibatch(current_minibatch, input_map=input_map)\n        metric_numer += trainer.test_minibatch(data) * current_minibatch\n        metric_denom += current_minibatch\n        sample_count += data[label_var].num_samples\n        minibatch_index += 1\n    print('')\n    print('Final Results: Minibatch[1-{}]: errs = {:0.2f}% * {}'.format(minibatch_index + 1, metric_numer * 100.0 / metric_denom, metric_denom))\n    print('')\n    return metric_numer / metric_denom",
            "def convnet_cifar10(debug_output=False, data_path=data_path, epoch_size=50000, minibatch_size=64, max_epochs=30):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    _cntk_py.set_computation_network_trace_level(0)\n    image_height = 32\n    image_width = 32\n    num_channels = 3\n    input_dim = image_height * image_width * num_channels\n    num_output_classes = 10\n    input_var = C.ops.input_variable((num_channels, image_height, image_width), np.float32)\n    label_var = C.ops.input_variable(num_output_classes, np.float32)\n    input_removemean = C.ops.minus(input_var, C.ops.constant(128))\n    scaled_input = C.ops.element_times(C.ops.constant(0.00390625), input_removemean)\n    with C.layers.default_options(activation=C.ops.relu, pad=True):\n        z = C.layers.Sequential([C.layers.For(range(2), lambda : [C.layers.Convolution2D((3, 3), 64), C.layers.Convolution2D((3, 3), 64), C.layers.MaxPooling((3, 3), (2, 2))]), C.layers.For(range(2), lambda i: [C.layers.Dense([256, 128][i]), C.layers.Dropout(0.5)]), C.layers.Dense(num_output_classes, activation=None)])(scaled_input)\n    ce = C.losses.cross_entropy_with_softmax(z, label_var)\n    pe = C.metrics.classification_error(z, label_var)\n    reader_train = create_reader(os.path.join(data_path, 'Train_cntk_text.txt'), True, input_dim, num_output_classes)\n    lr_per_sample = [0.0015625] * 10 + [0.00046875] * 10 + [0.00015625]\n    lr_schedule = C.learning_parameter_schedule(lr_per_sample, minibatch_size=1, epoch_size=epoch_size)\n    mm = [0.9] * 20\n    mm_schedule = C.learners.momentum_schedule(mm, epoch_size=epoch_size, minibatch_size=minibatch_size)\n    l2_reg_weight = 0.002\n    learner = C.learners.momentum_sgd(z.parameters, lr_schedule, mm_schedule, minibatch_size=minibatch_size, l2_regularization_weight=l2_reg_weight)\n    progress_printer = C.logging.ProgressPrinter(tag='Training', num_epochs=max_epochs)\n    trainer = C.Trainer(z, (ce, pe), learner, progress_printer)\n    input_map = {input_var: reader_train.streams.features, label_var: reader_train.streams.labels}\n    C.logging.log_number_of_parameters(z)\n    print()\n    for epoch in range(max_epochs):\n        sample_count = 0\n        while sample_count < epoch_size:\n            data = reader_train.next_minibatch(min(minibatch_size, epoch_size - sample_count), input_map=input_map)\n            trainer.train_minibatch(data)\n            sample_count += trainer.previous_minibatch_sample_count\n        trainer.summarize_training_progress()\n        z.save(os.path.join(model_path, 'ConvNet_CIFAR10_{}.dnn'.format(epoch)))\n    reader_test = create_reader(os.path.join(data_path, 'Test_cntk_text.txt'), False, input_dim, num_output_classes)\n    input_map = {input_var: reader_test.streams.features, label_var: reader_test.streams.labels}\n    epoch_size = 10000\n    minibatch_size = 16\n    metric_numer = 0\n    metric_denom = 0\n    sample_count = 0\n    minibatch_index = 0\n    while sample_count < epoch_size:\n        current_minibatch = min(minibatch_size, epoch_size - sample_count)\n        data = reader_test.next_minibatch(current_minibatch, input_map=input_map)\n        metric_numer += trainer.test_minibatch(data) * current_minibatch\n        metric_denom += current_minibatch\n        sample_count += data[label_var].num_samples\n        minibatch_index += 1\n    print('')\n    print('Final Results: Minibatch[1-{}]: errs = {:0.2f}% * {}'.format(minibatch_index + 1, metric_numer * 100.0 / metric_denom, metric_denom))\n    print('')\n    return metric_numer / metric_denom",
            "def convnet_cifar10(debug_output=False, data_path=data_path, epoch_size=50000, minibatch_size=64, max_epochs=30):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    _cntk_py.set_computation_network_trace_level(0)\n    image_height = 32\n    image_width = 32\n    num_channels = 3\n    input_dim = image_height * image_width * num_channels\n    num_output_classes = 10\n    input_var = C.ops.input_variable((num_channels, image_height, image_width), np.float32)\n    label_var = C.ops.input_variable(num_output_classes, np.float32)\n    input_removemean = C.ops.minus(input_var, C.ops.constant(128))\n    scaled_input = C.ops.element_times(C.ops.constant(0.00390625), input_removemean)\n    with C.layers.default_options(activation=C.ops.relu, pad=True):\n        z = C.layers.Sequential([C.layers.For(range(2), lambda : [C.layers.Convolution2D((3, 3), 64), C.layers.Convolution2D((3, 3), 64), C.layers.MaxPooling((3, 3), (2, 2))]), C.layers.For(range(2), lambda i: [C.layers.Dense([256, 128][i]), C.layers.Dropout(0.5)]), C.layers.Dense(num_output_classes, activation=None)])(scaled_input)\n    ce = C.losses.cross_entropy_with_softmax(z, label_var)\n    pe = C.metrics.classification_error(z, label_var)\n    reader_train = create_reader(os.path.join(data_path, 'Train_cntk_text.txt'), True, input_dim, num_output_classes)\n    lr_per_sample = [0.0015625] * 10 + [0.00046875] * 10 + [0.00015625]\n    lr_schedule = C.learning_parameter_schedule(lr_per_sample, minibatch_size=1, epoch_size=epoch_size)\n    mm = [0.9] * 20\n    mm_schedule = C.learners.momentum_schedule(mm, epoch_size=epoch_size, minibatch_size=minibatch_size)\n    l2_reg_weight = 0.002\n    learner = C.learners.momentum_sgd(z.parameters, lr_schedule, mm_schedule, minibatch_size=minibatch_size, l2_regularization_weight=l2_reg_weight)\n    progress_printer = C.logging.ProgressPrinter(tag='Training', num_epochs=max_epochs)\n    trainer = C.Trainer(z, (ce, pe), learner, progress_printer)\n    input_map = {input_var: reader_train.streams.features, label_var: reader_train.streams.labels}\n    C.logging.log_number_of_parameters(z)\n    print()\n    for epoch in range(max_epochs):\n        sample_count = 0\n        while sample_count < epoch_size:\n            data = reader_train.next_minibatch(min(minibatch_size, epoch_size - sample_count), input_map=input_map)\n            trainer.train_minibatch(data)\n            sample_count += trainer.previous_minibatch_sample_count\n        trainer.summarize_training_progress()\n        z.save(os.path.join(model_path, 'ConvNet_CIFAR10_{}.dnn'.format(epoch)))\n    reader_test = create_reader(os.path.join(data_path, 'Test_cntk_text.txt'), False, input_dim, num_output_classes)\n    input_map = {input_var: reader_test.streams.features, label_var: reader_test.streams.labels}\n    epoch_size = 10000\n    minibatch_size = 16\n    metric_numer = 0\n    metric_denom = 0\n    sample_count = 0\n    minibatch_index = 0\n    while sample_count < epoch_size:\n        current_minibatch = min(minibatch_size, epoch_size - sample_count)\n        data = reader_test.next_minibatch(current_minibatch, input_map=input_map)\n        metric_numer += trainer.test_minibatch(data) * current_minibatch\n        metric_denom += current_minibatch\n        sample_count += data[label_var].num_samples\n        minibatch_index += 1\n    print('')\n    print('Final Results: Minibatch[1-{}]: errs = {:0.2f}% * {}'.format(minibatch_index + 1, metric_numer * 100.0 / metric_denom, metric_denom))\n    print('')\n    return metric_numer / metric_denom",
            "def convnet_cifar10(debug_output=False, data_path=data_path, epoch_size=50000, minibatch_size=64, max_epochs=30):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    _cntk_py.set_computation_network_trace_level(0)\n    image_height = 32\n    image_width = 32\n    num_channels = 3\n    input_dim = image_height * image_width * num_channels\n    num_output_classes = 10\n    input_var = C.ops.input_variable((num_channels, image_height, image_width), np.float32)\n    label_var = C.ops.input_variable(num_output_classes, np.float32)\n    input_removemean = C.ops.minus(input_var, C.ops.constant(128))\n    scaled_input = C.ops.element_times(C.ops.constant(0.00390625), input_removemean)\n    with C.layers.default_options(activation=C.ops.relu, pad=True):\n        z = C.layers.Sequential([C.layers.For(range(2), lambda : [C.layers.Convolution2D((3, 3), 64), C.layers.Convolution2D((3, 3), 64), C.layers.MaxPooling((3, 3), (2, 2))]), C.layers.For(range(2), lambda i: [C.layers.Dense([256, 128][i]), C.layers.Dropout(0.5)]), C.layers.Dense(num_output_classes, activation=None)])(scaled_input)\n    ce = C.losses.cross_entropy_with_softmax(z, label_var)\n    pe = C.metrics.classification_error(z, label_var)\n    reader_train = create_reader(os.path.join(data_path, 'Train_cntk_text.txt'), True, input_dim, num_output_classes)\n    lr_per_sample = [0.0015625] * 10 + [0.00046875] * 10 + [0.00015625]\n    lr_schedule = C.learning_parameter_schedule(lr_per_sample, minibatch_size=1, epoch_size=epoch_size)\n    mm = [0.9] * 20\n    mm_schedule = C.learners.momentum_schedule(mm, epoch_size=epoch_size, minibatch_size=minibatch_size)\n    l2_reg_weight = 0.002\n    learner = C.learners.momentum_sgd(z.parameters, lr_schedule, mm_schedule, minibatch_size=minibatch_size, l2_regularization_weight=l2_reg_weight)\n    progress_printer = C.logging.ProgressPrinter(tag='Training', num_epochs=max_epochs)\n    trainer = C.Trainer(z, (ce, pe), learner, progress_printer)\n    input_map = {input_var: reader_train.streams.features, label_var: reader_train.streams.labels}\n    C.logging.log_number_of_parameters(z)\n    print()\n    for epoch in range(max_epochs):\n        sample_count = 0\n        while sample_count < epoch_size:\n            data = reader_train.next_minibatch(min(minibatch_size, epoch_size - sample_count), input_map=input_map)\n            trainer.train_minibatch(data)\n            sample_count += trainer.previous_minibatch_sample_count\n        trainer.summarize_training_progress()\n        z.save(os.path.join(model_path, 'ConvNet_CIFAR10_{}.dnn'.format(epoch)))\n    reader_test = create_reader(os.path.join(data_path, 'Test_cntk_text.txt'), False, input_dim, num_output_classes)\n    input_map = {input_var: reader_test.streams.features, label_var: reader_test.streams.labels}\n    epoch_size = 10000\n    minibatch_size = 16\n    metric_numer = 0\n    metric_denom = 0\n    sample_count = 0\n    minibatch_index = 0\n    while sample_count < epoch_size:\n        current_minibatch = min(minibatch_size, epoch_size - sample_count)\n        data = reader_test.next_minibatch(current_minibatch, input_map=input_map)\n        metric_numer += trainer.test_minibatch(data) * current_minibatch\n        metric_denom += current_minibatch\n        sample_count += data[label_var].num_samples\n        minibatch_index += 1\n    print('')\n    print('Final Results: Minibatch[1-{}]: errs = {:0.2f}% * {}'.format(minibatch_index + 1, metric_numer * 100.0 / metric_denom, metric_denom))\n    print('')\n    return metric_numer / metric_denom",
            "def convnet_cifar10(debug_output=False, data_path=data_path, epoch_size=50000, minibatch_size=64, max_epochs=30):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    _cntk_py.set_computation_network_trace_level(0)\n    image_height = 32\n    image_width = 32\n    num_channels = 3\n    input_dim = image_height * image_width * num_channels\n    num_output_classes = 10\n    input_var = C.ops.input_variable((num_channels, image_height, image_width), np.float32)\n    label_var = C.ops.input_variable(num_output_classes, np.float32)\n    input_removemean = C.ops.minus(input_var, C.ops.constant(128))\n    scaled_input = C.ops.element_times(C.ops.constant(0.00390625), input_removemean)\n    with C.layers.default_options(activation=C.ops.relu, pad=True):\n        z = C.layers.Sequential([C.layers.For(range(2), lambda : [C.layers.Convolution2D((3, 3), 64), C.layers.Convolution2D((3, 3), 64), C.layers.MaxPooling((3, 3), (2, 2))]), C.layers.For(range(2), lambda i: [C.layers.Dense([256, 128][i]), C.layers.Dropout(0.5)]), C.layers.Dense(num_output_classes, activation=None)])(scaled_input)\n    ce = C.losses.cross_entropy_with_softmax(z, label_var)\n    pe = C.metrics.classification_error(z, label_var)\n    reader_train = create_reader(os.path.join(data_path, 'Train_cntk_text.txt'), True, input_dim, num_output_classes)\n    lr_per_sample = [0.0015625] * 10 + [0.00046875] * 10 + [0.00015625]\n    lr_schedule = C.learning_parameter_schedule(lr_per_sample, minibatch_size=1, epoch_size=epoch_size)\n    mm = [0.9] * 20\n    mm_schedule = C.learners.momentum_schedule(mm, epoch_size=epoch_size, minibatch_size=minibatch_size)\n    l2_reg_weight = 0.002\n    learner = C.learners.momentum_sgd(z.parameters, lr_schedule, mm_schedule, minibatch_size=minibatch_size, l2_regularization_weight=l2_reg_weight)\n    progress_printer = C.logging.ProgressPrinter(tag='Training', num_epochs=max_epochs)\n    trainer = C.Trainer(z, (ce, pe), learner, progress_printer)\n    input_map = {input_var: reader_train.streams.features, label_var: reader_train.streams.labels}\n    C.logging.log_number_of_parameters(z)\n    print()\n    for epoch in range(max_epochs):\n        sample_count = 0\n        while sample_count < epoch_size:\n            data = reader_train.next_minibatch(min(minibatch_size, epoch_size - sample_count), input_map=input_map)\n            trainer.train_minibatch(data)\n            sample_count += trainer.previous_minibatch_sample_count\n        trainer.summarize_training_progress()\n        z.save(os.path.join(model_path, 'ConvNet_CIFAR10_{}.dnn'.format(epoch)))\n    reader_test = create_reader(os.path.join(data_path, 'Test_cntk_text.txt'), False, input_dim, num_output_classes)\n    input_map = {input_var: reader_test.streams.features, label_var: reader_test.streams.labels}\n    epoch_size = 10000\n    minibatch_size = 16\n    metric_numer = 0\n    metric_denom = 0\n    sample_count = 0\n    minibatch_index = 0\n    while sample_count < epoch_size:\n        current_minibatch = min(minibatch_size, epoch_size - sample_count)\n        data = reader_test.next_minibatch(current_minibatch, input_map=input_map)\n        metric_numer += trainer.test_minibatch(data) * current_minibatch\n        metric_denom += current_minibatch\n        sample_count += data[label_var].num_samples\n        minibatch_index += 1\n    print('')\n    print('Final Results: Minibatch[1-{}]: errs = {:0.2f}% * {}'.format(minibatch_index + 1, metric_numer * 100.0 / metric_denom, metric_denom))\n    print('')\n    return metric_numer / metric_denom"
        ]
    }
]
[
    {
        "func_name": "test_fuse_resenet_unit",
        "original": "def test_fuse_resenet_unit():\n    tests = [[1, 4096, 768, 12], [10, 4097, 756, 12], [10, 4097, 756, 12]]\n    for test in tests:\n        batch_size = test[0]\n        token_size = test[1]\n        hidden_size = test[2]\n        num_heads = test[3]\n        dtype = np.float32\n        place = paddle.CPUPlace()\n        program = paddle.static.Program()\n        startup_program = paddle.static.Program()\n        with paddle.static.program_guard(program, startup_program):\n            x = paddle.static.data('x', [batch_size, token_size, hidden_size * 3], dtype=dtype)\n            qkv = x.reshape((batch_size, token_size, 3, num_heads, hidden_size // num_heads)).transpose((2, 0, 3, 1, 4))\n            (q, k, v) = (qkv[0], qkv[1], qkv[2])\n            attn = q.matmul(k.transpose((0, 1, 3, 2)))\n            attn = paddle.nn.functional.softmax(attn, axis=-1)\n            out = attn.matmul(v).transpose((0, 2, 1, 3)).reshape((-1, token_size, hidden_size))\n        graph = core.Graph(program.desc)\n        core.get_pass('self_attention_fuse_pass').apply(graph)\n        after_program = paddle.framework.IrGraph(graph).to_program()\n        exe = paddle.static.Executor(place)\n        exe.run(startup_program)\n        feed = {'x': np.random.randn(batch_size, token_size, hidden_size * 3).astype(dtype)}\n        before_out = exe.run(program, feed=feed, fetch_list=[out.name])\n        after_out = exe.run(after_program, feed=feed, fetch_list=[out.name])\n        np.testing.assert_allclose(before_out[0], after_out[0], rtol=1e-05, atol=0.005)",
        "mutated": [
            "def test_fuse_resenet_unit():\n    if False:\n        i = 10\n    tests = [[1, 4096, 768, 12], [10, 4097, 756, 12], [10, 4097, 756, 12]]\n    for test in tests:\n        batch_size = test[0]\n        token_size = test[1]\n        hidden_size = test[2]\n        num_heads = test[3]\n        dtype = np.float32\n        place = paddle.CPUPlace()\n        program = paddle.static.Program()\n        startup_program = paddle.static.Program()\n        with paddle.static.program_guard(program, startup_program):\n            x = paddle.static.data('x', [batch_size, token_size, hidden_size * 3], dtype=dtype)\n            qkv = x.reshape((batch_size, token_size, 3, num_heads, hidden_size // num_heads)).transpose((2, 0, 3, 1, 4))\n            (q, k, v) = (qkv[0], qkv[1], qkv[2])\n            attn = q.matmul(k.transpose((0, 1, 3, 2)))\n            attn = paddle.nn.functional.softmax(attn, axis=-1)\n            out = attn.matmul(v).transpose((0, 2, 1, 3)).reshape((-1, token_size, hidden_size))\n        graph = core.Graph(program.desc)\n        core.get_pass('self_attention_fuse_pass').apply(graph)\n        after_program = paddle.framework.IrGraph(graph).to_program()\n        exe = paddle.static.Executor(place)\n        exe.run(startup_program)\n        feed = {'x': np.random.randn(batch_size, token_size, hidden_size * 3).astype(dtype)}\n        before_out = exe.run(program, feed=feed, fetch_list=[out.name])\n        after_out = exe.run(after_program, feed=feed, fetch_list=[out.name])\n        np.testing.assert_allclose(before_out[0], after_out[0], rtol=1e-05, atol=0.005)",
            "def test_fuse_resenet_unit():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    tests = [[1, 4096, 768, 12], [10, 4097, 756, 12], [10, 4097, 756, 12]]\n    for test in tests:\n        batch_size = test[0]\n        token_size = test[1]\n        hidden_size = test[2]\n        num_heads = test[3]\n        dtype = np.float32\n        place = paddle.CPUPlace()\n        program = paddle.static.Program()\n        startup_program = paddle.static.Program()\n        with paddle.static.program_guard(program, startup_program):\n            x = paddle.static.data('x', [batch_size, token_size, hidden_size * 3], dtype=dtype)\n            qkv = x.reshape((batch_size, token_size, 3, num_heads, hidden_size // num_heads)).transpose((2, 0, 3, 1, 4))\n            (q, k, v) = (qkv[0], qkv[1], qkv[2])\n            attn = q.matmul(k.transpose((0, 1, 3, 2)))\n            attn = paddle.nn.functional.softmax(attn, axis=-1)\n            out = attn.matmul(v).transpose((0, 2, 1, 3)).reshape((-1, token_size, hidden_size))\n        graph = core.Graph(program.desc)\n        core.get_pass('self_attention_fuse_pass').apply(graph)\n        after_program = paddle.framework.IrGraph(graph).to_program()\n        exe = paddle.static.Executor(place)\n        exe.run(startup_program)\n        feed = {'x': np.random.randn(batch_size, token_size, hidden_size * 3).astype(dtype)}\n        before_out = exe.run(program, feed=feed, fetch_list=[out.name])\n        after_out = exe.run(after_program, feed=feed, fetch_list=[out.name])\n        np.testing.assert_allclose(before_out[0], after_out[0], rtol=1e-05, atol=0.005)",
            "def test_fuse_resenet_unit():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    tests = [[1, 4096, 768, 12], [10, 4097, 756, 12], [10, 4097, 756, 12]]\n    for test in tests:\n        batch_size = test[0]\n        token_size = test[1]\n        hidden_size = test[2]\n        num_heads = test[3]\n        dtype = np.float32\n        place = paddle.CPUPlace()\n        program = paddle.static.Program()\n        startup_program = paddle.static.Program()\n        with paddle.static.program_guard(program, startup_program):\n            x = paddle.static.data('x', [batch_size, token_size, hidden_size * 3], dtype=dtype)\n            qkv = x.reshape((batch_size, token_size, 3, num_heads, hidden_size // num_heads)).transpose((2, 0, 3, 1, 4))\n            (q, k, v) = (qkv[0], qkv[1], qkv[2])\n            attn = q.matmul(k.transpose((0, 1, 3, 2)))\n            attn = paddle.nn.functional.softmax(attn, axis=-1)\n            out = attn.matmul(v).transpose((0, 2, 1, 3)).reshape((-1, token_size, hidden_size))\n        graph = core.Graph(program.desc)\n        core.get_pass('self_attention_fuse_pass').apply(graph)\n        after_program = paddle.framework.IrGraph(graph).to_program()\n        exe = paddle.static.Executor(place)\n        exe.run(startup_program)\n        feed = {'x': np.random.randn(batch_size, token_size, hidden_size * 3).astype(dtype)}\n        before_out = exe.run(program, feed=feed, fetch_list=[out.name])\n        after_out = exe.run(after_program, feed=feed, fetch_list=[out.name])\n        np.testing.assert_allclose(before_out[0], after_out[0], rtol=1e-05, atol=0.005)",
            "def test_fuse_resenet_unit():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    tests = [[1, 4096, 768, 12], [10, 4097, 756, 12], [10, 4097, 756, 12]]\n    for test in tests:\n        batch_size = test[0]\n        token_size = test[1]\n        hidden_size = test[2]\n        num_heads = test[3]\n        dtype = np.float32\n        place = paddle.CPUPlace()\n        program = paddle.static.Program()\n        startup_program = paddle.static.Program()\n        with paddle.static.program_guard(program, startup_program):\n            x = paddle.static.data('x', [batch_size, token_size, hidden_size * 3], dtype=dtype)\n            qkv = x.reshape((batch_size, token_size, 3, num_heads, hidden_size // num_heads)).transpose((2, 0, 3, 1, 4))\n            (q, k, v) = (qkv[0], qkv[1], qkv[2])\n            attn = q.matmul(k.transpose((0, 1, 3, 2)))\n            attn = paddle.nn.functional.softmax(attn, axis=-1)\n            out = attn.matmul(v).transpose((0, 2, 1, 3)).reshape((-1, token_size, hidden_size))\n        graph = core.Graph(program.desc)\n        core.get_pass('self_attention_fuse_pass').apply(graph)\n        after_program = paddle.framework.IrGraph(graph).to_program()\n        exe = paddle.static.Executor(place)\n        exe.run(startup_program)\n        feed = {'x': np.random.randn(batch_size, token_size, hidden_size * 3).astype(dtype)}\n        before_out = exe.run(program, feed=feed, fetch_list=[out.name])\n        after_out = exe.run(after_program, feed=feed, fetch_list=[out.name])\n        np.testing.assert_allclose(before_out[0], after_out[0], rtol=1e-05, atol=0.005)",
            "def test_fuse_resenet_unit():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    tests = [[1, 4096, 768, 12], [10, 4097, 756, 12], [10, 4097, 756, 12]]\n    for test in tests:\n        batch_size = test[0]\n        token_size = test[1]\n        hidden_size = test[2]\n        num_heads = test[3]\n        dtype = np.float32\n        place = paddle.CPUPlace()\n        program = paddle.static.Program()\n        startup_program = paddle.static.Program()\n        with paddle.static.program_guard(program, startup_program):\n            x = paddle.static.data('x', [batch_size, token_size, hidden_size * 3], dtype=dtype)\n            qkv = x.reshape((batch_size, token_size, 3, num_heads, hidden_size // num_heads)).transpose((2, 0, 3, 1, 4))\n            (q, k, v) = (qkv[0], qkv[1], qkv[2])\n            attn = q.matmul(k.transpose((0, 1, 3, 2)))\n            attn = paddle.nn.functional.softmax(attn, axis=-1)\n            out = attn.matmul(v).transpose((0, 2, 1, 3)).reshape((-1, token_size, hidden_size))\n        graph = core.Graph(program.desc)\n        core.get_pass('self_attention_fuse_pass').apply(graph)\n        after_program = paddle.framework.IrGraph(graph).to_program()\n        exe = paddle.static.Executor(place)\n        exe.run(startup_program)\n        feed = {'x': np.random.randn(batch_size, token_size, hidden_size * 3).astype(dtype)}\n        before_out = exe.run(program, feed=feed, fetch_list=[out.name])\n        after_out = exe.run(after_program, feed=feed, fetch_list=[out.name])\n        np.testing.assert_allclose(before_out[0], after_out[0], rtol=1e-05, atol=0.005)"
        ]
    }
]
[
    {
        "func_name": "__init__",
        "original": "def __init__(self, model_dir: str, *args, **kwargs):\n    \"\"\"str -- model file root.\"\"\"\n    super().__init__(model_dir, *args, **kwargs)\n    from mmcv.runner import load_checkpoint\n    from mmdet.datasets import replace_ImageToTensor\n    from mmdet.datasets.pipelines import Compose\n    from mmdet.models import build_detector\n    model_path = osp.join(model_dir, ModelFile.TORCH_MODEL_FILE)\n    config_path = osp.join(model_dir, 'mmcv_config.py')\n    config = Config.from_file(config_path)\n    config.model.pretrained = None\n    self.model = build_detector(config.model, test_cfg=config.get('test_cfg'))\n    checkpoint = load_checkpoint(self.model, model_path, map_location='cpu')\n    self.class_names = checkpoint['meta']['CLASSES']\n    config.test_pipeline[0].type = 'LoadImageFromWebcam'\n    self.transform_input = Compose(replace_ImageToTensor(config.test_pipeline))\n    self.model.cfg = config\n    self.model.eval()\n    self.score_thr = config.score_thr",
        "mutated": [
            "def __init__(self, model_dir: str, *args, **kwargs):\n    if False:\n        i = 10\n    'str -- model file root.'\n    super().__init__(model_dir, *args, **kwargs)\n    from mmcv.runner import load_checkpoint\n    from mmdet.datasets import replace_ImageToTensor\n    from mmdet.datasets.pipelines import Compose\n    from mmdet.models import build_detector\n    model_path = osp.join(model_dir, ModelFile.TORCH_MODEL_FILE)\n    config_path = osp.join(model_dir, 'mmcv_config.py')\n    config = Config.from_file(config_path)\n    config.model.pretrained = None\n    self.model = build_detector(config.model, test_cfg=config.get('test_cfg'))\n    checkpoint = load_checkpoint(self.model, model_path, map_location='cpu')\n    self.class_names = checkpoint['meta']['CLASSES']\n    config.test_pipeline[0].type = 'LoadImageFromWebcam'\n    self.transform_input = Compose(replace_ImageToTensor(config.test_pipeline))\n    self.model.cfg = config\n    self.model.eval()\n    self.score_thr = config.score_thr",
            "def __init__(self, model_dir: str, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'str -- model file root.'\n    super().__init__(model_dir, *args, **kwargs)\n    from mmcv.runner import load_checkpoint\n    from mmdet.datasets import replace_ImageToTensor\n    from mmdet.datasets.pipelines import Compose\n    from mmdet.models import build_detector\n    model_path = osp.join(model_dir, ModelFile.TORCH_MODEL_FILE)\n    config_path = osp.join(model_dir, 'mmcv_config.py')\n    config = Config.from_file(config_path)\n    config.model.pretrained = None\n    self.model = build_detector(config.model, test_cfg=config.get('test_cfg'))\n    checkpoint = load_checkpoint(self.model, model_path, map_location='cpu')\n    self.class_names = checkpoint['meta']['CLASSES']\n    config.test_pipeline[0].type = 'LoadImageFromWebcam'\n    self.transform_input = Compose(replace_ImageToTensor(config.test_pipeline))\n    self.model.cfg = config\n    self.model.eval()\n    self.score_thr = config.score_thr",
            "def __init__(self, model_dir: str, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'str -- model file root.'\n    super().__init__(model_dir, *args, **kwargs)\n    from mmcv.runner import load_checkpoint\n    from mmdet.datasets import replace_ImageToTensor\n    from mmdet.datasets.pipelines import Compose\n    from mmdet.models import build_detector\n    model_path = osp.join(model_dir, ModelFile.TORCH_MODEL_FILE)\n    config_path = osp.join(model_dir, 'mmcv_config.py')\n    config = Config.from_file(config_path)\n    config.model.pretrained = None\n    self.model = build_detector(config.model, test_cfg=config.get('test_cfg'))\n    checkpoint = load_checkpoint(self.model, model_path, map_location='cpu')\n    self.class_names = checkpoint['meta']['CLASSES']\n    config.test_pipeline[0].type = 'LoadImageFromWebcam'\n    self.transform_input = Compose(replace_ImageToTensor(config.test_pipeline))\n    self.model.cfg = config\n    self.model.eval()\n    self.score_thr = config.score_thr",
            "def __init__(self, model_dir: str, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'str -- model file root.'\n    super().__init__(model_dir, *args, **kwargs)\n    from mmcv.runner import load_checkpoint\n    from mmdet.datasets import replace_ImageToTensor\n    from mmdet.datasets.pipelines import Compose\n    from mmdet.models import build_detector\n    model_path = osp.join(model_dir, ModelFile.TORCH_MODEL_FILE)\n    config_path = osp.join(model_dir, 'mmcv_config.py')\n    config = Config.from_file(config_path)\n    config.model.pretrained = None\n    self.model = build_detector(config.model, test_cfg=config.get('test_cfg'))\n    checkpoint = load_checkpoint(self.model, model_path, map_location='cpu')\n    self.class_names = checkpoint['meta']['CLASSES']\n    config.test_pipeline[0].type = 'LoadImageFromWebcam'\n    self.transform_input = Compose(replace_ImageToTensor(config.test_pipeline))\n    self.model.cfg = config\n    self.model.eval()\n    self.score_thr = config.score_thr",
            "def __init__(self, model_dir: str, *args, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'str -- model file root.'\n    super().__init__(model_dir, *args, **kwargs)\n    from mmcv.runner import load_checkpoint\n    from mmdet.datasets import replace_ImageToTensor\n    from mmdet.datasets.pipelines import Compose\n    from mmdet.models import build_detector\n    model_path = osp.join(model_dir, ModelFile.TORCH_MODEL_FILE)\n    config_path = osp.join(model_dir, 'mmcv_config.py')\n    config = Config.from_file(config_path)\n    config.model.pretrained = None\n    self.model = build_detector(config.model, test_cfg=config.get('test_cfg'))\n    checkpoint = load_checkpoint(self.model, model_path, map_location='cpu')\n    self.class_names = checkpoint['meta']['CLASSES']\n    config.test_pipeline[0].type = 'LoadImageFromWebcam'\n    self.transform_input = Compose(replace_ImageToTensor(config.test_pipeline))\n    self.model.cfg = config\n    self.model.eval()\n    self.score_thr = config.score_thr"
        ]
    },
    {
        "func_name": "inference",
        "original": "def inference(self, data):\n    \"\"\"data is dict,contain img and img_metas,follow with mmdet.\n        Args:\n            imgs (List[Tensor]): the outer list indicates test-time\n                augmentations and inner Tensor should have a shape NxCxHxW,\n                which contains all images in the batch.\n            img_metas (List[List[dict]]): the outer list indicates test-time\n                augs (multiscale, flip, etc.) and the inner list indicates\n                images in a batch.\n        \"\"\"\n    with torch.no_grad():\n        results = self.model(return_loss=False, rescale=True, img=data['img'], img_metas=data['img_metas'])\n    return results",
        "mutated": [
            "def inference(self, data):\n    if False:\n        i = 10\n    'data is dict,contain img and img_metas,follow with mmdet.\\n        Args:\\n            imgs (List[Tensor]): the outer list indicates test-time\\n                augmentations and inner Tensor should have a shape NxCxHxW,\\n                which contains all images in the batch.\\n            img_metas (List[List[dict]]): the outer list indicates test-time\\n                augs (multiscale, flip, etc.) and the inner list indicates\\n                images in a batch.\\n        '\n    with torch.no_grad():\n        results = self.model(return_loss=False, rescale=True, img=data['img'], img_metas=data['img_metas'])\n    return results",
            "def inference(self, data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'data is dict,contain img and img_metas,follow with mmdet.\\n        Args:\\n            imgs (List[Tensor]): the outer list indicates test-time\\n                augmentations and inner Tensor should have a shape NxCxHxW,\\n                which contains all images in the batch.\\n            img_metas (List[List[dict]]): the outer list indicates test-time\\n                augs (multiscale, flip, etc.) and the inner list indicates\\n                images in a batch.\\n        '\n    with torch.no_grad():\n        results = self.model(return_loss=False, rescale=True, img=data['img'], img_metas=data['img_metas'])\n    return results",
            "def inference(self, data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'data is dict,contain img and img_metas,follow with mmdet.\\n        Args:\\n            imgs (List[Tensor]): the outer list indicates test-time\\n                augmentations and inner Tensor should have a shape NxCxHxW,\\n                which contains all images in the batch.\\n            img_metas (List[List[dict]]): the outer list indicates test-time\\n                augs (multiscale, flip, etc.) and the inner list indicates\\n                images in a batch.\\n        '\n    with torch.no_grad():\n        results = self.model(return_loss=False, rescale=True, img=data['img'], img_metas=data['img_metas'])\n    return results",
            "def inference(self, data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'data is dict,contain img and img_metas,follow with mmdet.\\n        Args:\\n            imgs (List[Tensor]): the outer list indicates test-time\\n                augmentations and inner Tensor should have a shape NxCxHxW,\\n                which contains all images in the batch.\\n            img_metas (List[List[dict]]): the outer list indicates test-time\\n                augs (multiscale, flip, etc.) and the inner list indicates\\n                images in a batch.\\n        '\n    with torch.no_grad():\n        results = self.model(return_loss=False, rescale=True, img=data['img'], img_metas=data['img_metas'])\n    return results",
            "def inference(self, data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'data is dict,contain img and img_metas,follow with mmdet.\\n        Args:\\n            imgs (List[Tensor]): the outer list indicates test-time\\n                augmentations and inner Tensor should have a shape NxCxHxW,\\n                which contains all images in the batch.\\n            img_metas (List[List[dict]]): the outer list indicates test-time\\n                augs (multiscale, flip, etc.) and the inner list indicates\\n                images in a batch.\\n        '\n    with torch.no_grad():\n        results = self.model(return_loss=False, rescale=True, img=data['img'], img_metas=data['img_metas'])\n    return results"
        ]
    },
    {
        "func_name": "preprocess",
        "original": "def preprocess(self, image):\n    \"\"\"image is numpy return is dict contain img and img_metas,follow with mmdet.\"\"\"\n    from mmcv.parallel import collate, scatter\n    data = dict(img=image)\n    data = self.transform_input(data)\n    data = collate([data], samples_per_gpu=1)\n    data['img_metas'] = [img_metas.data[0] for img_metas in data['img_metas']]\n    data['img'] = [img.data[0] for img in data['img']]\n    if next(self.model.parameters()).is_cuda:\n        data = scatter(data, [next(self.model.parameters()).device])[0]\n    return data",
        "mutated": [
            "def preprocess(self, image):\n    if False:\n        i = 10\n    'image is numpy return is dict contain img and img_metas,follow with mmdet.'\n    from mmcv.parallel import collate, scatter\n    data = dict(img=image)\n    data = self.transform_input(data)\n    data = collate([data], samples_per_gpu=1)\n    data['img_metas'] = [img_metas.data[0] for img_metas in data['img_metas']]\n    data['img'] = [img.data[0] for img in data['img']]\n    if next(self.model.parameters()).is_cuda:\n        data = scatter(data, [next(self.model.parameters()).device])[0]\n    return data",
            "def preprocess(self, image):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'image is numpy return is dict contain img and img_metas,follow with mmdet.'\n    from mmcv.parallel import collate, scatter\n    data = dict(img=image)\n    data = self.transform_input(data)\n    data = collate([data], samples_per_gpu=1)\n    data['img_metas'] = [img_metas.data[0] for img_metas in data['img_metas']]\n    data['img'] = [img.data[0] for img in data['img']]\n    if next(self.model.parameters()).is_cuda:\n        data = scatter(data, [next(self.model.parameters()).device])[0]\n    return data",
            "def preprocess(self, image):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'image is numpy return is dict contain img and img_metas,follow with mmdet.'\n    from mmcv.parallel import collate, scatter\n    data = dict(img=image)\n    data = self.transform_input(data)\n    data = collate([data], samples_per_gpu=1)\n    data['img_metas'] = [img_metas.data[0] for img_metas in data['img_metas']]\n    data['img'] = [img.data[0] for img in data['img']]\n    if next(self.model.parameters()).is_cuda:\n        data = scatter(data, [next(self.model.parameters()).device])[0]\n    return data",
            "def preprocess(self, image):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'image is numpy return is dict contain img and img_metas,follow with mmdet.'\n    from mmcv.parallel import collate, scatter\n    data = dict(img=image)\n    data = self.transform_input(data)\n    data = collate([data], samples_per_gpu=1)\n    data['img_metas'] = [img_metas.data[0] for img_metas in data['img_metas']]\n    data['img'] = [img.data[0] for img in data['img']]\n    if next(self.model.parameters()).is_cuda:\n        data = scatter(data, [next(self.model.parameters()).device])[0]\n    return data",
            "def preprocess(self, image):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'image is numpy return is dict contain img and img_metas,follow with mmdet.'\n    from mmcv.parallel import collate, scatter\n    data = dict(img=image)\n    data = self.transform_input(data)\n    data = collate([data], samples_per_gpu=1)\n    data['img_metas'] = [img_metas.data[0] for img_metas in data['img_metas']]\n    data['img'] = [img.data[0] for img in data['img']]\n    if next(self.model.parameters()).is_cuda:\n        data = scatter(data, [next(self.model.parameters()).device])[0]\n    return data"
        ]
    },
    {
        "func_name": "postprocess",
        "original": "def postprocess(self, inputs):\n    if isinstance(inputs[0], tuple):\n        (bbox_result, _) = inputs[0]\n    else:\n        (bbox_result, _) = (inputs[0], None)\n    labels = [np.full(bbox.shape[0], i, dtype=np.int32) for (i, bbox) in enumerate(bbox_result)]\n    labels = np.concatenate(labels)\n    bbox_result = np.vstack(bbox_result)\n    scores = bbox_result[:, -1]\n    inds = scores > self.score_thr\n    if np.sum(np.array(inds).astype('int')) == 0:\n        return (None, None, None)\n    bboxes = bbox_result[inds, :]\n    labels = labels[inds]\n    scores = np.around(bboxes[:, 4], 6)\n    bboxes = bboxes[:, 0:4].astype(int)\n    labels = [self.class_names[i_label] for i_label in labels]\n    return (bboxes, scores, labels)",
        "mutated": [
            "def postprocess(self, inputs):\n    if False:\n        i = 10\n    if isinstance(inputs[0], tuple):\n        (bbox_result, _) = inputs[0]\n    else:\n        (bbox_result, _) = (inputs[0], None)\n    labels = [np.full(bbox.shape[0], i, dtype=np.int32) for (i, bbox) in enumerate(bbox_result)]\n    labels = np.concatenate(labels)\n    bbox_result = np.vstack(bbox_result)\n    scores = bbox_result[:, -1]\n    inds = scores > self.score_thr\n    if np.sum(np.array(inds).astype('int')) == 0:\n        return (None, None, None)\n    bboxes = bbox_result[inds, :]\n    labels = labels[inds]\n    scores = np.around(bboxes[:, 4], 6)\n    bboxes = bboxes[:, 0:4].astype(int)\n    labels = [self.class_names[i_label] for i_label in labels]\n    return (bboxes, scores, labels)",
            "def postprocess(self, inputs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if isinstance(inputs[0], tuple):\n        (bbox_result, _) = inputs[0]\n    else:\n        (bbox_result, _) = (inputs[0], None)\n    labels = [np.full(bbox.shape[0], i, dtype=np.int32) for (i, bbox) in enumerate(bbox_result)]\n    labels = np.concatenate(labels)\n    bbox_result = np.vstack(bbox_result)\n    scores = bbox_result[:, -1]\n    inds = scores > self.score_thr\n    if np.sum(np.array(inds).astype('int')) == 0:\n        return (None, None, None)\n    bboxes = bbox_result[inds, :]\n    labels = labels[inds]\n    scores = np.around(bboxes[:, 4], 6)\n    bboxes = bboxes[:, 0:4].astype(int)\n    labels = [self.class_names[i_label] for i_label in labels]\n    return (bboxes, scores, labels)",
            "def postprocess(self, inputs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if isinstance(inputs[0], tuple):\n        (bbox_result, _) = inputs[0]\n    else:\n        (bbox_result, _) = (inputs[0], None)\n    labels = [np.full(bbox.shape[0], i, dtype=np.int32) for (i, bbox) in enumerate(bbox_result)]\n    labels = np.concatenate(labels)\n    bbox_result = np.vstack(bbox_result)\n    scores = bbox_result[:, -1]\n    inds = scores > self.score_thr\n    if np.sum(np.array(inds).astype('int')) == 0:\n        return (None, None, None)\n    bboxes = bbox_result[inds, :]\n    labels = labels[inds]\n    scores = np.around(bboxes[:, 4], 6)\n    bboxes = bboxes[:, 0:4].astype(int)\n    labels = [self.class_names[i_label] for i_label in labels]\n    return (bboxes, scores, labels)",
            "def postprocess(self, inputs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if isinstance(inputs[0], tuple):\n        (bbox_result, _) = inputs[0]\n    else:\n        (bbox_result, _) = (inputs[0], None)\n    labels = [np.full(bbox.shape[0], i, dtype=np.int32) for (i, bbox) in enumerate(bbox_result)]\n    labels = np.concatenate(labels)\n    bbox_result = np.vstack(bbox_result)\n    scores = bbox_result[:, -1]\n    inds = scores > self.score_thr\n    if np.sum(np.array(inds).astype('int')) == 0:\n        return (None, None, None)\n    bboxes = bbox_result[inds, :]\n    labels = labels[inds]\n    scores = np.around(bboxes[:, 4], 6)\n    bboxes = bboxes[:, 0:4].astype(int)\n    labels = [self.class_names[i_label] for i_label in labels]\n    return (bboxes, scores, labels)",
            "def postprocess(self, inputs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if isinstance(inputs[0], tuple):\n        (bbox_result, _) = inputs[0]\n    else:\n        (bbox_result, _) = (inputs[0], None)\n    labels = [np.full(bbox.shape[0], i, dtype=np.int32) for (i, bbox) in enumerate(bbox_result)]\n    labels = np.concatenate(labels)\n    bbox_result = np.vstack(bbox_result)\n    scores = bbox_result[:, -1]\n    inds = scores > self.score_thr\n    if np.sum(np.array(inds).astype('int')) == 0:\n        return (None, None, None)\n    bboxes = bbox_result[inds, :]\n    labels = labels[inds]\n    scores = np.around(bboxes[:, 4], 6)\n    bboxes = bboxes[:, 0:4].astype(int)\n    labels = [self.class_names[i_label] for i_label in labels]\n    return (bboxes, scores, labels)"
        ]
    }
]
[
    {
        "func_name": "get_attr",
        "original": "def get_attr(key):\n    return self._search_regex('\\\\b%s\\\\s*:\\\\s*([\\\\\\'\"])(?P<val>(?:(?!\\\\1).)+)\\\\1' % key, source, key, group='val')",
        "mutated": [
            "def get_attr(key):\n    if False:\n        i = 10\n    return self._search_regex('\\\\b%s\\\\s*:\\\\s*([\\\\\\'\"])(?P<val>(?:(?!\\\\1).)+)\\\\1' % key, source, key, group='val')",
            "def get_attr(key):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return self._search_regex('\\\\b%s\\\\s*:\\\\s*([\\\\\\'\"])(?P<val>(?:(?!\\\\1).)+)\\\\1' % key, source, key, group='val')",
            "def get_attr(key):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return self._search_regex('\\\\b%s\\\\s*:\\\\s*([\\\\\\'\"])(?P<val>(?:(?!\\\\1).)+)\\\\1' % key, source, key, group='val')",
            "def get_attr(key):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return self._search_regex('\\\\b%s\\\\s*:\\\\s*([\\\\\\'\"])(?P<val>(?:(?!\\\\1).)+)\\\\1' % key, source, key, group='val')",
            "def get_attr(key):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return self._search_regex('\\\\b%s\\\\s*:\\\\s*([\\\\\\'\"])(?P<val>(?:(?!\\\\1).)+)\\\\1' % key, source, key, group='val')"
        ]
    },
    {
        "func_name": "_real_extract",
        "original": "def _real_extract(self, url):\n    video_id = self._match_id(url)\n    try:\n        response = self._download_json(re.sub('\\\\.(?:js|html)\\\\?', '.json?', url), video_id)['response']\n    except ExtractorError as e:\n        if isinstance(e.cause, HTTPError) and e.cause.status in (400, 401, 403):\n            raise ExtractorError(self._parse_json(e.cause.response.read().decode(), video_id)['message'], expected=True)\n        raise\n    body = response['body']\n    video = response['video']\n    title = video['title']\n    subtitles = {}\n    if isinstance(body, dict):\n        formats = []\n        for output in body.get('outputs', []):\n            output_url = output.get('url')\n            if not output_url:\n                continue\n            name = output.get('name')\n            if name == 'm3u8':\n                (formats, subtitles) = self._extract_m3u8_formats_and_subtitles(output_url, video_id, 'mp4', 'm3u8_native', m3u8_id='hls', fatal=False)\n            else:\n                f = {'format_id': name, 'tbr': int_or_none(output.get('bitrate')), 'url': output_url}\n                if name in ('m4a', 'mp3'):\n                    f['vcodec'] = 'none'\n                else:\n                    f.update({'height': int_or_none(output.get('height')), 'width': int_or_none(output.get('width'))})\n                formats.append(f)\n        text_tracks = body.get('subtitles') or []\n    else:\n        m3u8_url = self._search_regex('([\"\\\\\\'])(?P<url>(?:(?!\\\\1).)+\\\\.m3u8(?:(?!\\\\1).)*)\\\\1', body, 'm3u8 url', group='url', default=None)\n        if not m3u8_url:\n            source = self._search_regex('(?s)sources\\\\s*:\\\\s*\\\\[\\\\s*({.+?})\\\\s*\\\\]', body, 'source')\n\n            def get_attr(key):\n                return self._search_regex('\\\\b%s\\\\s*:\\\\s*([\\\\\\'\"])(?P<val>(?:(?!\\\\1).)+)\\\\1' % key, source, key, group='val')\n            if get_attr('integration') == 'verizon-media':\n                m3u8_url = 'https://content.uplynk.com/%s.m3u8' % get_attr('id')\n        (formats, subtitles) = self._extract_m3u8_formats_and_subtitles(m3u8_url, video_id, 'mp4', 'm3u8_native', m3u8_id='hls')\n        text_tracks = self._search_regex('textTracks\\\\s*:\\\\s*(\\\\[[^]]+\\\\])', body, 'text tracks', default=None)\n        if text_tracks:\n            text_tracks = self._parse_json(text_tracks, video_id, js_to_json, False)\n    if text_tracks:\n        for text_track in text_tracks:\n            tt_url = dict_get(text_track, ('file', 'src'))\n            if not tt_url:\n                continue\n            subtitles.setdefault(text_track.get('label') or 'English', []).append({'url': tt_url})\n    thumbnails = []\n    for thumbnail in video.get('thumbnails', []):\n        thumbnail_url = thumbnail.get('url')\n        if not thumbnail_url:\n            continue\n        thumbnails.append({'url': thumbnail_url, 'width': int_or_none(thumbnail.get('width')), 'height': int_or_none(thumbnail.get('height'))})\n    return {'id': video_id, 'display_id': video.get('friendly_title'), 'title': title, 'thumbnails': thumbnails, 'description': dict_get(video, ('description', 'ott_description', 'short_description')), 'timestamp': parse_iso8601(video.get('published_at')), 'duration': int_or_none(video.get('duration')), 'view_count': int_or_none(video.get('request_count')), 'average_rating': int_or_none(video.get('rating')), 'season_number': int_or_none(video.get('season')), 'episode_number': int_or_none(video.get('episode')), 'formats': formats, 'subtitles': subtitles}",
        "mutated": [
            "def _real_extract(self, url):\n    if False:\n        i = 10\n    video_id = self._match_id(url)\n    try:\n        response = self._download_json(re.sub('\\\\.(?:js|html)\\\\?', '.json?', url), video_id)['response']\n    except ExtractorError as e:\n        if isinstance(e.cause, HTTPError) and e.cause.status in (400, 401, 403):\n            raise ExtractorError(self._parse_json(e.cause.response.read().decode(), video_id)['message'], expected=True)\n        raise\n    body = response['body']\n    video = response['video']\n    title = video['title']\n    subtitles = {}\n    if isinstance(body, dict):\n        formats = []\n        for output in body.get('outputs', []):\n            output_url = output.get('url')\n            if not output_url:\n                continue\n            name = output.get('name')\n            if name == 'm3u8':\n                (formats, subtitles) = self._extract_m3u8_formats_and_subtitles(output_url, video_id, 'mp4', 'm3u8_native', m3u8_id='hls', fatal=False)\n            else:\n                f = {'format_id': name, 'tbr': int_or_none(output.get('bitrate')), 'url': output_url}\n                if name in ('m4a', 'mp3'):\n                    f['vcodec'] = 'none'\n                else:\n                    f.update({'height': int_or_none(output.get('height')), 'width': int_or_none(output.get('width'))})\n                formats.append(f)\n        text_tracks = body.get('subtitles') or []\n    else:\n        m3u8_url = self._search_regex('([\"\\\\\\'])(?P<url>(?:(?!\\\\1).)+\\\\.m3u8(?:(?!\\\\1).)*)\\\\1', body, 'm3u8 url', group='url', default=None)\n        if not m3u8_url:\n            source = self._search_regex('(?s)sources\\\\s*:\\\\s*\\\\[\\\\s*({.+?})\\\\s*\\\\]', body, 'source')\n\n            def get_attr(key):\n                return self._search_regex('\\\\b%s\\\\s*:\\\\s*([\\\\\\'\"])(?P<val>(?:(?!\\\\1).)+)\\\\1' % key, source, key, group='val')\n            if get_attr('integration') == 'verizon-media':\n                m3u8_url = 'https://content.uplynk.com/%s.m3u8' % get_attr('id')\n        (formats, subtitles) = self._extract_m3u8_formats_and_subtitles(m3u8_url, video_id, 'mp4', 'm3u8_native', m3u8_id='hls')\n        text_tracks = self._search_regex('textTracks\\\\s*:\\\\s*(\\\\[[^]]+\\\\])', body, 'text tracks', default=None)\n        if text_tracks:\n            text_tracks = self._parse_json(text_tracks, video_id, js_to_json, False)\n    if text_tracks:\n        for text_track in text_tracks:\n            tt_url = dict_get(text_track, ('file', 'src'))\n            if not tt_url:\n                continue\n            subtitles.setdefault(text_track.get('label') or 'English', []).append({'url': tt_url})\n    thumbnails = []\n    for thumbnail in video.get('thumbnails', []):\n        thumbnail_url = thumbnail.get('url')\n        if not thumbnail_url:\n            continue\n        thumbnails.append({'url': thumbnail_url, 'width': int_or_none(thumbnail.get('width')), 'height': int_or_none(thumbnail.get('height'))})\n    return {'id': video_id, 'display_id': video.get('friendly_title'), 'title': title, 'thumbnails': thumbnails, 'description': dict_get(video, ('description', 'ott_description', 'short_description')), 'timestamp': parse_iso8601(video.get('published_at')), 'duration': int_or_none(video.get('duration')), 'view_count': int_or_none(video.get('request_count')), 'average_rating': int_or_none(video.get('rating')), 'season_number': int_or_none(video.get('season')), 'episode_number': int_or_none(video.get('episode')), 'formats': formats, 'subtitles': subtitles}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    video_id = self._match_id(url)\n    try:\n        response = self._download_json(re.sub('\\\\.(?:js|html)\\\\?', '.json?', url), video_id)['response']\n    except ExtractorError as e:\n        if isinstance(e.cause, HTTPError) and e.cause.status in (400, 401, 403):\n            raise ExtractorError(self._parse_json(e.cause.response.read().decode(), video_id)['message'], expected=True)\n        raise\n    body = response['body']\n    video = response['video']\n    title = video['title']\n    subtitles = {}\n    if isinstance(body, dict):\n        formats = []\n        for output in body.get('outputs', []):\n            output_url = output.get('url')\n            if not output_url:\n                continue\n            name = output.get('name')\n            if name == 'm3u8':\n                (formats, subtitles) = self._extract_m3u8_formats_and_subtitles(output_url, video_id, 'mp4', 'm3u8_native', m3u8_id='hls', fatal=False)\n            else:\n                f = {'format_id': name, 'tbr': int_or_none(output.get('bitrate')), 'url': output_url}\n                if name in ('m4a', 'mp3'):\n                    f['vcodec'] = 'none'\n                else:\n                    f.update({'height': int_or_none(output.get('height')), 'width': int_or_none(output.get('width'))})\n                formats.append(f)\n        text_tracks = body.get('subtitles') or []\n    else:\n        m3u8_url = self._search_regex('([\"\\\\\\'])(?P<url>(?:(?!\\\\1).)+\\\\.m3u8(?:(?!\\\\1).)*)\\\\1', body, 'm3u8 url', group='url', default=None)\n        if not m3u8_url:\n            source = self._search_regex('(?s)sources\\\\s*:\\\\s*\\\\[\\\\s*({.+?})\\\\s*\\\\]', body, 'source')\n\n            def get_attr(key):\n                return self._search_regex('\\\\b%s\\\\s*:\\\\s*([\\\\\\'\"])(?P<val>(?:(?!\\\\1).)+)\\\\1' % key, source, key, group='val')\n            if get_attr('integration') == 'verizon-media':\n                m3u8_url = 'https://content.uplynk.com/%s.m3u8' % get_attr('id')\n        (formats, subtitles) = self._extract_m3u8_formats_and_subtitles(m3u8_url, video_id, 'mp4', 'm3u8_native', m3u8_id='hls')\n        text_tracks = self._search_regex('textTracks\\\\s*:\\\\s*(\\\\[[^]]+\\\\])', body, 'text tracks', default=None)\n        if text_tracks:\n            text_tracks = self._parse_json(text_tracks, video_id, js_to_json, False)\n    if text_tracks:\n        for text_track in text_tracks:\n            tt_url = dict_get(text_track, ('file', 'src'))\n            if not tt_url:\n                continue\n            subtitles.setdefault(text_track.get('label') or 'English', []).append({'url': tt_url})\n    thumbnails = []\n    for thumbnail in video.get('thumbnails', []):\n        thumbnail_url = thumbnail.get('url')\n        if not thumbnail_url:\n            continue\n        thumbnails.append({'url': thumbnail_url, 'width': int_or_none(thumbnail.get('width')), 'height': int_or_none(thumbnail.get('height'))})\n    return {'id': video_id, 'display_id': video.get('friendly_title'), 'title': title, 'thumbnails': thumbnails, 'description': dict_get(video, ('description', 'ott_description', 'short_description')), 'timestamp': parse_iso8601(video.get('published_at')), 'duration': int_or_none(video.get('duration')), 'view_count': int_or_none(video.get('request_count')), 'average_rating': int_or_none(video.get('rating')), 'season_number': int_or_none(video.get('season')), 'episode_number': int_or_none(video.get('episode')), 'formats': formats, 'subtitles': subtitles}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    video_id = self._match_id(url)\n    try:\n        response = self._download_json(re.sub('\\\\.(?:js|html)\\\\?', '.json?', url), video_id)['response']\n    except ExtractorError as e:\n        if isinstance(e.cause, HTTPError) and e.cause.status in (400, 401, 403):\n            raise ExtractorError(self._parse_json(e.cause.response.read().decode(), video_id)['message'], expected=True)\n        raise\n    body = response['body']\n    video = response['video']\n    title = video['title']\n    subtitles = {}\n    if isinstance(body, dict):\n        formats = []\n        for output in body.get('outputs', []):\n            output_url = output.get('url')\n            if not output_url:\n                continue\n            name = output.get('name')\n            if name == 'm3u8':\n                (formats, subtitles) = self._extract_m3u8_formats_and_subtitles(output_url, video_id, 'mp4', 'm3u8_native', m3u8_id='hls', fatal=False)\n            else:\n                f = {'format_id': name, 'tbr': int_or_none(output.get('bitrate')), 'url': output_url}\n                if name in ('m4a', 'mp3'):\n                    f['vcodec'] = 'none'\n                else:\n                    f.update({'height': int_or_none(output.get('height')), 'width': int_or_none(output.get('width'))})\n                formats.append(f)\n        text_tracks = body.get('subtitles') or []\n    else:\n        m3u8_url = self._search_regex('([\"\\\\\\'])(?P<url>(?:(?!\\\\1).)+\\\\.m3u8(?:(?!\\\\1).)*)\\\\1', body, 'm3u8 url', group='url', default=None)\n        if not m3u8_url:\n            source = self._search_regex('(?s)sources\\\\s*:\\\\s*\\\\[\\\\s*({.+?})\\\\s*\\\\]', body, 'source')\n\n            def get_attr(key):\n                return self._search_regex('\\\\b%s\\\\s*:\\\\s*([\\\\\\'\"])(?P<val>(?:(?!\\\\1).)+)\\\\1' % key, source, key, group='val')\n            if get_attr('integration') == 'verizon-media':\n                m3u8_url = 'https://content.uplynk.com/%s.m3u8' % get_attr('id')\n        (formats, subtitles) = self._extract_m3u8_formats_and_subtitles(m3u8_url, video_id, 'mp4', 'm3u8_native', m3u8_id='hls')\n        text_tracks = self._search_regex('textTracks\\\\s*:\\\\s*(\\\\[[^]]+\\\\])', body, 'text tracks', default=None)\n        if text_tracks:\n            text_tracks = self._parse_json(text_tracks, video_id, js_to_json, False)\n    if text_tracks:\n        for text_track in text_tracks:\n            tt_url = dict_get(text_track, ('file', 'src'))\n            if not tt_url:\n                continue\n            subtitles.setdefault(text_track.get('label') or 'English', []).append({'url': tt_url})\n    thumbnails = []\n    for thumbnail in video.get('thumbnails', []):\n        thumbnail_url = thumbnail.get('url')\n        if not thumbnail_url:\n            continue\n        thumbnails.append({'url': thumbnail_url, 'width': int_or_none(thumbnail.get('width')), 'height': int_or_none(thumbnail.get('height'))})\n    return {'id': video_id, 'display_id': video.get('friendly_title'), 'title': title, 'thumbnails': thumbnails, 'description': dict_get(video, ('description', 'ott_description', 'short_description')), 'timestamp': parse_iso8601(video.get('published_at')), 'duration': int_or_none(video.get('duration')), 'view_count': int_or_none(video.get('request_count')), 'average_rating': int_or_none(video.get('rating')), 'season_number': int_or_none(video.get('season')), 'episode_number': int_or_none(video.get('episode')), 'formats': formats, 'subtitles': subtitles}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    video_id = self._match_id(url)\n    try:\n        response = self._download_json(re.sub('\\\\.(?:js|html)\\\\?', '.json?', url), video_id)['response']\n    except ExtractorError as e:\n        if isinstance(e.cause, HTTPError) and e.cause.status in (400, 401, 403):\n            raise ExtractorError(self._parse_json(e.cause.response.read().decode(), video_id)['message'], expected=True)\n        raise\n    body = response['body']\n    video = response['video']\n    title = video['title']\n    subtitles = {}\n    if isinstance(body, dict):\n        formats = []\n        for output in body.get('outputs', []):\n            output_url = output.get('url')\n            if not output_url:\n                continue\n            name = output.get('name')\n            if name == 'm3u8':\n                (formats, subtitles) = self._extract_m3u8_formats_and_subtitles(output_url, video_id, 'mp4', 'm3u8_native', m3u8_id='hls', fatal=False)\n            else:\n                f = {'format_id': name, 'tbr': int_or_none(output.get('bitrate')), 'url': output_url}\n                if name in ('m4a', 'mp3'):\n                    f['vcodec'] = 'none'\n                else:\n                    f.update({'height': int_or_none(output.get('height')), 'width': int_or_none(output.get('width'))})\n                formats.append(f)\n        text_tracks = body.get('subtitles') or []\n    else:\n        m3u8_url = self._search_regex('([\"\\\\\\'])(?P<url>(?:(?!\\\\1).)+\\\\.m3u8(?:(?!\\\\1).)*)\\\\1', body, 'm3u8 url', group='url', default=None)\n        if not m3u8_url:\n            source = self._search_regex('(?s)sources\\\\s*:\\\\s*\\\\[\\\\s*({.+?})\\\\s*\\\\]', body, 'source')\n\n            def get_attr(key):\n                return self._search_regex('\\\\b%s\\\\s*:\\\\s*([\\\\\\'\"])(?P<val>(?:(?!\\\\1).)+)\\\\1' % key, source, key, group='val')\n            if get_attr('integration') == 'verizon-media':\n                m3u8_url = 'https://content.uplynk.com/%s.m3u8' % get_attr('id')\n        (formats, subtitles) = self._extract_m3u8_formats_and_subtitles(m3u8_url, video_id, 'mp4', 'm3u8_native', m3u8_id='hls')\n        text_tracks = self._search_regex('textTracks\\\\s*:\\\\s*(\\\\[[^]]+\\\\])', body, 'text tracks', default=None)\n        if text_tracks:\n            text_tracks = self._parse_json(text_tracks, video_id, js_to_json, False)\n    if text_tracks:\n        for text_track in text_tracks:\n            tt_url = dict_get(text_track, ('file', 'src'))\n            if not tt_url:\n                continue\n            subtitles.setdefault(text_track.get('label') or 'English', []).append({'url': tt_url})\n    thumbnails = []\n    for thumbnail in video.get('thumbnails', []):\n        thumbnail_url = thumbnail.get('url')\n        if not thumbnail_url:\n            continue\n        thumbnails.append({'url': thumbnail_url, 'width': int_or_none(thumbnail.get('width')), 'height': int_or_none(thumbnail.get('height'))})\n    return {'id': video_id, 'display_id': video.get('friendly_title'), 'title': title, 'thumbnails': thumbnails, 'description': dict_get(video, ('description', 'ott_description', 'short_description')), 'timestamp': parse_iso8601(video.get('published_at')), 'duration': int_or_none(video.get('duration')), 'view_count': int_or_none(video.get('request_count')), 'average_rating': int_or_none(video.get('rating')), 'season_number': int_or_none(video.get('season')), 'episode_number': int_or_none(video.get('episode')), 'formats': formats, 'subtitles': subtitles}",
            "def _real_extract(self, url):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    video_id = self._match_id(url)\n    try:\n        response = self._download_json(re.sub('\\\\.(?:js|html)\\\\?', '.json?', url), video_id)['response']\n    except ExtractorError as e:\n        if isinstance(e.cause, HTTPError) and e.cause.status in (400, 401, 403):\n            raise ExtractorError(self._parse_json(e.cause.response.read().decode(), video_id)['message'], expected=True)\n        raise\n    body = response['body']\n    video = response['video']\n    title = video['title']\n    subtitles = {}\n    if isinstance(body, dict):\n        formats = []\n        for output in body.get('outputs', []):\n            output_url = output.get('url')\n            if not output_url:\n                continue\n            name = output.get('name')\n            if name == 'm3u8':\n                (formats, subtitles) = self._extract_m3u8_formats_and_subtitles(output_url, video_id, 'mp4', 'm3u8_native', m3u8_id='hls', fatal=False)\n            else:\n                f = {'format_id': name, 'tbr': int_or_none(output.get('bitrate')), 'url': output_url}\n                if name in ('m4a', 'mp3'):\n                    f['vcodec'] = 'none'\n                else:\n                    f.update({'height': int_or_none(output.get('height')), 'width': int_or_none(output.get('width'))})\n                formats.append(f)\n        text_tracks = body.get('subtitles') or []\n    else:\n        m3u8_url = self._search_regex('([\"\\\\\\'])(?P<url>(?:(?!\\\\1).)+\\\\.m3u8(?:(?!\\\\1).)*)\\\\1', body, 'm3u8 url', group='url', default=None)\n        if not m3u8_url:\n            source = self._search_regex('(?s)sources\\\\s*:\\\\s*\\\\[\\\\s*({.+?})\\\\s*\\\\]', body, 'source')\n\n            def get_attr(key):\n                return self._search_regex('\\\\b%s\\\\s*:\\\\s*([\\\\\\'\"])(?P<val>(?:(?!\\\\1).)+)\\\\1' % key, source, key, group='val')\n            if get_attr('integration') == 'verizon-media':\n                m3u8_url = 'https://content.uplynk.com/%s.m3u8' % get_attr('id')\n        (formats, subtitles) = self._extract_m3u8_formats_and_subtitles(m3u8_url, video_id, 'mp4', 'm3u8_native', m3u8_id='hls')\n        text_tracks = self._search_regex('textTracks\\\\s*:\\\\s*(\\\\[[^]]+\\\\])', body, 'text tracks', default=None)\n        if text_tracks:\n            text_tracks = self._parse_json(text_tracks, video_id, js_to_json, False)\n    if text_tracks:\n        for text_track in text_tracks:\n            tt_url = dict_get(text_track, ('file', 'src'))\n            if not tt_url:\n                continue\n            subtitles.setdefault(text_track.get('label') or 'English', []).append({'url': tt_url})\n    thumbnails = []\n    for thumbnail in video.get('thumbnails', []):\n        thumbnail_url = thumbnail.get('url')\n        if not thumbnail_url:\n            continue\n        thumbnails.append({'url': thumbnail_url, 'width': int_or_none(thumbnail.get('width')), 'height': int_or_none(thumbnail.get('height'))})\n    return {'id': video_id, 'display_id': video.get('friendly_title'), 'title': title, 'thumbnails': thumbnails, 'description': dict_get(video, ('description', 'ott_description', 'short_description')), 'timestamp': parse_iso8601(video.get('published_at')), 'duration': int_or_none(video.get('duration')), 'view_count': int_or_none(video.get('request_count')), 'average_rating': int_or_none(video.get('rating')), 'season_number': int_or_none(video.get('season')), 'episode_number': int_or_none(video.get('episode')), 'formats': formats, 'subtitles': subtitles}"
        ]
    }
]
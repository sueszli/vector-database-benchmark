[
    {
        "func_name": "test_breakdown_person_props",
        "original": "@also_test_with_materialized_columns(event_properties=['$host', 'distinct_id'], person_properties=['$browser', 'email'])\n@snapshot_clickhouse_queries\ndef test_breakdown_person_props(self):\n    _create_person(team_id=self.team.pk, distinct_ids=['p1'], properties={'$browser': 'test'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p1', timestamp='2020-01-02T12:00:00Z', properties={'key': 'val'})\n    self.team.test_account_filters = [{'key': 'email', 'type': 'person', 'value': 'posthog.com', 'operator': 'not_icontains'}, {'key': '$host', 'type': 'event', 'value': ['127.0.0.1:3000', '127.0.0.1:5000', 'localhost:5000', 'localhost:8000'], 'operator': 'is_not'}, {'key': 'distinct_id', 'type': 'event', 'value': 'posthog.com', 'operator': 'not_icontains'}]\n    self.team.save()\n    with freeze_time('2020-01-04T13:01:01Z'):\n        filter = Filter(data={'insight': 'FUNNELS', 'properties': [], 'filter_test_accounts': True, 'events': [{'id': '$pageview', 'name': '$pageview', 'type': 'events', 'order': 0}], 'actions': [], 'funnel_viz_type': 'steps', 'display': 'FunnelViz', 'interval': 'day', 'breakdown': '$browser', 'breakdown_type': 'person', 'breakdown_limit': 5, 'date_from': '-14d', 'funnel_window_days': 14})\n        res = get_breakdown_prop_values(filter, Entity({'id': '$pageview', 'type': 'events'}), 'count(*)', self.team)\n        self.assertEqual(res, ['test'])",
        "mutated": [
            "@also_test_with_materialized_columns(event_properties=['$host', 'distinct_id'], person_properties=['$browser', 'email'])\n@snapshot_clickhouse_queries\ndef test_breakdown_person_props(self):\n    if False:\n        i = 10\n    _create_person(team_id=self.team.pk, distinct_ids=['p1'], properties={'$browser': 'test'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p1', timestamp='2020-01-02T12:00:00Z', properties={'key': 'val'})\n    self.team.test_account_filters = [{'key': 'email', 'type': 'person', 'value': 'posthog.com', 'operator': 'not_icontains'}, {'key': '$host', 'type': 'event', 'value': ['127.0.0.1:3000', '127.0.0.1:5000', 'localhost:5000', 'localhost:8000'], 'operator': 'is_not'}, {'key': 'distinct_id', 'type': 'event', 'value': 'posthog.com', 'operator': 'not_icontains'}]\n    self.team.save()\n    with freeze_time('2020-01-04T13:01:01Z'):\n        filter = Filter(data={'insight': 'FUNNELS', 'properties': [], 'filter_test_accounts': True, 'events': [{'id': '$pageview', 'name': '$pageview', 'type': 'events', 'order': 0}], 'actions': [], 'funnel_viz_type': 'steps', 'display': 'FunnelViz', 'interval': 'day', 'breakdown': '$browser', 'breakdown_type': 'person', 'breakdown_limit': 5, 'date_from': '-14d', 'funnel_window_days': 14})\n        res = get_breakdown_prop_values(filter, Entity({'id': '$pageview', 'type': 'events'}), 'count(*)', self.team)\n        self.assertEqual(res, ['test'])",
            "@also_test_with_materialized_columns(event_properties=['$host', 'distinct_id'], person_properties=['$browser', 'email'])\n@snapshot_clickhouse_queries\ndef test_breakdown_person_props(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    _create_person(team_id=self.team.pk, distinct_ids=['p1'], properties={'$browser': 'test'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p1', timestamp='2020-01-02T12:00:00Z', properties={'key': 'val'})\n    self.team.test_account_filters = [{'key': 'email', 'type': 'person', 'value': 'posthog.com', 'operator': 'not_icontains'}, {'key': '$host', 'type': 'event', 'value': ['127.0.0.1:3000', '127.0.0.1:5000', 'localhost:5000', 'localhost:8000'], 'operator': 'is_not'}, {'key': 'distinct_id', 'type': 'event', 'value': 'posthog.com', 'operator': 'not_icontains'}]\n    self.team.save()\n    with freeze_time('2020-01-04T13:01:01Z'):\n        filter = Filter(data={'insight': 'FUNNELS', 'properties': [], 'filter_test_accounts': True, 'events': [{'id': '$pageview', 'name': '$pageview', 'type': 'events', 'order': 0}], 'actions': [], 'funnel_viz_type': 'steps', 'display': 'FunnelViz', 'interval': 'day', 'breakdown': '$browser', 'breakdown_type': 'person', 'breakdown_limit': 5, 'date_from': '-14d', 'funnel_window_days': 14})\n        res = get_breakdown_prop_values(filter, Entity({'id': '$pageview', 'type': 'events'}), 'count(*)', self.team)\n        self.assertEqual(res, ['test'])",
            "@also_test_with_materialized_columns(event_properties=['$host', 'distinct_id'], person_properties=['$browser', 'email'])\n@snapshot_clickhouse_queries\ndef test_breakdown_person_props(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    _create_person(team_id=self.team.pk, distinct_ids=['p1'], properties={'$browser': 'test'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p1', timestamp='2020-01-02T12:00:00Z', properties={'key': 'val'})\n    self.team.test_account_filters = [{'key': 'email', 'type': 'person', 'value': 'posthog.com', 'operator': 'not_icontains'}, {'key': '$host', 'type': 'event', 'value': ['127.0.0.1:3000', '127.0.0.1:5000', 'localhost:5000', 'localhost:8000'], 'operator': 'is_not'}, {'key': 'distinct_id', 'type': 'event', 'value': 'posthog.com', 'operator': 'not_icontains'}]\n    self.team.save()\n    with freeze_time('2020-01-04T13:01:01Z'):\n        filter = Filter(data={'insight': 'FUNNELS', 'properties': [], 'filter_test_accounts': True, 'events': [{'id': '$pageview', 'name': '$pageview', 'type': 'events', 'order': 0}], 'actions': [], 'funnel_viz_type': 'steps', 'display': 'FunnelViz', 'interval': 'day', 'breakdown': '$browser', 'breakdown_type': 'person', 'breakdown_limit': 5, 'date_from': '-14d', 'funnel_window_days': 14})\n        res = get_breakdown_prop_values(filter, Entity({'id': '$pageview', 'type': 'events'}), 'count(*)', self.team)\n        self.assertEqual(res, ['test'])",
            "@also_test_with_materialized_columns(event_properties=['$host', 'distinct_id'], person_properties=['$browser', 'email'])\n@snapshot_clickhouse_queries\ndef test_breakdown_person_props(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    _create_person(team_id=self.team.pk, distinct_ids=['p1'], properties={'$browser': 'test'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p1', timestamp='2020-01-02T12:00:00Z', properties={'key': 'val'})\n    self.team.test_account_filters = [{'key': 'email', 'type': 'person', 'value': 'posthog.com', 'operator': 'not_icontains'}, {'key': '$host', 'type': 'event', 'value': ['127.0.0.1:3000', '127.0.0.1:5000', 'localhost:5000', 'localhost:8000'], 'operator': 'is_not'}, {'key': 'distinct_id', 'type': 'event', 'value': 'posthog.com', 'operator': 'not_icontains'}]\n    self.team.save()\n    with freeze_time('2020-01-04T13:01:01Z'):\n        filter = Filter(data={'insight': 'FUNNELS', 'properties': [], 'filter_test_accounts': True, 'events': [{'id': '$pageview', 'name': '$pageview', 'type': 'events', 'order': 0}], 'actions': [], 'funnel_viz_type': 'steps', 'display': 'FunnelViz', 'interval': 'day', 'breakdown': '$browser', 'breakdown_type': 'person', 'breakdown_limit': 5, 'date_from': '-14d', 'funnel_window_days': 14})\n        res = get_breakdown_prop_values(filter, Entity({'id': '$pageview', 'type': 'events'}), 'count(*)', self.team)\n        self.assertEqual(res, ['test'])",
            "@also_test_with_materialized_columns(event_properties=['$host', 'distinct_id'], person_properties=['$browser', 'email'])\n@snapshot_clickhouse_queries\ndef test_breakdown_person_props(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    _create_person(team_id=self.team.pk, distinct_ids=['p1'], properties={'$browser': 'test'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p1', timestamp='2020-01-02T12:00:00Z', properties={'key': 'val'})\n    self.team.test_account_filters = [{'key': 'email', 'type': 'person', 'value': 'posthog.com', 'operator': 'not_icontains'}, {'key': '$host', 'type': 'event', 'value': ['127.0.0.1:3000', '127.0.0.1:5000', 'localhost:5000', 'localhost:8000'], 'operator': 'is_not'}, {'key': 'distinct_id', 'type': 'event', 'value': 'posthog.com', 'operator': 'not_icontains'}]\n    self.team.save()\n    with freeze_time('2020-01-04T13:01:01Z'):\n        filter = Filter(data={'insight': 'FUNNELS', 'properties': [], 'filter_test_accounts': True, 'events': [{'id': '$pageview', 'name': '$pageview', 'type': 'events', 'order': 0}], 'actions': [], 'funnel_viz_type': 'steps', 'display': 'FunnelViz', 'interval': 'day', 'breakdown': '$browser', 'breakdown_type': 'person', 'breakdown_limit': 5, 'date_from': '-14d', 'funnel_window_days': 14})\n        res = get_breakdown_prop_values(filter, Entity({'id': '$pageview', 'type': 'events'}), 'count(*)', self.team)\n        self.assertEqual(res, ['test'])"
        ]
    },
    {
        "func_name": "test_breakdown_person_props_with_entity_filter",
        "original": "def test_breakdown_person_props_with_entity_filter(self):\n    _create_person(team_id=self.team.pk, distinct_ids=['p1'], properties={'$browser': 'test'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p1', timestamp='2020-01-02T12:00:00Z', properties={'key': 'val'})\n    _create_person(team_id=self.team.pk, distinct_ids=['p2'], properties={'$browser': 'test2'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p2', timestamp='2020-01-02T12:00:00Z', properties={'key': 'val'})\n    cohort = Cohort.objects.create(team=self.team, name='a', groups=[{'properties': [{'key': '$browser', 'value': 'test', 'type': 'person'}]}])\n    cohort.calculate_people_ch(pending_version=0)\n    entity_params = [{'id': '$pageview', 'name': '$pageview', 'type': 'events', 'order': 0, 'properties': [{'key': 'id', 'value': cohort.pk, 'type': 'cohort'}]}]\n    with self.settings(USE_PRECALCULATED_CH_COHORT_PEOPLE=True):\n        with freeze_time('2020-01-04T13:01:01Z'):\n            filter = Filter(data={'insight': 'FUNNELS', 'properties': [], 'filter_test_accounts': False, 'events': entity_params, 'actions': [], 'funnel_viz_type': 'steps', 'display': 'FunnelViz', 'interval': 'day', 'breakdown': '$browser', 'breakdown_type': 'person', 'breakdown_limit': 5, 'date_from': '-14d', 'funnel_window_days': 14})\n            res = get_breakdown_prop_values(filter, Entity(entity_params[0]), 'count(*)', self.team)\n            self.assertEqual(res, ['test'])",
        "mutated": [
            "def test_breakdown_person_props_with_entity_filter(self):\n    if False:\n        i = 10\n    _create_person(team_id=self.team.pk, distinct_ids=['p1'], properties={'$browser': 'test'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p1', timestamp='2020-01-02T12:00:00Z', properties={'key': 'val'})\n    _create_person(team_id=self.team.pk, distinct_ids=['p2'], properties={'$browser': 'test2'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p2', timestamp='2020-01-02T12:00:00Z', properties={'key': 'val'})\n    cohort = Cohort.objects.create(team=self.team, name='a', groups=[{'properties': [{'key': '$browser', 'value': 'test', 'type': 'person'}]}])\n    cohort.calculate_people_ch(pending_version=0)\n    entity_params = [{'id': '$pageview', 'name': '$pageview', 'type': 'events', 'order': 0, 'properties': [{'key': 'id', 'value': cohort.pk, 'type': 'cohort'}]}]\n    with self.settings(USE_PRECALCULATED_CH_COHORT_PEOPLE=True):\n        with freeze_time('2020-01-04T13:01:01Z'):\n            filter = Filter(data={'insight': 'FUNNELS', 'properties': [], 'filter_test_accounts': False, 'events': entity_params, 'actions': [], 'funnel_viz_type': 'steps', 'display': 'FunnelViz', 'interval': 'day', 'breakdown': '$browser', 'breakdown_type': 'person', 'breakdown_limit': 5, 'date_from': '-14d', 'funnel_window_days': 14})\n            res = get_breakdown_prop_values(filter, Entity(entity_params[0]), 'count(*)', self.team)\n            self.assertEqual(res, ['test'])",
            "def test_breakdown_person_props_with_entity_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    _create_person(team_id=self.team.pk, distinct_ids=['p1'], properties={'$browser': 'test'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p1', timestamp='2020-01-02T12:00:00Z', properties={'key': 'val'})\n    _create_person(team_id=self.team.pk, distinct_ids=['p2'], properties={'$browser': 'test2'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p2', timestamp='2020-01-02T12:00:00Z', properties={'key': 'val'})\n    cohort = Cohort.objects.create(team=self.team, name='a', groups=[{'properties': [{'key': '$browser', 'value': 'test', 'type': 'person'}]}])\n    cohort.calculate_people_ch(pending_version=0)\n    entity_params = [{'id': '$pageview', 'name': '$pageview', 'type': 'events', 'order': 0, 'properties': [{'key': 'id', 'value': cohort.pk, 'type': 'cohort'}]}]\n    with self.settings(USE_PRECALCULATED_CH_COHORT_PEOPLE=True):\n        with freeze_time('2020-01-04T13:01:01Z'):\n            filter = Filter(data={'insight': 'FUNNELS', 'properties': [], 'filter_test_accounts': False, 'events': entity_params, 'actions': [], 'funnel_viz_type': 'steps', 'display': 'FunnelViz', 'interval': 'day', 'breakdown': '$browser', 'breakdown_type': 'person', 'breakdown_limit': 5, 'date_from': '-14d', 'funnel_window_days': 14})\n            res = get_breakdown_prop_values(filter, Entity(entity_params[0]), 'count(*)', self.team)\n            self.assertEqual(res, ['test'])",
            "def test_breakdown_person_props_with_entity_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    _create_person(team_id=self.team.pk, distinct_ids=['p1'], properties={'$browser': 'test'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p1', timestamp='2020-01-02T12:00:00Z', properties={'key': 'val'})\n    _create_person(team_id=self.team.pk, distinct_ids=['p2'], properties={'$browser': 'test2'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p2', timestamp='2020-01-02T12:00:00Z', properties={'key': 'val'})\n    cohort = Cohort.objects.create(team=self.team, name='a', groups=[{'properties': [{'key': '$browser', 'value': 'test', 'type': 'person'}]}])\n    cohort.calculate_people_ch(pending_version=0)\n    entity_params = [{'id': '$pageview', 'name': '$pageview', 'type': 'events', 'order': 0, 'properties': [{'key': 'id', 'value': cohort.pk, 'type': 'cohort'}]}]\n    with self.settings(USE_PRECALCULATED_CH_COHORT_PEOPLE=True):\n        with freeze_time('2020-01-04T13:01:01Z'):\n            filter = Filter(data={'insight': 'FUNNELS', 'properties': [], 'filter_test_accounts': False, 'events': entity_params, 'actions': [], 'funnel_viz_type': 'steps', 'display': 'FunnelViz', 'interval': 'day', 'breakdown': '$browser', 'breakdown_type': 'person', 'breakdown_limit': 5, 'date_from': '-14d', 'funnel_window_days': 14})\n            res = get_breakdown_prop_values(filter, Entity(entity_params[0]), 'count(*)', self.team)\n            self.assertEqual(res, ['test'])",
            "def test_breakdown_person_props_with_entity_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    _create_person(team_id=self.team.pk, distinct_ids=['p1'], properties={'$browser': 'test'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p1', timestamp='2020-01-02T12:00:00Z', properties={'key': 'val'})\n    _create_person(team_id=self.team.pk, distinct_ids=['p2'], properties={'$browser': 'test2'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p2', timestamp='2020-01-02T12:00:00Z', properties={'key': 'val'})\n    cohort = Cohort.objects.create(team=self.team, name='a', groups=[{'properties': [{'key': '$browser', 'value': 'test', 'type': 'person'}]}])\n    cohort.calculate_people_ch(pending_version=0)\n    entity_params = [{'id': '$pageview', 'name': '$pageview', 'type': 'events', 'order': 0, 'properties': [{'key': 'id', 'value': cohort.pk, 'type': 'cohort'}]}]\n    with self.settings(USE_PRECALCULATED_CH_COHORT_PEOPLE=True):\n        with freeze_time('2020-01-04T13:01:01Z'):\n            filter = Filter(data={'insight': 'FUNNELS', 'properties': [], 'filter_test_accounts': False, 'events': entity_params, 'actions': [], 'funnel_viz_type': 'steps', 'display': 'FunnelViz', 'interval': 'day', 'breakdown': '$browser', 'breakdown_type': 'person', 'breakdown_limit': 5, 'date_from': '-14d', 'funnel_window_days': 14})\n            res = get_breakdown_prop_values(filter, Entity(entity_params[0]), 'count(*)', self.team)\n            self.assertEqual(res, ['test'])",
            "def test_breakdown_person_props_with_entity_filter(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    _create_person(team_id=self.team.pk, distinct_ids=['p1'], properties={'$browser': 'test'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p1', timestamp='2020-01-02T12:00:00Z', properties={'key': 'val'})\n    _create_person(team_id=self.team.pk, distinct_ids=['p2'], properties={'$browser': 'test2'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p2', timestamp='2020-01-02T12:00:00Z', properties={'key': 'val'})\n    cohort = Cohort.objects.create(team=self.team, name='a', groups=[{'properties': [{'key': '$browser', 'value': 'test', 'type': 'person'}]}])\n    cohort.calculate_people_ch(pending_version=0)\n    entity_params = [{'id': '$pageview', 'name': '$pageview', 'type': 'events', 'order': 0, 'properties': [{'key': 'id', 'value': cohort.pk, 'type': 'cohort'}]}]\n    with self.settings(USE_PRECALCULATED_CH_COHORT_PEOPLE=True):\n        with freeze_time('2020-01-04T13:01:01Z'):\n            filter = Filter(data={'insight': 'FUNNELS', 'properties': [], 'filter_test_accounts': False, 'events': entity_params, 'actions': [], 'funnel_viz_type': 'steps', 'display': 'FunnelViz', 'interval': 'day', 'breakdown': '$browser', 'breakdown_type': 'person', 'breakdown_limit': 5, 'date_from': '-14d', 'funnel_window_days': 14})\n            res = get_breakdown_prop_values(filter, Entity(entity_params[0]), 'count(*)', self.team)\n            self.assertEqual(res, ['test'])"
        ]
    },
    {
        "func_name": "test_breakdown_person_props_with_entity_filter_and_or_props_with_partial_pushdown",
        "original": "@snapshot_clickhouse_queries\ndef test_breakdown_person_props_with_entity_filter_and_or_props_with_partial_pushdown(self):\n    _create_person(team_id=self.team.pk, distinct_ids=['p1'], properties={'$browser': 'test', '$os': 'test'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p1', timestamp='2020-01-02T12:00:00Z', properties={'key': 'val'})\n    _create_person(team_id=self.team.pk, distinct_ids=['p2'], properties={'$browser': 'test2', '$os': 'test2'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p2', timestamp='2020-01-02T12:00:00Z', properties={'key': 'val2'})\n    _create_person(team_id=self.team.pk, distinct_ids=['p3'], properties={'$browser': 'test3', '$os': 'test3'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p3', timestamp='2020-01-02T12:00:00Z', properties={'key': 'val3'})\n    entity_params = [{'id': '$pageview', 'name': '$pageview', 'type': 'events', 'order': 0, 'properties': [{'key': '$browser', 'type': 'person', 'value': 'test', 'operator': 'icontains'}]}]\n    with self.settings(USE_PRECALCULATED_CH_COHORT_PEOPLE=True):\n        with freeze_time('2020-01-04T13:01:01Z'):\n            filter = Filter(data={'insight': 'FUNNELS', 'properties': {'type': 'OR', 'values': [{'key': '$os', 'type': 'person', 'value': 'test2', 'operator': 'exact'}, {'key': 'key', 'type': 'event', 'value': 'val', 'operator': 'exact'}]}, 'filter_test_accounts': False, 'events': entity_params, 'actions': [], 'funnel_viz_type': 'steps', 'display': 'FunnelViz', 'interval': 'day', 'breakdown': '$browser', 'breakdown_type': 'person', 'breakdown_limit': 5, 'date_from': '-14d', 'funnel_window_days': 14})\n            res = sorted(get_breakdown_prop_values(filter, Entity(entity_params[0]), 'count(*)', self.team))\n            self.assertEqual(res, ['test', 'test2'])",
        "mutated": [
            "@snapshot_clickhouse_queries\ndef test_breakdown_person_props_with_entity_filter_and_or_props_with_partial_pushdown(self):\n    if False:\n        i = 10\n    _create_person(team_id=self.team.pk, distinct_ids=['p1'], properties={'$browser': 'test', '$os': 'test'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p1', timestamp='2020-01-02T12:00:00Z', properties={'key': 'val'})\n    _create_person(team_id=self.team.pk, distinct_ids=['p2'], properties={'$browser': 'test2', '$os': 'test2'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p2', timestamp='2020-01-02T12:00:00Z', properties={'key': 'val2'})\n    _create_person(team_id=self.team.pk, distinct_ids=['p3'], properties={'$browser': 'test3', '$os': 'test3'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p3', timestamp='2020-01-02T12:00:00Z', properties={'key': 'val3'})\n    entity_params = [{'id': '$pageview', 'name': '$pageview', 'type': 'events', 'order': 0, 'properties': [{'key': '$browser', 'type': 'person', 'value': 'test', 'operator': 'icontains'}]}]\n    with self.settings(USE_PRECALCULATED_CH_COHORT_PEOPLE=True):\n        with freeze_time('2020-01-04T13:01:01Z'):\n            filter = Filter(data={'insight': 'FUNNELS', 'properties': {'type': 'OR', 'values': [{'key': '$os', 'type': 'person', 'value': 'test2', 'operator': 'exact'}, {'key': 'key', 'type': 'event', 'value': 'val', 'operator': 'exact'}]}, 'filter_test_accounts': False, 'events': entity_params, 'actions': [], 'funnel_viz_type': 'steps', 'display': 'FunnelViz', 'interval': 'day', 'breakdown': '$browser', 'breakdown_type': 'person', 'breakdown_limit': 5, 'date_from': '-14d', 'funnel_window_days': 14})\n            res = sorted(get_breakdown_prop_values(filter, Entity(entity_params[0]), 'count(*)', self.team))\n            self.assertEqual(res, ['test', 'test2'])",
            "@snapshot_clickhouse_queries\ndef test_breakdown_person_props_with_entity_filter_and_or_props_with_partial_pushdown(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    _create_person(team_id=self.team.pk, distinct_ids=['p1'], properties={'$browser': 'test', '$os': 'test'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p1', timestamp='2020-01-02T12:00:00Z', properties={'key': 'val'})\n    _create_person(team_id=self.team.pk, distinct_ids=['p2'], properties={'$browser': 'test2', '$os': 'test2'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p2', timestamp='2020-01-02T12:00:00Z', properties={'key': 'val2'})\n    _create_person(team_id=self.team.pk, distinct_ids=['p3'], properties={'$browser': 'test3', '$os': 'test3'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p3', timestamp='2020-01-02T12:00:00Z', properties={'key': 'val3'})\n    entity_params = [{'id': '$pageview', 'name': '$pageview', 'type': 'events', 'order': 0, 'properties': [{'key': '$browser', 'type': 'person', 'value': 'test', 'operator': 'icontains'}]}]\n    with self.settings(USE_PRECALCULATED_CH_COHORT_PEOPLE=True):\n        with freeze_time('2020-01-04T13:01:01Z'):\n            filter = Filter(data={'insight': 'FUNNELS', 'properties': {'type': 'OR', 'values': [{'key': '$os', 'type': 'person', 'value': 'test2', 'operator': 'exact'}, {'key': 'key', 'type': 'event', 'value': 'val', 'operator': 'exact'}]}, 'filter_test_accounts': False, 'events': entity_params, 'actions': [], 'funnel_viz_type': 'steps', 'display': 'FunnelViz', 'interval': 'day', 'breakdown': '$browser', 'breakdown_type': 'person', 'breakdown_limit': 5, 'date_from': '-14d', 'funnel_window_days': 14})\n            res = sorted(get_breakdown_prop_values(filter, Entity(entity_params[0]), 'count(*)', self.team))\n            self.assertEqual(res, ['test', 'test2'])",
            "@snapshot_clickhouse_queries\ndef test_breakdown_person_props_with_entity_filter_and_or_props_with_partial_pushdown(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    _create_person(team_id=self.team.pk, distinct_ids=['p1'], properties={'$browser': 'test', '$os': 'test'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p1', timestamp='2020-01-02T12:00:00Z', properties={'key': 'val'})\n    _create_person(team_id=self.team.pk, distinct_ids=['p2'], properties={'$browser': 'test2', '$os': 'test2'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p2', timestamp='2020-01-02T12:00:00Z', properties={'key': 'val2'})\n    _create_person(team_id=self.team.pk, distinct_ids=['p3'], properties={'$browser': 'test3', '$os': 'test3'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p3', timestamp='2020-01-02T12:00:00Z', properties={'key': 'val3'})\n    entity_params = [{'id': '$pageview', 'name': '$pageview', 'type': 'events', 'order': 0, 'properties': [{'key': '$browser', 'type': 'person', 'value': 'test', 'operator': 'icontains'}]}]\n    with self.settings(USE_PRECALCULATED_CH_COHORT_PEOPLE=True):\n        with freeze_time('2020-01-04T13:01:01Z'):\n            filter = Filter(data={'insight': 'FUNNELS', 'properties': {'type': 'OR', 'values': [{'key': '$os', 'type': 'person', 'value': 'test2', 'operator': 'exact'}, {'key': 'key', 'type': 'event', 'value': 'val', 'operator': 'exact'}]}, 'filter_test_accounts': False, 'events': entity_params, 'actions': [], 'funnel_viz_type': 'steps', 'display': 'FunnelViz', 'interval': 'day', 'breakdown': '$browser', 'breakdown_type': 'person', 'breakdown_limit': 5, 'date_from': '-14d', 'funnel_window_days': 14})\n            res = sorted(get_breakdown_prop_values(filter, Entity(entity_params[0]), 'count(*)', self.team))\n            self.assertEqual(res, ['test', 'test2'])",
            "@snapshot_clickhouse_queries\ndef test_breakdown_person_props_with_entity_filter_and_or_props_with_partial_pushdown(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    _create_person(team_id=self.team.pk, distinct_ids=['p1'], properties={'$browser': 'test', '$os': 'test'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p1', timestamp='2020-01-02T12:00:00Z', properties={'key': 'val'})\n    _create_person(team_id=self.team.pk, distinct_ids=['p2'], properties={'$browser': 'test2', '$os': 'test2'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p2', timestamp='2020-01-02T12:00:00Z', properties={'key': 'val2'})\n    _create_person(team_id=self.team.pk, distinct_ids=['p3'], properties={'$browser': 'test3', '$os': 'test3'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p3', timestamp='2020-01-02T12:00:00Z', properties={'key': 'val3'})\n    entity_params = [{'id': '$pageview', 'name': '$pageview', 'type': 'events', 'order': 0, 'properties': [{'key': '$browser', 'type': 'person', 'value': 'test', 'operator': 'icontains'}]}]\n    with self.settings(USE_PRECALCULATED_CH_COHORT_PEOPLE=True):\n        with freeze_time('2020-01-04T13:01:01Z'):\n            filter = Filter(data={'insight': 'FUNNELS', 'properties': {'type': 'OR', 'values': [{'key': '$os', 'type': 'person', 'value': 'test2', 'operator': 'exact'}, {'key': 'key', 'type': 'event', 'value': 'val', 'operator': 'exact'}]}, 'filter_test_accounts': False, 'events': entity_params, 'actions': [], 'funnel_viz_type': 'steps', 'display': 'FunnelViz', 'interval': 'day', 'breakdown': '$browser', 'breakdown_type': 'person', 'breakdown_limit': 5, 'date_from': '-14d', 'funnel_window_days': 14})\n            res = sorted(get_breakdown_prop_values(filter, Entity(entity_params[0]), 'count(*)', self.team))\n            self.assertEqual(res, ['test', 'test2'])",
            "@snapshot_clickhouse_queries\ndef test_breakdown_person_props_with_entity_filter_and_or_props_with_partial_pushdown(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    _create_person(team_id=self.team.pk, distinct_ids=['p1'], properties={'$browser': 'test', '$os': 'test'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p1', timestamp='2020-01-02T12:00:00Z', properties={'key': 'val'})\n    _create_person(team_id=self.team.pk, distinct_ids=['p2'], properties={'$browser': 'test2', '$os': 'test2'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p2', timestamp='2020-01-02T12:00:00Z', properties={'key': 'val2'})\n    _create_person(team_id=self.team.pk, distinct_ids=['p3'], properties={'$browser': 'test3', '$os': 'test3'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p3', timestamp='2020-01-02T12:00:00Z', properties={'key': 'val3'})\n    entity_params = [{'id': '$pageview', 'name': '$pageview', 'type': 'events', 'order': 0, 'properties': [{'key': '$browser', 'type': 'person', 'value': 'test', 'operator': 'icontains'}]}]\n    with self.settings(USE_PRECALCULATED_CH_COHORT_PEOPLE=True):\n        with freeze_time('2020-01-04T13:01:01Z'):\n            filter = Filter(data={'insight': 'FUNNELS', 'properties': {'type': 'OR', 'values': [{'key': '$os', 'type': 'person', 'value': 'test2', 'operator': 'exact'}, {'key': 'key', 'type': 'event', 'value': 'val', 'operator': 'exact'}]}, 'filter_test_accounts': False, 'events': entity_params, 'actions': [], 'funnel_viz_type': 'steps', 'display': 'FunnelViz', 'interval': 'day', 'breakdown': '$browser', 'breakdown_type': 'person', 'breakdown_limit': 5, 'date_from': '-14d', 'funnel_window_days': 14})\n            res = sorted(get_breakdown_prop_values(filter, Entity(entity_params[0]), 'count(*)', self.team))\n            self.assertEqual(res, ['test', 'test2'])"
        ]
    },
    {
        "func_name": "test_breakdown_group_props",
        "original": "@snapshot_clickhouse_queries\ndef test_breakdown_group_props(self):\n    GroupTypeMapping.objects.create(team=self.team, group_type='organization', group_type_index=0)\n    GroupTypeMapping.objects.create(team=self.team, group_type='company', group_type_index=1)\n    create_group(team_id=self.team.pk, group_type_index=0, group_key='org:5', properties={'industry': 'finance'})\n    create_group(team_id=self.team.pk, group_type_index=0, group_key='org:6', properties={'industry': 'technology'})\n    create_group(team_id=self.team.pk, group_type_index=0, group_key='org:7', properties={'industry': 'finance'})\n    create_group(team_id=self.team.pk, group_type_index=0, group_key='org:8', properties={'industry': 'another', 'out': 1})\n    create_group(team_id=self.team.pk, group_type_index=1, group_key='company:10', properties={'industry': 'foobar'})\n    create_group(team_id=self.team.pk, group_type_index=1, group_key='org:8', properties={'industry': 'foobar'})\n    for org_index in range(5, 9):\n        _create_event(event='$pageview', distinct_id='person1', team=self.team, properties={'$group_0': f'org:{org_index}'}, timestamp='2020-01-02T12:00:00Z')\n    filter = Filter(data={'date_from': '2020-01-01T00:00:00Z', 'date_to': '2020-01-12T00:00:00Z', 'breakdown': 'industry', 'breakdown_type': 'group', 'breakdown_group_type_index': 0, 'breakdown_limit': 5, 'events': [{'id': '$pageview', 'type': 'events', 'order': 0}], 'properties': [{'key': 'out', 'value': '', 'type': 'group', 'group_type_index': 0, 'operator': 'is_not_set'}]}, team=self.team)\n    result = get_breakdown_prop_values(filter, filter.entities[0], 'count(*)', self.team)\n    self.assertEqual(result, ['finance', 'technology'])\n    filter = Filter(data={'date_from': '2020-01-01T00:00:00Z', 'date_to': '2020-01-12T00:00:00Z', 'breakdown': 'industry', 'breakdown_type': 'group', 'breakdown_group_type_index': 0, 'breakdown_limit': 5, 'events': [{'id': '$pageview', 'type': 'events', 'order': 0}], 'properties': {'type': 'AND', 'values': [{'key': 'out', 'value': '', 'type': 'group', 'group_type_index': 0, 'operator': 'is_not_set'}]}})\n    result = get_breakdown_prop_values(filter, filter.entities[0], 'count(*)', self.team)\n    self.assertEqual(result, ['finance', 'technology'])",
        "mutated": [
            "@snapshot_clickhouse_queries\ndef test_breakdown_group_props(self):\n    if False:\n        i = 10\n    GroupTypeMapping.objects.create(team=self.team, group_type='organization', group_type_index=0)\n    GroupTypeMapping.objects.create(team=self.team, group_type='company', group_type_index=1)\n    create_group(team_id=self.team.pk, group_type_index=0, group_key='org:5', properties={'industry': 'finance'})\n    create_group(team_id=self.team.pk, group_type_index=0, group_key='org:6', properties={'industry': 'technology'})\n    create_group(team_id=self.team.pk, group_type_index=0, group_key='org:7', properties={'industry': 'finance'})\n    create_group(team_id=self.team.pk, group_type_index=0, group_key='org:8', properties={'industry': 'another', 'out': 1})\n    create_group(team_id=self.team.pk, group_type_index=1, group_key='company:10', properties={'industry': 'foobar'})\n    create_group(team_id=self.team.pk, group_type_index=1, group_key='org:8', properties={'industry': 'foobar'})\n    for org_index in range(5, 9):\n        _create_event(event='$pageview', distinct_id='person1', team=self.team, properties={'$group_0': f'org:{org_index}'}, timestamp='2020-01-02T12:00:00Z')\n    filter = Filter(data={'date_from': '2020-01-01T00:00:00Z', 'date_to': '2020-01-12T00:00:00Z', 'breakdown': 'industry', 'breakdown_type': 'group', 'breakdown_group_type_index': 0, 'breakdown_limit': 5, 'events': [{'id': '$pageview', 'type': 'events', 'order': 0}], 'properties': [{'key': 'out', 'value': '', 'type': 'group', 'group_type_index': 0, 'operator': 'is_not_set'}]}, team=self.team)\n    result = get_breakdown_prop_values(filter, filter.entities[0], 'count(*)', self.team)\n    self.assertEqual(result, ['finance', 'technology'])\n    filter = Filter(data={'date_from': '2020-01-01T00:00:00Z', 'date_to': '2020-01-12T00:00:00Z', 'breakdown': 'industry', 'breakdown_type': 'group', 'breakdown_group_type_index': 0, 'breakdown_limit': 5, 'events': [{'id': '$pageview', 'type': 'events', 'order': 0}], 'properties': {'type': 'AND', 'values': [{'key': 'out', 'value': '', 'type': 'group', 'group_type_index': 0, 'operator': 'is_not_set'}]}})\n    result = get_breakdown_prop_values(filter, filter.entities[0], 'count(*)', self.team)\n    self.assertEqual(result, ['finance', 'technology'])",
            "@snapshot_clickhouse_queries\ndef test_breakdown_group_props(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    GroupTypeMapping.objects.create(team=self.team, group_type='organization', group_type_index=0)\n    GroupTypeMapping.objects.create(team=self.team, group_type='company', group_type_index=1)\n    create_group(team_id=self.team.pk, group_type_index=0, group_key='org:5', properties={'industry': 'finance'})\n    create_group(team_id=self.team.pk, group_type_index=0, group_key='org:6', properties={'industry': 'technology'})\n    create_group(team_id=self.team.pk, group_type_index=0, group_key='org:7', properties={'industry': 'finance'})\n    create_group(team_id=self.team.pk, group_type_index=0, group_key='org:8', properties={'industry': 'another', 'out': 1})\n    create_group(team_id=self.team.pk, group_type_index=1, group_key='company:10', properties={'industry': 'foobar'})\n    create_group(team_id=self.team.pk, group_type_index=1, group_key='org:8', properties={'industry': 'foobar'})\n    for org_index in range(5, 9):\n        _create_event(event='$pageview', distinct_id='person1', team=self.team, properties={'$group_0': f'org:{org_index}'}, timestamp='2020-01-02T12:00:00Z')\n    filter = Filter(data={'date_from': '2020-01-01T00:00:00Z', 'date_to': '2020-01-12T00:00:00Z', 'breakdown': 'industry', 'breakdown_type': 'group', 'breakdown_group_type_index': 0, 'breakdown_limit': 5, 'events': [{'id': '$pageview', 'type': 'events', 'order': 0}], 'properties': [{'key': 'out', 'value': '', 'type': 'group', 'group_type_index': 0, 'operator': 'is_not_set'}]}, team=self.team)\n    result = get_breakdown_prop_values(filter, filter.entities[0], 'count(*)', self.team)\n    self.assertEqual(result, ['finance', 'technology'])\n    filter = Filter(data={'date_from': '2020-01-01T00:00:00Z', 'date_to': '2020-01-12T00:00:00Z', 'breakdown': 'industry', 'breakdown_type': 'group', 'breakdown_group_type_index': 0, 'breakdown_limit': 5, 'events': [{'id': '$pageview', 'type': 'events', 'order': 0}], 'properties': {'type': 'AND', 'values': [{'key': 'out', 'value': '', 'type': 'group', 'group_type_index': 0, 'operator': 'is_not_set'}]}})\n    result = get_breakdown_prop_values(filter, filter.entities[0], 'count(*)', self.team)\n    self.assertEqual(result, ['finance', 'technology'])",
            "@snapshot_clickhouse_queries\ndef test_breakdown_group_props(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    GroupTypeMapping.objects.create(team=self.team, group_type='organization', group_type_index=0)\n    GroupTypeMapping.objects.create(team=self.team, group_type='company', group_type_index=1)\n    create_group(team_id=self.team.pk, group_type_index=0, group_key='org:5', properties={'industry': 'finance'})\n    create_group(team_id=self.team.pk, group_type_index=0, group_key='org:6', properties={'industry': 'technology'})\n    create_group(team_id=self.team.pk, group_type_index=0, group_key='org:7', properties={'industry': 'finance'})\n    create_group(team_id=self.team.pk, group_type_index=0, group_key='org:8', properties={'industry': 'another', 'out': 1})\n    create_group(team_id=self.team.pk, group_type_index=1, group_key='company:10', properties={'industry': 'foobar'})\n    create_group(team_id=self.team.pk, group_type_index=1, group_key='org:8', properties={'industry': 'foobar'})\n    for org_index in range(5, 9):\n        _create_event(event='$pageview', distinct_id='person1', team=self.team, properties={'$group_0': f'org:{org_index}'}, timestamp='2020-01-02T12:00:00Z')\n    filter = Filter(data={'date_from': '2020-01-01T00:00:00Z', 'date_to': '2020-01-12T00:00:00Z', 'breakdown': 'industry', 'breakdown_type': 'group', 'breakdown_group_type_index': 0, 'breakdown_limit': 5, 'events': [{'id': '$pageview', 'type': 'events', 'order': 0}], 'properties': [{'key': 'out', 'value': '', 'type': 'group', 'group_type_index': 0, 'operator': 'is_not_set'}]}, team=self.team)\n    result = get_breakdown_prop_values(filter, filter.entities[0], 'count(*)', self.team)\n    self.assertEqual(result, ['finance', 'technology'])\n    filter = Filter(data={'date_from': '2020-01-01T00:00:00Z', 'date_to': '2020-01-12T00:00:00Z', 'breakdown': 'industry', 'breakdown_type': 'group', 'breakdown_group_type_index': 0, 'breakdown_limit': 5, 'events': [{'id': '$pageview', 'type': 'events', 'order': 0}], 'properties': {'type': 'AND', 'values': [{'key': 'out', 'value': '', 'type': 'group', 'group_type_index': 0, 'operator': 'is_not_set'}]}})\n    result = get_breakdown_prop_values(filter, filter.entities[0], 'count(*)', self.team)\n    self.assertEqual(result, ['finance', 'technology'])",
            "@snapshot_clickhouse_queries\ndef test_breakdown_group_props(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    GroupTypeMapping.objects.create(team=self.team, group_type='organization', group_type_index=0)\n    GroupTypeMapping.objects.create(team=self.team, group_type='company', group_type_index=1)\n    create_group(team_id=self.team.pk, group_type_index=0, group_key='org:5', properties={'industry': 'finance'})\n    create_group(team_id=self.team.pk, group_type_index=0, group_key='org:6', properties={'industry': 'technology'})\n    create_group(team_id=self.team.pk, group_type_index=0, group_key='org:7', properties={'industry': 'finance'})\n    create_group(team_id=self.team.pk, group_type_index=0, group_key='org:8', properties={'industry': 'another', 'out': 1})\n    create_group(team_id=self.team.pk, group_type_index=1, group_key='company:10', properties={'industry': 'foobar'})\n    create_group(team_id=self.team.pk, group_type_index=1, group_key='org:8', properties={'industry': 'foobar'})\n    for org_index in range(5, 9):\n        _create_event(event='$pageview', distinct_id='person1', team=self.team, properties={'$group_0': f'org:{org_index}'}, timestamp='2020-01-02T12:00:00Z')\n    filter = Filter(data={'date_from': '2020-01-01T00:00:00Z', 'date_to': '2020-01-12T00:00:00Z', 'breakdown': 'industry', 'breakdown_type': 'group', 'breakdown_group_type_index': 0, 'breakdown_limit': 5, 'events': [{'id': '$pageview', 'type': 'events', 'order': 0}], 'properties': [{'key': 'out', 'value': '', 'type': 'group', 'group_type_index': 0, 'operator': 'is_not_set'}]}, team=self.team)\n    result = get_breakdown_prop_values(filter, filter.entities[0], 'count(*)', self.team)\n    self.assertEqual(result, ['finance', 'technology'])\n    filter = Filter(data={'date_from': '2020-01-01T00:00:00Z', 'date_to': '2020-01-12T00:00:00Z', 'breakdown': 'industry', 'breakdown_type': 'group', 'breakdown_group_type_index': 0, 'breakdown_limit': 5, 'events': [{'id': '$pageview', 'type': 'events', 'order': 0}], 'properties': {'type': 'AND', 'values': [{'key': 'out', 'value': '', 'type': 'group', 'group_type_index': 0, 'operator': 'is_not_set'}]}})\n    result = get_breakdown_prop_values(filter, filter.entities[0], 'count(*)', self.team)\n    self.assertEqual(result, ['finance', 'technology'])",
            "@snapshot_clickhouse_queries\ndef test_breakdown_group_props(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    GroupTypeMapping.objects.create(team=self.team, group_type='organization', group_type_index=0)\n    GroupTypeMapping.objects.create(team=self.team, group_type='company', group_type_index=1)\n    create_group(team_id=self.team.pk, group_type_index=0, group_key='org:5', properties={'industry': 'finance'})\n    create_group(team_id=self.team.pk, group_type_index=0, group_key='org:6', properties={'industry': 'technology'})\n    create_group(team_id=self.team.pk, group_type_index=0, group_key='org:7', properties={'industry': 'finance'})\n    create_group(team_id=self.team.pk, group_type_index=0, group_key='org:8', properties={'industry': 'another', 'out': 1})\n    create_group(team_id=self.team.pk, group_type_index=1, group_key='company:10', properties={'industry': 'foobar'})\n    create_group(team_id=self.team.pk, group_type_index=1, group_key='org:8', properties={'industry': 'foobar'})\n    for org_index in range(5, 9):\n        _create_event(event='$pageview', distinct_id='person1', team=self.team, properties={'$group_0': f'org:{org_index}'}, timestamp='2020-01-02T12:00:00Z')\n    filter = Filter(data={'date_from': '2020-01-01T00:00:00Z', 'date_to': '2020-01-12T00:00:00Z', 'breakdown': 'industry', 'breakdown_type': 'group', 'breakdown_group_type_index': 0, 'breakdown_limit': 5, 'events': [{'id': '$pageview', 'type': 'events', 'order': 0}], 'properties': [{'key': 'out', 'value': '', 'type': 'group', 'group_type_index': 0, 'operator': 'is_not_set'}]}, team=self.team)\n    result = get_breakdown_prop_values(filter, filter.entities[0], 'count(*)', self.team)\n    self.assertEqual(result, ['finance', 'technology'])\n    filter = Filter(data={'date_from': '2020-01-01T00:00:00Z', 'date_to': '2020-01-12T00:00:00Z', 'breakdown': 'industry', 'breakdown_type': 'group', 'breakdown_group_type_index': 0, 'breakdown_limit': 5, 'events': [{'id': '$pageview', 'type': 'events', 'order': 0}], 'properties': {'type': 'AND', 'values': [{'key': 'out', 'value': '', 'type': 'group', 'group_type_index': 0, 'operator': 'is_not_set'}]}})\n    result = get_breakdown_prop_values(filter, filter.entities[0], 'count(*)', self.team)\n    self.assertEqual(result, ['finance', 'technology'])"
        ]
    },
    {
        "func_name": "test_breakdown_session_props",
        "original": "@snapshot_clickhouse_queries\ndef test_breakdown_session_props(self):\n    _create_person(team_id=self.team.pk, distinct_ids=['p1'], properties={'$browser': 'test', '$os': 'test'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p1', timestamp='2020-01-01T23:59:50Z', properties={'$session_id': '1'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p1', timestamp='2020-01-02T00:00:10Z', properties={'$session_id': '1'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p1', timestamp='2020-01-02T12:00:00Z', properties={'$session_id': '2'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p1', timestamp='2020-01-02T12:01:10Z', properties={'$session_id': '2'})\n    filter = Filter(data={'date_from': '2020-01-02T00:00:00Z', 'date_to': '2020-01-12T00:00:00Z', 'breakdown': '$session_duration', 'breakdown_type': 'session', 'events': [{'id': '$pageview', 'type': 'events', 'order': 0}]})\n    result = get_breakdown_prop_values(filter, filter.entities[0], 'count(*)', self.team)\n    self.assertEqual(result, [70, 20])",
        "mutated": [
            "@snapshot_clickhouse_queries\ndef test_breakdown_session_props(self):\n    if False:\n        i = 10\n    _create_person(team_id=self.team.pk, distinct_ids=['p1'], properties={'$browser': 'test', '$os': 'test'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p1', timestamp='2020-01-01T23:59:50Z', properties={'$session_id': '1'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p1', timestamp='2020-01-02T00:00:10Z', properties={'$session_id': '1'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p1', timestamp='2020-01-02T12:00:00Z', properties={'$session_id': '2'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p1', timestamp='2020-01-02T12:01:10Z', properties={'$session_id': '2'})\n    filter = Filter(data={'date_from': '2020-01-02T00:00:00Z', 'date_to': '2020-01-12T00:00:00Z', 'breakdown': '$session_duration', 'breakdown_type': 'session', 'events': [{'id': '$pageview', 'type': 'events', 'order': 0}]})\n    result = get_breakdown_prop_values(filter, filter.entities[0], 'count(*)', self.team)\n    self.assertEqual(result, [70, 20])",
            "@snapshot_clickhouse_queries\ndef test_breakdown_session_props(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    _create_person(team_id=self.team.pk, distinct_ids=['p1'], properties={'$browser': 'test', '$os': 'test'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p1', timestamp='2020-01-01T23:59:50Z', properties={'$session_id': '1'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p1', timestamp='2020-01-02T00:00:10Z', properties={'$session_id': '1'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p1', timestamp='2020-01-02T12:00:00Z', properties={'$session_id': '2'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p1', timestamp='2020-01-02T12:01:10Z', properties={'$session_id': '2'})\n    filter = Filter(data={'date_from': '2020-01-02T00:00:00Z', 'date_to': '2020-01-12T00:00:00Z', 'breakdown': '$session_duration', 'breakdown_type': 'session', 'events': [{'id': '$pageview', 'type': 'events', 'order': 0}]})\n    result = get_breakdown_prop_values(filter, filter.entities[0], 'count(*)', self.team)\n    self.assertEqual(result, [70, 20])",
            "@snapshot_clickhouse_queries\ndef test_breakdown_session_props(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    _create_person(team_id=self.team.pk, distinct_ids=['p1'], properties={'$browser': 'test', '$os': 'test'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p1', timestamp='2020-01-01T23:59:50Z', properties={'$session_id': '1'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p1', timestamp='2020-01-02T00:00:10Z', properties={'$session_id': '1'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p1', timestamp='2020-01-02T12:00:00Z', properties={'$session_id': '2'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p1', timestamp='2020-01-02T12:01:10Z', properties={'$session_id': '2'})\n    filter = Filter(data={'date_from': '2020-01-02T00:00:00Z', 'date_to': '2020-01-12T00:00:00Z', 'breakdown': '$session_duration', 'breakdown_type': 'session', 'events': [{'id': '$pageview', 'type': 'events', 'order': 0}]})\n    result = get_breakdown_prop_values(filter, filter.entities[0], 'count(*)', self.team)\n    self.assertEqual(result, [70, 20])",
            "@snapshot_clickhouse_queries\ndef test_breakdown_session_props(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    _create_person(team_id=self.team.pk, distinct_ids=['p1'], properties={'$browser': 'test', '$os': 'test'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p1', timestamp='2020-01-01T23:59:50Z', properties={'$session_id': '1'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p1', timestamp='2020-01-02T00:00:10Z', properties={'$session_id': '1'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p1', timestamp='2020-01-02T12:00:00Z', properties={'$session_id': '2'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p1', timestamp='2020-01-02T12:01:10Z', properties={'$session_id': '2'})\n    filter = Filter(data={'date_from': '2020-01-02T00:00:00Z', 'date_to': '2020-01-12T00:00:00Z', 'breakdown': '$session_duration', 'breakdown_type': 'session', 'events': [{'id': '$pageview', 'type': 'events', 'order': 0}]})\n    result = get_breakdown_prop_values(filter, filter.entities[0], 'count(*)', self.team)\n    self.assertEqual(result, [70, 20])",
            "@snapshot_clickhouse_queries\ndef test_breakdown_session_props(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    _create_person(team_id=self.team.pk, distinct_ids=['p1'], properties={'$browser': 'test', '$os': 'test'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p1', timestamp='2020-01-01T23:59:50Z', properties={'$session_id': '1'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p1', timestamp='2020-01-02T00:00:10Z', properties={'$session_id': '1'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p1', timestamp='2020-01-02T12:00:00Z', properties={'$session_id': '2'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p1', timestamp='2020-01-02T12:01:10Z', properties={'$session_id': '2'})\n    filter = Filter(data={'date_from': '2020-01-02T00:00:00Z', 'date_to': '2020-01-12T00:00:00Z', 'breakdown': '$session_duration', 'breakdown_type': 'session', 'events': [{'id': '$pageview', 'type': 'events', 'order': 0}]})\n    result = get_breakdown_prop_values(filter, filter.entities[0], 'count(*)', self.team)\n    self.assertEqual(result, [70, 20])"
        ]
    },
    {
        "func_name": "test_breakdown_with_math_property_session",
        "original": "@snapshot_clickhouse_queries\ndef test_breakdown_with_math_property_session(self):\n    _create_person(team_id=self.team.pk, distinct_ids=['p1'], properties={'$browser': 'test', '$os': 'test'})\n    _create_person(team_id=self.team.pk, distinct_ids=['p2'], properties={'$browser': 'mac', '$os': 'test'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p1', timestamp='2020-01-01T23:59:50Z', properties={'$session_id': '1'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p1', timestamp='2020-01-02T00:00:10Z', properties={'$session_id': '1'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p1', timestamp='2020-01-02T12:00:00Z', properties={'$session_id': '2'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p1', timestamp='2020-01-02T12:01:10Z', properties={'$session_id': '2'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p2', timestamp='2020-01-02T12:00:00Z', properties={'$session_id': '3'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p2', timestamp='2020-01-02T12:00:01Z', properties={'$session_id': '3'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p2', timestamp='2020-01-02T12:00:02Z', properties={'$session_id': '3'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p2', timestamp='2020-01-02T12:00:03Z', properties={'$session_id': '3'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p2', timestamp='2020-01-02T12:00:04Z', properties={'$session_id': '3'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p2', timestamp='2020-01-02T12:00:10Z', properties={'$session_id': '3'})\n    filter = Filter(data={'date_from': '2020-01-02T00:00:00Z', 'date_to': '2020-01-12T00:00:00Z', 'breakdown': '$browser', 'breakdown_type': 'person', 'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'math': 'sum', 'math_property': '$session_duration'}]})\n    (aggregate_operation, _, _) = process_math(filter.entities[0], self.team, filter=filter)\n    result = get_breakdown_prop_values(filter, filter.entities[0], aggregate_operation, self.team)\n    self.assertEqual(result, ['test', 'mac'])\n    result = get_breakdown_prop_values(filter, filter.entities[0], 'count(*)', self.team)\n    self.assertEqual(result, ['mac', 'test'])",
        "mutated": [
            "@snapshot_clickhouse_queries\ndef test_breakdown_with_math_property_session(self):\n    if False:\n        i = 10\n    _create_person(team_id=self.team.pk, distinct_ids=['p1'], properties={'$browser': 'test', '$os': 'test'})\n    _create_person(team_id=self.team.pk, distinct_ids=['p2'], properties={'$browser': 'mac', '$os': 'test'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p1', timestamp='2020-01-01T23:59:50Z', properties={'$session_id': '1'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p1', timestamp='2020-01-02T00:00:10Z', properties={'$session_id': '1'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p1', timestamp='2020-01-02T12:00:00Z', properties={'$session_id': '2'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p1', timestamp='2020-01-02T12:01:10Z', properties={'$session_id': '2'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p2', timestamp='2020-01-02T12:00:00Z', properties={'$session_id': '3'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p2', timestamp='2020-01-02T12:00:01Z', properties={'$session_id': '3'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p2', timestamp='2020-01-02T12:00:02Z', properties={'$session_id': '3'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p2', timestamp='2020-01-02T12:00:03Z', properties={'$session_id': '3'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p2', timestamp='2020-01-02T12:00:04Z', properties={'$session_id': '3'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p2', timestamp='2020-01-02T12:00:10Z', properties={'$session_id': '3'})\n    filter = Filter(data={'date_from': '2020-01-02T00:00:00Z', 'date_to': '2020-01-12T00:00:00Z', 'breakdown': '$browser', 'breakdown_type': 'person', 'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'math': 'sum', 'math_property': '$session_duration'}]})\n    (aggregate_operation, _, _) = process_math(filter.entities[0], self.team, filter=filter)\n    result = get_breakdown_prop_values(filter, filter.entities[0], aggregate_operation, self.team)\n    self.assertEqual(result, ['test', 'mac'])\n    result = get_breakdown_prop_values(filter, filter.entities[0], 'count(*)', self.team)\n    self.assertEqual(result, ['mac', 'test'])",
            "@snapshot_clickhouse_queries\ndef test_breakdown_with_math_property_session(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    _create_person(team_id=self.team.pk, distinct_ids=['p1'], properties={'$browser': 'test', '$os': 'test'})\n    _create_person(team_id=self.team.pk, distinct_ids=['p2'], properties={'$browser': 'mac', '$os': 'test'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p1', timestamp='2020-01-01T23:59:50Z', properties={'$session_id': '1'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p1', timestamp='2020-01-02T00:00:10Z', properties={'$session_id': '1'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p1', timestamp='2020-01-02T12:00:00Z', properties={'$session_id': '2'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p1', timestamp='2020-01-02T12:01:10Z', properties={'$session_id': '2'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p2', timestamp='2020-01-02T12:00:00Z', properties={'$session_id': '3'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p2', timestamp='2020-01-02T12:00:01Z', properties={'$session_id': '3'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p2', timestamp='2020-01-02T12:00:02Z', properties={'$session_id': '3'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p2', timestamp='2020-01-02T12:00:03Z', properties={'$session_id': '3'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p2', timestamp='2020-01-02T12:00:04Z', properties={'$session_id': '3'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p2', timestamp='2020-01-02T12:00:10Z', properties={'$session_id': '3'})\n    filter = Filter(data={'date_from': '2020-01-02T00:00:00Z', 'date_to': '2020-01-12T00:00:00Z', 'breakdown': '$browser', 'breakdown_type': 'person', 'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'math': 'sum', 'math_property': '$session_duration'}]})\n    (aggregate_operation, _, _) = process_math(filter.entities[0], self.team, filter=filter)\n    result = get_breakdown_prop_values(filter, filter.entities[0], aggregate_operation, self.team)\n    self.assertEqual(result, ['test', 'mac'])\n    result = get_breakdown_prop_values(filter, filter.entities[0], 'count(*)', self.team)\n    self.assertEqual(result, ['mac', 'test'])",
            "@snapshot_clickhouse_queries\ndef test_breakdown_with_math_property_session(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    _create_person(team_id=self.team.pk, distinct_ids=['p1'], properties={'$browser': 'test', '$os': 'test'})\n    _create_person(team_id=self.team.pk, distinct_ids=['p2'], properties={'$browser': 'mac', '$os': 'test'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p1', timestamp='2020-01-01T23:59:50Z', properties={'$session_id': '1'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p1', timestamp='2020-01-02T00:00:10Z', properties={'$session_id': '1'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p1', timestamp='2020-01-02T12:00:00Z', properties={'$session_id': '2'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p1', timestamp='2020-01-02T12:01:10Z', properties={'$session_id': '2'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p2', timestamp='2020-01-02T12:00:00Z', properties={'$session_id': '3'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p2', timestamp='2020-01-02T12:00:01Z', properties={'$session_id': '3'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p2', timestamp='2020-01-02T12:00:02Z', properties={'$session_id': '3'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p2', timestamp='2020-01-02T12:00:03Z', properties={'$session_id': '3'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p2', timestamp='2020-01-02T12:00:04Z', properties={'$session_id': '3'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p2', timestamp='2020-01-02T12:00:10Z', properties={'$session_id': '3'})\n    filter = Filter(data={'date_from': '2020-01-02T00:00:00Z', 'date_to': '2020-01-12T00:00:00Z', 'breakdown': '$browser', 'breakdown_type': 'person', 'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'math': 'sum', 'math_property': '$session_duration'}]})\n    (aggregate_operation, _, _) = process_math(filter.entities[0], self.team, filter=filter)\n    result = get_breakdown_prop_values(filter, filter.entities[0], aggregate_operation, self.team)\n    self.assertEqual(result, ['test', 'mac'])\n    result = get_breakdown_prop_values(filter, filter.entities[0], 'count(*)', self.team)\n    self.assertEqual(result, ['mac', 'test'])",
            "@snapshot_clickhouse_queries\ndef test_breakdown_with_math_property_session(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    _create_person(team_id=self.team.pk, distinct_ids=['p1'], properties={'$browser': 'test', '$os': 'test'})\n    _create_person(team_id=self.team.pk, distinct_ids=['p2'], properties={'$browser': 'mac', '$os': 'test'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p1', timestamp='2020-01-01T23:59:50Z', properties={'$session_id': '1'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p1', timestamp='2020-01-02T00:00:10Z', properties={'$session_id': '1'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p1', timestamp='2020-01-02T12:00:00Z', properties={'$session_id': '2'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p1', timestamp='2020-01-02T12:01:10Z', properties={'$session_id': '2'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p2', timestamp='2020-01-02T12:00:00Z', properties={'$session_id': '3'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p2', timestamp='2020-01-02T12:00:01Z', properties={'$session_id': '3'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p2', timestamp='2020-01-02T12:00:02Z', properties={'$session_id': '3'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p2', timestamp='2020-01-02T12:00:03Z', properties={'$session_id': '3'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p2', timestamp='2020-01-02T12:00:04Z', properties={'$session_id': '3'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p2', timestamp='2020-01-02T12:00:10Z', properties={'$session_id': '3'})\n    filter = Filter(data={'date_from': '2020-01-02T00:00:00Z', 'date_to': '2020-01-12T00:00:00Z', 'breakdown': '$browser', 'breakdown_type': 'person', 'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'math': 'sum', 'math_property': '$session_duration'}]})\n    (aggregate_operation, _, _) = process_math(filter.entities[0], self.team, filter=filter)\n    result = get_breakdown_prop_values(filter, filter.entities[0], aggregate_operation, self.team)\n    self.assertEqual(result, ['test', 'mac'])\n    result = get_breakdown_prop_values(filter, filter.entities[0], 'count(*)', self.team)\n    self.assertEqual(result, ['mac', 'test'])",
            "@snapshot_clickhouse_queries\ndef test_breakdown_with_math_property_session(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    _create_person(team_id=self.team.pk, distinct_ids=['p1'], properties={'$browser': 'test', '$os': 'test'})\n    _create_person(team_id=self.team.pk, distinct_ids=['p2'], properties={'$browser': 'mac', '$os': 'test'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p1', timestamp='2020-01-01T23:59:50Z', properties={'$session_id': '1'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p1', timestamp='2020-01-02T00:00:10Z', properties={'$session_id': '1'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p1', timestamp='2020-01-02T12:00:00Z', properties={'$session_id': '2'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p1', timestamp='2020-01-02T12:01:10Z', properties={'$session_id': '2'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p2', timestamp='2020-01-02T12:00:00Z', properties={'$session_id': '3'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p2', timestamp='2020-01-02T12:00:01Z', properties={'$session_id': '3'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p2', timestamp='2020-01-02T12:00:02Z', properties={'$session_id': '3'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p2', timestamp='2020-01-02T12:00:03Z', properties={'$session_id': '3'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p2', timestamp='2020-01-02T12:00:04Z', properties={'$session_id': '3'})\n    _create_event(team=self.team, event='$pageview', distinct_id='p2', timestamp='2020-01-02T12:00:10Z', properties={'$session_id': '3'})\n    filter = Filter(data={'date_from': '2020-01-02T00:00:00Z', 'date_to': '2020-01-12T00:00:00Z', 'breakdown': '$browser', 'breakdown_type': 'person', 'events': [{'id': '$pageview', 'type': 'events', 'order': 0, 'math': 'sum', 'math_property': '$session_duration'}]})\n    (aggregate_operation, _, _) = process_math(filter.entities[0], self.team, filter=filter)\n    result = get_breakdown_prop_values(filter, filter.entities[0], aggregate_operation, self.team)\n    self.assertEqual(result, ['test', 'mac'])\n    result = get_breakdown_prop_values(filter, filter.entities[0], 'count(*)', self.team)\n    self.assertEqual(result, ['mac', 'test'])"
        ]
    },
    {
        "func_name": "test_bucketing_expression",
        "original": "@pytest.mark.parametrize('test_input,expected', [(0, 'arrayCompact(arrayMap(x -> floor(x, 2), quantiles(0,1)(value)))'), (1, 'arrayCompact(arrayMap(x -> floor(x, 2), quantiles(0,1)(value)))'), (2, 'arrayCompact(arrayMap(x -> floor(x, 2), quantiles(0.00,0.50,1.00)(value)))'), (3, 'arrayCompact(arrayMap(x -> floor(x, 2), quantiles(0.00,0.33,0.67,1.00)(value)))'), (5, 'arrayCompact(arrayMap(x -> floor(x, 2), quantiles(0.00,0.20,0.40,0.60,0.80,1.00)(value)))'), (7, 'arrayCompact(arrayMap(x -> floor(x, 2), quantiles(0.00,0.14,0.29,0.43,0.57,0.71,0.86,1.00)(value)))'), (10, 'arrayCompact(arrayMap(x -> floor(x, 2), quantiles(0.00,0.10,0.20,0.30,0.40,0.50,0.60,0.70,0.80,0.90,1.00)(value)))')])\ndef test_bucketing_expression(test_input, expected):\n    result = _to_bucketing_expression(test_input)\n    assert result == expected",
        "mutated": [
            "@pytest.mark.parametrize('test_input,expected', [(0, 'arrayCompact(arrayMap(x -> floor(x, 2), quantiles(0,1)(value)))'), (1, 'arrayCompact(arrayMap(x -> floor(x, 2), quantiles(0,1)(value)))'), (2, 'arrayCompact(arrayMap(x -> floor(x, 2), quantiles(0.00,0.50,1.00)(value)))'), (3, 'arrayCompact(arrayMap(x -> floor(x, 2), quantiles(0.00,0.33,0.67,1.00)(value)))'), (5, 'arrayCompact(arrayMap(x -> floor(x, 2), quantiles(0.00,0.20,0.40,0.60,0.80,1.00)(value)))'), (7, 'arrayCompact(arrayMap(x -> floor(x, 2), quantiles(0.00,0.14,0.29,0.43,0.57,0.71,0.86,1.00)(value)))'), (10, 'arrayCompact(arrayMap(x -> floor(x, 2), quantiles(0.00,0.10,0.20,0.30,0.40,0.50,0.60,0.70,0.80,0.90,1.00)(value)))')])\ndef test_bucketing_expression(test_input, expected):\n    if False:\n        i = 10\n    result = _to_bucketing_expression(test_input)\n    assert result == expected",
            "@pytest.mark.parametrize('test_input,expected', [(0, 'arrayCompact(arrayMap(x -> floor(x, 2), quantiles(0,1)(value)))'), (1, 'arrayCompact(arrayMap(x -> floor(x, 2), quantiles(0,1)(value)))'), (2, 'arrayCompact(arrayMap(x -> floor(x, 2), quantiles(0.00,0.50,1.00)(value)))'), (3, 'arrayCompact(arrayMap(x -> floor(x, 2), quantiles(0.00,0.33,0.67,1.00)(value)))'), (5, 'arrayCompact(arrayMap(x -> floor(x, 2), quantiles(0.00,0.20,0.40,0.60,0.80,1.00)(value)))'), (7, 'arrayCompact(arrayMap(x -> floor(x, 2), quantiles(0.00,0.14,0.29,0.43,0.57,0.71,0.86,1.00)(value)))'), (10, 'arrayCompact(arrayMap(x -> floor(x, 2), quantiles(0.00,0.10,0.20,0.30,0.40,0.50,0.60,0.70,0.80,0.90,1.00)(value)))')])\ndef test_bucketing_expression(test_input, expected):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    result = _to_bucketing_expression(test_input)\n    assert result == expected",
            "@pytest.mark.parametrize('test_input,expected', [(0, 'arrayCompact(arrayMap(x -> floor(x, 2), quantiles(0,1)(value)))'), (1, 'arrayCompact(arrayMap(x -> floor(x, 2), quantiles(0,1)(value)))'), (2, 'arrayCompact(arrayMap(x -> floor(x, 2), quantiles(0.00,0.50,1.00)(value)))'), (3, 'arrayCompact(arrayMap(x -> floor(x, 2), quantiles(0.00,0.33,0.67,1.00)(value)))'), (5, 'arrayCompact(arrayMap(x -> floor(x, 2), quantiles(0.00,0.20,0.40,0.60,0.80,1.00)(value)))'), (7, 'arrayCompact(arrayMap(x -> floor(x, 2), quantiles(0.00,0.14,0.29,0.43,0.57,0.71,0.86,1.00)(value)))'), (10, 'arrayCompact(arrayMap(x -> floor(x, 2), quantiles(0.00,0.10,0.20,0.30,0.40,0.50,0.60,0.70,0.80,0.90,1.00)(value)))')])\ndef test_bucketing_expression(test_input, expected):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    result = _to_bucketing_expression(test_input)\n    assert result == expected",
            "@pytest.mark.parametrize('test_input,expected', [(0, 'arrayCompact(arrayMap(x -> floor(x, 2), quantiles(0,1)(value)))'), (1, 'arrayCompact(arrayMap(x -> floor(x, 2), quantiles(0,1)(value)))'), (2, 'arrayCompact(arrayMap(x -> floor(x, 2), quantiles(0.00,0.50,1.00)(value)))'), (3, 'arrayCompact(arrayMap(x -> floor(x, 2), quantiles(0.00,0.33,0.67,1.00)(value)))'), (5, 'arrayCompact(arrayMap(x -> floor(x, 2), quantiles(0.00,0.20,0.40,0.60,0.80,1.00)(value)))'), (7, 'arrayCompact(arrayMap(x -> floor(x, 2), quantiles(0.00,0.14,0.29,0.43,0.57,0.71,0.86,1.00)(value)))'), (10, 'arrayCompact(arrayMap(x -> floor(x, 2), quantiles(0.00,0.10,0.20,0.30,0.40,0.50,0.60,0.70,0.80,0.90,1.00)(value)))')])\ndef test_bucketing_expression(test_input, expected):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    result = _to_bucketing_expression(test_input)\n    assert result == expected",
            "@pytest.mark.parametrize('test_input,expected', [(0, 'arrayCompact(arrayMap(x -> floor(x, 2), quantiles(0,1)(value)))'), (1, 'arrayCompact(arrayMap(x -> floor(x, 2), quantiles(0,1)(value)))'), (2, 'arrayCompact(arrayMap(x -> floor(x, 2), quantiles(0.00,0.50,1.00)(value)))'), (3, 'arrayCompact(arrayMap(x -> floor(x, 2), quantiles(0.00,0.33,0.67,1.00)(value)))'), (5, 'arrayCompact(arrayMap(x -> floor(x, 2), quantiles(0.00,0.20,0.40,0.60,0.80,1.00)(value)))'), (7, 'arrayCompact(arrayMap(x -> floor(x, 2), quantiles(0.00,0.14,0.29,0.43,0.57,0.71,0.86,1.00)(value)))'), (10, 'arrayCompact(arrayMap(x -> floor(x, 2), quantiles(0.00,0.10,0.20,0.30,0.40,0.50,0.60,0.70,0.80,0.90,1.00)(value)))')])\ndef test_bucketing_expression(test_input, expected):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    result = _to_bucketing_expression(test_input)\n    assert result == expected"
        ]
    }
]
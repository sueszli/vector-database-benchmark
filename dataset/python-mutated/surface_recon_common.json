[
    {
        "func_name": "__init__",
        "original": "def __init__(self, model_dir, network_cfg, **kwargs):\n    \"\"\"initialize the surface reconstruction model for common objects.\n\n        Args:\n            model_dir (str): the model path.\n            network_cfg (dict): args of network config\n        \"\"\"\n    super().__init__(model_dir, **kwargs)\n    logger.info('model params:{}'.format(kwargs))\n    if torch.cuda.is_available():\n        self.device = torch.device('cuda')\n    else:\n        raise Exception('GPU is required')\n    logger.info(network_cfg)\n    self.renderer = SurfaceRenderer(network_cfg, device=self.device)\n    self.ckpt_path = os.path.join(model_dir, 'model.pth')\n    if not os.path.exists(self.ckpt_path):\n        raise Exception('model path not found')\n    self.load_checkpoint(self.ckpt_path)\n    logger.info('load models from %s' % self.ckpt_path)\n    self.n_rays = network_cfg['n_rays']",
        "mutated": [
            "def __init__(self, model_dir, network_cfg, **kwargs):\n    if False:\n        i = 10\n    'initialize the surface reconstruction model for common objects.\\n\\n        Args:\\n            model_dir (str): the model path.\\n            network_cfg (dict): args of network config\\n        '\n    super().__init__(model_dir, **kwargs)\n    logger.info('model params:{}'.format(kwargs))\n    if torch.cuda.is_available():\n        self.device = torch.device('cuda')\n    else:\n        raise Exception('GPU is required')\n    logger.info(network_cfg)\n    self.renderer = SurfaceRenderer(network_cfg, device=self.device)\n    self.ckpt_path = os.path.join(model_dir, 'model.pth')\n    if not os.path.exists(self.ckpt_path):\n        raise Exception('model path not found')\n    self.load_checkpoint(self.ckpt_path)\n    logger.info('load models from %s' % self.ckpt_path)\n    self.n_rays = network_cfg['n_rays']",
            "def __init__(self, model_dir, network_cfg, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'initialize the surface reconstruction model for common objects.\\n\\n        Args:\\n            model_dir (str): the model path.\\n            network_cfg (dict): args of network config\\n        '\n    super().__init__(model_dir, **kwargs)\n    logger.info('model params:{}'.format(kwargs))\n    if torch.cuda.is_available():\n        self.device = torch.device('cuda')\n    else:\n        raise Exception('GPU is required')\n    logger.info(network_cfg)\n    self.renderer = SurfaceRenderer(network_cfg, device=self.device)\n    self.ckpt_path = os.path.join(model_dir, 'model.pth')\n    if not os.path.exists(self.ckpt_path):\n        raise Exception('model path not found')\n    self.load_checkpoint(self.ckpt_path)\n    logger.info('load models from %s' % self.ckpt_path)\n    self.n_rays = network_cfg['n_rays']",
            "def __init__(self, model_dir, network_cfg, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'initialize the surface reconstruction model for common objects.\\n\\n        Args:\\n            model_dir (str): the model path.\\n            network_cfg (dict): args of network config\\n        '\n    super().__init__(model_dir, **kwargs)\n    logger.info('model params:{}'.format(kwargs))\n    if torch.cuda.is_available():\n        self.device = torch.device('cuda')\n    else:\n        raise Exception('GPU is required')\n    logger.info(network_cfg)\n    self.renderer = SurfaceRenderer(network_cfg, device=self.device)\n    self.ckpt_path = os.path.join(model_dir, 'model.pth')\n    if not os.path.exists(self.ckpt_path):\n        raise Exception('model path not found')\n    self.load_checkpoint(self.ckpt_path)\n    logger.info('load models from %s' % self.ckpt_path)\n    self.n_rays = network_cfg['n_rays']",
            "def __init__(self, model_dir, network_cfg, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'initialize the surface reconstruction model for common objects.\\n\\n        Args:\\n            model_dir (str): the model path.\\n            network_cfg (dict): args of network config\\n        '\n    super().__init__(model_dir, **kwargs)\n    logger.info('model params:{}'.format(kwargs))\n    if torch.cuda.is_available():\n        self.device = torch.device('cuda')\n    else:\n        raise Exception('GPU is required')\n    logger.info(network_cfg)\n    self.renderer = SurfaceRenderer(network_cfg, device=self.device)\n    self.ckpt_path = os.path.join(model_dir, 'model.pth')\n    if not os.path.exists(self.ckpt_path):\n        raise Exception('model path not found')\n    self.load_checkpoint(self.ckpt_path)\n    logger.info('load models from %s' % self.ckpt_path)\n    self.n_rays = network_cfg['n_rays']",
            "def __init__(self, model_dir, network_cfg, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'initialize the surface reconstruction model for common objects.\\n\\n        Args:\\n            model_dir (str): the model path.\\n            network_cfg (dict): args of network config\\n        '\n    super().__init__(model_dir, **kwargs)\n    logger.info('model params:{}'.format(kwargs))\n    if torch.cuda.is_available():\n        self.device = torch.device('cuda')\n    else:\n        raise Exception('GPU is required')\n    logger.info(network_cfg)\n    self.renderer = SurfaceRenderer(network_cfg, device=self.device)\n    self.ckpt_path = os.path.join(model_dir, 'model.pth')\n    if not os.path.exists(self.ckpt_path):\n        raise Exception('model path not found')\n    self.load_checkpoint(self.ckpt_path)\n    logger.info('load models from %s' % self.ckpt_path)\n    self.n_rays = network_cfg['n_rays']"
        ]
    },
    {
        "func_name": "load_checkpoint",
        "original": "def load_checkpoint(self, ckpt_path):\n    checkpoint = torch.load(ckpt_path, map_location=self.device)\n    for (name, module) in self.renderer.named_modules():\n        saved_name = name + '_fine'\n        if saved_name in checkpoint:\n            module.load_state_dict(checkpoint[saved_name])",
        "mutated": [
            "def load_checkpoint(self, ckpt_path):\n    if False:\n        i = 10\n    checkpoint = torch.load(ckpt_path, map_location=self.device)\n    for (name, module) in self.renderer.named_modules():\n        saved_name = name + '_fine'\n        if saved_name in checkpoint:\n            module.load_state_dict(checkpoint[saved_name])",
            "def load_checkpoint(self, ckpt_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    checkpoint = torch.load(ckpt_path, map_location=self.device)\n    for (name, module) in self.renderer.named_modules():\n        saved_name = name + '_fine'\n        if saved_name in checkpoint:\n            module.load_state_dict(checkpoint[saved_name])",
            "def load_checkpoint(self, ckpt_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    checkpoint = torch.load(ckpt_path, map_location=self.device)\n    for (name, module) in self.renderer.named_modules():\n        saved_name = name + '_fine'\n        if saved_name in checkpoint:\n            module.load_state_dict(checkpoint[saved_name])",
            "def load_checkpoint(self, ckpt_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    checkpoint = torch.load(ckpt_path, map_location=self.device)\n    for (name, module) in self.renderer.named_modules():\n        saved_name = name + '_fine'\n        if saved_name in checkpoint:\n            module.load_state_dict(checkpoint[saved_name])",
            "def load_checkpoint(self, ckpt_path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    checkpoint = torch.load(ckpt_path, map_location=self.device)\n    for (name, module) in self.renderer.named_modules():\n        saved_name = name + '_fine'\n        if saved_name in checkpoint:\n            module.load_state_dict(checkpoint[saved_name])"
        ]
    },
    {
        "func_name": "surface_reconstruction",
        "original": "def surface_reconstruction(self, data_dir, save_dir, color=False, n_directions=8):\n    self.dataset = Dataset(data_dir, self.device)\n    bound_min = torch.tensor(self.dataset.object_bbox_min, dtype=torch.float32).to(self.device)\n    bound_max = torch.tensor(self.dataset.object_bbox_max, dtype=torch.float32).to(self.device)\n    (vertices, triangles) = self.renderer.extract_geometry(bound_min, bound_max, resolution=512, threshold=0.0, device=self.device)\n    if color:\n        pt_vertices = torch.from_numpy(vertices).cuda().reshape(-1, 1, 3).float()\n        idx_list = np.linspace(0, self.dataset.n_images, n_directions, endpoint=False, dtype=int)\n        rays_o_list = []\n        for idx in idx_list:\n            rays_o = self.dataset.pose_all[idx, :3, 3]\n            rays_o_list.append(rays_o)\n        rgb_final = None\n        diff_final = None\n        for rays_o in rays_o_list:\n            rays_o = rays_o.reshape(1, 3).repeat(vertices.shape[0], 1).float()\n            rays_d = pt_vertices.reshape(-1, 3) - rays_o\n            rays_d = rays_d / torch.norm(rays_d, dim=-1).reshape(-1, 1)\n            dist = torch.norm(pt_vertices.reshape(-1, 3) - rays_o, dim=-1)\n            rays_o = rays_o.reshape(-1, 3).split(self.n_rays)\n            rays_d = rays_d.reshape(-1, 3).split(self.n_rays)\n            dist = dist.reshape(-1).split(self.n_rays)\n            out_rgb_fine = []\n            depth_diff = []\n            for (i, (rays_o_batch, rays_d_batch)) in enumerate(zip(rays_o, rays_d)):\n                (near, far) = self.dataset.near_far_from_sphere(rays_o_batch, rays_d_batch)\n                render_out = self.renderer.render(rays_o_batch, rays_d_batch, near, far, cos_anneal_ratio=1.0, background_rgb=None)\n                out_rgb_fine.append(render_out['albedo_fine'].detach().cpu().numpy())\n                weights = render_out['weights']\n                mid_z_vals = render_out['mid_z_vals']\n                n_samples = self.renderer.n_samples + self.renderer.n_importance\n                depth_batch = (mid_z_vals[:, :n_samples] * weights[:, :n_samples]).sum(dim=1).detach().cpu().numpy()\n                dist_batch = dist[i].detach().cpu().numpy()\n                depth_diff.append(np.abs(depth_batch - dist_batch))\n                del render_out\n            out_rgb_fine = np.concatenate(out_rgb_fine, axis=0).reshape(vertices.shape[0], 3)\n            depth_diff = np.concatenate(depth_diff, axis=0).reshape(vertices.shape[0])\n            if rgb_final is None:\n                rgb_final = out_rgb_fine.copy()\n                diff_final = depth_diff.copy()\n            else:\n                ind = diff_final > depth_diff\n                ind = ind.reshape(-1)\n                rgb_final[ind] = out_rgb_fine[ind]\n                diff_final[ind] = depth_diff[ind]\n    vertices = vertices * self.dataset.scale_mats_np[0][0, 0] + self.dataset.scale_mats_np[0][:3, 3][None]\n    if color:\n        logger.info('save mesh with color')\n        vert_colors = (255 * np.clip(rgb_final[..., ::-1], 0, 1)).astype(np.uint8)\n        mesh = trimesh.Trimesh(vertices, triangles, vertex_colors=vert_colors)\n    else:\n        mesh = trimesh.Trimesh(vertices, triangles)\n    outpath = os.path.join(save_dir, 'mesh.ply')\n    mesh.export(outpath)\n    logger.info('surface econstruction done, export mesh to %s' % outpath)",
        "mutated": [
            "def surface_reconstruction(self, data_dir, save_dir, color=False, n_directions=8):\n    if False:\n        i = 10\n    self.dataset = Dataset(data_dir, self.device)\n    bound_min = torch.tensor(self.dataset.object_bbox_min, dtype=torch.float32).to(self.device)\n    bound_max = torch.tensor(self.dataset.object_bbox_max, dtype=torch.float32).to(self.device)\n    (vertices, triangles) = self.renderer.extract_geometry(bound_min, bound_max, resolution=512, threshold=0.0, device=self.device)\n    if color:\n        pt_vertices = torch.from_numpy(vertices).cuda().reshape(-1, 1, 3).float()\n        idx_list = np.linspace(0, self.dataset.n_images, n_directions, endpoint=False, dtype=int)\n        rays_o_list = []\n        for idx in idx_list:\n            rays_o = self.dataset.pose_all[idx, :3, 3]\n            rays_o_list.append(rays_o)\n        rgb_final = None\n        diff_final = None\n        for rays_o in rays_o_list:\n            rays_o = rays_o.reshape(1, 3).repeat(vertices.shape[0], 1).float()\n            rays_d = pt_vertices.reshape(-1, 3) - rays_o\n            rays_d = rays_d / torch.norm(rays_d, dim=-1).reshape(-1, 1)\n            dist = torch.norm(pt_vertices.reshape(-1, 3) - rays_o, dim=-1)\n            rays_o = rays_o.reshape(-1, 3).split(self.n_rays)\n            rays_d = rays_d.reshape(-1, 3).split(self.n_rays)\n            dist = dist.reshape(-1).split(self.n_rays)\n            out_rgb_fine = []\n            depth_diff = []\n            for (i, (rays_o_batch, rays_d_batch)) in enumerate(zip(rays_o, rays_d)):\n                (near, far) = self.dataset.near_far_from_sphere(rays_o_batch, rays_d_batch)\n                render_out = self.renderer.render(rays_o_batch, rays_d_batch, near, far, cos_anneal_ratio=1.0, background_rgb=None)\n                out_rgb_fine.append(render_out['albedo_fine'].detach().cpu().numpy())\n                weights = render_out['weights']\n                mid_z_vals = render_out['mid_z_vals']\n                n_samples = self.renderer.n_samples + self.renderer.n_importance\n                depth_batch = (mid_z_vals[:, :n_samples] * weights[:, :n_samples]).sum(dim=1).detach().cpu().numpy()\n                dist_batch = dist[i].detach().cpu().numpy()\n                depth_diff.append(np.abs(depth_batch - dist_batch))\n                del render_out\n            out_rgb_fine = np.concatenate(out_rgb_fine, axis=0).reshape(vertices.shape[0], 3)\n            depth_diff = np.concatenate(depth_diff, axis=0).reshape(vertices.shape[0])\n            if rgb_final is None:\n                rgb_final = out_rgb_fine.copy()\n                diff_final = depth_diff.copy()\n            else:\n                ind = diff_final > depth_diff\n                ind = ind.reshape(-1)\n                rgb_final[ind] = out_rgb_fine[ind]\n                diff_final[ind] = depth_diff[ind]\n    vertices = vertices * self.dataset.scale_mats_np[0][0, 0] + self.dataset.scale_mats_np[0][:3, 3][None]\n    if color:\n        logger.info('save mesh with color')\n        vert_colors = (255 * np.clip(rgb_final[..., ::-1], 0, 1)).astype(np.uint8)\n        mesh = trimesh.Trimesh(vertices, triangles, vertex_colors=vert_colors)\n    else:\n        mesh = trimesh.Trimesh(vertices, triangles)\n    outpath = os.path.join(save_dir, 'mesh.ply')\n    mesh.export(outpath)\n    logger.info('surface econstruction done, export mesh to %s' % outpath)",
            "def surface_reconstruction(self, data_dir, save_dir, color=False, n_directions=8):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.dataset = Dataset(data_dir, self.device)\n    bound_min = torch.tensor(self.dataset.object_bbox_min, dtype=torch.float32).to(self.device)\n    bound_max = torch.tensor(self.dataset.object_bbox_max, dtype=torch.float32).to(self.device)\n    (vertices, triangles) = self.renderer.extract_geometry(bound_min, bound_max, resolution=512, threshold=0.0, device=self.device)\n    if color:\n        pt_vertices = torch.from_numpy(vertices).cuda().reshape(-1, 1, 3).float()\n        idx_list = np.linspace(0, self.dataset.n_images, n_directions, endpoint=False, dtype=int)\n        rays_o_list = []\n        for idx in idx_list:\n            rays_o = self.dataset.pose_all[idx, :3, 3]\n            rays_o_list.append(rays_o)\n        rgb_final = None\n        diff_final = None\n        for rays_o in rays_o_list:\n            rays_o = rays_o.reshape(1, 3).repeat(vertices.shape[0], 1).float()\n            rays_d = pt_vertices.reshape(-1, 3) - rays_o\n            rays_d = rays_d / torch.norm(rays_d, dim=-1).reshape(-1, 1)\n            dist = torch.norm(pt_vertices.reshape(-1, 3) - rays_o, dim=-1)\n            rays_o = rays_o.reshape(-1, 3).split(self.n_rays)\n            rays_d = rays_d.reshape(-1, 3).split(self.n_rays)\n            dist = dist.reshape(-1).split(self.n_rays)\n            out_rgb_fine = []\n            depth_diff = []\n            for (i, (rays_o_batch, rays_d_batch)) in enumerate(zip(rays_o, rays_d)):\n                (near, far) = self.dataset.near_far_from_sphere(rays_o_batch, rays_d_batch)\n                render_out = self.renderer.render(rays_o_batch, rays_d_batch, near, far, cos_anneal_ratio=1.0, background_rgb=None)\n                out_rgb_fine.append(render_out['albedo_fine'].detach().cpu().numpy())\n                weights = render_out['weights']\n                mid_z_vals = render_out['mid_z_vals']\n                n_samples = self.renderer.n_samples + self.renderer.n_importance\n                depth_batch = (mid_z_vals[:, :n_samples] * weights[:, :n_samples]).sum(dim=1).detach().cpu().numpy()\n                dist_batch = dist[i].detach().cpu().numpy()\n                depth_diff.append(np.abs(depth_batch - dist_batch))\n                del render_out\n            out_rgb_fine = np.concatenate(out_rgb_fine, axis=0).reshape(vertices.shape[0], 3)\n            depth_diff = np.concatenate(depth_diff, axis=0).reshape(vertices.shape[0])\n            if rgb_final is None:\n                rgb_final = out_rgb_fine.copy()\n                diff_final = depth_diff.copy()\n            else:\n                ind = diff_final > depth_diff\n                ind = ind.reshape(-1)\n                rgb_final[ind] = out_rgb_fine[ind]\n                diff_final[ind] = depth_diff[ind]\n    vertices = vertices * self.dataset.scale_mats_np[0][0, 0] + self.dataset.scale_mats_np[0][:3, 3][None]\n    if color:\n        logger.info('save mesh with color')\n        vert_colors = (255 * np.clip(rgb_final[..., ::-1], 0, 1)).astype(np.uint8)\n        mesh = trimesh.Trimesh(vertices, triangles, vertex_colors=vert_colors)\n    else:\n        mesh = trimesh.Trimesh(vertices, triangles)\n    outpath = os.path.join(save_dir, 'mesh.ply')\n    mesh.export(outpath)\n    logger.info('surface econstruction done, export mesh to %s' % outpath)",
            "def surface_reconstruction(self, data_dir, save_dir, color=False, n_directions=8):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.dataset = Dataset(data_dir, self.device)\n    bound_min = torch.tensor(self.dataset.object_bbox_min, dtype=torch.float32).to(self.device)\n    bound_max = torch.tensor(self.dataset.object_bbox_max, dtype=torch.float32).to(self.device)\n    (vertices, triangles) = self.renderer.extract_geometry(bound_min, bound_max, resolution=512, threshold=0.0, device=self.device)\n    if color:\n        pt_vertices = torch.from_numpy(vertices).cuda().reshape(-1, 1, 3).float()\n        idx_list = np.linspace(0, self.dataset.n_images, n_directions, endpoint=False, dtype=int)\n        rays_o_list = []\n        for idx in idx_list:\n            rays_o = self.dataset.pose_all[idx, :3, 3]\n            rays_o_list.append(rays_o)\n        rgb_final = None\n        diff_final = None\n        for rays_o in rays_o_list:\n            rays_o = rays_o.reshape(1, 3).repeat(vertices.shape[0], 1).float()\n            rays_d = pt_vertices.reshape(-1, 3) - rays_o\n            rays_d = rays_d / torch.norm(rays_d, dim=-1).reshape(-1, 1)\n            dist = torch.norm(pt_vertices.reshape(-1, 3) - rays_o, dim=-1)\n            rays_o = rays_o.reshape(-1, 3).split(self.n_rays)\n            rays_d = rays_d.reshape(-1, 3).split(self.n_rays)\n            dist = dist.reshape(-1).split(self.n_rays)\n            out_rgb_fine = []\n            depth_diff = []\n            for (i, (rays_o_batch, rays_d_batch)) in enumerate(zip(rays_o, rays_d)):\n                (near, far) = self.dataset.near_far_from_sphere(rays_o_batch, rays_d_batch)\n                render_out = self.renderer.render(rays_o_batch, rays_d_batch, near, far, cos_anneal_ratio=1.0, background_rgb=None)\n                out_rgb_fine.append(render_out['albedo_fine'].detach().cpu().numpy())\n                weights = render_out['weights']\n                mid_z_vals = render_out['mid_z_vals']\n                n_samples = self.renderer.n_samples + self.renderer.n_importance\n                depth_batch = (mid_z_vals[:, :n_samples] * weights[:, :n_samples]).sum(dim=1).detach().cpu().numpy()\n                dist_batch = dist[i].detach().cpu().numpy()\n                depth_diff.append(np.abs(depth_batch - dist_batch))\n                del render_out\n            out_rgb_fine = np.concatenate(out_rgb_fine, axis=0).reshape(vertices.shape[0], 3)\n            depth_diff = np.concatenate(depth_diff, axis=0).reshape(vertices.shape[0])\n            if rgb_final is None:\n                rgb_final = out_rgb_fine.copy()\n                diff_final = depth_diff.copy()\n            else:\n                ind = diff_final > depth_diff\n                ind = ind.reshape(-1)\n                rgb_final[ind] = out_rgb_fine[ind]\n                diff_final[ind] = depth_diff[ind]\n    vertices = vertices * self.dataset.scale_mats_np[0][0, 0] + self.dataset.scale_mats_np[0][:3, 3][None]\n    if color:\n        logger.info('save mesh with color')\n        vert_colors = (255 * np.clip(rgb_final[..., ::-1], 0, 1)).astype(np.uint8)\n        mesh = trimesh.Trimesh(vertices, triangles, vertex_colors=vert_colors)\n    else:\n        mesh = trimesh.Trimesh(vertices, triangles)\n    outpath = os.path.join(save_dir, 'mesh.ply')\n    mesh.export(outpath)\n    logger.info('surface econstruction done, export mesh to %s' % outpath)",
            "def surface_reconstruction(self, data_dir, save_dir, color=False, n_directions=8):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.dataset = Dataset(data_dir, self.device)\n    bound_min = torch.tensor(self.dataset.object_bbox_min, dtype=torch.float32).to(self.device)\n    bound_max = torch.tensor(self.dataset.object_bbox_max, dtype=torch.float32).to(self.device)\n    (vertices, triangles) = self.renderer.extract_geometry(bound_min, bound_max, resolution=512, threshold=0.0, device=self.device)\n    if color:\n        pt_vertices = torch.from_numpy(vertices).cuda().reshape(-1, 1, 3).float()\n        idx_list = np.linspace(0, self.dataset.n_images, n_directions, endpoint=False, dtype=int)\n        rays_o_list = []\n        for idx in idx_list:\n            rays_o = self.dataset.pose_all[idx, :3, 3]\n            rays_o_list.append(rays_o)\n        rgb_final = None\n        diff_final = None\n        for rays_o in rays_o_list:\n            rays_o = rays_o.reshape(1, 3).repeat(vertices.shape[0], 1).float()\n            rays_d = pt_vertices.reshape(-1, 3) - rays_o\n            rays_d = rays_d / torch.norm(rays_d, dim=-1).reshape(-1, 1)\n            dist = torch.norm(pt_vertices.reshape(-1, 3) - rays_o, dim=-1)\n            rays_o = rays_o.reshape(-1, 3).split(self.n_rays)\n            rays_d = rays_d.reshape(-1, 3).split(self.n_rays)\n            dist = dist.reshape(-1).split(self.n_rays)\n            out_rgb_fine = []\n            depth_diff = []\n            for (i, (rays_o_batch, rays_d_batch)) in enumerate(zip(rays_o, rays_d)):\n                (near, far) = self.dataset.near_far_from_sphere(rays_o_batch, rays_d_batch)\n                render_out = self.renderer.render(rays_o_batch, rays_d_batch, near, far, cos_anneal_ratio=1.0, background_rgb=None)\n                out_rgb_fine.append(render_out['albedo_fine'].detach().cpu().numpy())\n                weights = render_out['weights']\n                mid_z_vals = render_out['mid_z_vals']\n                n_samples = self.renderer.n_samples + self.renderer.n_importance\n                depth_batch = (mid_z_vals[:, :n_samples] * weights[:, :n_samples]).sum(dim=1).detach().cpu().numpy()\n                dist_batch = dist[i].detach().cpu().numpy()\n                depth_diff.append(np.abs(depth_batch - dist_batch))\n                del render_out\n            out_rgb_fine = np.concatenate(out_rgb_fine, axis=0).reshape(vertices.shape[0], 3)\n            depth_diff = np.concatenate(depth_diff, axis=0).reshape(vertices.shape[0])\n            if rgb_final is None:\n                rgb_final = out_rgb_fine.copy()\n                diff_final = depth_diff.copy()\n            else:\n                ind = diff_final > depth_diff\n                ind = ind.reshape(-1)\n                rgb_final[ind] = out_rgb_fine[ind]\n                diff_final[ind] = depth_diff[ind]\n    vertices = vertices * self.dataset.scale_mats_np[0][0, 0] + self.dataset.scale_mats_np[0][:3, 3][None]\n    if color:\n        logger.info('save mesh with color')\n        vert_colors = (255 * np.clip(rgb_final[..., ::-1], 0, 1)).astype(np.uint8)\n        mesh = trimesh.Trimesh(vertices, triangles, vertex_colors=vert_colors)\n    else:\n        mesh = trimesh.Trimesh(vertices, triangles)\n    outpath = os.path.join(save_dir, 'mesh.ply')\n    mesh.export(outpath)\n    logger.info('surface econstruction done, export mesh to %s' % outpath)",
            "def surface_reconstruction(self, data_dir, save_dir, color=False, n_directions=8):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.dataset = Dataset(data_dir, self.device)\n    bound_min = torch.tensor(self.dataset.object_bbox_min, dtype=torch.float32).to(self.device)\n    bound_max = torch.tensor(self.dataset.object_bbox_max, dtype=torch.float32).to(self.device)\n    (vertices, triangles) = self.renderer.extract_geometry(bound_min, bound_max, resolution=512, threshold=0.0, device=self.device)\n    if color:\n        pt_vertices = torch.from_numpy(vertices).cuda().reshape(-1, 1, 3).float()\n        idx_list = np.linspace(0, self.dataset.n_images, n_directions, endpoint=False, dtype=int)\n        rays_o_list = []\n        for idx in idx_list:\n            rays_o = self.dataset.pose_all[idx, :3, 3]\n            rays_o_list.append(rays_o)\n        rgb_final = None\n        diff_final = None\n        for rays_o in rays_o_list:\n            rays_o = rays_o.reshape(1, 3).repeat(vertices.shape[0], 1).float()\n            rays_d = pt_vertices.reshape(-1, 3) - rays_o\n            rays_d = rays_d / torch.norm(rays_d, dim=-1).reshape(-1, 1)\n            dist = torch.norm(pt_vertices.reshape(-1, 3) - rays_o, dim=-1)\n            rays_o = rays_o.reshape(-1, 3).split(self.n_rays)\n            rays_d = rays_d.reshape(-1, 3).split(self.n_rays)\n            dist = dist.reshape(-1).split(self.n_rays)\n            out_rgb_fine = []\n            depth_diff = []\n            for (i, (rays_o_batch, rays_d_batch)) in enumerate(zip(rays_o, rays_d)):\n                (near, far) = self.dataset.near_far_from_sphere(rays_o_batch, rays_d_batch)\n                render_out = self.renderer.render(rays_o_batch, rays_d_batch, near, far, cos_anneal_ratio=1.0, background_rgb=None)\n                out_rgb_fine.append(render_out['albedo_fine'].detach().cpu().numpy())\n                weights = render_out['weights']\n                mid_z_vals = render_out['mid_z_vals']\n                n_samples = self.renderer.n_samples + self.renderer.n_importance\n                depth_batch = (mid_z_vals[:, :n_samples] * weights[:, :n_samples]).sum(dim=1).detach().cpu().numpy()\n                dist_batch = dist[i].detach().cpu().numpy()\n                depth_diff.append(np.abs(depth_batch - dist_batch))\n                del render_out\n            out_rgb_fine = np.concatenate(out_rgb_fine, axis=0).reshape(vertices.shape[0], 3)\n            depth_diff = np.concatenate(depth_diff, axis=0).reshape(vertices.shape[0])\n            if rgb_final is None:\n                rgb_final = out_rgb_fine.copy()\n                diff_final = depth_diff.copy()\n            else:\n                ind = diff_final > depth_diff\n                ind = ind.reshape(-1)\n                rgb_final[ind] = out_rgb_fine[ind]\n                diff_final[ind] = depth_diff[ind]\n    vertices = vertices * self.dataset.scale_mats_np[0][0, 0] + self.dataset.scale_mats_np[0][:3, 3][None]\n    if color:\n        logger.info('save mesh with color')\n        vert_colors = (255 * np.clip(rgb_final[..., ::-1], 0, 1)).astype(np.uint8)\n        mesh = trimesh.Trimesh(vertices, triangles, vertex_colors=vert_colors)\n    else:\n        mesh = trimesh.Trimesh(vertices, triangles)\n    outpath = os.path.join(save_dir, 'mesh.ply')\n    mesh.export(outpath)\n    logger.info('surface econstruction done, export mesh to %s' % outpath)"
        ]
    }
]
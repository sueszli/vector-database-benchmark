[
    {
        "func_name": "pacificAtlanticHelper",
        "original": "def pacificAtlanticHelper(matrix, x, y, prev_height, prev_val, visited, res):\n    if not 0 <= x < len(matrix) or not 0 <= y < len(matrix[0]) or matrix[x][y] < prev_height or (visited[x][y] | prev_val == visited[x][y]):\n        return\n    visited[x][y] |= prev_val\n    if visited[x][y] == PACIFIC | ATLANTIC:\n        res.append((x, y))\n    for d in [(0, -1), (0, 1), (-1, 0), (1, 0)]:\n        pacificAtlanticHelper(matrix, x + d[0], y + d[1], matrix[x][y], visited[x][y], visited, res)",
        "mutated": [
            "def pacificAtlanticHelper(matrix, x, y, prev_height, prev_val, visited, res):\n    if False:\n        i = 10\n    if not 0 <= x < len(matrix) or not 0 <= y < len(matrix[0]) or matrix[x][y] < prev_height or (visited[x][y] | prev_val == visited[x][y]):\n        return\n    visited[x][y] |= prev_val\n    if visited[x][y] == PACIFIC | ATLANTIC:\n        res.append((x, y))\n    for d in [(0, -1), (0, 1), (-1, 0), (1, 0)]:\n        pacificAtlanticHelper(matrix, x + d[0], y + d[1], matrix[x][y], visited[x][y], visited, res)",
            "def pacificAtlanticHelper(matrix, x, y, prev_height, prev_val, visited, res):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not 0 <= x < len(matrix) or not 0 <= y < len(matrix[0]) or matrix[x][y] < prev_height or (visited[x][y] | prev_val == visited[x][y]):\n        return\n    visited[x][y] |= prev_val\n    if visited[x][y] == PACIFIC | ATLANTIC:\n        res.append((x, y))\n    for d in [(0, -1), (0, 1), (-1, 0), (1, 0)]:\n        pacificAtlanticHelper(matrix, x + d[0], y + d[1], matrix[x][y], visited[x][y], visited, res)",
            "def pacificAtlanticHelper(matrix, x, y, prev_height, prev_val, visited, res):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not 0 <= x < len(matrix) or not 0 <= y < len(matrix[0]) or matrix[x][y] < prev_height or (visited[x][y] | prev_val == visited[x][y]):\n        return\n    visited[x][y] |= prev_val\n    if visited[x][y] == PACIFIC | ATLANTIC:\n        res.append((x, y))\n    for d in [(0, -1), (0, 1), (-1, 0), (1, 0)]:\n        pacificAtlanticHelper(matrix, x + d[0], y + d[1], matrix[x][y], visited[x][y], visited, res)",
            "def pacificAtlanticHelper(matrix, x, y, prev_height, prev_val, visited, res):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not 0 <= x < len(matrix) or not 0 <= y < len(matrix[0]) or matrix[x][y] < prev_height or (visited[x][y] | prev_val == visited[x][y]):\n        return\n    visited[x][y] |= prev_val\n    if visited[x][y] == PACIFIC | ATLANTIC:\n        res.append((x, y))\n    for d in [(0, -1), (0, 1), (-1, 0), (1, 0)]:\n        pacificAtlanticHelper(matrix, x + d[0], y + d[1], matrix[x][y], visited[x][y], visited, res)",
            "def pacificAtlanticHelper(matrix, x, y, prev_height, prev_val, visited, res):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not 0 <= x < len(matrix) or not 0 <= y < len(matrix[0]) or matrix[x][y] < prev_height or (visited[x][y] | prev_val == visited[x][y]):\n        return\n    visited[x][y] |= prev_val\n    if visited[x][y] == PACIFIC | ATLANTIC:\n        res.append((x, y))\n    for d in [(0, -1), (0, 1), (-1, 0), (1, 0)]:\n        pacificAtlanticHelper(matrix, x + d[0], y + d[1], matrix[x][y], visited[x][y], visited, res)"
        ]
    },
    {
        "func_name": "pacificAtlantic",
        "original": "def pacificAtlantic(self, matrix):\n    \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n    (PACIFIC, ATLANTIC) = (1, 2)\n\n    def pacificAtlanticHelper(matrix, x, y, prev_height, prev_val, visited, res):\n        if not 0 <= x < len(matrix) or not 0 <= y < len(matrix[0]) or matrix[x][y] < prev_height or (visited[x][y] | prev_val == visited[x][y]):\n            return\n        visited[x][y] |= prev_val\n        if visited[x][y] == PACIFIC | ATLANTIC:\n            res.append((x, y))\n        for d in [(0, -1), (0, 1), (-1, 0), (1, 0)]:\n            pacificAtlanticHelper(matrix, x + d[0], y + d[1], matrix[x][y], visited[x][y], visited, res)\n    if not matrix:\n        return []\n    res = []\n    (m, n) = (len(matrix), len(matrix[0]))\n    visited = [[0 for _ in xrange(n)] for _ in xrange(m)]\n    for i in xrange(m):\n        pacificAtlanticHelper(matrix, i, 0, float('-inf'), PACIFIC, visited, res)\n        pacificAtlanticHelper(matrix, i, n - 1, float('-inf'), ATLANTIC, visited, res)\n    for j in xrange(n):\n        pacificAtlanticHelper(matrix, 0, j, float('-inf'), PACIFIC, visited, res)\n        pacificAtlanticHelper(matrix, m - 1, j, float('-inf'), ATLANTIC, visited, res)\n    return res",
        "mutated": [
            "def pacificAtlantic(self, matrix):\n    if False:\n        i = 10\n    '\\n        :type matrix: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    (PACIFIC, ATLANTIC) = (1, 2)\n\n    def pacificAtlanticHelper(matrix, x, y, prev_height, prev_val, visited, res):\n        if not 0 <= x < len(matrix) or not 0 <= y < len(matrix[0]) or matrix[x][y] < prev_height or (visited[x][y] | prev_val == visited[x][y]):\n            return\n        visited[x][y] |= prev_val\n        if visited[x][y] == PACIFIC | ATLANTIC:\n            res.append((x, y))\n        for d in [(0, -1), (0, 1), (-1, 0), (1, 0)]:\n            pacificAtlanticHelper(matrix, x + d[0], y + d[1], matrix[x][y], visited[x][y], visited, res)\n    if not matrix:\n        return []\n    res = []\n    (m, n) = (len(matrix), len(matrix[0]))\n    visited = [[0 for _ in xrange(n)] for _ in xrange(m)]\n    for i in xrange(m):\n        pacificAtlanticHelper(matrix, i, 0, float('-inf'), PACIFIC, visited, res)\n        pacificAtlanticHelper(matrix, i, n - 1, float('-inf'), ATLANTIC, visited, res)\n    for j in xrange(n):\n        pacificAtlanticHelper(matrix, 0, j, float('-inf'), PACIFIC, visited, res)\n        pacificAtlanticHelper(matrix, m - 1, j, float('-inf'), ATLANTIC, visited, res)\n    return res",
            "def pacificAtlantic(self, matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type matrix: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    (PACIFIC, ATLANTIC) = (1, 2)\n\n    def pacificAtlanticHelper(matrix, x, y, prev_height, prev_val, visited, res):\n        if not 0 <= x < len(matrix) or not 0 <= y < len(matrix[0]) or matrix[x][y] < prev_height or (visited[x][y] | prev_val == visited[x][y]):\n            return\n        visited[x][y] |= prev_val\n        if visited[x][y] == PACIFIC | ATLANTIC:\n            res.append((x, y))\n        for d in [(0, -1), (0, 1), (-1, 0), (1, 0)]:\n            pacificAtlanticHelper(matrix, x + d[0], y + d[1], matrix[x][y], visited[x][y], visited, res)\n    if not matrix:\n        return []\n    res = []\n    (m, n) = (len(matrix), len(matrix[0]))\n    visited = [[0 for _ in xrange(n)] for _ in xrange(m)]\n    for i in xrange(m):\n        pacificAtlanticHelper(matrix, i, 0, float('-inf'), PACIFIC, visited, res)\n        pacificAtlanticHelper(matrix, i, n - 1, float('-inf'), ATLANTIC, visited, res)\n    for j in xrange(n):\n        pacificAtlanticHelper(matrix, 0, j, float('-inf'), PACIFIC, visited, res)\n        pacificAtlanticHelper(matrix, m - 1, j, float('-inf'), ATLANTIC, visited, res)\n    return res",
            "def pacificAtlantic(self, matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type matrix: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    (PACIFIC, ATLANTIC) = (1, 2)\n\n    def pacificAtlanticHelper(matrix, x, y, prev_height, prev_val, visited, res):\n        if not 0 <= x < len(matrix) or not 0 <= y < len(matrix[0]) or matrix[x][y] < prev_height or (visited[x][y] | prev_val == visited[x][y]):\n            return\n        visited[x][y] |= prev_val\n        if visited[x][y] == PACIFIC | ATLANTIC:\n            res.append((x, y))\n        for d in [(0, -1), (0, 1), (-1, 0), (1, 0)]:\n            pacificAtlanticHelper(matrix, x + d[0], y + d[1], matrix[x][y], visited[x][y], visited, res)\n    if not matrix:\n        return []\n    res = []\n    (m, n) = (len(matrix), len(matrix[0]))\n    visited = [[0 for _ in xrange(n)] for _ in xrange(m)]\n    for i in xrange(m):\n        pacificAtlanticHelper(matrix, i, 0, float('-inf'), PACIFIC, visited, res)\n        pacificAtlanticHelper(matrix, i, n - 1, float('-inf'), ATLANTIC, visited, res)\n    for j in xrange(n):\n        pacificAtlanticHelper(matrix, 0, j, float('-inf'), PACIFIC, visited, res)\n        pacificAtlanticHelper(matrix, m - 1, j, float('-inf'), ATLANTIC, visited, res)\n    return res",
            "def pacificAtlantic(self, matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type matrix: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    (PACIFIC, ATLANTIC) = (1, 2)\n\n    def pacificAtlanticHelper(matrix, x, y, prev_height, prev_val, visited, res):\n        if not 0 <= x < len(matrix) or not 0 <= y < len(matrix[0]) or matrix[x][y] < prev_height or (visited[x][y] | prev_val == visited[x][y]):\n            return\n        visited[x][y] |= prev_val\n        if visited[x][y] == PACIFIC | ATLANTIC:\n            res.append((x, y))\n        for d in [(0, -1), (0, 1), (-1, 0), (1, 0)]:\n            pacificAtlanticHelper(matrix, x + d[0], y + d[1], matrix[x][y], visited[x][y], visited, res)\n    if not matrix:\n        return []\n    res = []\n    (m, n) = (len(matrix), len(matrix[0]))\n    visited = [[0 for _ in xrange(n)] for _ in xrange(m)]\n    for i in xrange(m):\n        pacificAtlanticHelper(matrix, i, 0, float('-inf'), PACIFIC, visited, res)\n        pacificAtlanticHelper(matrix, i, n - 1, float('-inf'), ATLANTIC, visited, res)\n    for j in xrange(n):\n        pacificAtlanticHelper(matrix, 0, j, float('-inf'), PACIFIC, visited, res)\n        pacificAtlanticHelper(matrix, m - 1, j, float('-inf'), ATLANTIC, visited, res)\n    return res",
            "def pacificAtlantic(self, matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type matrix: List[List[int]]\\n        :rtype: List[List[int]]\\n        '\n    (PACIFIC, ATLANTIC) = (1, 2)\n\n    def pacificAtlanticHelper(matrix, x, y, prev_height, prev_val, visited, res):\n        if not 0 <= x < len(matrix) or not 0 <= y < len(matrix[0]) or matrix[x][y] < prev_height or (visited[x][y] | prev_val == visited[x][y]):\n            return\n        visited[x][y] |= prev_val\n        if visited[x][y] == PACIFIC | ATLANTIC:\n            res.append((x, y))\n        for d in [(0, -1), (0, 1), (-1, 0), (1, 0)]:\n            pacificAtlanticHelper(matrix, x + d[0], y + d[1], matrix[x][y], visited[x][y], visited, res)\n    if not matrix:\n        return []\n    res = []\n    (m, n) = (len(matrix), len(matrix[0]))\n    visited = [[0 for _ in xrange(n)] for _ in xrange(m)]\n    for i in xrange(m):\n        pacificAtlanticHelper(matrix, i, 0, float('-inf'), PACIFIC, visited, res)\n        pacificAtlanticHelper(matrix, i, n - 1, float('-inf'), ATLANTIC, visited, res)\n    for j in xrange(n):\n        pacificAtlanticHelper(matrix, 0, j, float('-inf'), PACIFIC, visited, res)\n        pacificAtlanticHelper(matrix, m - 1, j, float('-inf'), ATLANTIC, visited, res)\n    return res"
        ]
    }
]
[
    {
        "func_name": "referenceChannelBackpropStatsTest",
        "original": "def referenceChannelBackpropStatsTest(X, mean, invStdDev, outputGrad):\n    scaleGrad = np.zeros(inputChannels)\n    biasGrad = np.zeros(inputChannels)\n    for n in range(batchSize):\n        for c in range(inputChannels):\n            for h in range(size):\n                for w in range(size):\n                    biasGrad[c] += outputGrad[n, c, h, w]\n                    scaleGrad[c] += (X[n, c, h, w] - mean[c]) * invStdDev[c] * outputGrad[n, c, h, w]\n    return (scaleGrad, biasGrad)",
        "mutated": [
            "def referenceChannelBackpropStatsTest(X, mean, invStdDev, outputGrad):\n    if False:\n        i = 10\n    scaleGrad = np.zeros(inputChannels)\n    biasGrad = np.zeros(inputChannels)\n    for n in range(batchSize):\n        for c in range(inputChannels):\n            for h in range(size):\n                for w in range(size):\n                    biasGrad[c] += outputGrad[n, c, h, w]\n                    scaleGrad[c] += (X[n, c, h, w] - mean[c]) * invStdDev[c] * outputGrad[n, c, h, w]\n    return (scaleGrad, biasGrad)",
            "def referenceChannelBackpropStatsTest(X, mean, invStdDev, outputGrad):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    scaleGrad = np.zeros(inputChannels)\n    biasGrad = np.zeros(inputChannels)\n    for n in range(batchSize):\n        for c in range(inputChannels):\n            for h in range(size):\n                for w in range(size):\n                    biasGrad[c] += outputGrad[n, c, h, w]\n                    scaleGrad[c] += (X[n, c, h, w] - mean[c]) * invStdDev[c] * outputGrad[n, c, h, w]\n    return (scaleGrad, biasGrad)",
            "def referenceChannelBackpropStatsTest(X, mean, invStdDev, outputGrad):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    scaleGrad = np.zeros(inputChannels)\n    biasGrad = np.zeros(inputChannels)\n    for n in range(batchSize):\n        for c in range(inputChannels):\n            for h in range(size):\n                for w in range(size):\n                    biasGrad[c] += outputGrad[n, c, h, w]\n                    scaleGrad[c] += (X[n, c, h, w] - mean[c]) * invStdDev[c] * outputGrad[n, c, h, w]\n    return (scaleGrad, biasGrad)",
            "def referenceChannelBackpropStatsTest(X, mean, invStdDev, outputGrad):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    scaleGrad = np.zeros(inputChannels)\n    biasGrad = np.zeros(inputChannels)\n    for n in range(batchSize):\n        for c in range(inputChannels):\n            for h in range(size):\n                for w in range(size):\n                    biasGrad[c] += outputGrad[n, c, h, w]\n                    scaleGrad[c] += (X[n, c, h, w] - mean[c]) * invStdDev[c] * outputGrad[n, c, h, w]\n    return (scaleGrad, biasGrad)",
            "def referenceChannelBackpropStatsTest(X, mean, invStdDev, outputGrad):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    scaleGrad = np.zeros(inputChannels)\n    biasGrad = np.zeros(inputChannels)\n    for n in range(batchSize):\n        for c in range(inputChannels):\n            for h in range(size):\n                for w in range(size):\n                    biasGrad[c] += outputGrad[n, c, h, w]\n                    scaleGrad[c] += (X[n, c, h, w] - mean[c]) * invStdDev[c] * outputGrad[n, c, h, w]\n    return (scaleGrad, biasGrad)"
        ]
    },
    {
        "func_name": "testChannelBackpropStats",
        "original": "@given(size=st.integers(7, 10), inputChannels=st.integers(1, 10), batchSize=st.integers(1, 3), **hu.gcs)\n@settings(deadline=10000)\ndef testChannelBackpropStats(self, size, inputChannels, batchSize, gc, dc):\n    op = core.CreateOperator('ChannelBackpropStats', ['X', 'mean', 'invStdDev', 'outputGrad'], ['scaleGrad', 'biasGrad'])\n\n    def referenceChannelBackpropStatsTest(X, mean, invStdDev, outputGrad):\n        scaleGrad = np.zeros(inputChannels)\n        biasGrad = np.zeros(inputChannels)\n        for n in range(batchSize):\n            for c in range(inputChannels):\n                for h in range(size):\n                    for w in range(size):\n                        biasGrad[c] += outputGrad[n, c, h, w]\n                        scaleGrad[c] += (X[n, c, h, w] - mean[c]) * invStdDev[c] * outputGrad[n, c, h, w]\n        return (scaleGrad, biasGrad)\n    X = np.random.rand(batchSize, inputChannels, size, size).astype(np.float32) - 0.5\n    sums = np.sum(X, axis=(0, 2, 3), keepdims=False)\n    numPixels = size * size * batchSize\n    mean = sums / numPixels\n    sumsq = np.sum(X ** 2, axis=(0, 2, 3), keepdims=False)\n    var = ((sumsq - sums * sums / numPixels) / numPixels).astype(np.float32)\n    invStdDev = 1 / np.sqrt(var)\n    outputGrad = np.random.rand(batchSize, inputChannels, size, size).astype(np.float32) - 0.5\n    self.assertReferenceChecks(gc, op, [X, mean, invStdDev, outputGrad], referenceChannelBackpropStatsTest)",
        "mutated": [
            "@given(size=st.integers(7, 10), inputChannels=st.integers(1, 10), batchSize=st.integers(1, 3), **hu.gcs)\n@settings(deadline=10000)\ndef testChannelBackpropStats(self, size, inputChannels, batchSize, gc, dc):\n    if False:\n        i = 10\n    op = core.CreateOperator('ChannelBackpropStats', ['X', 'mean', 'invStdDev', 'outputGrad'], ['scaleGrad', 'biasGrad'])\n\n    def referenceChannelBackpropStatsTest(X, mean, invStdDev, outputGrad):\n        scaleGrad = np.zeros(inputChannels)\n        biasGrad = np.zeros(inputChannels)\n        for n in range(batchSize):\n            for c in range(inputChannels):\n                for h in range(size):\n                    for w in range(size):\n                        biasGrad[c] += outputGrad[n, c, h, w]\n                        scaleGrad[c] += (X[n, c, h, w] - mean[c]) * invStdDev[c] * outputGrad[n, c, h, w]\n        return (scaleGrad, biasGrad)\n    X = np.random.rand(batchSize, inputChannels, size, size).astype(np.float32) - 0.5\n    sums = np.sum(X, axis=(0, 2, 3), keepdims=False)\n    numPixels = size * size * batchSize\n    mean = sums / numPixels\n    sumsq = np.sum(X ** 2, axis=(0, 2, 3), keepdims=False)\n    var = ((sumsq - sums * sums / numPixels) / numPixels).astype(np.float32)\n    invStdDev = 1 / np.sqrt(var)\n    outputGrad = np.random.rand(batchSize, inputChannels, size, size).astype(np.float32) - 0.5\n    self.assertReferenceChecks(gc, op, [X, mean, invStdDev, outputGrad], referenceChannelBackpropStatsTest)",
            "@given(size=st.integers(7, 10), inputChannels=st.integers(1, 10), batchSize=st.integers(1, 3), **hu.gcs)\n@settings(deadline=10000)\ndef testChannelBackpropStats(self, size, inputChannels, batchSize, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    op = core.CreateOperator('ChannelBackpropStats', ['X', 'mean', 'invStdDev', 'outputGrad'], ['scaleGrad', 'biasGrad'])\n\n    def referenceChannelBackpropStatsTest(X, mean, invStdDev, outputGrad):\n        scaleGrad = np.zeros(inputChannels)\n        biasGrad = np.zeros(inputChannels)\n        for n in range(batchSize):\n            for c in range(inputChannels):\n                for h in range(size):\n                    for w in range(size):\n                        biasGrad[c] += outputGrad[n, c, h, w]\n                        scaleGrad[c] += (X[n, c, h, w] - mean[c]) * invStdDev[c] * outputGrad[n, c, h, w]\n        return (scaleGrad, biasGrad)\n    X = np.random.rand(batchSize, inputChannels, size, size).astype(np.float32) - 0.5\n    sums = np.sum(X, axis=(0, 2, 3), keepdims=False)\n    numPixels = size * size * batchSize\n    mean = sums / numPixels\n    sumsq = np.sum(X ** 2, axis=(0, 2, 3), keepdims=False)\n    var = ((sumsq - sums * sums / numPixels) / numPixels).astype(np.float32)\n    invStdDev = 1 / np.sqrt(var)\n    outputGrad = np.random.rand(batchSize, inputChannels, size, size).astype(np.float32) - 0.5\n    self.assertReferenceChecks(gc, op, [X, mean, invStdDev, outputGrad], referenceChannelBackpropStatsTest)",
            "@given(size=st.integers(7, 10), inputChannels=st.integers(1, 10), batchSize=st.integers(1, 3), **hu.gcs)\n@settings(deadline=10000)\ndef testChannelBackpropStats(self, size, inputChannels, batchSize, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    op = core.CreateOperator('ChannelBackpropStats', ['X', 'mean', 'invStdDev', 'outputGrad'], ['scaleGrad', 'biasGrad'])\n\n    def referenceChannelBackpropStatsTest(X, mean, invStdDev, outputGrad):\n        scaleGrad = np.zeros(inputChannels)\n        biasGrad = np.zeros(inputChannels)\n        for n in range(batchSize):\n            for c in range(inputChannels):\n                for h in range(size):\n                    for w in range(size):\n                        biasGrad[c] += outputGrad[n, c, h, w]\n                        scaleGrad[c] += (X[n, c, h, w] - mean[c]) * invStdDev[c] * outputGrad[n, c, h, w]\n        return (scaleGrad, biasGrad)\n    X = np.random.rand(batchSize, inputChannels, size, size).astype(np.float32) - 0.5\n    sums = np.sum(X, axis=(0, 2, 3), keepdims=False)\n    numPixels = size * size * batchSize\n    mean = sums / numPixels\n    sumsq = np.sum(X ** 2, axis=(0, 2, 3), keepdims=False)\n    var = ((sumsq - sums * sums / numPixels) / numPixels).astype(np.float32)\n    invStdDev = 1 / np.sqrt(var)\n    outputGrad = np.random.rand(batchSize, inputChannels, size, size).astype(np.float32) - 0.5\n    self.assertReferenceChecks(gc, op, [X, mean, invStdDev, outputGrad], referenceChannelBackpropStatsTest)",
            "@given(size=st.integers(7, 10), inputChannels=st.integers(1, 10), batchSize=st.integers(1, 3), **hu.gcs)\n@settings(deadline=10000)\ndef testChannelBackpropStats(self, size, inputChannels, batchSize, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    op = core.CreateOperator('ChannelBackpropStats', ['X', 'mean', 'invStdDev', 'outputGrad'], ['scaleGrad', 'biasGrad'])\n\n    def referenceChannelBackpropStatsTest(X, mean, invStdDev, outputGrad):\n        scaleGrad = np.zeros(inputChannels)\n        biasGrad = np.zeros(inputChannels)\n        for n in range(batchSize):\n            for c in range(inputChannels):\n                for h in range(size):\n                    for w in range(size):\n                        biasGrad[c] += outputGrad[n, c, h, w]\n                        scaleGrad[c] += (X[n, c, h, w] - mean[c]) * invStdDev[c] * outputGrad[n, c, h, w]\n        return (scaleGrad, biasGrad)\n    X = np.random.rand(batchSize, inputChannels, size, size).astype(np.float32) - 0.5\n    sums = np.sum(X, axis=(0, 2, 3), keepdims=False)\n    numPixels = size * size * batchSize\n    mean = sums / numPixels\n    sumsq = np.sum(X ** 2, axis=(0, 2, 3), keepdims=False)\n    var = ((sumsq - sums * sums / numPixels) / numPixels).astype(np.float32)\n    invStdDev = 1 / np.sqrt(var)\n    outputGrad = np.random.rand(batchSize, inputChannels, size, size).astype(np.float32) - 0.5\n    self.assertReferenceChecks(gc, op, [X, mean, invStdDev, outputGrad], referenceChannelBackpropStatsTest)",
            "@given(size=st.integers(7, 10), inputChannels=st.integers(1, 10), batchSize=st.integers(1, 3), **hu.gcs)\n@settings(deadline=10000)\ndef testChannelBackpropStats(self, size, inputChannels, batchSize, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    op = core.CreateOperator('ChannelBackpropStats', ['X', 'mean', 'invStdDev', 'outputGrad'], ['scaleGrad', 'biasGrad'])\n\n    def referenceChannelBackpropStatsTest(X, mean, invStdDev, outputGrad):\n        scaleGrad = np.zeros(inputChannels)\n        biasGrad = np.zeros(inputChannels)\n        for n in range(batchSize):\n            for c in range(inputChannels):\n                for h in range(size):\n                    for w in range(size):\n                        biasGrad[c] += outputGrad[n, c, h, w]\n                        scaleGrad[c] += (X[n, c, h, w] - mean[c]) * invStdDev[c] * outputGrad[n, c, h, w]\n        return (scaleGrad, biasGrad)\n    X = np.random.rand(batchSize, inputChannels, size, size).astype(np.float32) - 0.5\n    sums = np.sum(X, axis=(0, 2, 3), keepdims=False)\n    numPixels = size * size * batchSize\n    mean = sums / numPixels\n    sumsq = np.sum(X ** 2, axis=(0, 2, 3), keepdims=False)\n    var = ((sumsq - sums * sums / numPixels) / numPixels).astype(np.float32)\n    invStdDev = 1 / np.sqrt(var)\n    outputGrad = np.random.rand(batchSize, inputChannels, size, size).astype(np.float32) - 0.5\n    self.assertReferenceChecks(gc, op, [X, mean, invStdDev, outputGrad], referenceChannelBackpropStatsTest)"
        ]
    }
]
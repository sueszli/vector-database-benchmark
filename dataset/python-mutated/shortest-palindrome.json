[
    {
        "func_name": "getPrefix",
        "original": "def getPrefix(pattern):\n    prefix = [-1] * len(pattern)\n    j = -1\n    for i in xrange(1, len(pattern)):\n        while j > -1 and pattern[j + 1] != pattern[i]:\n            j = prefix[j]\n        if pattern[j + 1] == pattern[i]:\n            j += 1\n        prefix[i] = j\n    return prefix",
        "mutated": [
            "def getPrefix(pattern):\n    if False:\n        i = 10\n    prefix = [-1] * len(pattern)\n    j = -1\n    for i in xrange(1, len(pattern)):\n        while j > -1 and pattern[j + 1] != pattern[i]:\n            j = prefix[j]\n        if pattern[j + 1] == pattern[i]:\n            j += 1\n        prefix[i] = j\n    return prefix",
            "def getPrefix(pattern):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    prefix = [-1] * len(pattern)\n    j = -1\n    for i in xrange(1, len(pattern)):\n        while j > -1 and pattern[j + 1] != pattern[i]:\n            j = prefix[j]\n        if pattern[j + 1] == pattern[i]:\n            j += 1\n        prefix[i] = j\n    return prefix",
            "def getPrefix(pattern):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    prefix = [-1] * len(pattern)\n    j = -1\n    for i in xrange(1, len(pattern)):\n        while j > -1 and pattern[j + 1] != pattern[i]:\n            j = prefix[j]\n        if pattern[j + 1] == pattern[i]:\n            j += 1\n        prefix[i] = j\n    return prefix",
            "def getPrefix(pattern):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    prefix = [-1] * len(pattern)\n    j = -1\n    for i in xrange(1, len(pattern)):\n        while j > -1 and pattern[j + 1] != pattern[i]:\n            j = prefix[j]\n        if pattern[j + 1] == pattern[i]:\n            j += 1\n        prefix[i] = j\n    return prefix",
            "def getPrefix(pattern):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    prefix = [-1] * len(pattern)\n    j = -1\n    for i in xrange(1, len(pattern)):\n        while j > -1 and pattern[j + 1] != pattern[i]:\n            j = prefix[j]\n        if pattern[j + 1] == pattern[i]:\n            j += 1\n        prefix[i] = j\n    return prefix"
        ]
    },
    {
        "func_name": "shortestPalindrome",
        "original": "def shortestPalindrome(self, s):\n    \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n\n    def getPrefix(pattern):\n        prefix = [-1] * len(pattern)\n        j = -1\n        for i in xrange(1, len(pattern)):\n            while j > -1 and pattern[j + 1] != pattern[i]:\n                j = prefix[j]\n            if pattern[j + 1] == pattern[i]:\n                j += 1\n            prefix[i] = j\n        return prefix\n    if not s:\n        return s\n    A = s + '#' + s[::-1]\n    return s[getPrefix(A)[-1] + 1:][::-1] + s",
        "mutated": [
            "def shortestPalindrome(self, s):\n    if False:\n        i = 10\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n\n    def getPrefix(pattern):\n        prefix = [-1] * len(pattern)\n        j = -1\n        for i in xrange(1, len(pattern)):\n            while j > -1 and pattern[j + 1] != pattern[i]:\n                j = prefix[j]\n            if pattern[j + 1] == pattern[i]:\n                j += 1\n            prefix[i] = j\n        return prefix\n    if not s:\n        return s\n    A = s + '#' + s[::-1]\n    return s[getPrefix(A)[-1] + 1:][::-1] + s",
            "def shortestPalindrome(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n\n    def getPrefix(pattern):\n        prefix = [-1] * len(pattern)\n        j = -1\n        for i in xrange(1, len(pattern)):\n            while j > -1 and pattern[j + 1] != pattern[i]:\n                j = prefix[j]\n            if pattern[j + 1] == pattern[i]:\n                j += 1\n            prefix[i] = j\n        return prefix\n    if not s:\n        return s\n    A = s + '#' + s[::-1]\n    return s[getPrefix(A)[-1] + 1:][::-1] + s",
            "def shortestPalindrome(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n\n    def getPrefix(pattern):\n        prefix = [-1] * len(pattern)\n        j = -1\n        for i in xrange(1, len(pattern)):\n            while j > -1 and pattern[j + 1] != pattern[i]:\n                j = prefix[j]\n            if pattern[j + 1] == pattern[i]:\n                j += 1\n            prefix[i] = j\n        return prefix\n    if not s:\n        return s\n    A = s + '#' + s[::-1]\n    return s[getPrefix(A)[-1] + 1:][::-1] + s",
            "def shortestPalindrome(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n\n    def getPrefix(pattern):\n        prefix = [-1] * len(pattern)\n        j = -1\n        for i in xrange(1, len(pattern)):\n            while j > -1 and pattern[j + 1] != pattern[i]:\n                j = prefix[j]\n            if pattern[j + 1] == pattern[i]:\n                j += 1\n            prefix[i] = j\n        return prefix\n    if not s:\n        return s\n    A = s + '#' + s[::-1]\n    return s[getPrefix(A)[-1] + 1:][::-1] + s",
            "def shortestPalindrome(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n\n    def getPrefix(pattern):\n        prefix = [-1] * len(pattern)\n        j = -1\n        for i in xrange(1, len(pattern)):\n            while j > -1 and pattern[j + 1] != pattern[i]:\n                j = prefix[j]\n            if pattern[j + 1] == pattern[i]:\n                j += 1\n            prefix[i] = j\n        return prefix\n    if not s:\n        return s\n    A = s + '#' + s[::-1]\n    return s[getPrefix(A)[-1] + 1:][::-1] + s"
        ]
    },
    {
        "func_name": "getPrefix",
        "original": "def getPrefix(pattern):\n    prefix = [-1] * len(pattern)\n    j = -1\n    for i in xrange(1, len(pattern)):\n        while j > -1 and pattern[j + 1] != pattern[i]:\n            j = prefix[j]\n        if pattern[j + 1] == pattern[i]:\n            j += 1\n        prefix[i] = j\n    return prefix",
        "mutated": [
            "def getPrefix(pattern):\n    if False:\n        i = 10\n    prefix = [-1] * len(pattern)\n    j = -1\n    for i in xrange(1, len(pattern)):\n        while j > -1 and pattern[j + 1] != pattern[i]:\n            j = prefix[j]\n        if pattern[j + 1] == pattern[i]:\n            j += 1\n        prefix[i] = j\n    return prefix",
            "def getPrefix(pattern):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    prefix = [-1] * len(pattern)\n    j = -1\n    for i in xrange(1, len(pattern)):\n        while j > -1 and pattern[j + 1] != pattern[i]:\n            j = prefix[j]\n        if pattern[j + 1] == pattern[i]:\n            j += 1\n        prefix[i] = j\n    return prefix",
            "def getPrefix(pattern):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    prefix = [-1] * len(pattern)\n    j = -1\n    for i in xrange(1, len(pattern)):\n        while j > -1 and pattern[j + 1] != pattern[i]:\n            j = prefix[j]\n        if pattern[j + 1] == pattern[i]:\n            j += 1\n        prefix[i] = j\n    return prefix",
            "def getPrefix(pattern):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    prefix = [-1] * len(pattern)\n    j = -1\n    for i in xrange(1, len(pattern)):\n        while j > -1 and pattern[j + 1] != pattern[i]:\n            j = prefix[j]\n        if pattern[j + 1] == pattern[i]:\n            j += 1\n        prefix[i] = j\n    return prefix",
            "def getPrefix(pattern):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    prefix = [-1] * len(pattern)\n    j = -1\n    for i in xrange(1, len(pattern)):\n        while j > -1 and pattern[j + 1] != pattern[i]:\n            j = prefix[j]\n        if pattern[j + 1] == pattern[i]:\n            j += 1\n        prefix[i] = j\n    return prefix"
        ]
    },
    {
        "func_name": "shortestPalindrome",
        "original": "def shortestPalindrome(self, s):\n    \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n\n    def getPrefix(pattern):\n        prefix = [-1] * len(pattern)\n        j = -1\n        for i in xrange(1, len(pattern)):\n            while j > -1 and pattern[j + 1] != pattern[i]:\n                j = prefix[j]\n            if pattern[j + 1] == pattern[i]:\n                j += 1\n            prefix[i] = j\n        return prefix\n    if not s:\n        return s\n    A = s + s[::-1]\n    prefix = getPrefix(A)\n    i = prefix[-1]\n    while i >= len(s):\n        i = prefix[i]\n    return s[i + 1:][::-1] + s",
        "mutated": [
            "def shortestPalindrome(self, s):\n    if False:\n        i = 10\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n\n    def getPrefix(pattern):\n        prefix = [-1] * len(pattern)\n        j = -1\n        for i in xrange(1, len(pattern)):\n            while j > -1 and pattern[j + 1] != pattern[i]:\n                j = prefix[j]\n            if pattern[j + 1] == pattern[i]:\n                j += 1\n            prefix[i] = j\n        return prefix\n    if not s:\n        return s\n    A = s + s[::-1]\n    prefix = getPrefix(A)\n    i = prefix[-1]\n    while i >= len(s):\n        i = prefix[i]\n    return s[i + 1:][::-1] + s",
            "def shortestPalindrome(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n\n    def getPrefix(pattern):\n        prefix = [-1] * len(pattern)\n        j = -1\n        for i in xrange(1, len(pattern)):\n            while j > -1 and pattern[j + 1] != pattern[i]:\n                j = prefix[j]\n            if pattern[j + 1] == pattern[i]:\n                j += 1\n            prefix[i] = j\n        return prefix\n    if not s:\n        return s\n    A = s + s[::-1]\n    prefix = getPrefix(A)\n    i = prefix[-1]\n    while i >= len(s):\n        i = prefix[i]\n    return s[i + 1:][::-1] + s",
            "def shortestPalindrome(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n\n    def getPrefix(pattern):\n        prefix = [-1] * len(pattern)\n        j = -1\n        for i in xrange(1, len(pattern)):\n            while j > -1 and pattern[j + 1] != pattern[i]:\n                j = prefix[j]\n            if pattern[j + 1] == pattern[i]:\n                j += 1\n            prefix[i] = j\n        return prefix\n    if not s:\n        return s\n    A = s + s[::-1]\n    prefix = getPrefix(A)\n    i = prefix[-1]\n    while i >= len(s):\n        i = prefix[i]\n    return s[i + 1:][::-1] + s",
            "def shortestPalindrome(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n\n    def getPrefix(pattern):\n        prefix = [-1] * len(pattern)\n        j = -1\n        for i in xrange(1, len(pattern)):\n            while j > -1 and pattern[j + 1] != pattern[i]:\n                j = prefix[j]\n            if pattern[j + 1] == pattern[i]:\n                j += 1\n            prefix[i] = j\n        return prefix\n    if not s:\n        return s\n    A = s + s[::-1]\n    prefix = getPrefix(A)\n    i = prefix[-1]\n    while i >= len(s):\n        i = prefix[i]\n    return s[i + 1:][::-1] + s",
            "def shortestPalindrome(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n\n    def getPrefix(pattern):\n        prefix = [-1] * len(pattern)\n        j = -1\n        for i in xrange(1, len(pattern)):\n            while j > -1 and pattern[j + 1] != pattern[i]:\n                j = prefix[j]\n            if pattern[j + 1] == pattern[i]:\n                j += 1\n            prefix[i] = j\n        return prefix\n    if not s:\n        return s\n    A = s + s[::-1]\n    prefix = getPrefix(A)\n    i = prefix[-1]\n    while i >= len(s):\n        i = prefix[i]\n    return s[i + 1:][::-1] + s"
        ]
    },
    {
        "func_name": "preProcess",
        "original": "def preProcess(s):\n    if not s:\n        return ['^', '$']\n    string = ['^']\n    for c in s:\n        string += ['#', c]\n    string += ['#', '$']\n    return string",
        "mutated": [
            "def preProcess(s):\n    if False:\n        i = 10\n    if not s:\n        return ['^', '$']\n    string = ['^']\n    for c in s:\n        string += ['#', c]\n    string += ['#', '$']\n    return string",
            "def preProcess(s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not s:\n        return ['^', '$']\n    string = ['^']\n    for c in s:\n        string += ['#', c]\n    string += ['#', '$']\n    return string",
            "def preProcess(s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not s:\n        return ['^', '$']\n    string = ['^']\n    for c in s:\n        string += ['#', c]\n    string += ['#', '$']\n    return string",
            "def preProcess(s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not s:\n        return ['^', '$']\n    string = ['^']\n    for c in s:\n        string += ['#', c]\n    string += ['#', '$']\n    return string",
            "def preProcess(s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not s:\n        return ['^', '$']\n    string = ['^']\n    for c in s:\n        string += ['#', c]\n    string += ['#', '$']\n    return string"
        ]
    },
    {
        "func_name": "shortestPalindrome",
        "original": "def shortestPalindrome(self, s):\n    \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n\n    def preProcess(s):\n        if not s:\n            return ['^', '$']\n        string = ['^']\n        for c in s:\n            string += ['#', c]\n        string += ['#', '$']\n        return string\n    string = preProcess(s)\n    palindrome = [0] * len(string)\n    (center, right) = (0, 0)\n    for i in xrange(1, len(string) - 1):\n        i_mirror = 2 * center - i\n        if right > i:\n            palindrome[i] = min(right - i, palindrome[i_mirror])\n        else:\n            palindrome[i] = 0\n        while string[i + 1 + palindrome[i]] == string[i - 1 - palindrome[i]]:\n            palindrome[i] += 1\n        if i + palindrome[i] > right:\n            (center, right) = (i, i + palindrome[i])\n    max_len = 0\n    for i in xrange(1, len(string) - 1):\n        if i - palindrome[i] == 1:\n            max_len = palindrome[i]\n    return s[len(s) - 1:max_len - 1:-1] + s",
        "mutated": [
            "def shortestPalindrome(self, s):\n    if False:\n        i = 10\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n\n    def preProcess(s):\n        if not s:\n            return ['^', '$']\n        string = ['^']\n        for c in s:\n            string += ['#', c]\n        string += ['#', '$']\n        return string\n    string = preProcess(s)\n    palindrome = [0] * len(string)\n    (center, right) = (0, 0)\n    for i in xrange(1, len(string) - 1):\n        i_mirror = 2 * center - i\n        if right > i:\n            palindrome[i] = min(right - i, palindrome[i_mirror])\n        else:\n            palindrome[i] = 0\n        while string[i + 1 + palindrome[i]] == string[i - 1 - palindrome[i]]:\n            palindrome[i] += 1\n        if i + palindrome[i] > right:\n            (center, right) = (i, i + palindrome[i])\n    max_len = 0\n    for i in xrange(1, len(string) - 1):\n        if i - palindrome[i] == 1:\n            max_len = palindrome[i]\n    return s[len(s) - 1:max_len - 1:-1] + s",
            "def shortestPalindrome(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n\n    def preProcess(s):\n        if not s:\n            return ['^', '$']\n        string = ['^']\n        for c in s:\n            string += ['#', c]\n        string += ['#', '$']\n        return string\n    string = preProcess(s)\n    palindrome = [0] * len(string)\n    (center, right) = (0, 0)\n    for i in xrange(1, len(string) - 1):\n        i_mirror = 2 * center - i\n        if right > i:\n            palindrome[i] = min(right - i, palindrome[i_mirror])\n        else:\n            palindrome[i] = 0\n        while string[i + 1 + palindrome[i]] == string[i - 1 - palindrome[i]]:\n            palindrome[i] += 1\n        if i + palindrome[i] > right:\n            (center, right) = (i, i + palindrome[i])\n    max_len = 0\n    for i in xrange(1, len(string) - 1):\n        if i - palindrome[i] == 1:\n            max_len = palindrome[i]\n    return s[len(s) - 1:max_len - 1:-1] + s",
            "def shortestPalindrome(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n\n    def preProcess(s):\n        if not s:\n            return ['^', '$']\n        string = ['^']\n        for c in s:\n            string += ['#', c]\n        string += ['#', '$']\n        return string\n    string = preProcess(s)\n    palindrome = [0] * len(string)\n    (center, right) = (0, 0)\n    for i in xrange(1, len(string) - 1):\n        i_mirror = 2 * center - i\n        if right > i:\n            palindrome[i] = min(right - i, palindrome[i_mirror])\n        else:\n            palindrome[i] = 0\n        while string[i + 1 + palindrome[i]] == string[i - 1 - palindrome[i]]:\n            palindrome[i] += 1\n        if i + palindrome[i] > right:\n            (center, right) = (i, i + palindrome[i])\n    max_len = 0\n    for i in xrange(1, len(string) - 1):\n        if i - palindrome[i] == 1:\n            max_len = palindrome[i]\n    return s[len(s) - 1:max_len - 1:-1] + s",
            "def shortestPalindrome(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n\n    def preProcess(s):\n        if not s:\n            return ['^', '$']\n        string = ['^']\n        for c in s:\n            string += ['#', c]\n        string += ['#', '$']\n        return string\n    string = preProcess(s)\n    palindrome = [0] * len(string)\n    (center, right) = (0, 0)\n    for i in xrange(1, len(string) - 1):\n        i_mirror = 2 * center - i\n        if right > i:\n            palindrome[i] = min(right - i, palindrome[i_mirror])\n        else:\n            palindrome[i] = 0\n        while string[i + 1 + palindrome[i]] == string[i - 1 - palindrome[i]]:\n            palindrome[i] += 1\n        if i + palindrome[i] > right:\n            (center, right) = (i, i + palindrome[i])\n    max_len = 0\n    for i in xrange(1, len(string) - 1):\n        if i - palindrome[i] == 1:\n            max_len = palindrome[i]\n    return s[len(s) - 1:max_len - 1:-1] + s",
            "def shortestPalindrome(self, s):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type s: str\\n        :rtype: str\\n        '\n\n    def preProcess(s):\n        if not s:\n            return ['^', '$']\n        string = ['^']\n        for c in s:\n            string += ['#', c]\n        string += ['#', '$']\n        return string\n    string = preProcess(s)\n    palindrome = [0] * len(string)\n    (center, right) = (0, 0)\n    for i in xrange(1, len(string) - 1):\n        i_mirror = 2 * center - i\n        if right > i:\n            palindrome[i] = min(right - i, palindrome[i_mirror])\n        else:\n            palindrome[i] = 0\n        while string[i + 1 + palindrome[i]] == string[i - 1 - palindrome[i]]:\n            palindrome[i] += 1\n        if i + palindrome[i] > right:\n            (center, right) = (i, i + palindrome[i])\n    max_len = 0\n    for i in xrange(1, len(string) - 1):\n        if i - palindrome[i] == 1:\n            max_len = palindrome[i]\n    return s[len(s) - 1:max_len - 1:-1] + s"
        ]
    }
]
[
    {
        "func_name": "save_annotation",
        "original": "def save_annotation(label, save_dir, filename, add_colormap=True, normalize_to_unit_values=False, scale_values=False, colormap_type=get_dataset_colormap.get_pascal_name()):\n    \"\"\"Saves the given label to image on disk.\n\n  Args:\n    label: The numpy array to be saved. The data will be converted\n      to uint8 and saved as png image.\n    save_dir: String, the directory to which the results will be saved.\n    filename: String, the image filename.\n    add_colormap: Boolean, add color map to the label or not.\n    normalize_to_unit_values: Boolean, normalize the input values to [0, 1].\n    scale_values: Boolean, scale the input values to [0, 255] for visualization.\n    colormap_type: String, colormap type for visualization.\n  \"\"\"\n    if add_colormap:\n        colored_label = get_dataset_colormap.label_to_color_image(label, colormap_type)\n    else:\n        colored_label = label\n        if normalize_to_unit_values:\n            min_value = np.amin(colored_label)\n            max_value = np.amax(colored_label)\n            range_value = max_value - min_value\n            if range_value != 0:\n                colored_label = (colored_label - min_value) / range_value\n        if scale_values:\n            colored_label = 255.0 * colored_label\n    pil_image = img.fromarray(colored_label.astype(dtype=np.uint8))\n    with tf.gfile.Open('%s/%s.png' % (save_dir, filename), mode='w') as f:\n        pil_image.save(f, 'PNG')",
        "mutated": [
            "def save_annotation(label, save_dir, filename, add_colormap=True, normalize_to_unit_values=False, scale_values=False, colormap_type=get_dataset_colormap.get_pascal_name()):\n    if False:\n        i = 10\n    'Saves the given label to image on disk.\\n\\n  Args:\\n    label: The numpy array to be saved. The data will be converted\\n      to uint8 and saved as png image.\\n    save_dir: String, the directory to which the results will be saved.\\n    filename: String, the image filename.\\n    add_colormap: Boolean, add color map to the label or not.\\n    normalize_to_unit_values: Boolean, normalize the input values to [0, 1].\\n    scale_values: Boolean, scale the input values to [0, 255] for visualization.\\n    colormap_type: String, colormap type for visualization.\\n  '\n    if add_colormap:\n        colored_label = get_dataset_colormap.label_to_color_image(label, colormap_type)\n    else:\n        colored_label = label\n        if normalize_to_unit_values:\n            min_value = np.amin(colored_label)\n            max_value = np.amax(colored_label)\n            range_value = max_value - min_value\n            if range_value != 0:\n                colored_label = (colored_label - min_value) / range_value\n        if scale_values:\n            colored_label = 255.0 * colored_label\n    pil_image = img.fromarray(colored_label.astype(dtype=np.uint8))\n    with tf.gfile.Open('%s/%s.png' % (save_dir, filename), mode='w') as f:\n        pil_image.save(f, 'PNG')",
            "def save_annotation(label, save_dir, filename, add_colormap=True, normalize_to_unit_values=False, scale_values=False, colormap_type=get_dataset_colormap.get_pascal_name()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Saves the given label to image on disk.\\n\\n  Args:\\n    label: The numpy array to be saved. The data will be converted\\n      to uint8 and saved as png image.\\n    save_dir: String, the directory to which the results will be saved.\\n    filename: String, the image filename.\\n    add_colormap: Boolean, add color map to the label or not.\\n    normalize_to_unit_values: Boolean, normalize the input values to [0, 1].\\n    scale_values: Boolean, scale the input values to [0, 255] for visualization.\\n    colormap_type: String, colormap type for visualization.\\n  '\n    if add_colormap:\n        colored_label = get_dataset_colormap.label_to_color_image(label, colormap_type)\n    else:\n        colored_label = label\n        if normalize_to_unit_values:\n            min_value = np.amin(colored_label)\n            max_value = np.amax(colored_label)\n            range_value = max_value - min_value\n            if range_value != 0:\n                colored_label = (colored_label - min_value) / range_value\n        if scale_values:\n            colored_label = 255.0 * colored_label\n    pil_image = img.fromarray(colored_label.astype(dtype=np.uint8))\n    with tf.gfile.Open('%s/%s.png' % (save_dir, filename), mode='w') as f:\n        pil_image.save(f, 'PNG')",
            "def save_annotation(label, save_dir, filename, add_colormap=True, normalize_to_unit_values=False, scale_values=False, colormap_type=get_dataset_colormap.get_pascal_name()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Saves the given label to image on disk.\\n\\n  Args:\\n    label: The numpy array to be saved. The data will be converted\\n      to uint8 and saved as png image.\\n    save_dir: String, the directory to which the results will be saved.\\n    filename: String, the image filename.\\n    add_colormap: Boolean, add color map to the label or not.\\n    normalize_to_unit_values: Boolean, normalize the input values to [0, 1].\\n    scale_values: Boolean, scale the input values to [0, 255] for visualization.\\n    colormap_type: String, colormap type for visualization.\\n  '\n    if add_colormap:\n        colored_label = get_dataset_colormap.label_to_color_image(label, colormap_type)\n    else:\n        colored_label = label\n        if normalize_to_unit_values:\n            min_value = np.amin(colored_label)\n            max_value = np.amax(colored_label)\n            range_value = max_value - min_value\n            if range_value != 0:\n                colored_label = (colored_label - min_value) / range_value\n        if scale_values:\n            colored_label = 255.0 * colored_label\n    pil_image = img.fromarray(colored_label.astype(dtype=np.uint8))\n    with tf.gfile.Open('%s/%s.png' % (save_dir, filename), mode='w') as f:\n        pil_image.save(f, 'PNG')",
            "def save_annotation(label, save_dir, filename, add_colormap=True, normalize_to_unit_values=False, scale_values=False, colormap_type=get_dataset_colormap.get_pascal_name()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Saves the given label to image on disk.\\n\\n  Args:\\n    label: The numpy array to be saved. The data will be converted\\n      to uint8 and saved as png image.\\n    save_dir: String, the directory to which the results will be saved.\\n    filename: String, the image filename.\\n    add_colormap: Boolean, add color map to the label or not.\\n    normalize_to_unit_values: Boolean, normalize the input values to [0, 1].\\n    scale_values: Boolean, scale the input values to [0, 255] for visualization.\\n    colormap_type: String, colormap type for visualization.\\n  '\n    if add_colormap:\n        colored_label = get_dataset_colormap.label_to_color_image(label, colormap_type)\n    else:\n        colored_label = label\n        if normalize_to_unit_values:\n            min_value = np.amin(colored_label)\n            max_value = np.amax(colored_label)\n            range_value = max_value - min_value\n            if range_value != 0:\n                colored_label = (colored_label - min_value) / range_value\n        if scale_values:\n            colored_label = 255.0 * colored_label\n    pil_image = img.fromarray(colored_label.astype(dtype=np.uint8))\n    with tf.gfile.Open('%s/%s.png' % (save_dir, filename), mode='w') as f:\n        pil_image.save(f, 'PNG')",
            "def save_annotation(label, save_dir, filename, add_colormap=True, normalize_to_unit_values=False, scale_values=False, colormap_type=get_dataset_colormap.get_pascal_name()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Saves the given label to image on disk.\\n\\n  Args:\\n    label: The numpy array to be saved. The data will be converted\\n      to uint8 and saved as png image.\\n    save_dir: String, the directory to which the results will be saved.\\n    filename: String, the image filename.\\n    add_colormap: Boolean, add color map to the label or not.\\n    normalize_to_unit_values: Boolean, normalize the input values to [0, 1].\\n    scale_values: Boolean, scale the input values to [0, 255] for visualization.\\n    colormap_type: String, colormap type for visualization.\\n  '\n    if add_colormap:\n        colored_label = get_dataset_colormap.label_to_color_image(label, colormap_type)\n    else:\n        colored_label = label\n        if normalize_to_unit_values:\n            min_value = np.amin(colored_label)\n            max_value = np.amax(colored_label)\n            range_value = max_value - min_value\n            if range_value != 0:\n                colored_label = (colored_label - min_value) / range_value\n        if scale_values:\n            colored_label = 255.0 * colored_label\n    pil_image = img.fromarray(colored_label.astype(dtype=np.uint8))\n    with tf.gfile.Open('%s/%s.png' % (save_dir, filename), mode='w') as f:\n        pil_image.save(f, 'PNG')"
        ]
    }
]
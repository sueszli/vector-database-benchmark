[
    {
        "func_name": "bfs",
        "original": "def bfs(grid, source, locations):\n    (r, c) = locations[source]\n    lookup = [[False] * len(grid[0]) for _ in xrange(len(grid))]\n    lookup[r][c] = True\n    q = collections.deque([(r, c, 0)])\n    dist = {}\n    while q:\n        (r, c, d) = q.popleft()\n        if source != grid[r][c] != '.':\n            dist[grid[r][c]] = d\n            continue\n        for direction in directions:\n            (cr, cc) = (r + direction[0], c + direction[1])\n            if not (0 <= cr < len(grid) and 0 <= cc < len(grid[cr])):\n                continue\n            if grid[cr][cc] != '#' and (not lookup[cr][cc]):\n                lookup[cr][cc] = True\n                q.append((cr, cc, d + 1))\n    return dist",
        "mutated": [
            "def bfs(grid, source, locations):\n    if False:\n        i = 10\n    (r, c) = locations[source]\n    lookup = [[False] * len(grid[0]) for _ in xrange(len(grid))]\n    lookup[r][c] = True\n    q = collections.deque([(r, c, 0)])\n    dist = {}\n    while q:\n        (r, c, d) = q.popleft()\n        if source != grid[r][c] != '.':\n            dist[grid[r][c]] = d\n            continue\n        for direction in directions:\n            (cr, cc) = (r + direction[0], c + direction[1])\n            if not (0 <= cr < len(grid) and 0 <= cc < len(grid[cr])):\n                continue\n            if grid[cr][cc] != '#' and (not lookup[cr][cc]):\n                lookup[cr][cc] = True\n                q.append((cr, cc, d + 1))\n    return dist",
            "def bfs(grid, source, locations):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (r, c) = locations[source]\n    lookup = [[False] * len(grid[0]) for _ in xrange(len(grid))]\n    lookup[r][c] = True\n    q = collections.deque([(r, c, 0)])\n    dist = {}\n    while q:\n        (r, c, d) = q.popleft()\n        if source != grid[r][c] != '.':\n            dist[grid[r][c]] = d\n            continue\n        for direction in directions:\n            (cr, cc) = (r + direction[0], c + direction[1])\n            if not (0 <= cr < len(grid) and 0 <= cc < len(grid[cr])):\n                continue\n            if grid[cr][cc] != '#' and (not lookup[cr][cc]):\n                lookup[cr][cc] = True\n                q.append((cr, cc, d + 1))\n    return dist",
            "def bfs(grid, source, locations):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (r, c) = locations[source]\n    lookup = [[False] * len(grid[0]) for _ in xrange(len(grid))]\n    lookup[r][c] = True\n    q = collections.deque([(r, c, 0)])\n    dist = {}\n    while q:\n        (r, c, d) = q.popleft()\n        if source != grid[r][c] != '.':\n            dist[grid[r][c]] = d\n            continue\n        for direction in directions:\n            (cr, cc) = (r + direction[0], c + direction[1])\n            if not (0 <= cr < len(grid) and 0 <= cc < len(grid[cr])):\n                continue\n            if grid[cr][cc] != '#' and (not lookup[cr][cc]):\n                lookup[cr][cc] = True\n                q.append((cr, cc, d + 1))\n    return dist",
            "def bfs(grid, source, locations):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (r, c) = locations[source]\n    lookup = [[False] * len(grid[0]) for _ in xrange(len(grid))]\n    lookup[r][c] = True\n    q = collections.deque([(r, c, 0)])\n    dist = {}\n    while q:\n        (r, c, d) = q.popleft()\n        if source != grid[r][c] != '.':\n            dist[grid[r][c]] = d\n            continue\n        for direction in directions:\n            (cr, cc) = (r + direction[0], c + direction[1])\n            if not (0 <= cr < len(grid) and 0 <= cc < len(grid[cr])):\n                continue\n            if grid[cr][cc] != '#' and (not lookup[cr][cc]):\n                lookup[cr][cc] = True\n                q.append((cr, cc, d + 1))\n    return dist",
            "def bfs(grid, source, locations):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (r, c) = locations[source]\n    lookup = [[False] * len(grid[0]) for _ in xrange(len(grid))]\n    lookup[r][c] = True\n    q = collections.deque([(r, c, 0)])\n    dist = {}\n    while q:\n        (r, c, d) = q.popleft()\n        if source != grid[r][c] != '.':\n            dist[grid[r][c]] = d\n            continue\n        for direction in directions:\n            (cr, cc) = (r + direction[0], c + direction[1])\n            if not (0 <= cr < len(grid) and 0 <= cc < len(grid[cr])):\n                continue\n            if grid[cr][cc] != '#' and (not lookup[cr][cc]):\n                lookup[cr][cc] = True\n                q.append((cr, cc, d + 1))\n    return dist"
        ]
    },
    {
        "func_name": "shortestPathAllKeys",
        "original": "def shortestPathAllKeys(self, grid):\n    \"\"\"\n        :type grid: List[str]\n        :rtype: int\n        \"\"\"\n    directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]\n\n    def bfs(grid, source, locations):\n        (r, c) = locations[source]\n        lookup = [[False] * len(grid[0]) for _ in xrange(len(grid))]\n        lookup[r][c] = True\n        q = collections.deque([(r, c, 0)])\n        dist = {}\n        while q:\n            (r, c, d) = q.popleft()\n            if source != grid[r][c] != '.':\n                dist[grid[r][c]] = d\n                continue\n            for direction in directions:\n                (cr, cc) = (r + direction[0], c + direction[1])\n                if not (0 <= cr < len(grid) and 0 <= cc < len(grid[cr])):\n                    continue\n                if grid[cr][cc] != '#' and (not lookup[cr][cc]):\n                    lookup[cr][cc] = True\n                    q.append((cr, cc, d + 1))\n        return dist\n    locations = {place: (r, c) for (r, row) in enumerate(grid) for (c, place) in enumerate(row) if place not in '.#'}\n    dists = {place: bfs(grid, place, locations) for place in locations}\n    min_heap = [(0, '@', 0)]\n    best = collections.defaultdict(lambda : collections.defaultdict(lambda : float('inf')))\n    best['@'][0] = 0\n    target_state = 2 ** sum((place.islower() for place in locations)) - 1\n    while min_heap:\n        (cur_d, place, state) = heapq.heappop(min_heap)\n        if best[place][state] < cur_d:\n            continue\n        if state == target_state:\n            return cur_d\n        for (dest, d) in dists[place].iteritems():\n            next_state = state\n            if dest.islower():\n                next_state |= 1 << ord(dest) - ord('a')\n            elif dest.isupper():\n                if not state & 1 << ord(dest) - ord('A'):\n                    continue\n            if cur_d + d < best[dest][next_state]:\n                best[dest][next_state] = cur_d + d\n                heapq.heappush(min_heap, (cur_d + d, dest, next_state))\n    return -1",
        "mutated": [
            "def shortestPathAllKeys(self, grid):\n    if False:\n        i = 10\n    '\\n        :type grid: List[str]\\n        :rtype: int\\n        '\n    directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]\n\n    def bfs(grid, source, locations):\n        (r, c) = locations[source]\n        lookup = [[False] * len(grid[0]) for _ in xrange(len(grid))]\n        lookup[r][c] = True\n        q = collections.deque([(r, c, 0)])\n        dist = {}\n        while q:\n            (r, c, d) = q.popleft()\n            if source != grid[r][c] != '.':\n                dist[grid[r][c]] = d\n                continue\n            for direction in directions:\n                (cr, cc) = (r + direction[0], c + direction[1])\n                if not (0 <= cr < len(grid) and 0 <= cc < len(grid[cr])):\n                    continue\n                if grid[cr][cc] != '#' and (not lookup[cr][cc]):\n                    lookup[cr][cc] = True\n                    q.append((cr, cc, d + 1))\n        return dist\n    locations = {place: (r, c) for (r, row) in enumerate(grid) for (c, place) in enumerate(row) if place not in '.#'}\n    dists = {place: bfs(grid, place, locations) for place in locations}\n    min_heap = [(0, '@', 0)]\n    best = collections.defaultdict(lambda : collections.defaultdict(lambda : float('inf')))\n    best['@'][0] = 0\n    target_state = 2 ** sum((place.islower() for place in locations)) - 1\n    while min_heap:\n        (cur_d, place, state) = heapq.heappop(min_heap)\n        if best[place][state] < cur_d:\n            continue\n        if state == target_state:\n            return cur_d\n        for (dest, d) in dists[place].iteritems():\n            next_state = state\n            if dest.islower():\n                next_state |= 1 << ord(dest) - ord('a')\n            elif dest.isupper():\n                if not state & 1 << ord(dest) - ord('A'):\n                    continue\n            if cur_d + d < best[dest][next_state]:\n                best[dest][next_state] = cur_d + d\n                heapq.heappush(min_heap, (cur_d + d, dest, next_state))\n    return -1",
            "def shortestPathAllKeys(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type grid: List[str]\\n        :rtype: int\\n        '\n    directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]\n\n    def bfs(grid, source, locations):\n        (r, c) = locations[source]\n        lookup = [[False] * len(grid[0]) for _ in xrange(len(grid))]\n        lookup[r][c] = True\n        q = collections.deque([(r, c, 0)])\n        dist = {}\n        while q:\n            (r, c, d) = q.popleft()\n            if source != grid[r][c] != '.':\n                dist[grid[r][c]] = d\n                continue\n            for direction in directions:\n                (cr, cc) = (r + direction[0], c + direction[1])\n                if not (0 <= cr < len(grid) and 0 <= cc < len(grid[cr])):\n                    continue\n                if grid[cr][cc] != '#' and (not lookup[cr][cc]):\n                    lookup[cr][cc] = True\n                    q.append((cr, cc, d + 1))\n        return dist\n    locations = {place: (r, c) for (r, row) in enumerate(grid) for (c, place) in enumerate(row) if place not in '.#'}\n    dists = {place: bfs(grid, place, locations) for place in locations}\n    min_heap = [(0, '@', 0)]\n    best = collections.defaultdict(lambda : collections.defaultdict(lambda : float('inf')))\n    best['@'][0] = 0\n    target_state = 2 ** sum((place.islower() for place in locations)) - 1\n    while min_heap:\n        (cur_d, place, state) = heapq.heappop(min_heap)\n        if best[place][state] < cur_d:\n            continue\n        if state == target_state:\n            return cur_d\n        for (dest, d) in dists[place].iteritems():\n            next_state = state\n            if dest.islower():\n                next_state |= 1 << ord(dest) - ord('a')\n            elif dest.isupper():\n                if not state & 1 << ord(dest) - ord('A'):\n                    continue\n            if cur_d + d < best[dest][next_state]:\n                best[dest][next_state] = cur_d + d\n                heapq.heappush(min_heap, (cur_d + d, dest, next_state))\n    return -1",
            "def shortestPathAllKeys(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type grid: List[str]\\n        :rtype: int\\n        '\n    directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]\n\n    def bfs(grid, source, locations):\n        (r, c) = locations[source]\n        lookup = [[False] * len(grid[0]) for _ in xrange(len(grid))]\n        lookup[r][c] = True\n        q = collections.deque([(r, c, 0)])\n        dist = {}\n        while q:\n            (r, c, d) = q.popleft()\n            if source != grid[r][c] != '.':\n                dist[grid[r][c]] = d\n                continue\n            for direction in directions:\n                (cr, cc) = (r + direction[0], c + direction[1])\n                if not (0 <= cr < len(grid) and 0 <= cc < len(grid[cr])):\n                    continue\n                if grid[cr][cc] != '#' and (not lookup[cr][cc]):\n                    lookup[cr][cc] = True\n                    q.append((cr, cc, d + 1))\n        return dist\n    locations = {place: (r, c) for (r, row) in enumerate(grid) for (c, place) in enumerate(row) if place not in '.#'}\n    dists = {place: bfs(grid, place, locations) for place in locations}\n    min_heap = [(0, '@', 0)]\n    best = collections.defaultdict(lambda : collections.defaultdict(lambda : float('inf')))\n    best['@'][0] = 0\n    target_state = 2 ** sum((place.islower() for place in locations)) - 1\n    while min_heap:\n        (cur_d, place, state) = heapq.heappop(min_heap)\n        if best[place][state] < cur_d:\n            continue\n        if state == target_state:\n            return cur_d\n        for (dest, d) in dists[place].iteritems():\n            next_state = state\n            if dest.islower():\n                next_state |= 1 << ord(dest) - ord('a')\n            elif dest.isupper():\n                if not state & 1 << ord(dest) - ord('A'):\n                    continue\n            if cur_d + d < best[dest][next_state]:\n                best[dest][next_state] = cur_d + d\n                heapq.heappush(min_heap, (cur_d + d, dest, next_state))\n    return -1",
            "def shortestPathAllKeys(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type grid: List[str]\\n        :rtype: int\\n        '\n    directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]\n\n    def bfs(grid, source, locations):\n        (r, c) = locations[source]\n        lookup = [[False] * len(grid[0]) for _ in xrange(len(grid))]\n        lookup[r][c] = True\n        q = collections.deque([(r, c, 0)])\n        dist = {}\n        while q:\n            (r, c, d) = q.popleft()\n            if source != grid[r][c] != '.':\n                dist[grid[r][c]] = d\n                continue\n            for direction in directions:\n                (cr, cc) = (r + direction[0], c + direction[1])\n                if not (0 <= cr < len(grid) and 0 <= cc < len(grid[cr])):\n                    continue\n                if grid[cr][cc] != '#' and (not lookup[cr][cc]):\n                    lookup[cr][cc] = True\n                    q.append((cr, cc, d + 1))\n        return dist\n    locations = {place: (r, c) for (r, row) in enumerate(grid) for (c, place) in enumerate(row) if place not in '.#'}\n    dists = {place: bfs(grid, place, locations) for place in locations}\n    min_heap = [(0, '@', 0)]\n    best = collections.defaultdict(lambda : collections.defaultdict(lambda : float('inf')))\n    best['@'][0] = 0\n    target_state = 2 ** sum((place.islower() for place in locations)) - 1\n    while min_heap:\n        (cur_d, place, state) = heapq.heappop(min_heap)\n        if best[place][state] < cur_d:\n            continue\n        if state == target_state:\n            return cur_d\n        for (dest, d) in dists[place].iteritems():\n            next_state = state\n            if dest.islower():\n                next_state |= 1 << ord(dest) - ord('a')\n            elif dest.isupper():\n                if not state & 1 << ord(dest) - ord('A'):\n                    continue\n            if cur_d + d < best[dest][next_state]:\n                best[dest][next_state] = cur_d + d\n                heapq.heappush(min_heap, (cur_d + d, dest, next_state))\n    return -1",
            "def shortestPathAllKeys(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type grid: List[str]\\n        :rtype: int\\n        '\n    directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]\n\n    def bfs(grid, source, locations):\n        (r, c) = locations[source]\n        lookup = [[False] * len(grid[0]) for _ in xrange(len(grid))]\n        lookup[r][c] = True\n        q = collections.deque([(r, c, 0)])\n        dist = {}\n        while q:\n            (r, c, d) = q.popleft()\n            if source != grid[r][c] != '.':\n                dist[grid[r][c]] = d\n                continue\n            for direction in directions:\n                (cr, cc) = (r + direction[0], c + direction[1])\n                if not (0 <= cr < len(grid) and 0 <= cc < len(grid[cr])):\n                    continue\n                if grid[cr][cc] != '#' and (not lookup[cr][cc]):\n                    lookup[cr][cc] = True\n                    q.append((cr, cc, d + 1))\n        return dist\n    locations = {place: (r, c) for (r, row) in enumerate(grid) for (c, place) in enumerate(row) if place not in '.#'}\n    dists = {place: bfs(grid, place, locations) for place in locations}\n    min_heap = [(0, '@', 0)]\n    best = collections.defaultdict(lambda : collections.defaultdict(lambda : float('inf')))\n    best['@'][0] = 0\n    target_state = 2 ** sum((place.islower() for place in locations)) - 1\n    while min_heap:\n        (cur_d, place, state) = heapq.heappop(min_heap)\n        if best[place][state] < cur_d:\n            continue\n        if state == target_state:\n            return cur_d\n        for (dest, d) in dists[place].iteritems():\n            next_state = state\n            if dest.islower():\n                next_state |= 1 << ord(dest) - ord('a')\n            elif dest.isupper():\n                if not state & 1 << ord(dest) - ord('A'):\n                    continue\n            if cur_d + d < best[dest][next_state]:\n                best[dest][next_state] = cur_d + d\n                heapq.heappush(min_heap, (cur_d + d, dest, next_state))\n    return -1"
        ]
    }
]
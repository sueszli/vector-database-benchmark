[
    {
        "func_name": "pwma",
        "original": "def pwma(candles: np.ndarray, period: int=5, source_type: str='close', sequential: bool=False) -> Union[float, np.ndarray]:\n    \"\"\"\n    Pascals Weighted Moving Average (PWMA)\n\n    :param candles: np.ndarray\n    :param period: int - default: 5\n    :param source_type: str - default: \"close\"\n    :param sequential: bool - default: False\n\n    :return: float | np.ndarray\n    \"\"\"\n    if len(candles.shape) == 1:\n        source = candles\n    else:\n        candles = slice_candles(candles, sequential)\n        source = get_candle_source(candles, source_type=source_type)\n    triangle = pascals_triangle(n=period - 1)\n    swv = sliding_window_view(source, window_shape=period)\n    res = np.average(swv, weights=triangle, axis=-1)\n    return same_length(candles, res) if sequential else res[-1]",
        "mutated": [
            "def pwma(candles: np.ndarray, period: int=5, source_type: str='close', sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n    '\\n    Pascals Weighted Moving Average (PWMA)\\n\\n    :param candles: np.ndarray\\n    :param period: int - default: 5\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    if len(candles.shape) == 1:\n        source = candles\n    else:\n        candles = slice_candles(candles, sequential)\n        source = get_candle_source(candles, source_type=source_type)\n    triangle = pascals_triangle(n=period - 1)\n    swv = sliding_window_view(source, window_shape=period)\n    res = np.average(swv, weights=triangle, axis=-1)\n    return same_length(candles, res) if sequential else res[-1]",
            "def pwma(candles: np.ndarray, period: int=5, source_type: str='close', sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Pascals Weighted Moving Average (PWMA)\\n\\n    :param candles: np.ndarray\\n    :param period: int - default: 5\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    if len(candles.shape) == 1:\n        source = candles\n    else:\n        candles = slice_candles(candles, sequential)\n        source = get_candle_source(candles, source_type=source_type)\n    triangle = pascals_triangle(n=period - 1)\n    swv = sliding_window_view(source, window_shape=period)\n    res = np.average(swv, weights=triangle, axis=-1)\n    return same_length(candles, res) if sequential else res[-1]",
            "def pwma(candles: np.ndarray, period: int=5, source_type: str='close', sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Pascals Weighted Moving Average (PWMA)\\n\\n    :param candles: np.ndarray\\n    :param period: int - default: 5\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    if len(candles.shape) == 1:\n        source = candles\n    else:\n        candles = slice_candles(candles, sequential)\n        source = get_candle_source(candles, source_type=source_type)\n    triangle = pascals_triangle(n=period - 1)\n    swv = sliding_window_view(source, window_shape=period)\n    res = np.average(swv, weights=triangle, axis=-1)\n    return same_length(candles, res) if sequential else res[-1]",
            "def pwma(candles: np.ndarray, period: int=5, source_type: str='close', sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Pascals Weighted Moving Average (PWMA)\\n\\n    :param candles: np.ndarray\\n    :param period: int - default: 5\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    if len(candles.shape) == 1:\n        source = candles\n    else:\n        candles = slice_candles(candles, sequential)\n        source = get_candle_source(candles, source_type=source_type)\n    triangle = pascals_triangle(n=period - 1)\n    swv = sliding_window_view(source, window_shape=period)\n    res = np.average(swv, weights=triangle, axis=-1)\n    return same_length(candles, res) if sequential else res[-1]",
            "def pwma(candles: np.ndarray, period: int=5, source_type: str='close', sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Pascals Weighted Moving Average (PWMA)\\n\\n    :param candles: np.ndarray\\n    :param period: int - default: 5\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    if len(candles.shape) == 1:\n        source = candles\n    else:\n        candles = slice_candles(candles, sequential)\n        source = get_candle_source(candles, source_type=source_type)\n    triangle = pascals_triangle(n=period - 1)\n    swv = sliding_window_view(source, window_shape=period)\n    res = np.average(swv, weights=triangle, axis=-1)\n    return same_length(candles, res) if sequential else res[-1]"
        ]
    },
    {
        "func_name": "pascals_triangle",
        "original": "def pascals_triangle(n: int=None) -> np.ndarray:\n    \"\"\"Pascal's Triangle\n    Returns a numpy array of the nth row of Pascal's Triangle.\n    n=4  => triangle: [1, 4, 6, 4, 1]\n         => weighted: [0.0625, 0.25, 0.375, 0.25, 0.0625]\n    \"\"\"\n    n = int(np.fabs(n)) if n is not None else 0\n    triangle = np.array([combination(n=n, r=i) for i in range(n + 1)])\n    triangle_sum = np.sum(triangle)\n    return triangle / triangle_sum",
        "mutated": [
            "def pascals_triangle(n: int=None) -> np.ndarray:\n    if False:\n        i = 10\n    \"Pascal's Triangle\\n    Returns a numpy array of the nth row of Pascal's Triangle.\\n    n=4  => triangle: [1, 4, 6, 4, 1]\\n         => weighted: [0.0625, 0.25, 0.375, 0.25, 0.0625]\\n    \"\n    n = int(np.fabs(n)) if n is not None else 0\n    triangle = np.array([combination(n=n, r=i) for i in range(n + 1)])\n    triangle_sum = np.sum(triangle)\n    return triangle / triangle_sum",
            "def pascals_triangle(n: int=None) -> np.ndarray:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Pascal's Triangle\\n    Returns a numpy array of the nth row of Pascal's Triangle.\\n    n=4  => triangle: [1, 4, 6, 4, 1]\\n         => weighted: [0.0625, 0.25, 0.375, 0.25, 0.0625]\\n    \"\n    n = int(np.fabs(n)) if n is not None else 0\n    triangle = np.array([combination(n=n, r=i) for i in range(n + 1)])\n    triangle_sum = np.sum(triangle)\n    return triangle / triangle_sum",
            "def pascals_triangle(n: int=None) -> np.ndarray:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Pascal's Triangle\\n    Returns a numpy array of the nth row of Pascal's Triangle.\\n    n=4  => triangle: [1, 4, 6, 4, 1]\\n         => weighted: [0.0625, 0.25, 0.375, 0.25, 0.0625]\\n    \"\n    n = int(np.fabs(n)) if n is not None else 0\n    triangle = np.array([combination(n=n, r=i) for i in range(n + 1)])\n    triangle_sum = np.sum(triangle)\n    return triangle / triangle_sum",
            "def pascals_triangle(n: int=None) -> np.ndarray:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Pascal's Triangle\\n    Returns a numpy array of the nth row of Pascal's Triangle.\\n    n=4  => triangle: [1, 4, 6, 4, 1]\\n         => weighted: [0.0625, 0.25, 0.375, 0.25, 0.0625]\\n    \"\n    n = int(np.fabs(n)) if n is not None else 0\n    triangle = np.array([combination(n=n, r=i) for i in range(n + 1)])\n    triangle_sum = np.sum(triangle)\n    return triangle / triangle_sum",
            "def pascals_triangle(n: int=None) -> np.ndarray:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Pascal's Triangle\\n    Returns a numpy array of the nth row of Pascal's Triangle.\\n    n=4  => triangle: [1, 4, 6, 4, 1]\\n         => weighted: [0.0625, 0.25, 0.375, 0.25, 0.0625]\\n    \"\n    n = int(np.fabs(n)) if n is not None else 0\n    triangle = np.array([combination(n=n, r=i) for i in range(n + 1)])\n    triangle_sum = np.sum(triangle)\n    return triangle / triangle_sum"
        ]
    },
    {
        "func_name": "combination",
        "original": "def combination(n, r) -> int:\n    \"\"\"https://stackoverflow.com/questions/4941753/is-there-a-math-ncr-function-in-python\"\"\"\n    n = int(np.fabs(n))\n    r = int(np.fabs(r))\n    r = min(n, n - r)\n    if r == 0:\n        return 1\n    numerator = reduce(mul, range(n, n - r, -1), 1)\n    denominator = reduce(mul, range(1, r + 1), 1)\n    return numerator // denominator",
        "mutated": [
            "def combination(n, r) -> int:\n    if False:\n        i = 10\n    'https://stackoverflow.com/questions/4941753/is-there-a-math-ncr-function-in-python'\n    n = int(np.fabs(n))\n    r = int(np.fabs(r))\n    r = min(n, n - r)\n    if r == 0:\n        return 1\n    numerator = reduce(mul, range(n, n - r, -1), 1)\n    denominator = reduce(mul, range(1, r + 1), 1)\n    return numerator // denominator",
            "def combination(n, r) -> int:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'https://stackoverflow.com/questions/4941753/is-there-a-math-ncr-function-in-python'\n    n = int(np.fabs(n))\n    r = int(np.fabs(r))\n    r = min(n, n - r)\n    if r == 0:\n        return 1\n    numerator = reduce(mul, range(n, n - r, -1), 1)\n    denominator = reduce(mul, range(1, r + 1), 1)\n    return numerator // denominator",
            "def combination(n, r) -> int:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'https://stackoverflow.com/questions/4941753/is-there-a-math-ncr-function-in-python'\n    n = int(np.fabs(n))\n    r = int(np.fabs(r))\n    r = min(n, n - r)\n    if r == 0:\n        return 1\n    numerator = reduce(mul, range(n, n - r, -1), 1)\n    denominator = reduce(mul, range(1, r + 1), 1)\n    return numerator // denominator",
            "def combination(n, r) -> int:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'https://stackoverflow.com/questions/4941753/is-there-a-math-ncr-function-in-python'\n    n = int(np.fabs(n))\n    r = int(np.fabs(r))\n    r = min(n, n - r)\n    if r == 0:\n        return 1\n    numerator = reduce(mul, range(n, n - r, -1), 1)\n    denominator = reduce(mul, range(1, r + 1), 1)\n    return numerator // denominator",
            "def combination(n, r) -> int:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'https://stackoverflow.com/questions/4941753/is-there-a-math-ncr-function-in-python'\n    n = int(np.fabs(n))\n    r = int(np.fabs(r))\n    r = min(n, n - r)\n    if r == 0:\n        return 1\n    numerator = reduce(mul, range(n, n - r, -1), 1)\n    denominator = reduce(mul, range(1, r + 1), 1)\n    return numerator // denominator"
        ]
    }
]
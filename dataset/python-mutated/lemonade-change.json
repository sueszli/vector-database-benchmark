[
    {
        "func_name": "lemonadeChange",
        "original": "def lemonadeChange(self, bills):\n    \"\"\"\n        :type bills: List[int]\n        :rtype: bool\n        \"\"\"\n    coins = [20, 10, 5]\n    counts = collections.defaultdict(int)\n    for bill in bills:\n        counts[bill] += 1\n        change = bill - coins[-1]\n        for coin in coins:\n            if change == 0:\n                break\n            if change >= coin:\n                count = min(counts[coin], change // coin)\n                counts[coin] -= count\n                change -= coin * count\n        if change != 0:\n            return False\n    return True",
        "mutated": [
            "def lemonadeChange(self, bills):\n    if False:\n        i = 10\n    '\\n        :type bills: List[int]\\n        :rtype: bool\\n        '\n    coins = [20, 10, 5]\n    counts = collections.defaultdict(int)\n    for bill in bills:\n        counts[bill] += 1\n        change = bill - coins[-1]\n        for coin in coins:\n            if change == 0:\n                break\n            if change >= coin:\n                count = min(counts[coin], change // coin)\n                counts[coin] -= count\n                change -= coin * count\n        if change != 0:\n            return False\n    return True",
            "def lemonadeChange(self, bills):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type bills: List[int]\\n        :rtype: bool\\n        '\n    coins = [20, 10, 5]\n    counts = collections.defaultdict(int)\n    for bill in bills:\n        counts[bill] += 1\n        change = bill - coins[-1]\n        for coin in coins:\n            if change == 0:\n                break\n            if change >= coin:\n                count = min(counts[coin], change // coin)\n                counts[coin] -= count\n                change -= coin * count\n        if change != 0:\n            return False\n    return True",
            "def lemonadeChange(self, bills):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type bills: List[int]\\n        :rtype: bool\\n        '\n    coins = [20, 10, 5]\n    counts = collections.defaultdict(int)\n    for bill in bills:\n        counts[bill] += 1\n        change = bill - coins[-1]\n        for coin in coins:\n            if change == 0:\n                break\n            if change >= coin:\n                count = min(counts[coin], change // coin)\n                counts[coin] -= count\n                change -= coin * count\n        if change != 0:\n            return False\n    return True",
            "def lemonadeChange(self, bills):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type bills: List[int]\\n        :rtype: bool\\n        '\n    coins = [20, 10, 5]\n    counts = collections.defaultdict(int)\n    for bill in bills:\n        counts[bill] += 1\n        change = bill - coins[-1]\n        for coin in coins:\n            if change == 0:\n                break\n            if change >= coin:\n                count = min(counts[coin], change // coin)\n                counts[coin] -= count\n                change -= coin * count\n        if change != 0:\n            return False\n    return True",
            "def lemonadeChange(self, bills):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type bills: List[int]\\n        :rtype: bool\\n        '\n    coins = [20, 10, 5]\n    counts = collections.defaultdict(int)\n    for bill in bills:\n        counts[bill] += 1\n        change = bill - coins[-1]\n        for coin in coins:\n            if change == 0:\n                break\n            if change >= coin:\n                count = min(counts[coin], change // coin)\n                counts[coin] -= count\n                change -= coin * count\n        if change != 0:\n            return False\n    return True"
        ]
    },
    {
        "func_name": "lemonadeChange",
        "original": "def lemonadeChange(self, bills):\n    \"\"\"\n        :type bills: List[int]\n        :rtype: bool\n        \"\"\"\n    (five, ten) = (0, 0)\n    for bill in bills:\n        if bill == 5:\n            five += 1\n        elif bill == 10:\n            if not five:\n                return False\n            five -= 1\n            ten += 1\n        elif ten and five:\n            ten -= 1\n            five -= 1\n        elif five >= 3:\n            five -= 3\n        else:\n            return False\n    return True",
        "mutated": [
            "def lemonadeChange(self, bills):\n    if False:\n        i = 10\n    '\\n        :type bills: List[int]\\n        :rtype: bool\\n        '\n    (five, ten) = (0, 0)\n    for bill in bills:\n        if bill == 5:\n            five += 1\n        elif bill == 10:\n            if not five:\n                return False\n            five -= 1\n            ten += 1\n        elif ten and five:\n            ten -= 1\n            five -= 1\n        elif five >= 3:\n            five -= 3\n        else:\n            return False\n    return True",
            "def lemonadeChange(self, bills):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type bills: List[int]\\n        :rtype: bool\\n        '\n    (five, ten) = (0, 0)\n    for bill in bills:\n        if bill == 5:\n            five += 1\n        elif bill == 10:\n            if not five:\n                return False\n            five -= 1\n            ten += 1\n        elif ten and five:\n            ten -= 1\n            five -= 1\n        elif five >= 3:\n            five -= 3\n        else:\n            return False\n    return True",
            "def lemonadeChange(self, bills):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type bills: List[int]\\n        :rtype: bool\\n        '\n    (five, ten) = (0, 0)\n    for bill in bills:\n        if bill == 5:\n            five += 1\n        elif bill == 10:\n            if not five:\n                return False\n            five -= 1\n            ten += 1\n        elif ten and five:\n            ten -= 1\n            five -= 1\n        elif five >= 3:\n            five -= 3\n        else:\n            return False\n    return True",
            "def lemonadeChange(self, bills):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type bills: List[int]\\n        :rtype: bool\\n        '\n    (five, ten) = (0, 0)\n    for bill in bills:\n        if bill == 5:\n            five += 1\n        elif bill == 10:\n            if not five:\n                return False\n            five -= 1\n            ten += 1\n        elif ten and five:\n            ten -= 1\n            five -= 1\n        elif five >= 3:\n            five -= 3\n        else:\n            return False\n    return True",
            "def lemonadeChange(self, bills):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type bills: List[int]\\n        :rtype: bool\\n        '\n    (five, ten) = (0, 0)\n    for bill in bills:\n        if bill == 5:\n            five += 1\n        elif bill == 10:\n            if not five:\n                return False\n            five -= 1\n            ten += 1\n        elif ten and five:\n            ten -= 1\n            five -= 1\n        elif five >= 3:\n            five -= 3\n        else:\n            return False\n    return True"
        ]
    }
]
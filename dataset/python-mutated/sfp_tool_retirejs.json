[
    {
        "func_name": "setup",
        "original": "def setup(self, sfc, userOpts=dict()):\n    self.sf = sfc\n    self.results = self.tempStorage()\n    for opt in userOpts.keys():\n        self.opts[opt] = userOpts[opt]",
        "mutated": [
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n    self.sf = sfc\n    self.results = self.tempStorage()\n    for opt in userOpts.keys():\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.sf = sfc\n    self.results = self.tempStorage()\n    for opt in userOpts.keys():\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.sf = sfc\n    self.results = self.tempStorage()\n    for opt in userOpts.keys():\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.sf = sfc\n    self.results = self.tempStorage()\n    for opt in userOpts.keys():\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.sf = sfc\n    self.results = self.tempStorage()\n    for opt in userOpts.keys():\n        self.opts[opt] = userOpts[opt]"
        ]
    },
    {
        "func_name": "watchedEvents",
        "original": "def watchedEvents(self):\n    return ['LINKED_URL_INTERNAL', 'LINKED_URL_EXTERNAL']",
        "mutated": [
            "def watchedEvents(self):\n    if False:\n        i = 10\n    return ['LINKED_URL_INTERNAL', 'LINKED_URL_EXTERNAL']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return ['LINKED_URL_INTERNAL', 'LINKED_URL_EXTERNAL']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return ['LINKED_URL_INTERNAL', 'LINKED_URL_EXTERNAL']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return ['LINKED_URL_INTERNAL', 'LINKED_URL_EXTERNAL']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return ['LINKED_URL_INTERNAL', 'LINKED_URL_EXTERNAL']"
        ]
    },
    {
        "func_name": "producedEvents",
        "original": "def producedEvents(self):\n    return ['VULNERABILITY_CVE_CRITICAL', 'VULNERABILITY_CVE_HIGH', 'VULNERABILITY_CVE_MEDIUM', 'VULNERABILITY_CVE_LOW', 'VULNERABILITY_GENERAL']",
        "mutated": [
            "def producedEvents(self):\n    if False:\n        i = 10\n    return ['VULNERABILITY_CVE_CRITICAL', 'VULNERABILITY_CVE_HIGH', 'VULNERABILITY_CVE_MEDIUM', 'VULNERABILITY_CVE_LOW', 'VULNERABILITY_GENERAL']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return ['VULNERABILITY_CVE_CRITICAL', 'VULNERABILITY_CVE_HIGH', 'VULNERABILITY_CVE_MEDIUM', 'VULNERABILITY_CVE_LOW', 'VULNERABILITY_GENERAL']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return ['VULNERABILITY_CVE_CRITICAL', 'VULNERABILITY_CVE_HIGH', 'VULNERABILITY_CVE_MEDIUM', 'VULNERABILITY_CVE_LOW', 'VULNERABILITY_GENERAL']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return ['VULNERABILITY_CVE_CRITICAL', 'VULNERABILITY_CVE_HIGH', 'VULNERABILITY_CVE_MEDIUM', 'VULNERABILITY_CVE_LOW', 'VULNERABILITY_GENERAL']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return ['VULNERABILITY_CVE_CRITICAL', 'VULNERABILITY_CVE_HIGH', 'VULNERABILITY_CVE_MEDIUM', 'VULNERABILITY_CVE_LOW', 'VULNERABILITY_GENERAL']"
        ]
    },
    {
        "func_name": "handleEvent",
        "original": "def handleEvent(self, event):\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if self.errorState:\n        return\n    if not self.opts['retirejs_path']:\n        self.error('You enabled sfp_tool_retirejs but did not set a path to the tool!')\n        self.errorState = True\n        return\n    exe = self.opts['retirejs_path']\n    if self.opts['retirejs_path'].endswith('/'):\n        exe = f'{exe}retire'\n    if not os.path.isfile(exe):\n        self.error(f'File does not exist: {exe}')\n        self.errorState = True\n        return\n    if '.js' not in eventData:\n        return\n    if eventData in self.results:\n        self.debug(f'Skipping {eventData} as already scanned.')\n        return\n    self.results[eventData] = True\n    tmpdirname = tempfile.mkdtemp()\n    res = self.sf.fetchUrl(eventData, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'], disableContentEncoding=True)\n    if res['content'] is None:\n        self.error(f'Unable to fetch {eventData}')\n        return\n    p = None\n    try:\n        with open(f'{tmpdirname}/lib.js', 'wb') as f:\n            f.write(res['content'])\n        p = Popen([exe, '--outputformat', 'json', '-j'], cwd=tmpdirname, stdout=PIPE, stderr=PIPE)\n        (stdout, stderr) = p.communicate(input=None, timeout=60)\n        if p.returncode == 0 or p.returncode == 13:\n            content = stdout.decode(sys.stdin.encoding)\n        else:\n            self.error('Unable to read Retire.js content.')\n            self.debug(f'Error running Retire.js: {stderr} - {stdout}')\n            shutil.rmtree(tmpdirname)\n            return\n    except TimeoutExpired:\n        if p:\n            p.kill()\n            (stdout, stderr) = p.communicate()\n            self.debug('Timed out waiting for Retire.js to finish')\n        shutil.rmtree(tmpdirname)\n        return\n    try:\n        data = json.loads(content)\n        for item in data.get('data', []):\n            for result in item['results']:\n                for vuln in result['vulnerabilities']:\n                    if 'CVE' not in vuln['identifiers']:\n                        text = f\"{vuln['identifiers']['summary']}\\n\"\n                        text += f\"Severity: {vuln['severity']}\\n\"\n                        text += f\"Info: <SFURL>{vuln['info'][0]}</SFURL>\"\n                        evt = SpiderFootEvent('VULNERABILITY_GENERAL', text, self.__name__, event)\n                        self.notifyListeners(evt)\n                    else:\n                        for cve in vuln['identifiers']['CVE']:\n                            (etype, cvetext) = self.sf.cveInfo(cve)\n                            evt = SpiderFootEvent(etype, cvetext, self.__name__, event)\n                            self.notifyListeners(evt)\n        shutil.rmtree(tmpdirname)\n    except BaseException as e:\n        self.error(f\"Couldn't parse the JSON output of Retire.js: {e}\")\n        shutil.rmtree(tmpdirname)\n        return",
        "mutated": [
            "def handleEvent(self, event):\n    if False:\n        i = 10\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if self.errorState:\n        return\n    if not self.opts['retirejs_path']:\n        self.error('You enabled sfp_tool_retirejs but did not set a path to the tool!')\n        self.errorState = True\n        return\n    exe = self.opts['retirejs_path']\n    if self.opts['retirejs_path'].endswith('/'):\n        exe = f'{exe}retire'\n    if not os.path.isfile(exe):\n        self.error(f'File does not exist: {exe}')\n        self.errorState = True\n        return\n    if '.js' not in eventData:\n        return\n    if eventData in self.results:\n        self.debug(f'Skipping {eventData} as already scanned.')\n        return\n    self.results[eventData] = True\n    tmpdirname = tempfile.mkdtemp()\n    res = self.sf.fetchUrl(eventData, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'], disableContentEncoding=True)\n    if res['content'] is None:\n        self.error(f'Unable to fetch {eventData}')\n        return\n    p = None\n    try:\n        with open(f'{tmpdirname}/lib.js', 'wb') as f:\n            f.write(res['content'])\n        p = Popen([exe, '--outputformat', 'json', '-j'], cwd=tmpdirname, stdout=PIPE, stderr=PIPE)\n        (stdout, stderr) = p.communicate(input=None, timeout=60)\n        if p.returncode == 0 or p.returncode == 13:\n            content = stdout.decode(sys.stdin.encoding)\n        else:\n            self.error('Unable to read Retire.js content.')\n            self.debug(f'Error running Retire.js: {stderr} - {stdout}')\n            shutil.rmtree(tmpdirname)\n            return\n    except TimeoutExpired:\n        if p:\n            p.kill()\n            (stdout, stderr) = p.communicate()\n            self.debug('Timed out waiting for Retire.js to finish')\n        shutil.rmtree(tmpdirname)\n        return\n    try:\n        data = json.loads(content)\n        for item in data.get('data', []):\n            for result in item['results']:\n                for vuln in result['vulnerabilities']:\n                    if 'CVE' not in vuln['identifiers']:\n                        text = f\"{vuln['identifiers']['summary']}\\n\"\n                        text += f\"Severity: {vuln['severity']}\\n\"\n                        text += f\"Info: <SFURL>{vuln['info'][0]}</SFURL>\"\n                        evt = SpiderFootEvent('VULNERABILITY_GENERAL', text, self.__name__, event)\n                        self.notifyListeners(evt)\n                    else:\n                        for cve in vuln['identifiers']['CVE']:\n                            (etype, cvetext) = self.sf.cveInfo(cve)\n                            evt = SpiderFootEvent(etype, cvetext, self.__name__, event)\n                            self.notifyListeners(evt)\n        shutil.rmtree(tmpdirname)\n    except BaseException as e:\n        self.error(f\"Couldn't parse the JSON output of Retire.js: {e}\")\n        shutil.rmtree(tmpdirname)\n        return",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if self.errorState:\n        return\n    if not self.opts['retirejs_path']:\n        self.error('You enabled sfp_tool_retirejs but did not set a path to the tool!')\n        self.errorState = True\n        return\n    exe = self.opts['retirejs_path']\n    if self.opts['retirejs_path'].endswith('/'):\n        exe = f'{exe}retire'\n    if not os.path.isfile(exe):\n        self.error(f'File does not exist: {exe}')\n        self.errorState = True\n        return\n    if '.js' not in eventData:\n        return\n    if eventData in self.results:\n        self.debug(f'Skipping {eventData} as already scanned.')\n        return\n    self.results[eventData] = True\n    tmpdirname = tempfile.mkdtemp()\n    res = self.sf.fetchUrl(eventData, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'], disableContentEncoding=True)\n    if res['content'] is None:\n        self.error(f'Unable to fetch {eventData}')\n        return\n    p = None\n    try:\n        with open(f'{tmpdirname}/lib.js', 'wb') as f:\n            f.write(res['content'])\n        p = Popen([exe, '--outputformat', 'json', '-j'], cwd=tmpdirname, stdout=PIPE, stderr=PIPE)\n        (stdout, stderr) = p.communicate(input=None, timeout=60)\n        if p.returncode == 0 or p.returncode == 13:\n            content = stdout.decode(sys.stdin.encoding)\n        else:\n            self.error('Unable to read Retire.js content.')\n            self.debug(f'Error running Retire.js: {stderr} - {stdout}')\n            shutil.rmtree(tmpdirname)\n            return\n    except TimeoutExpired:\n        if p:\n            p.kill()\n            (stdout, stderr) = p.communicate()\n            self.debug('Timed out waiting for Retire.js to finish')\n        shutil.rmtree(tmpdirname)\n        return\n    try:\n        data = json.loads(content)\n        for item in data.get('data', []):\n            for result in item['results']:\n                for vuln in result['vulnerabilities']:\n                    if 'CVE' not in vuln['identifiers']:\n                        text = f\"{vuln['identifiers']['summary']}\\n\"\n                        text += f\"Severity: {vuln['severity']}\\n\"\n                        text += f\"Info: <SFURL>{vuln['info'][0]}</SFURL>\"\n                        evt = SpiderFootEvent('VULNERABILITY_GENERAL', text, self.__name__, event)\n                        self.notifyListeners(evt)\n                    else:\n                        for cve in vuln['identifiers']['CVE']:\n                            (etype, cvetext) = self.sf.cveInfo(cve)\n                            evt = SpiderFootEvent(etype, cvetext, self.__name__, event)\n                            self.notifyListeners(evt)\n        shutil.rmtree(tmpdirname)\n    except BaseException as e:\n        self.error(f\"Couldn't parse the JSON output of Retire.js: {e}\")\n        shutil.rmtree(tmpdirname)\n        return",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if self.errorState:\n        return\n    if not self.opts['retirejs_path']:\n        self.error('You enabled sfp_tool_retirejs but did not set a path to the tool!')\n        self.errorState = True\n        return\n    exe = self.opts['retirejs_path']\n    if self.opts['retirejs_path'].endswith('/'):\n        exe = f'{exe}retire'\n    if not os.path.isfile(exe):\n        self.error(f'File does not exist: {exe}')\n        self.errorState = True\n        return\n    if '.js' not in eventData:\n        return\n    if eventData in self.results:\n        self.debug(f'Skipping {eventData} as already scanned.')\n        return\n    self.results[eventData] = True\n    tmpdirname = tempfile.mkdtemp()\n    res = self.sf.fetchUrl(eventData, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'], disableContentEncoding=True)\n    if res['content'] is None:\n        self.error(f'Unable to fetch {eventData}')\n        return\n    p = None\n    try:\n        with open(f'{tmpdirname}/lib.js', 'wb') as f:\n            f.write(res['content'])\n        p = Popen([exe, '--outputformat', 'json', '-j'], cwd=tmpdirname, stdout=PIPE, stderr=PIPE)\n        (stdout, stderr) = p.communicate(input=None, timeout=60)\n        if p.returncode == 0 or p.returncode == 13:\n            content = stdout.decode(sys.stdin.encoding)\n        else:\n            self.error('Unable to read Retire.js content.')\n            self.debug(f'Error running Retire.js: {stderr} - {stdout}')\n            shutil.rmtree(tmpdirname)\n            return\n    except TimeoutExpired:\n        if p:\n            p.kill()\n            (stdout, stderr) = p.communicate()\n            self.debug('Timed out waiting for Retire.js to finish')\n        shutil.rmtree(tmpdirname)\n        return\n    try:\n        data = json.loads(content)\n        for item in data.get('data', []):\n            for result in item['results']:\n                for vuln in result['vulnerabilities']:\n                    if 'CVE' not in vuln['identifiers']:\n                        text = f\"{vuln['identifiers']['summary']}\\n\"\n                        text += f\"Severity: {vuln['severity']}\\n\"\n                        text += f\"Info: <SFURL>{vuln['info'][0]}</SFURL>\"\n                        evt = SpiderFootEvent('VULNERABILITY_GENERAL', text, self.__name__, event)\n                        self.notifyListeners(evt)\n                    else:\n                        for cve in vuln['identifiers']['CVE']:\n                            (etype, cvetext) = self.sf.cveInfo(cve)\n                            evt = SpiderFootEvent(etype, cvetext, self.__name__, event)\n                            self.notifyListeners(evt)\n        shutil.rmtree(tmpdirname)\n    except BaseException as e:\n        self.error(f\"Couldn't parse the JSON output of Retire.js: {e}\")\n        shutil.rmtree(tmpdirname)\n        return",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if self.errorState:\n        return\n    if not self.opts['retirejs_path']:\n        self.error('You enabled sfp_tool_retirejs but did not set a path to the tool!')\n        self.errorState = True\n        return\n    exe = self.opts['retirejs_path']\n    if self.opts['retirejs_path'].endswith('/'):\n        exe = f'{exe}retire'\n    if not os.path.isfile(exe):\n        self.error(f'File does not exist: {exe}')\n        self.errorState = True\n        return\n    if '.js' not in eventData:\n        return\n    if eventData in self.results:\n        self.debug(f'Skipping {eventData} as already scanned.')\n        return\n    self.results[eventData] = True\n    tmpdirname = tempfile.mkdtemp()\n    res = self.sf.fetchUrl(eventData, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'], disableContentEncoding=True)\n    if res['content'] is None:\n        self.error(f'Unable to fetch {eventData}')\n        return\n    p = None\n    try:\n        with open(f'{tmpdirname}/lib.js', 'wb') as f:\n            f.write(res['content'])\n        p = Popen([exe, '--outputformat', 'json', '-j'], cwd=tmpdirname, stdout=PIPE, stderr=PIPE)\n        (stdout, stderr) = p.communicate(input=None, timeout=60)\n        if p.returncode == 0 or p.returncode == 13:\n            content = stdout.decode(sys.stdin.encoding)\n        else:\n            self.error('Unable to read Retire.js content.')\n            self.debug(f'Error running Retire.js: {stderr} - {stdout}')\n            shutil.rmtree(tmpdirname)\n            return\n    except TimeoutExpired:\n        if p:\n            p.kill()\n            (stdout, stderr) = p.communicate()\n            self.debug('Timed out waiting for Retire.js to finish')\n        shutil.rmtree(tmpdirname)\n        return\n    try:\n        data = json.loads(content)\n        for item in data.get('data', []):\n            for result in item['results']:\n                for vuln in result['vulnerabilities']:\n                    if 'CVE' not in vuln['identifiers']:\n                        text = f\"{vuln['identifiers']['summary']}\\n\"\n                        text += f\"Severity: {vuln['severity']}\\n\"\n                        text += f\"Info: <SFURL>{vuln['info'][0]}</SFURL>\"\n                        evt = SpiderFootEvent('VULNERABILITY_GENERAL', text, self.__name__, event)\n                        self.notifyListeners(evt)\n                    else:\n                        for cve in vuln['identifiers']['CVE']:\n                            (etype, cvetext) = self.sf.cveInfo(cve)\n                            evt = SpiderFootEvent(etype, cvetext, self.__name__, event)\n                            self.notifyListeners(evt)\n        shutil.rmtree(tmpdirname)\n    except BaseException as e:\n        self.error(f\"Couldn't parse the JSON output of Retire.js: {e}\")\n        shutil.rmtree(tmpdirname)\n        return",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if self.errorState:\n        return\n    if not self.opts['retirejs_path']:\n        self.error('You enabled sfp_tool_retirejs but did not set a path to the tool!')\n        self.errorState = True\n        return\n    exe = self.opts['retirejs_path']\n    if self.opts['retirejs_path'].endswith('/'):\n        exe = f'{exe}retire'\n    if not os.path.isfile(exe):\n        self.error(f'File does not exist: {exe}')\n        self.errorState = True\n        return\n    if '.js' not in eventData:\n        return\n    if eventData in self.results:\n        self.debug(f'Skipping {eventData} as already scanned.')\n        return\n    self.results[eventData] = True\n    tmpdirname = tempfile.mkdtemp()\n    res = self.sf.fetchUrl(eventData, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'], disableContentEncoding=True)\n    if res['content'] is None:\n        self.error(f'Unable to fetch {eventData}')\n        return\n    p = None\n    try:\n        with open(f'{tmpdirname}/lib.js', 'wb') as f:\n            f.write(res['content'])\n        p = Popen([exe, '--outputformat', 'json', '-j'], cwd=tmpdirname, stdout=PIPE, stderr=PIPE)\n        (stdout, stderr) = p.communicate(input=None, timeout=60)\n        if p.returncode == 0 or p.returncode == 13:\n            content = stdout.decode(sys.stdin.encoding)\n        else:\n            self.error('Unable to read Retire.js content.')\n            self.debug(f'Error running Retire.js: {stderr} - {stdout}')\n            shutil.rmtree(tmpdirname)\n            return\n    except TimeoutExpired:\n        if p:\n            p.kill()\n            (stdout, stderr) = p.communicate()\n            self.debug('Timed out waiting for Retire.js to finish')\n        shutil.rmtree(tmpdirname)\n        return\n    try:\n        data = json.loads(content)\n        for item in data.get('data', []):\n            for result in item['results']:\n                for vuln in result['vulnerabilities']:\n                    if 'CVE' not in vuln['identifiers']:\n                        text = f\"{vuln['identifiers']['summary']}\\n\"\n                        text += f\"Severity: {vuln['severity']}\\n\"\n                        text += f\"Info: <SFURL>{vuln['info'][0]}</SFURL>\"\n                        evt = SpiderFootEvent('VULNERABILITY_GENERAL', text, self.__name__, event)\n                        self.notifyListeners(evt)\n                    else:\n                        for cve in vuln['identifiers']['CVE']:\n                            (etype, cvetext) = self.sf.cveInfo(cve)\n                            evt = SpiderFootEvent(etype, cvetext, self.__name__, event)\n                            self.notifyListeners(evt)\n        shutil.rmtree(tmpdirname)\n    except BaseException as e:\n        self.error(f\"Couldn't parse the JSON output of Retire.js: {e}\")\n        shutil.rmtree(tmpdirname)\n        return"
        ]
    }
]
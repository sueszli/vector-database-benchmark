[
    {
        "func_name": "test_parser_has_one_finding",
        "original": "def test_parser_has_one_finding(self):\n    with open('unittests/scans/arachni/arachni.afr.json') as testfile:\n        parser = ArachniParser()\n        findings = parser.get_findings(testfile, Test())\n        for finding in findings:\n            for endpoint in finding.unsaved_endpoints:\n                endpoint.clean()\n        self.assertEqual(1, len(findings))\n        finding = findings[0]\n        self.assertEqual('Cross-Site Scripting (XSS)', finding.title)\n        self.assertEqual(79, finding.cwe)\n        self.assertEqual('High', finding.severity)\n        self.assertEqual(datetime.datetime(2017, 11, 14, 2, 57, 29, tzinfo=datetime.timezone.utc), finding.date)",
        "mutated": [
            "def test_parser_has_one_finding(self):\n    if False:\n        i = 10\n    with open('unittests/scans/arachni/arachni.afr.json') as testfile:\n        parser = ArachniParser()\n        findings = parser.get_findings(testfile, Test())\n        for finding in findings:\n            for endpoint in finding.unsaved_endpoints:\n                endpoint.clean()\n        self.assertEqual(1, len(findings))\n        finding = findings[0]\n        self.assertEqual('Cross-Site Scripting (XSS)', finding.title)\n        self.assertEqual(79, finding.cwe)\n        self.assertEqual('High', finding.severity)\n        self.assertEqual(datetime.datetime(2017, 11, 14, 2, 57, 29, tzinfo=datetime.timezone.utc), finding.date)",
            "def test_parser_has_one_finding(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with open('unittests/scans/arachni/arachni.afr.json') as testfile:\n        parser = ArachniParser()\n        findings = parser.get_findings(testfile, Test())\n        for finding in findings:\n            for endpoint in finding.unsaved_endpoints:\n                endpoint.clean()\n        self.assertEqual(1, len(findings))\n        finding = findings[0]\n        self.assertEqual('Cross-Site Scripting (XSS)', finding.title)\n        self.assertEqual(79, finding.cwe)\n        self.assertEqual('High', finding.severity)\n        self.assertEqual(datetime.datetime(2017, 11, 14, 2, 57, 29, tzinfo=datetime.timezone.utc), finding.date)",
            "def test_parser_has_one_finding(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with open('unittests/scans/arachni/arachni.afr.json') as testfile:\n        parser = ArachniParser()\n        findings = parser.get_findings(testfile, Test())\n        for finding in findings:\n            for endpoint in finding.unsaved_endpoints:\n                endpoint.clean()\n        self.assertEqual(1, len(findings))\n        finding = findings[0]\n        self.assertEqual('Cross-Site Scripting (XSS)', finding.title)\n        self.assertEqual(79, finding.cwe)\n        self.assertEqual('High', finding.severity)\n        self.assertEqual(datetime.datetime(2017, 11, 14, 2, 57, 29, tzinfo=datetime.timezone.utc), finding.date)",
            "def test_parser_has_one_finding(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with open('unittests/scans/arachni/arachni.afr.json') as testfile:\n        parser = ArachniParser()\n        findings = parser.get_findings(testfile, Test())\n        for finding in findings:\n            for endpoint in finding.unsaved_endpoints:\n                endpoint.clean()\n        self.assertEqual(1, len(findings))\n        finding = findings[0]\n        self.assertEqual('Cross-Site Scripting (XSS)', finding.title)\n        self.assertEqual(79, finding.cwe)\n        self.assertEqual('High', finding.severity)\n        self.assertEqual(datetime.datetime(2017, 11, 14, 2, 57, 29, tzinfo=datetime.timezone.utc), finding.date)",
            "def test_parser_has_one_finding(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with open('unittests/scans/arachni/arachni.afr.json') as testfile:\n        parser = ArachniParser()\n        findings = parser.get_findings(testfile, Test())\n        for finding in findings:\n            for endpoint in finding.unsaved_endpoints:\n                endpoint.clean()\n        self.assertEqual(1, len(findings))\n        finding = findings[0]\n        self.assertEqual('Cross-Site Scripting (XSS)', finding.title)\n        self.assertEqual(79, finding.cwe)\n        self.assertEqual('High', finding.severity)\n        self.assertEqual(datetime.datetime(2017, 11, 14, 2, 57, 29, tzinfo=datetime.timezone.utc), finding.date)"
        ]
    },
    {
        "func_name": "test_parser_has_many_finding",
        "original": "def test_parser_has_many_finding(self):\n    with open('unittests/scans/arachni/dd.com.afr.json') as testfile:\n        parser = ArachniParser()\n        findings = parser.get_findings(testfile, Test())\n        for finding in findings:\n            for endpoint in finding.unsaved_endpoints:\n                endpoint.clean()\n        self.assertEqual(3, len(findings))\n        finding = findings[0]\n        self.assertEqual(\"Missing 'Strict-Transport-Security' header\", finding.title)\n        self.assertEqual(200, finding.cwe)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(datetime.datetime(2021, 3, 17, 19, 41, 46, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))), finding.date)\n        self.assertEqual(1, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual('demo.defectdojo.org', endpoint.host)\n        self.assertEqual(443, endpoint.port)\n        self.assertEqual('https', endpoint.protocol)\n        finding = findings[2]\n        self.assertEqual('Interesting response', finding.title)\n        self.assertIsNone(finding.cwe)\n        self.assertEqual('Info', finding.severity)\n        self.assertEqual(datetime.datetime(2021, 3, 17, 19, 41, 46, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))), finding.date)\n        self.assertIn('interesting', finding.unsaved_tags)\n        self.assertIn('response', finding.unsaved_tags)\n        self.assertIn('server', finding.unsaved_tags)",
        "mutated": [
            "def test_parser_has_many_finding(self):\n    if False:\n        i = 10\n    with open('unittests/scans/arachni/dd.com.afr.json') as testfile:\n        parser = ArachniParser()\n        findings = parser.get_findings(testfile, Test())\n        for finding in findings:\n            for endpoint in finding.unsaved_endpoints:\n                endpoint.clean()\n        self.assertEqual(3, len(findings))\n        finding = findings[0]\n        self.assertEqual(\"Missing 'Strict-Transport-Security' header\", finding.title)\n        self.assertEqual(200, finding.cwe)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(datetime.datetime(2021, 3, 17, 19, 41, 46, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))), finding.date)\n        self.assertEqual(1, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual('demo.defectdojo.org', endpoint.host)\n        self.assertEqual(443, endpoint.port)\n        self.assertEqual('https', endpoint.protocol)\n        finding = findings[2]\n        self.assertEqual('Interesting response', finding.title)\n        self.assertIsNone(finding.cwe)\n        self.assertEqual('Info', finding.severity)\n        self.assertEqual(datetime.datetime(2021, 3, 17, 19, 41, 46, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))), finding.date)\n        self.assertIn('interesting', finding.unsaved_tags)\n        self.assertIn('response', finding.unsaved_tags)\n        self.assertIn('server', finding.unsaved_tags)",
            "def test_parser_has_many_finding(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with open('unittests/scans/arachni/dd.com.afr.json') as testfile:\n        parser = ArachniParser()\n        findings = parser.get_findings(testfile, Test())\n        for finding in findings:\n            for endpoint in finding.unsaved_endpoints:\n                endpoint.clean()\n        self.assertEqual(3, len(findings))\n        finding = findings[0]\n        self.assertEqual(\"Missing 'Strict-Transport-Security' header\", finding.title)\n        self.assertEqual(200, finding.cwe)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(datetime.datetime(2021, 3, 17, 19, 41, 46, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))), finding.date)\n        self.assertEqual(1, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual('demo.defectdojo.org', endpoint.host)\n        self.assertEqual(443, endpoint.port)\n        self.assertEqual('https', endpoint.protocol)\n        finding = findings[2]\n        self.assertEqual('Interesting response', finding.title)\n        self.assertIsNone(finding.cwe)\n        self.assertEqual('Info', finding.severity)\n        self.assertEqual(datetime.datetime(2021, 3, 17, 19, 41, 46, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))), finding.date)\n        self.assertIn('interesting', finding.unsaved_tags)\n        self.assertIn('response', finding.unsaved_tags)\n        self.assertIn('server', finding.unsaved_tags)",
            "def test_parser_has_many_finding(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with open('unittests/scans/arachni/dd.com.afr.json') as testfile:\n        parser = ArachniParser()\n        findings = parser.get_findings(testfile, Test())\n        for finding in findings:\n            for endpoint in finding.unsaved_endpoints:\n                endpoint.clean()\n        self.assertEqual(3, len(findings))\n        finding = findings[0]\n        self.assertEqual(\"Missing 'Strict-Transport-Security' header\", finding.title)\n        self.assertEqual(200, finding.cwe)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(datetime.datetime(2021, 3, 17, 19, 41, 46, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))), finding.date)\n        self.assertEqual(1, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual('demo.defectdojo.org', endpoint.host)\n        self.assertEqual(443, endpoint.port)\n        self.assertEqual('https', endpoint.protocol)\n        finding = findings[2]\n        self.assertEqual('Interesting response', finding.title)\n        self.assertIsNone(finding.cwe)\n        self.assertEqual('Info', finding.severity)\n        self.assertEqual(datetime.datetime(2021, 3, 17, 19, 41, 46, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))), finding.date)\n        self.assertIn('interesting', finding.unsaved_tags)\n        self.assertIn('response', finding.unsaved_tags)\n        self.assertIn('server', finding.unsaved_tags)",
            "def test_parser_has_many_finding(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with open('unittests/scans/arachni/dd.com.afr.json') as testfile:\n        parser = ArachniParser()\n        findings = parser.get_findings(testfile, Test())\n        for finding in findings:\n            for endpoint in finding.unsaved_endpoints:\n                endpoint.clean()\n        self.assertEqual(3, len(findings))\n        finding = findings[0]\n        self.assertEqual(\"Missing 'Strict-Transport-Security' header\", finding.title)\n        self.assertEqual(200, finding.cwe)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(datetime.datetime(2021, 3, 17, 19, 41, 46, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))), finding.date)\n        self.assertEqual(1, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual('demo.defectdojo.org', endpoint.host)\n        self.assertEqual(443, endpoint.port)\n        self.assertEqual('https', endpoint.protocol)\n        finding = findings[2]\n        self.assertEqual('Interesting response', finding.title)\n        self.assertIsNone(finding.cwe)\n        self.assertEqual('Info', finding.severity)\n        self.assertEqual(datetime.datetime(2021, 3, 17, 19, 41, 46, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))), finding.date)\n        self.assertIn('interesting', finding.unsaved_tags)\n        self.assertIn('response', finding.unsaved_tags)\n        self.assertIn('server', finding.unsaved_tags)",
            "def test_parser_has_many_finding(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with open('unittests/scans/arachni/dd.com.afr.json') as testfile:\n        parser = ArachniParser()\n        findings = parser.get_findings(testfile, Test())\n        for finding in findings:\n            for endpoint in finding.unsaved_endpoints:\n                endpoint.clean()\n        self.assertEqual(3, len(findings))\n        finding = findings[0]\n        self.assertEqual(\"Missing 'Strict-Transport-Security' header\", finding.title)\n        self.assertEqual(200, finding.cwe)\n        self.assertEqual('Medium', finding.severity)\n        self.assertEqual(datetime.datetime(2021, 3, 17, 19, 41, 46, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))), finding.date)\n        self.assertEqual(1, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual('demo.defectdojo.org', endpoint.host)\n        self.assertEqual(443, endpoint.port)\n        self.assertEqual('https', endpoint.protocol)\n        finding = findings[2]\n        self.assertEqual('Interesting response', finding.title)\n        self.assertIsNone(finding.cwe)\n        self.assertEqual('Info', finding.severity)\n        self.assertEqual(datetime.datetime(2021, 3, 17, 19, 41, 46, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))), finding.date)\n        self.assertIn('interesting', finding.unsaved_tags)\n        self.assertIn('response', finding.unsaved_tags)\n        self.assertIn('server', finding.unsaved_tags)"
        ]
    },
    {
        "func_name": "test_parser_has_many_finding2",
        "original": "def test_parser_has_many_finding2(self):\n    with open('unittests/scans/arachni/js.com.afr.json') as testfile:\n        parser = ArachniParser()\n        findings = parser.get_findings(testfile, Test())\n        for finding in findings:\n            for endpoint in finding.unsaved_endpoints:\n                endpoint.clean()\n        self.assertEqual(10, len(findings))\n        finding = findings[0]\n        self.assertEqual('SQL Injection', finding.title)\n        self.assertEqual(89, finding.cwe)\n        self.assertEqual('High', finding.severity)\n        self.assertEqual(datetime.datetime(2021, 3, 18, 10, 29, 55, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))), finding.date)\n        self.assertEqual(1, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual('juice-shop.herokuapp.com', endpoint.host)\n        self.assertEqual(443, endpoint.port)\n        self.assertEqual('https', endpoint.protocol)\n        finding = findings[9]\n        self.assertEqual('Interesting response', finding.title)\n        self.assertEqual('Info', finding.severity)\n        self.assertEqual(datetime.datetime(2021, 3, 18, 10, 29, 55, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))), finding.date)\n        self.assertIsNone(finding.cwe)\n        self.assertEqual(25, finding.nb_occurences)\n        self.assertEqual(25, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual('juice-shop.herokuapp.com', endpoint.host)\n        self.assertEqual(443, endpoint.port)\n        self.assertEqual('https', endpoint.protocol)",
        "mutated": [
            "def test_parser_has_many_finding2(self):\n    if False:\n        i = 10\n    with open('unittests/scans/arachni/js.com.afr.json') as testfile:\n        parser = ArachniParser()\n        findings = parser.get_findings(testfile, Test())\n        for finding in findings:\n            for endpoint in finding.unsaved_endpoints:\n                endpoint.clean()\n        self.assertEqual(10, len(findings))\n        finding = findings[0]\n        self.assertEqual('SQL Injection', finding.title)\n        self.assertEqual(89, finding.cwe)\n        self.assertEqual('High', finding.severity)\n        self.assertEqual(datetime.datetime(2021, 3, 18, 10, 29, 55, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))), finding.date)\n        self.assertEqual(1, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual('juice-shop.herokuapp.com', endpoint.host)\n        self.assertEqual(443, endpoint.port)\n        self.assertEqual('https', endpoint.protocol)\n        finding = findings[9]\n        self.assertEqual('Interesting response', finding.title)\n        self.assertEqual('Info', finding.severity)\n        self.assertEqual(datetime.datetime(2021, 3, 18, 10, 29, 55, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))), finding.date)\n        self.assertIsNone(finding.cwe)\n        self.assertEqual(25, finding.nb_occurences)\n        self.assertEqual(25, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual('juice-shop.herokuapp.com', endpoint.host)\n        self.assertEqual(443, endpoint.port)\n        self.assertEqual('https', endpoint.protocol)",
            "def test_parser_has_many_finding2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with open('unittests/scans/arachni/js.com.afr.json') as testfile:\n        parser = ArachniParser()\n        findings = parser.get_findings(testfile, Test())\n        for finding in findings:\n            for endpoint in finding.unsaved_endpoints:\n                endpoint.clean()\n        self.assertEqual(10, len(findings))\n        finding = findings[0]\n        self.assertEqual('SQL Injection', finding.title)\n        self.assertEqual(89, finding.cwe)\n        self.assertEqual('High', finding.severity)\n        self.assertEqual(datetime.datetime(2021, 3, 18, 10, 29, 55, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))), finding.date)\n        self.assertEqual(1, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual('juice-shop.herokuapp.com', endpoint.host)\n        self.assertEqual(443, endpoint.port)\n        self.assertEqual('https', endpoint.protocol)\n        finding = findings[9]\n        self.assertEqual('Interesting response', finding.title)\n        self.assertEqual('Info', finding.severity)\n        self.assertEqual(datetime.datetime(2021, 3, 18, 10, 29, 55, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))), finding.date)\n        self.assertIsNone(finding.cwe)\n        self.assertEqual(25, finding.nb_occurences)\n        self.assertEqual(25, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual('juice-shop.herokuapp.com', endpoint.host)\n        self.assertEqual(443, endpoint.port)\n        self.assertEqual('https', endpoint.protocol)",
            "def test_parser_has_many_finding2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with open('unittests/scans/arachni/js.com.afr.json') as testfile:\n        parser = ArachniParser()\n        findings = parser.get_findings(testfile, Test())\n        for finding in findings:\n            for endpoint in finding.unsaved_endpoints:\n                endpoint.clean()\n        self.assertEqual(10, len(findings))\n        finding = findings[0]\n        self.assertEqual('SQL Injection', finding.title)\n        self.assertEqual(89, finding.cwe)\n        self.assertEqual('High', finding.severity)\n        self.assertEqual(datetime.datetime(2021, 3, 18, 10, 29, 55, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))), finding.date)\n        self.assertEqual(1, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual('juice-shop.herokuapp.com', endpoint.host)\n        self.assertEqual(443, endpoint.port)\n        self.assertEqual('https', endpoint.protocol)\n        finding = findings[9]\n        self.assertEqual('Interesting response', finding.title)\n        self.assertEqual('Info', finding.severity)\n        self.assertEqual(datetime.datetime(2021, 3, 18, 10, 29, 55, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))), finding.date)\n        self.assertIsNone(finding.cwe)\n        self.assertEqual(25, finding.nb_occurences)\n        self.assertEqual(25, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual('juice-shop.herokuapp.com', endpoint.host)\n        self.assertEqual(443, endpoint.port)\n        self.assertEqual('https', endpoint.protocol)",
            "def test_parser_has_many_finding2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with open('unittests/scans/arachni/js.com.afr.json') as testfile:\n        parser = ArachniParser()\n        findings = parser.get_findings(testfile, Test())\n        for finding in findings:\n            for endpoint in finding.unsaved_endpoints:\n                endpoint.clean()\n        self.assertEqual(10, len(findings))\n        finding = findings[0]\n        self.assertEqual('SQL Injection', finding.title)\n        self.assertEqual(89, finding.cwe)\n        self.assertEqual('High', finding.severity)\n        self.assertEqual(datetime.datetime(2021, 3, 18, 10, 29, 55, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))), finding.date)\n        self.assertEqual(1, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual('juice-shop.herokuapp.com', endpoint.host)\n        self.assertEqual(443, endpoint.port)\n        self.assertEqual('https', endpoint.protocol)\n        finding = findings[9]\n        self.assertEqual('Interesting response', finding.title)\n        self.assertEqual('Info', finding.severity)\n        self.assertEqual(datetime.datetime(2021, 3, 18, 10, 29, 55, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))), finding.date)\n        self.assertIsNone(finding.cwe)\n        self.assertEqual(25, finding.nb_occurences)\n        self.assertEqual(25, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual('juice-shop.herokuapp.com', endpoint.host)\n        self.assertEqual(443, endpoint.port)\n        self.assertEqual('https', endpoint.protocol)",
            "def test_parser_has_many_finding2(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with open('unittests/scans/arachni/js.com.afr.json') as testfile:\n        parser = ArachniParser()\n        findings = parser.get_findings(testfile, Test())\n        for finding in findings:\n            for endpoint in finding.unsaved_endpoints:\n                endpoint.clean()\n        self.assertEqual(10, len(findings))\n        finding = findings[0]\n        self.assertEqual('SQL Injection', finding.title)\n        self.assertEqual(89, finding.cwe)\n        self.assertEqual('High', finding.severity)\n        self.assertEqual(datetime.datetime(2021, 3, 18, 10, 29, 55, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))), finding.date)\n        self.assertEqual(1, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual('juice-shop.herokuapp.com', endpoint.host)\n        self.assertEqual(443, endpoint.port)\n        self.assertEqual('https', endpoint.protocol)\n        finding = findings[9]\n        self.assertEqual('Interesting response', finding.title)\n        self.assertEqual('Info', finding.severity)\n        self.assertEqual(datetime.datetime(2021, 3, 18, 10, 29, 55, tzinfo=datetime.timezone(datetime.timedelta(seconds=3600))), finding.date)\n        self.assertIsNone(finding.cwe)\n        self.assertEqual(25, finding.nb_occurences)\n        self.assertEqual(25, len(finding.unsaved_endpoints))\n        endpoint = finding.unsaved_endpoints[0]\n        self.assertEqual('juice-shop.herokuapp.com', endpoint.host)\n        self.assertEqual(443, endpoint.port)\n        self.assertEqual('https', endpoint.protocol)"
        ]
    }
]
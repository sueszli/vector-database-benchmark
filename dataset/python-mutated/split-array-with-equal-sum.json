[
    {
        "func_name": "splitArray",
        "original": "def splitArray(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n    if len(nums) < 7:\n        return False\n    accumulated_sum = [0] * len(nums)\n    accumulated_sum[0] = nums[0]\n    for i in xrange(1, len(nums)):\n        accumulated_sum[i] = accumulated_sum[i - 1] + nums[i]\n    for j in xrange(3, len(nums) - 3):\n        lookup = set()\n        for i in xrange(1, j - 1):\n            if accumulated_sum[i - 1] == accumulated_sum[j - 1] - accumulated_sum[i]:\n                lookup.add(accumulated_sum[i - 1])\n        for k in xrange(j + 2, len(nums) - 1):\n            if accumulated_sum[-1] - accumulated_sum[k] == accumulated_sum[k - 1] - accumulated_sum[j] and accumulated_sum[k - 1] - accumulated_sum[j] in lookup:\n                return True\n    return False",
        "mutated": [
            "def splitArray(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: bool\\n        '\n    if len(nums) < 7:\n        return False\n    accumulated_sum = [0] * len(nums)\n    accumulated_sum[0] = nums[0]\n    for i in xrange(1, len(nums)):\n        accumulated_sum[i] = accumulated_sum[i - 1] + nums[i]\n    for j in xrange(3, len(nums) - 3):\n        lookup = set()\n        for i in xrange(1, j - 1):\n            if accumulated_sum[i - 1] == accumulated_sum[j - 1] - accumulated_sum[i]:\n                lookup.add(accumulated_sum[i - 1])\n        for k in xrange(j + 2, len(nums) - 1):\n            if accumulated_sum[-1] - accumulated_sum[k] == accumulated_sum[k - 1] - accumulated_sum[j] and accumulated_sum[k - 1] - accumulated_sum[j] in lookup:\n                return True\n    return False",
            "def splitArray(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: bool\\n        '\n    if len(nums) < 7:\n        return False\n    accumulated_sum = [0] * len(nums)\n    accumulated_sum[0] = nums[0]\n    for i in xrange(1, len(nums)):\n        accumulated_sum[i] = accumulated_sum[i - 1] + nums[i]\n    for j in xrange(3, len(nums) - 3):\n        lookup = set()\n        for i in xrange(1, j - 1):\n            if accumulated_sum[i - 1] == accumulated_sum[j - 1] - accumulated_sum[i]:\n                lookup.add(accumulated_sum[i - 1])\n        for k in xrange(j + 2, len(nums) - 1):\n            if accumulated_sum[-1] - accumulated_sum[k] == accumulated_sum[k - 1] - accumulated_sum[j] and accumulated_sum[k - 1] - accumulated_sum[j] in lookup:\n                return True\n    return False",
            "def splitArray(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: bool\\n        '\n    if len(nums) < 7:\n        return False\n    accumulated_sum = [0] * len(nums)\n    accumulated_sum[0] = nums[0]\n    for i in xrange(1, len(nums)):\n        accumulated_sum[i] = accumulated_sum[i - 1] + nums[i]\n    for j in xrange(3, len(nums) - 3):\n        lookup = set()\n        for i in xrange(1, j - 1):\n            if accumulated_sum[i - 1] == accumulated_sum[j - 1] - accumulated_sum[i]:\n                lookup.add(accumulated_sum[i - 1])\n        for k in xrange(j + 2, len(nums) - 1):\n            if accumulated_sum[-1] - accumulated_sum[k] == accumulated_sum[k - 1] - accumulated_sum[j] and accumulated_sum[k - 1] - accumulated_sum[j] in lookup:\n                return True\n    return False",
            "def splitArray(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: bool\\n        '\n    if len(nums) < 7:\n        return False\n    accumulated_sum = [0] * len(nums)\n    accumulated_sum[0] = nums[0]\n    for i in xrange(1, len(nums)):\n        accumulated_sum[i] = accumulated_sum[i - 1] + nums[i]\n    for j in xrange(3, len(nums) - 3):\n        lookup = set()\n        for i in xrange(1, j - 1):\n            if accumulated_sum[i - 1] == accumulated_sum[j - 1] - accumulated_sum[i]:\n                lookup.add(accumulated_sum[i - 1])\n        for k in xrange(j + 2, len(nums) - 1):\n            if accumulated_sum[-1] - accumulated_sum[k] == accumulated_sum[k - 1] - accumulated_sum[j] and accumulated_sum[k - 1] - accumulated_sum[j] in lookup:\n                return True\n    return False",
            "def splitArray(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: bool\\n        '\n    if len(nums) < 7:\n        return False\n    accumulated_sum = [0] * len(nums)\n    accumulated_sum[0] = nums[0]\n    for i in xrange(1, len(nums)):\n        accumulated_sum[i] = accumulated_sum[i - 1] + nums[i]\n    for j in xrange(3, len(nums) - 3):\n        lookup = set()\n        for i in xrange(1, j - 1):\n            if accumulated_sum[i - 1] == accumulated_sum[j - 1] - accumulated_sum[i]:\n                lookup.add(accumulated_sum[i - 1])\n        for k in xrange(j + 2, len(nums) - 1):\n            if accumulated_sum[-1] - accumulated_sum[k] == accumulated_sum[k - 1] - accumulated_sum[j] and accumulated_sum[k - 1] - accumulated_sum[j] in lookup:\n                return True\n    return False"
        ]
    }
]
[
    {
        "func_name": "run_tests",
        "original": "def run_tests(stack, use_big_endian, expected):\n    pwndbg.gdblib.config.hexdump_group_use_big_endian = use_big_endian\n    pwndbg.gdblib.memory.write(stack, cyclic(256))\n    result = gdb.execute('hexdump 0', to_string=True)\n    assert result == '+0000 0x000000  \\n'\n    results = []\n    results.append(gdb.execute(f'hexdump {stack} 64', to_string=True))\n    results.append(gdb.execute(f'hexdump {stack} 3', to_string=True))\n    assert len(results) == len(expected)\n    for (i, result) in enumerate(results):\n        expected_result = expected[i]\n        assert result == expected_result",
        "mutated": [
            "def run_tests(stack, use_big_endian, expected):\n    if False:\n        i = 10\n    pwndbg.gdblib.config.hexdump_group_use_big_endian = use_big_endian\n    pwndbg.gdblib.memory.write(stack, cyclic(256))\n    result = gdb.execute('hexdump 0', to_string=True)\n    assert result == '+0000 0x000000  \\n'\n    results = []\n    results.append(gdb.execute(f'hexdump {stack} 64', to_string=True))\n    results.append(gdb.execute(f'hexdump {stack} 3', to_string=True))\n    assert len(results) == len(expected)\n    for (i, result) in enumerate(results):\n        expected_result = expected[i]\n        assert result == expected_result",
            "def run_tests(stack, use_big_endian, expected):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    pwndbg.gdblib.config.hexdump_group_use_big_endian = use_big_endian\n    pwndbg.gdblib.memory.write(stack, cyclic(256))\n    result = gdb.execute('hexdump 0', to_string=True)\n    assert result == '+0000 0x000000  \\n'\n    results = []\n    results.append(gdb.execute(f'hexdump {stack} 64', to_string=True))\n    results.append(gdb.execute(f'hexdump {stack} 3', to_string=True))\n    assert len(results) == len(expected)\n    for (i, result) in enumerate(results):\n        expected_result = expected[i]\n        assert result == expected_result",
            "def run_tests(stack, use_big_endian, expected):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    pwndbg.gdblib.config.hexdump_group_use_big_endian = use_big_endian\n    pwndbg.gdblib.memory.write(stack, cyclic(256))\n    result = gdb.execute('hexdump 0', to_string=True)\n    assert result == '+0000 0x000000  \\n'\n    results = []\n    results.append(gdb.execute(f'hexdump {stack} 64', to_string=True))\n    results.append(gdb.execute(f'hexdump {stack} 3', to_string=True))\n    assert len(results) == len(expected)\n    for (i, result) in enumerate(results):\n        expected_result = expected[i]\n        assert result == expected_result",
            "def run_tests(stack, use_big_endian, expected):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    pwndbg.gdblib.config.hexdump_group_use_big_endian = use_big_endian\n    pwndbg.gdblib.memory.write(stack, cyclic(256))\n    result = gdb.execute('hexdump 0', to_string=True)\n    assert result == '+0000 0x000000  \\n'\n    results = []\n    results.append(gdb.execute(f'hexdump {stack} 64', to_string=True))\n    results.append(gdb.execute(f'hexdump {stack} 3', to_string=True))\n    assert len(results) == len(expected)\n    for (i, result) in enumerate(results):\n        expected_result = expected[i]\n        assert result == expected_result",
            "def run_tests(stack, use_big_endian, expected):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    pwndbg.gdblib.config.hexdump_group_use_big_endian = use_big_endian\n    pwndbg.gdblib.memory.write(stack, cyclic(256))\n    result = gdb.execute('hexdump 0', to_string=True)\n    assert result == '+0000 0x000000  \\n'\n    results = []\n    results.append(gdb.execute(f'hexdump {stack} 64', to_string=True))\n    results.append(gdb.execute(f'hexdump {stack} 3', to_string=True))\n    assert len(results) == len(expected)\n    for (i, result) in enumerate(results):\n        expected_result = expected[i]\n        assert result == expected_result"
        ]
    },
    {
        "func_name": "test_hexdump",
        "original": "def test_hexdump(start_binary):\n    start_binary(BINARY)\n    pwndbg.gdblib.config.hexdump_group_width = -1\n    gdb.execute('set hexdump-byte-separator')\n    stack_addr = pwndbg.gdblib.regs.rsp - 256\n    expected = [f'+0000 0x{stack_addr:x}  6161616261616161 6161616461616163 \u2502aaaabaaa\u2502caaadaaa\u2502\\n+0010 0x{stack_addr + 16:x}  6161616661616165 6161616861616167 \u2502eaaafaaa\u2502gaaahaaa\u2502\\n+0020 0x{stack_addr + 32:x}  6161616a61616169 6161616c6161616b \u2502iaaajaaa\u2502kaaalaaa\u2502\\n+0030 0x{stack_addr + 48:x}  6161616e6161616d 616161706161616f \u2502maaanaaa\u2502oaaapaaa\u2502\\n', f'+0000 0x{stack_addr:x}            616161                  \u2502aaa     \u2502        \u2502\\n']\n    run_tests(stack_addr, True, expected)\n    expected = [f'+0000 0x{stack_addr:x}  6161616162616161 6361616164616161 \u2502aaaabaaa\u2502caaadaaa\u2502\\n+0010 0x{stack_addr + 16:x}  6561616166616161 6761616168616161 \u2502eaaafaaa\u2502gaaahaaa\u2502\\n+0020 0x{stack_addr + 32:x}  696161616a616161 6b6161616c616161 \u2502iaaajaaa\u2502kaaalaaa\u2502\\n+0030 0x{stack_addr + 48:x}  6d6161616e616161 6f61616170616161 \u2502maaanaaa\u2502oaaapaaa\u2502\\n', f'+0000 0x{stack_addr:x}  616161                            \u2502aaa     \u2502        \u2502\\n']\n    run_tests(stack_addr, False, expected)",
        "mutated": [
            "def test_hexdump(start_binary):\n    if False:\n        i = 10\n    start_binary(BINARY)\n    pwndbg.gdblib.config.hexdump_group_width = -1\n    gdb.execute('set hexdump-byte-separator')\n    stack_addr = pwndbg.gdblib.regs.rsp - 256\n    expected = [f'+0000 0x{stack_addr:x}  6161616261616161 6161616461616163 \u2502aaaabaaa\u2502caaadaaa\u2502\\n+0010 0x{stack_addr + 16:x}  6161616661616165 6161616861616167 \u2502eaaafaaa\u2502gaaahaaa\u2502\\n+0020 0x{stack_addr + 32:x}  6161616a61616169 6161616c6161616b \u2502iaaajaaa\u2502kaaalaaa\u2502\\n+0030 0x{stack_addr + 48:x}  6161616e6161616d 616161706161616f \u2502maaanaaa\u2502oaaapaaa\u2502\\n', f'+0000 0x{stack_addr:x}            616161                  \u2502aaa     \u2502        \u2502\\n']\n    run_tests(stack_addr, True, expected)\n    expected = [f'+0000 0x{stack_addr:x}  6161616162616161 6361616164616161 \u2502aaaabaaa\u2502caaadaaa\u2502\\n+0010 0x{stack_addr + 16:x}  6561616166616161 6761616168616161 \u2502eaaafaaa\u2502gaaahaaa\u2502\\n+0020 0x{stack_addr + 32:x}  696161616a616161 6b6161616c616161 \u2502iaaajaaa\u2502kaaalaaa\u2502\\n+0030 0x{stack_addr + 48:x}  6d6161616e616161 6f61616170616161 \u2502maaanaaa\u2502oaaapaaa\u2502\\n', f'+0000 0x{stack_addr:x}  616161                            \u2502aaa     \u2502        \u2502\\n']\n    run_tests(stack_addr, False, expected)",
            "def test_hexdump(start_binary):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    start_binary(BINARY)\n    pwndbg.gdblib.config.hexdump_group_width = -1\n    gdb.execute('set hexdump-byte-separator')\n    stack_addr = pwndbg.gdblib.regs.rsp - 256\n    expected = [f'+0000 0x{stack_addr:x}  6161616261616161 6161616461616163 \u2502aaaabaaa\u2502caaadaaa\u2502\\n+0010 0x{stack_addr + 16:x}  6161616661616165 6161616861616167 \u2502eaaafaaa\u2502gaaahaaa\u2502\\n+0020 0x{stack_addr + 32:x}  6161616a61616169 6161616c6161616b \u2502iaaajaaa\u2502kaaalaaa\u2502\\n+0030 0x{stack_addr + 48:x}  6161616e6161616d 616161706161616f \u2502maaanaaa\u2502oaaapaaa\u2502\\n', f'+0000 0x{stack_addr:x}            616161                  \u2502aaa     \u2502        \u2502\\n']\n    run_tests(stack_addr, True, expected)\n    expected = [f'+0000 0x{stack_addr:x}  6161616162616161 6361616164616161 \u2502aaaabaaa\u2502caaadaaa\u2502\\n+0010 0x{stack_addr + 16:x}  6561616166616161 6761616168616161 \u2502eaaafaaa\u2502gaaahaaa\u2502\\n+0020 0x{stack_addr + 32:x}  696161616a616161 6b6161616c616161 \u2502iaaajaaa\u2502kaaalaaa\u2502\\n+0030 0x{stack_addr + 48:x}  6d6161616e616161 6f61616170616161 \u2502maaanaaa\u2502oaaapaaa\u2502\\n', f'+0000 0x{stack_addr:x}  616161                            \u2502aaa     \u2502        \u2502\\n']\n    run_tests(stack_addr, False, expected)",
            "def test_hexdump(start_binary):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    start_binary(BINARY)\n    pwndbg.gdblib.config.hexdump_group_width = -1\n    gdb.execute('set hexdump-byte-separator')\n    stack_addr = pwndbg.gdblib.regs.rsp - 256\n    expected = [f'+0000 0x{stack_addr:x}  6161616261616161 6161616461616163 \u2502aaaabaaa\u2502caaadaaa\u2502\\n+0010 0x{stack_addr + 16:x}  6161616661616165 6161616861616167 \u2502eaaafaaa\u2502gaaahaaa\u2502\\n+0020 0x{stack_addr + 32:x}  6161616a61616169 6161616c6161616b \u2502iaaajaaa\u2502kaaalaaa\u2502\\n+0030 0x{stack_addr + 48:x}  6161616e6161616d 616161706161616f \u2502maaanaaa\u2502oaaapaaa\u2502\\n', f'+0000 0x{stack_addr:x}            616161                  \u2502aaa     \u2502        \u2502\\n']\n    run_tests(stack_addr, True, expected)\n    expected = [f'+0000 0x{stack_addr:x}  6161616162616161 6361616164616161 \u2502aaaabaaa\u2502caaadaaa\u2502\\n+0010 0x{stack_addr + 16:x}  6561616166616161 6761616168616161 \u2502eaaafaaa\u2502gaaahaaa\u2502\\n+0020 0x{stack_addr + 32:x}  696161616a616161 6b6161616c616161 \u2502iaaajaaa\u2502kaaalaaa\u2502\\n+0030 0x{stack_addr + 48:x}  6d6161616e616161 6f61616170616161 \u2502maaanaaa\u2502oaaapaaa\u2502\\n', f'+0000 0x{stack_addr:x}  616161                            \u2502aaa     \u2502        \u2502\\n']\n    run_tests(stack_addr, False, expected)",
            "def test_hexdump(start_binary):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    start_binary(BINARY)\n    pwndbg.gdblib.config.hexdump_group_width = -1\n    gdb.execute('set hexdump-byte-separator')\n    stack_addr = pwndbg.gdblib.regs.rsp - 256\n    expected = [f'+0000 0x{stack_addr:x}  6161616261616161 6161616461616163 \u2502aaaabaaa\u2502caaadaaa\u2502\\n+0010 0x{stack_addr + 16:x}  6161616661616165 6161616861616167 \u2502eaaafaaa\u2502gaaahaaa\u2502\\n+0020 0x{stack_addr + 32:x}  6161616a61616169 6161616c6161616b \u2502iaaajaaa\u2502kaaalaaa\u2502\\n+0030 0x{stack_addr + 48:x}  6161616e6161616d 616161706161616f \u2502maaanaaa\u2502oaaapaaa\u2502\\n', f'+0000 0x{stack_addr:x}            616161                  \u2502aaa     \u2502        \u2502\\n']\n    run_tests(stack_addr, True, expected)\n    expected = [f'+0000 0x{stack_addr:x}  6161616162616161 6361616164616161 \u2502aaaabaaa\u2502caaadaaa\u2502\\n+0010 0x{stack_addr + 16:x}  6561616166616161 6761616168616161 \u2502eaaafaaa\u2502gaaahaaa\u2502\\n+0020 0x{stack_addr + 32:x}  696161616a616161 6b6161616c616161 \u2502iaaajaaa\u2502kaaalaaa\u2502\\n+0030 0x{stack_addr + 48:x}  6d6161616e616161 6f61616170616161 \u2502maaanaaa\u2502oaaapaaa\u2502\\n', f'+0000 0x{stack_addr:x}  616161                            \u2502aaa     \u2502        \u2502\\n']\n    run_tests(stack_addr, False, expected)",
            "def test_hexdump(start_binary):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    start_binary(BINARY)\n    pwndbg.gdblib.config.hexdump_group_width = -1\n    gdb.execute('set hexdump-byte-separator')\n    stack_addr = pwndbg.gdblib.regs.rsp - 256\n    expected = [f'+0000 0x{stack_addr:x}  6161616261616161 6161616461616163 \u2502aaaabaaa\u2502caaadaaa\u2502\\n+0010 0x{stack_addr + 16:x}  6161616661616165 6161616861616167 \u2502eaaafaaa\u2502gaaahaaa\u2502\\n+0020 0x{stack_addr + 32:x}  6161616a61616169 6161616c6161616b \u2502iaaajaaa\u2502kaaalaaa\u2502\\n+0030 0x{stack_addr + 48:x}  6161616e6161616d 616161706161616f \u2502maaanaaa\u2502oaaapaaa\u2502\\n', f'+0000 0x{stack_addr:x}            616161                  \u2502aaa     \u2502        \u2502\\n']\n    run_tests(stack_addr, True, expected)\n    expected = [f'+0000 0x{stack_addr:x}  6161616162616161 6361616164616161 \u2502aaaabaaa\u2502caaadaaa\u2502\\n+0010 0x{stack_addr + 16:x}  6561616166616161 6761616168616161 \u2502eaaafaaa\u2502gaaahaaa\u2502\\n+0020 0x{stack_addr + 32:x}  696161616a616161 6b6161616c616161 \u2502iaaajaaa\u2502kaaalaaa\u2502\\n+0030 0x{stack_addr + 48:x}  6d6161616e616161 6f61616170616161 \u2502maaanaaa\u2502oaaapaaa\u2502\\n', f'+0000 0x{stack_addr:x}  616161                            \u2502aaa     \u2502        \u2502\\n']\n    run_tests(stack_addr, False, expected)"
        ]
    },
    {
        "func_name": "hexdump_lines",
        "original": "def hexdump_lines(lines):\n    offset = (lines - 1) * 16\n    skipped_lines = lines - 2\n    out = gdb.execute(f'hexdump $rsp {offset + 16}', to_string=True)\n    expected = f'+0000 0x{sp:x}  61 62 63 64 65 66 67 68  01 02 03 04 05 06 07 08  \u2502abcdefgh\u2502........\u2502\\n... \u2193            skipped {skipped_lines} identical lines ({skipped_lines * 16} bytes)\\n+{offset:04x} 0x{sp + offset:x}  61 62 63 64 65 66 67 68  01 02 03 04 05 06 07 08  \u2502abcdefgh\u2502........\u2502\\n'\n    assert out == expected",
        "mutated": [
            "def hexdump_lines(lines):\n    if False:\n        i = 10\n    offset = (lines - 1) * 16\n    skipped_lines = lines - 2\n    out = gdb.execute(f'hexdump $rsp {offset + 16}', to_string=True)\n    expected = f'+0000 0x{sp:x}  61 62 63 64 65 66 67 68  01 02 03 04 05 06 07 08  \u2502abcdefgh\u2502........\u2502\\n... \u2193            skipped {skipped_lines} identical lines ({skipped_lines * 16} bytes)\\n+{offset:04x} 0x{sp + offset:x}  61 62 63 64 65 66 67 68  01 02 03 04 05 06 07 08  \u2502abcdefgh\u2502........\u2502\\n'\n    assert out == expected",
            "def hexdump_lines(lines):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    offset = (lines - 1) * 16\n    skipped_lines = lines - 2\n    out = gdb.execute(f'hexdump $rsp {offset + 16}', to_string=True)\n    expected = f'+0000 0x{sp:x}  61 62 63 64 65 66 67 68  01 02 03 04 05 06 07 08  \u2502abcdefgh\u2502........\u2502\\n... \u2193            skipped {skipped_lines} identical lines ({skipped_lines * 16} bytes)\\n+{offset:04x} 0x{sp + offset:x}  61 62 63 64 65 66 67 68  01 02 03 04 05 06 07 08  \u2502abcdefgh\u2502........\u2502\\n'\n    assert out == expected",
            "def hexdump_lines(lines):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    offset = (lines - 1) * 16\n    skipped_lines = lines - 2\n    out = gdb.execute(f'hexdump $rsp {offset + 16}', to_string=True)\n    expected = f'+0000 0x{sp:x}  61 62 63 64 65 66 67 68  01 02 03 04 05 06 07 08  \u2502abcdefgh\u2502........\u2502\\n... \u2193            skipped {skipped_lines} identical lines ({skipped_lines * 16} bytes)\\n+{offset:04x} 0x{sp + offset:x}  61 62 63 64 65 66 67 68  01 02 03 04 05 06 07 08  \u2502abcdefgh\u2502........\u2502\\n'\n    assert out == expected",
            "def hexdump_lines(lines):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    offset = (lines - 1) * 16\n    skipped_lines = lines - 2\n    out = gdb.execute(f'hexdump $rsp {offset + 16}', to_string=True)\n    expected = f'+0000 0x{sp:x}  61 62 63 64 65 66 67 68  01 02 03 04 05 06 07 08  \u2502abcdefgh\u2502........\u2502\\n... \u2193            skipped {skipped_lines} identical lines ({skipped_lines * 16} bytes)\\n+{offset:04x} 0x{sp + offset:x}  61 62 63 64 65 66 67 68  01 02 03 04 05 06 07 08  \u2502abcdefgh\u2502........\u2502\\n'\n    assert out == expected",
            "def hexdump_lines(lines):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    offset = (lines - 1) * 16\n    skipped_lines = lines - 2\n    out = gdb.execute(f'hexdump $rsp {offset + 16}', to_string=True)\n    expected = f'+0000 0x{sp:x}  61 62 63 64 65 66 67 68  01 02 03 04 05 06 07 08  \u2502abcdefgh\u2502........\u2502\\n... \u2193            skipped {skipped_lines} identical lines ({skipped_lines * 16} bytes)\\n+{offset:04x} 0x{sp + offset:x}  61 62 63 64 65 66 67 68  01 02 03 04 05 06 07 08  \u2502abcdefgh\u2502........\u2502\\n'\n    assert out == expected"
        ]
    },
    {
        "func_name": "test_hexdump_collapse_lines",
        "original": "def test_hexdump_collapse_lines(start_binary):\n    start_binary(BINARY)\n    sp = pwndbg.gdblib.regs.rsp\n    pwndbg.gdblib.memory.write(sp, b'abcdefgh\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08' * 16)\n\n    def hexdump_lines(lines):\n        offset = (lines - 1) * 16\n        skipped_lines = lines - 2\n        out = gdb.execute(f'hexdump $rsp {offset + 16}', to_string=True)\n        expected = f'+0000 0x{sp:x}  61 62 63 64 65 66 67 68  01 02 03 04 05 06 07 08  \u2502abcdefgh\u2502........\u2502\\n... \u2193            skipped {skipped_lines} identical lines ({skipped_lines * 16} bytes)\\n+{offset:04x} 0x{sp + offset:x}  61 62 63 64 65 66 67 68  01 02 03 04 05 06 07 08  \u2502abcdefgh\u2502........\u2502\\n'\n        assert out == expected\n    hexdump_lines(3)\n    hexdump_lines(4)\n    hexdump_lines(10)",
        "mutated": [
            "def test_hexdump_collapse_lines(start_binary):\n    if False:\n        i = 10\n    start_binary(BINARY)\n    sp = pwndbg.gdblib.regs.rsp\n    pwndbg.gdblib.memory.write(sp, b'abcdefgh\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08' * 16)\n\n    def hexdump_lines(lines):\n        offset = (lines - 1) * 16\n        skipped_lines = lines - 2\n        out = gdb.execute(f'hexdump $rsp {offset + 16}', to_string=True)\n        expected = f'+0000 0x{sp:x}  61 62 63 64 65 66 67 68  01 02 03 04 05 06 07 08  \u2502abcdefgh\u2502........\u2502\\n... \u2193            skipped {skipped_lines} identical lines ({skipped_lines * 16} bytes)\\n+{offset:04x} 0x{sp + offset:x}  61 62 63 64 65 66 67 68  01 02 03 04 05 06 07 08  \u2502abcdefgh\u2502........\u2502\\n'\n        assert out == expected\n    hexdump_lines(3)\n    hexdump_lines(4)\n    hexdump_lines(10)",
            "def test_hexdump_collapse_lines(start_binary):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    start_binary(BINARY)\n    sp = pwndbg.gdblib.regs.rsp\n    pwndbg.gdblib.memory.write(sp, b'abcdefgh\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08' * 16)\n\n    def hexdump_lines(lines):\n        offset = (lines - 1) * 16\n        skipped_lines = lines - 2\n        out = gdb.execute(f'hexdump $rsp {offset + 16}', to_string=True)\n        expected = f'+0000 0x{sp:x}  61 62 63 64 65 66 67 68  01 02 03 04 05 06 07 08  \u2502abcdefgh\u2502........\u2502\\n... \u2193            skipped {skipped_lines} identical lines ({skipped_lines * 16} bytes)\\n+{offset:04x} 0x{sp + offset:x}  61 62 63 64 65 66 67 68  01 02 03 04 05 06 07 08  \u2502abcdefgh\u2502........\u2502\\n'\n        assert out == expected\n    hexdump_lines(3)\n    hexdump_lines(4)\n    hexdump_lines(10)",
            "def test_hexdump_collapse_lines(start_binary):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    start_binary(BINARY)\n    sp = pwndbg.gdblib.regs.rsp\n    pwndbg.gdblib.memory.write(sp, b'abcdefgh\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08' * 16)\n\n    def hexdump_lines(lines):\n        offset = (lines - 1) * 16\n        skipped_lines = lines - 2\n        out = gdb.execute(f'hexdump $rsp {offset + 16}', to_string=True)\n        expected = f'+0000 0x{sp:x}  61 62 63 64 65 66 67 68  01 02 03 04 05 06 07 08  \u2502abcdefgh\u2502........\u2502\\n... \u2193            skipped {skipped_lines} identical lines ({skipped_lines * 16} bytes)\\n+{offset:04x} 0x{sp + offset:x}  61 62 63 64 65 66 67 68  01 02 03 04 05 06 07 08  \u2502abcdefgh\u2502........\u2502\\n'\n        assert out == expected\n    hexdump_lines(3)\n    hexdump_lines(4)\n    hexdump_lines(10)",
            "def test_hexdump_collapse_lines(start_binary):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    start_binary(BINARY)\n    sp = pwndbg.gdblib.regs.rsp\n    pwndbg.gdblib.memory.write(sp, b'abcdefgh\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08' * 16)\n\n    def hexdump_lines(lines):\n        offset = (lines - 1) * 16\n        skipped_lines = lines - 2\n        out = gdb.execute(f'hexdump $rsp {offset + 16}', to_string=True)\n        expected = f'+0000 0x{sp:x}  61 62 63 64 65 66 67 68  01 02 03 04 05 06 07 08  \u2502abcdefgh\u2502........\u2502\\n... \u2193            skipped {skipped_lines} identical lines ({skipped_lines * 16} bytes)\\n+{offset:04x} 0x{sp + offset:x}  61 62 63 64 65 66 67 68  01 02 03 04 05 06 07 08  \u2502abcdefgh\u2502........\u2502\\n'\n        assert out == expected\n    hexdump_lines(3)\n    hexdump_lines(4)\n    hexdump_lines(10)",
            "def test_hexdump_collapse_lines(start_binary):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    start_binary(BINARY)\n    sp = pwndbg.gdblib.regs.rsp\n    pwndbg.gdblib.memory.write(sp, b'abcdefgh\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08' * 16)\n\n    def hexdump_lines(lines):\n        offset = (lines - 1) * 16\n        skipped_lines = lines - 2\n        out = gdb.execute(f'hexdump $rsp {offset + 16}', to_string=True)\n        expected = f'+0000 0x{sp:x}  61 62 63 64 65 66 67 68  01 02 03 04 05 06 07 08  \u2502abcdefgh\u2502........\u2502\\n... \u2193            skipped {skipped_lines} identical lines ({skipped_lines * 16} bytes)\\n+{offset:04x} 0x{sp + offset:x}  61 62 63 64 65 66 67 68  01 02 03 04 05 06 07 08  \u2502abcdefgh\u2502........\u2502\\n'\n        assert out == expected\n    hexdump_lines(3)\n    hexdump_lines(4)\n    hexdump_lines(10)"
        ]
    }
]
[
    {
        "func_name": "matches_group",
        "original": "def matches_group(line, group):\n    for setting in group:\n        if setting in line:\n            return True\n    return False",
        "mutated": [
            "def matches_group(line, group):\n    if False:\n        i = 10\n    for setting in group:\n        if setting in line:\n            return True\n    return False",
            "def matches_group(line, group):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for setting in group:\n        if setting in line:\n            return True\n    return False",
            "def matches_group(line, group):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for setting in group:\n        if setting in line:\n            return True\n    return False",
            "def matches_group(line, group):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for setting in group:\n        if setting in line:\n            return True\n    return False",
            "def matches_group(line, group):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for setting in group:\n        if setting in line:\n            return True\n    return False"
        ]
    },
    {
        "func_name": "add_group",
        "original": "def add_group(lines, last_group, current_group):\n    if not current_group or last_group != current_group:\n        while last_group and last_group[-1] not in current_group:\n            lines.append('# end of ' + last_group[-1])\n            lines.append('')\n            last_group.pop()\n        for category in current_group:\n            if last_group and category in last_group:\n                continue\n            lines.append('#')\n            lines.append('# ' + category)\n            lines.append('#')\n        return copy.copy(current_group)\n    return last_group",
        "mutated": [
            "def add_group(lines, last_group, current_group):\n    if False:\n        i = 10\n    if not current_group or last_group != current_group:\n        while last_group and last_group[-1] not in current_group:\n            lines.append('# end of ' + last_group[-1])\n            lines.append('')\n            last_group.pop()\n        for category in current_group:\n            if last_group and category in last_group:\n                continue\n            lines.append('#')\n            lines.append('# ' + category)\n            lines.append('#')\n        return copy.copy(current_group)\n    return last_group",
            "def add_group(lines, last_group, current_group):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not current_group or last_group != current_group:\n        while last_group and last_group[-1] not in current_group:\n            lines.append('# end of ' + last_group[-1])\n            lines.append('')\n            last_group.pop()\n        for category in current_group:\n            if last_group and category in last_group:\n                continue\n            lines.append('#')\n            lines.append('# ' + category)\n            lines.append('#')\n        return copy.copy(current_group)\n    return last_group",
            "def add_group(lines, last_group, current_group):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not current_group or last_group != current_group:\n        while last_group and last_group[-1] not in current_group:\n            lines.append('# end of ' + last_group[-1])\n            lines.append('')\n            last_group.pop()\n        for category in current_group:\n            if last_group and category in last_group:\n                continue\n            lines.append('#')\n            lines.append('# ' + category)\n            lines.append('#')\n        return copy.copy(current_group)\n    return last_group",
            "def add_group(lines, last_group, current_group):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not current_group or last_group != current_group:\n        while last_group and last_group[-1] not in current_group:\n            lines.append('# end of ' + last_group[-1])\n            lines.append('')\n            last_group.pop()\n        for category in current_group:\n            if last_group and category in last_group:\n                continue\n            lines.append('#')\n            lines.append('# ' + category)\n            lines.append('#')\n        return copy.copy(current_group)\n    return last_group",
            "def add_group(lines, last_group, current_group):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not current_group or last_group != current_group:\n        while last_group and last_group[-1] not in current_group:\n            lines.append('# end of ' + last_group[-1])\n            lines.append('')\n            last_group.pop()\n        for category in current_group:\n            if last_group and category in last_group:\n                continue\n            lines.append('#')\n            lines.append('# ' + category)\n            lines.append('#')\n        return copy.copy(current_group)\n    return last_group"
        ]
    },
    {
        "func_name": "sym_default",
        "original": "def sym_default(sym):\n    if not sym.choice and sym.visibility <= kconfiglib.expr_value(sym.rev_dep):\n        return True\n    if sym.str_value == sym._str_default():\n        return True\n    if sym.choice and (not sym.choice.is_optional) and (sym.choice._selection_from_defaults() is sym) and (sym.orig_type is kconfiglib.BOOL) and (sym.tri_value == 2):\n        return True\n    return False",
        "mutated": [
            "def sym_default(sym):\n    if False:\n        i = 10\n    if not sym.choice and sym.visibility <= kconfiglib.expr_value(sym.rev_dep):\n        return True\n    if sym.str_value == sym._str_default():\n        return True\n    if sym.choice and (not sym.choice.is_optional) and (sym.choice._selection_from_defaults() is sym) and (sym.orig_type is kconfiglib.BOOL) and (sym.tri_value == 2):\n        return True\n    return False",
            "def sym_default(sym):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not sym.choice and sym.visibility <= kconfiglib.expr_value(sym.rev_dep):\n        return True\n    if sym.str_value == sym._str_default():\n        return True\n    if sym.choice and (not sym.choice.is_optional) and (sym.choice._selection_from_defaults() is sym) and (sym.orig_type is kconfiglib.BOOL) and (sym.tri_value == 2):\n        return True\n    return False",
            "def sym_default(sym):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not sym.choice and sym.visibility <= kconfiglib.expr_value(sym.rev_dep):\n        return True\n    if sym.str_value == sym._str_default():\n        return True\n    if sym.choice and (not sym.choice.is_optional) and (sym.choice._selection_from_defaults() is sym) and (sym.orig_type is kconfiglib.BOOL) and (sym.tri_value == 2):\n        return True\n    return False",
            "def sym_default(sym):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not sym.choice and sym.visibility <= kconfiglib.expr_value(sym.rev_dep):\n        return True\n    if sym.str_value == sym._str_default():\n        return True\n    if sym.choice and (not sym.choice.is_optional) and (sym.choice._selection_from_defaults() is sym) and (sym.orig_type is kconfiglib.BOOL) and (sym.tri_value == 2):\n        return True\n    return False",
            "def sym_default(sym):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not sym.choice and sym.visibility <= kconfiglib.expr_value(sym.rev_dep):\n        return True\n    if sym.str_value == sym._str_default():\n        return True\n    if sym.choice and (not sym.choice.is_optional) and (sym.choice._selection_from_defaults() is sym) and (sym.orig_type is kconfiglib.BOOL) and (sym.tri_value == 2):\n        return True\n    return False"
        ]
    },
    {
        "func_name": "update",
        "original": "@click.command()\n@click.option('--debug')\n@click.option('--board')\n@click.option('--update_all', is_flag=True, default=False, help='Updates the sdkconfigs outside of the board directory.')\ndef update(debug, board, update_all):\n    \"\"\"Updates related sdkconfig files based on the build directory version that\n    was likely modified by menuconfig.\"\"\"\n    board_make = pathlib.Path(f'boards/{board}/mpconfigboard.mk')\n    psram_size = '0'\n    uf2_bootloader = None\n    ble_enabled = None\n    for line in board_make.read_text().split('\\n'):\n        if '=' not in line or line.startswith('#'):\n            continue\n        (key, value) = line.split('=', maxsplit=1)\n        key = key.strip()\n        value = value.strip()\n        if key == 'IDF_TARGET':\n            target = value\n            if uf2_bootloader is None:\n                uf2_bootloader = target not in ('esp32', 'esp32c3', 'esp32c6', 'esp32h2')\n            if ble_enabled is None:\n                ble_enabled = target not in ('esp32', 'esp32s2')\n        elif key == 'CIRCUITPY_ESP_FLASH_SIZE':\n            flash_size = value\n        elif key == 'CIRCUITPY_ESP_FLASH_MODE':\n            flash_mode = value\n        elif key == 'CIRCUITPY_ESP_FLASH_FREQ':\n            flash_freq = value\n        elif key == 'CIRCUITPY_ESP_PSRAM_SIZE':\n            psram_size = value\n        elif key == 'CIRCUITPY_ESP_PSRAM_MODE':\n            psram_mode = value\n        elif key == 'CIRCUITPY_ESP_PSRAM_FREQ':\n            psram_freq = value\n        elif key == 'UF2_BOOTLOADER':\n            uf2_bootloader = not value == '0'\n        elif key == 'CIRCUITPY_BLEIO':\n            ble_enabled = not value == '0'\n    os.environ['IDF_TARGET'] = target\n    os.environ['COMPONENT_KCONFIGS_PROJBUILD_SOURCE_FILE'] = f'build-{board}/esp-idf/kconfigs_projbuild.in'\n    os.environ['COMPONENT_KCONFIGS_SOURCE_FILE'] = f'build-{board}/esp-idf/kconfigs.in'\n    kconfig_path = pathlib.Path(f'build-{board}/esp-idf/kconfigs.in')\n    kconfig_path = pathlib.Path(f'esp-idf/Kconfig')\n    kconfig = kconfiglib.Kconfig(kconfig_path)\n    input_config = pathlib.Path(f'build-{board}/esp-idf/sdkconfig')\n    kconfig.load_config(input_config)\n    sdkconfigs = []\n    default_config = pathlib.Path('esp-idf-config/sdkconfig.defaults')\n    sdkconfigs.append(default_config)\n    if debug:\n        opt_config = pathlib.Path('esp-idf-config/sdkconfig-debug.defaults')\n    else:\n        opt_config = pathlib.Path('esp-idf-config/sdkconfig-opt.defaults')\n    sdkconfigs.append(opt_config)\n    size_options = ''\n    if flash_size == '2MB':\n        size_options = '-no-ota-no-uf2'\n    elif not uf2_bootloader:\n        size_options = '-no-uf2'\n    flash_size_config = pathlib.Path(f'esp-idf-config/sdkconfig-flash-{flash_size}{size_options}.defaults')\n    flash_mode_config = pathlib.Path(f'esp-idf-config/sdkconfig-flash-{flash_mode}.defaults')\n    flash_freq_config = pathlib.Path(f'esp-idf-config/sdkconfig-flash-{flash_freq}.defaults')\n    sdkconfigs.extend((flash_size_config, flash_mode_config, flash_freq_config))\n    if psram_size != '0':\n        psram_config = pathlib.Path(f'esp-idf-config/sdkconfig-psram.defaults')\n        psram_size_config = pathlib.Path(f'esp-idf-config/sdkconfig-psram-{psram_size}.defaults')\n        psram_mode_config = pathlib.Path(f'esp-idf-config/sdkconfig-psram-{psram_mode}.defaults')\n        psram_freq_config = pathlib.Path(f'esp-idf-config/sdkconfig-psram-{psram_freq}.defaults')\n        sdkconfigs.extend((psram_config, psram_size_config, psram_mode_config, psram_freq_config))\n    target_config = pathlib.Path(f'esp-idf-config/sdkconfig-{target}.defaults')\n    sdkconfigs.append(target_config)\n    if ble_enabled:\n        ble_config = pathlib.Path(f'esp-idf-config/sdkconfig-ble.defaults')\n        sdkconfigs.append(ble_config)\n    board_config = pathlib.Path(f'boards/{board}/sdkconfig')\n    cp_kconfig_defaults = kconfiglib.Kconfig(kconfig_path)\n    for default_file in sdkconfigs:\n        cp_kconfig_defaults.load_config(default_file, replace=False)\n    board_settings = []\n    last_board_group = None\n    flash_size_settings = []\n    last_flash_size_group = None\n    flash_mode_settings = []\n    flash_freq_settings = []\n    psram_settings = []\n    last_psram_group = None\n    psram_size_settings = []\n    psram_mode_settings = []\n    psram_freq_settings = []\n    opt_settings = []\n    last_opt_group = None\n    target_settings = []\n    last_target_group = None\n    ble_settings = []\n    last_ble_group = None\n    default_settings = []\n    last_default_group = None\n    target_kconfig_snippets = set()\n    target_symbols = set()\n    current_group = []\n    for sym in kconfig.unique_defined_syms:\n        sym._visited = False\n    pending_nodes = [kconfig.top_node]\n    i = 0\n    while pending_nodes:\n        node = pending_nodes.pop()\n        if node is None:\n            current_group.pop()\n            continue\n        if node.item is kconfiglib.MENU:\n            if node.prompt:\n                print('  ' * len(current_group), i, node.prompt[0])\n        i += 1\n        if node.next:\n            pending_nodes.append(node.next)\n        item = node.item\n        if isinstance(item, kconfiglib.Symbol):\n            if item._visited:\n                continue\n            item._visited = True\n            config_string = item.config_string.strip()\n            if not config_string:\n                cp_sym = cp_kconfig_defaults.syms[item.name]\n                if cp_sym.str_value == 'n':\n                    config_string = f'# CONFIG_{item.name} is not set'\n                else:\n                    continue\n            if node.list:\n                pending_nodes.append(node.list)\n            matches_cp_default = cp_kconfig_defaults.syms[item.name].str_value == item.str_value\n            matches_esp_default = sym_default(item)\n            print_debug = not matches_esp_default or (not update_all and (not matches_cp_default))\n            if print_debug:\n                print('  ' * len(current_group), i, config_string.strip())\n            target_reference = target in item.name_and_loc\n            if target_reference:\n                loc = item.name_and_loc.split('defined at ')[1].split(':')[0].replace(target, '*')\n                if loc not in target_kconfig_snippets:\n                    differing_keys = set()\n                    shared_keys = {}\n                    first = True\n                    for path in pathlib.Path('.').glob(loc):\n                        kc = kconfiglib.Kconfig(path)\n                        all_file_syms = set()\n                        for sym in kc.unique_defined_syms:\n                            all_file_syms.add(sym)\n                            if sym.name in differing_keys:\n                                continue\n                            if first:\n                                shared_keys[sym.name] = sym.str_value\n                            elif sym.name not in shared_keys or shared_keys[sym.name] != sym.str_value:\n                                differing_keys.add(sym.name)\n                                if sym.name in shared_keys:\n                                    del shared_keys[sym.name]\n                        shared_syms = set(shared_keys.keys())\n                        for missing in shared_syms - all_file_syms:\n                            differing_keys.add(missing)\n                            del shared_keys[missing]\n                        first = False\n                    target_kconfig_snippets.add(loc)\n                    target_symbols = target_symbols.union(differing_keys)\n            all_references = set(item.referenced)\n            to_unpack = [item.rev_dep]\n            while to_unpack:\n                rdep = to_unpack.pop()\n                if isinstance(rdep, tuple):\n                    to_unpack.extend(rdep)\n                elif isinstance(rdep, int):\n                    pass\n                else:\n                    all_references.add(rdep)\n                    all_references.update(rdep.referenced)\n            psram_reference = False\n            for referenced in all_references:\n                if referenced.name.startswith('IDF_TARGET'):\n                    target_reference = True\n                if referenced.name in target_symbols:\n                    target_reference = True\n                if referenced.name == 'SPIRAM':\n                    psram_reference = True\n            if not update_all and (not matches_cp_default) or (update_all and matches_group(config_string, BOARD_SETTINGS) and (not matches_esp_default)):\n                print('  ' * (len(current_group) + 1), 'board')\n                last_board_group = add_group(board_settings, last_board_group, current_group)\n                board_settings.append(config_string)\n            elif update_all:\n                target_setting = target_reference or matches_group(config_string, TARGET_SETTINGS)\n                if matches_group(config_string, FLASH_SIZE_SETTINGS):\n                    print('  ' * (len(current_group) + 1), 'flash size')\n                    last_flash_size_group = add_group(flash_size_settings, last_flash_size_group, current_group)\n                    flash_size_settings.append(config_string)\n                elif matches_group(config_string, FLASH_MODE_SETTINGS):\n                    print('  ' * (len(current_group) + 1), 'flash mode')\n                    flash_mode_settings.append(config_string)\n                elif matches_group(config_string, FLASH_FREQ_SETTINGS):\n                    print('  ' * (len(current_group) + 1), 'flash freq')\n                    flash_freq_settings.append(config_string)\n                elif matches_group(config_string, PSRAM_SIZE_SETTINGS):\n                    print('  ' * (len(current_group) + 1), 'psram size')\n                    psram_size_settings.append(config_string)\n                elif matches_group(config_string, PSRAM_MODE_SETTINGS):\n                    print('  ' * (len(current_group) + 1), 'psram mode')\n                    psram_mode_settings.append(config_string)\n                elif matches_group(config_string, PSRAM_FREQ_SETTINGS) and '26M' not in config_string and ('20M' not in config_string):\n                    print('  ' * (len(current_group) + 1), 'psram freq')\n                    psram_freq_settings.append(config_string)\n                elif matches_esp_default:\n                    if print_debug:\n                        print('  ' * (len(current_group) + 1), 'default')\n                    pass\n                elif matches_group(config_string, PSRAM_SETTINGS) or psram_reference:\n                    print('  ' * (len(current_group) + 1), 'psram shared')\n                    last_psram_group = add_group(psram_settings, last_psram_group, current_group)\n                    psram_settings.append(config_string)\n                elif matches_group(config_string, OPT_SETTINGS):\n                    print('  ' * (len(current_group) + 1), 'opt')\n                    last_opt_group = add_group(opt_settings, last_opt_group, current_group)\n                    opt_settings.append(config_string)\n                elif target_setting:\n                    print('  ' * (len(current_group) + 1), 'target')\n                    last_target_group = add_group(target_settings, last_target_group, current_group)\n                    target_settings.append(config_string)\n                elif matches_group(config_string, BLE_SETTINGS):\n                    print('  ' * (len(current_group) + 1), 'ble')\n                    last_ble_group = add_group(ble_settings, last_ble_group, current_group)\n                    ble_settings.append(config_string)\n                else:\n                    print('  ' * (len(current_group) + 1), 'all')\n                    last_default_group = add_group(default_settings, last_default_group, current_group)\n                    default_settings.append(config_string)\n        elif item is kconfiglib.COMMENT:\n            print('comment', repr(item))\n        elif item is kconfiglib.MENU:\n            if node.list:\n                current_group.append(node.prompt[0])\n                pending_nodes.append(None)\n                pending_nodes.append(node.list)\n        elif isinstance(item, kconfiglib.Choice):\n            pending_nodes.append(node.list)\n        else:\n            print('unknown', repr(item))\n    add_group(board_settings, last_board_group, current_group)\n    add_group(opt_settings, last_opt_group, current_group)\n    add_group(flash_size_settings, last_flash_size_group, current_group)\n    add_group(psram_settings, last_psram_group, current_group)\n    add_group(target_settings, last_target_group, current_group)\n    add_group(ble_settings, last_ble_group, current_group)\n    add_group(default_settings, last_default_group, current_group)\n    board_config.write_text('\\n'.join(board_settings))\n    if update_all:\n        flash_mode_settings.append('')\n        flash_freq_settings.append('')\n        flash_size_config.write_text('\\n'.join(flash_size_settings))\n        flash_mode_config.write_text('\\n'.join(flash_mode_settings))\n        flash_freq_config.write_text('\\n'.join(flash_freq_settings))\n        if psram_size != '0':\n            psram_size_settings.append('')\n            psram_mode_settings.append('')\n            psram_freq_settings.append('')\n            psram_config.write_text('\\n'.join(psram_settings))\n            psram_size_config.write_text('\\n'.join(psram_size_settings))\n            psram_mode_config.write_text('\\n'.join(psram_mode_settings))\n            psram_freq_config.write_text('\\n'.join(psram_freq_settings))\n        opt_config.write_text('\\n'.join(opt_settings))\n        default_config.write_text('\\n'.join(default_settings))\n        target_config.write_text('\\n'.join(target_settings))\n        if ble_settings:\n            ble_config.write_text('\\n'.join(ble_settings))",
        "mutated": [
            "@click.command()\n@click.option('--debug')\n@click.option('--board')\n@click.option('--update_all', is_flag=True, default=False, help='Updates the sdkconfigs outside of the board directory.')\ndef update(debug, board, update_all):\n    if False:\n        i = 10\n    'Updates related sdkconfig files based on the build directory version that\\n    was likely modified by menuconfig.'\n    board_make = pathlib.Path(f'boards/{board}/mpconfigboard.mk')\n    psram_size = '0'\n    uf2_bootloader = None\n    ble_enabled = None\n    for line in board_make.read_text().split('\\n'):\n        if '=' not in line or line.startswith('#'):\n            continue\n        (key, value) = line.split('=', maxsplit=1)\n        key = key.strip()\n        value = value.strip()\n        if key == 'IDF_TARGET':\n            target = value\n            if uf2_bootloader is None:\n                uf2_bootloader = target not in ('esp32', 'esp32c3', 'esp32c6', 'esp32h2')\n            if ble_enabled is None:\n                ble_enabled = target not in ('esp32', 'esp32s2')\n        elif key == 'CIRCUITPY_ESP_FLASH_SIZE':\n            flash_size = value\n        elif key == 'CIRCUITPY_ESP_FLASH_MODE':\n            flash_mode = value\n        elif key == 'CIRCUITPY_ESP_FLASH_FREQ':\n            flash_freq = value\n        elif key == 'CIRCUITPY_ESP_PSRAM_SIZE':\n            psram_size = value\n        elif key == 'CIRCUITPY_ESP_PSRAM_MODE':\n            psram_mode = value\n        elif key == 'CIRCUITPY_ESP_PSRAM_FREQ':\n            psram_freq = value\n        elif key == 'UF2_BOOTLOADER':\n            uf2_bootloader = not value == '0'\n        elif key == 'CIRCUITPY_BLEIO':\n            ble_enabled = not value == '0'\n    os.environ['IDF_TARGET'] = target\n    os.environ['COMPONENT_KCONFIGS_PROJBUILD_SOURCE_FILE'] = f'build-{board}/esp-idf/kconfigs_projbuild.in'\n    os.environ['COMPONENT_KCONFIGS_SOURCE_FILE'] = f'build-{board}/esp-idf/kconfigs.in'\n    kconfig_path = pathlib.Path(f'build-{board}/esp-idf/kconfigs.in')\n    kconfig_path = pathlib.Path(f'esp-idf/Kconfig')\n    kconfig = kconfiglib.Kconfig(kconfig_path)\n    input_config = pathlib.Path(f'build-{board}/esp-idf/sdkconfig')\n    kconfig.load_config(input_config)\n    sdkconfigs = []\n    default_config = pathlib.Path('esp-idf-config/sdkconfig.defaults')\n    sdkconfigs.append(default_config)\n    if debug:\n        opt_config = pathlib.Path('esp-idf-config/sdkconfig-debug.defaults')\n    else:\n        opt_config = pathlib.Path('esp-idf-config/sdkconfig-opt.defaults')\n    sdkconfigs.append(opt_config)\n    size_options = ''\n    if flash_size == '2MB':\n        size_options = '-no-ota-no-uf2'\n    elif not uf2_bootloader:\n        size_options = '-no-uf2'\n    flash_size_config = pathlib.Path(f'esp-idf-config/sdkconfig-flash-{flash_size}{size_options}.defaults')\n    flash_mode_config = pathlib.Path(f'esp-idf-config/sdkconfig-flash-{flash_mode}.defaults')\n    flash_freq_config = pathlib.Path(f'esp-idf-config/sdkconfig-flash-{flash_freq}.defaults')\n    sdkconfigs.extend((flash_size_config, flash_mode_config, flash_freq_config))\n    if psram_size != '0':\n        psram_config = pathlib.Path(f'esp-idf-config/sdkconfig-psram.defaults')\n        psram_size_config = pathlib.Path(f'esp-idf-config/sdkconfig-psram-{psram_size}.defaults')\n        psram_mode_config = pathlib.Path(f'esp-idf-config/sdkconfig-psram-{psram_mode}.defaults')\n        psram_freq_config = pathlib.Path(f'esp-idf-config/sdkconfig-psram-{psram_freq}.defaults')\n        sdkconfigs.extend((psram_config, psram_size_config, psram_mode_config, psram_freq_config))\n    target_config = pathlib.Path(f'esp-idf-config/sdkconfig-{target}.defaults')\n    sdkconfigs.append(target_config)\n    if ble_enabled:\n        ble_config = pathlib.Path(f'esp-idf-config/sdkconfig-ble.defaults')\n        sdkconfigs.append(ble_config)\n    board_config = pathlib.Path(f'boards/{board}/sdkconfig')\n    cp_kconfig_defaults = kconfiglib.Kconfig(kconfig_path)\n    for default_file in sdkconfigs:\n        cp_kconfig_defaults.load_config(default_file, replace=False)\n    board_settings = []\n    last_board_group = None\n    flash_size_settings = []\n    last_flash_size_group = None\n    flash_mode_settings = []\n    flash_freq_settings = []\n    psram_settings = []\n    last_psram_group = None\n    psram_size_settings = []\n    psram_mode_settings = []\n    psram_freq_settings = []\n    opt_settings = []\n    last_opt_group = None\n    target_settings = []\n    last_target_group = None\n    ble_settings = []\n    last_ble_group = None\n    default_settings = []\n    last_default_group = None\n    target_kconfig_snippets = set()\n    target_symbols = set()\n    current_group = []\n    for sym in kconfig.unique_defined_syms:\n        sym._visited = False\n    pending_nodes = [kconfig.top_node]\n    i = 0\n    while pending_nodes:\n        node = pending_nodes.pop()\n        if node is None:\n            current_group.pop()\n            continue\n        if node.item is kconfiglib.MENU:\n            if node.prompt:\n                print('  ' * len(current_group), i, node.prompt[0])\n        i += 1\n        if node.next:\n            pending_nodes.append(node.next)\n        item = node.item\n        if isinstance(item, kconfiglib.Symbol):\n            if item._visited:\n                continue\n            item._visited = True\n            config_string = item.config_string.strip()\n            if not config_string:\n                cp_sym = cp_kconfig_defaults.syms[item.name]\n                if cp_sym.str_value == 'n':\n                    config_string = f'# CONFIG_{item.name} is not set'\n                else:\n                    continue\n            if node.list:\n                pending_nodes.append(node.list)\n            matches_cp_default = cp_kconfig_defaults.syms[item.name].str_value == item.str_value\n            matches_esp_default = sym_default(item)\n            print_debug = not matches_esp_default or (not update_all and (not matches_cp_default))\n            if print_debug:\n                print('  ' * len(current_group), i, config_string.strip())\n            target_reference = target in item.name_and_loc\n            if target_reference:\n                loc = item.name_and_loc.split('defined at ')[1].split(':')[0].replace(target, '*')\n                if loc not in target_kconfig_snippets:\n                    differing_keys = set()\n                    shared_keys = {}\n                    first = True\n                    for path in pathlib.Path('.').glob(loc):\n                        kc = kconfiglib.Kconfig(path)\n                        all_file_syms = set()\n                        for sym in kc.unique_defined_syms:\n                            all_file_syms.add(sym)\n                            if sym.name in differing_keys:\n                                continue\n                            if first:\n                                shared_keys[sym.name] = sym.str_value\n                            elif sym.name not in shared_keys or shared_keys[sym.name] != sym.str_value:\n                                differing_keys.add(sym.name)\n                                if sym.name in shared_keys:\n                                    del shared_keys[sym.name]\n                        shared_syms = set(shared_keys.keys())\n                        for missing in shared_syms - all_file_syms:\n                            differing_keys.add(missing)\n                            del shared_keys[missing]\n                        first = False\n                    target_kconfig_snippets.add(loc)\n                    target_symbols = target_symbols.union(differing_keys)\n            all_references = set(item.referenced)\n            to_unpack = [item.rev_dep]\n            while to_unpack:\n                rdep = to_unpack.pop()\n                if isinstance(rdep, tuple):\n                    to_unpack.extend(rdep)\n                elif isinstance(rdep, int):\n                    pass\n                else:\n                    all_references.add(rdep)\n                    all_references.update(rdep.referenced)\n            psram_reference = False\n            for referenced in all_references:\n                if referenced.name.startswith('IDF_TARGET'):\n                    target_reference = True\n                if referenced.name in target_symbols:\n                    target_reference = True\n                if referenced.name == 'SPIRAM':\n                    psram_reference = True\n            if not update_all and (not matches_cp_default) or (update_all and matches_group(config_string, BOARD_SETTINGS) and (not matches_esp_default)):\n                print('  ' * (len(current_group) + 1), 'board')\n                last_board_group = add_group(board_settings, last_board_group, current_group)\n                board_settings.append(config_string)\n            elif update_all:\n                target_setting = target_reference or matches_group(config_string, TARGET_SETTINGS)\n                if matches_group(config_string, FLASH_SIZE_SETTINGS):\n                    print('  ' * (len(current_group) + 1), 'flash size')\n                    last_flash_size_group = add_group(flash_size_settings, last_flash_size_group, current_group)\n                    flash_size_settings.append(config_string)\n                elif matches_group(config_string, FLASH_MODE_SETTINGS):\n                    print('  ' * (len(current_group) + 1), 'flash mode')\n                    flash_mode_settings.append(config_string)\n                elif matches_group(config_string, FLASH_FREQ_SETTINGS):\n                    print('  ' * (len(current_group) + 1), 'flash freq')\n                    flash_freq_settings.append(config_string)\n                elif matches_group(config_string, PSRAM_SIZE_SETTINGS):\n                    print('  ' * (len(current_group) + 1), 'psram size')\n                    psram_size_settings.append(config_string)\n                elif matches_group(config_string, PSRAM_MODE_SETTINGS):\n                    print('  ' * (len(current_group) + 1), 'psram mode')\n                    psram_mode_settings.append(config_string)\n                elif matches_group(config_string, PSRAM_FREQ_SETTINGS) and '26M' not in config_string and ('20M' not in config_string):\n                    print('  ' * (len(current_group) + 1), 'psram freq')\n                    psram_freq_settings.append(config_string)\n                elif matches_esp_default:\n                    if print_debug:\n                        print('  ' * (len(current_group) + 1), 'default')\n                    pass\n                elif matches_group(config_string, PSRAM_SETTINGS) or psram_reference:\n                    print('  ' * (len(current_group) + 1), 'psram shared')\n                    last_psram_group = add_group(psram_settings, last_psram_group, current_group)\n                    psram_settings.append(config_string)\n                elif matches_group(config_string, OPT_SETTINGS):\n                    print('  ' * (len(current_group) + 1), 'opt')\n                    last_opt_group = add_group(opt_settings, last_opt_group, current_group)\n                    opt_settings.append(config_string)\n                elif target_setting:\n                    print('  ' * (len(current_group) + 1), 'target')\n                    last_target_group = add_group(target_settings, last_target_group, current_group)\n                    target_settings.append(config_string)\n                elif matches_group(config_string, BLE_SETTINGS):\n                    print('  ' * (len(current_group) + 1), 'ble')\n                    last_ble_group = add_group(ble_settings, last_ble_group, current_group)\n                    ble_settings.append(config_string)\n                else:\n                    print('  ' * (len(current_group) + 1), 'all')\n                    last_default_group = add_group(default_settings, last_default_group, current_group)\n                    default_settings.append(config_string)\n        elif item is kconfiglib.COMMENT:\n            print('comment', repr(item))\n        elif item is kconfiglib.MENU:\n            if node.list:\n                current_group.append(node.prompt[0])\n                pending_nodes.append(None)\n                pending_nodes.append(node.list)\n        elif isinstance(item, kconfiglib.Choice):\n            pending_nodes.append(node.list)\n        else:\n            print('unknown', repr(item))\n    add_group(board_settings, last_board_group, current_group)\n    add_group(opt_settings, last_opt_group, current_group)\n    add_group(flash_size_settings, last_flash_size_group, current_group)\n    add_group(psram_settings, last_psram_group, current_group)\n    add_group(target_settings, last_target_group, current_group)\n    add_group(ble_settings, last_ble_group, current_group)\n    add_group(default_settings, last_default_group, current_group)\n    board_config.write_text('\\n'.join(board_settings))\n    if update_all:\n        flash_mode_settings.append('')\n        flash_freq_settings.append('')\n        flash_size_config.write_text('\\n'.join(flash_size_settings))\n        flash_mode_config.write_text('\\n'.join(flash_mode_settings))\n        flash_freq_config.write_text('\\n'.join(flash_freq_settings))\n        if psram_size != '0':\n            psram_size_settings.append('')\n            psram_mode_settings.append('')\n            psram_freq_settings.append('')\n            psram_config.write_text('\\n'.join(psram_settings))\n            psram_size_config.write_text('\\n'.join(psram_size_settings))\n            psram_mode_config.write_text('\\n'.join(psram_mode_settings))\n            psram_freq_config.write_text('\\n'.join(psram_freq_settings))\n        opt_config.write_text('\\n'.join(opt_settings))\n        default_config.write_text('\\n'.join(default_settings))\n        target_config.write_text('\\n'.join(target_settings))\n        if ble_settings:\n            ble_config.write_text('\\n'.join(ble_settings))",
            "@click.command()\n@click.option('--debug')\n@click.option('--board')\n@click.option('--update_all', is_flag=True, default=False, help='Updates the sdkconfigs outside of the board directory.')\ndef update(debug, board, update_all):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Updates related sdkconfig files based on the build directory version that\\n    was likely modified by menuconfig.'\n    board_make = pathlib.Path(f'boards/{board}/mpconfigboard.mk')\n    psram_size = '0'\n    uf2_bootloader = None\n    ble_enabled = None\n    for line in board_make.read_text().split('\\n'):\n        if '=' not in line or line.startswith('#'):\n            continue\n        (key, value) = line.split('=', maxsplit=1)\n        key = key.strip()\n        value = value.strip()\n        if key == 'IDF_TARGET':\n            target = value\n            if uf2_bootloader is None:\n                uf2_bootloader = target not in ('esp32', 'esp32c3', 'esp32c6', 'esp32h2')\n            if ble_enabled is None:\n                ble_enabled = target not in ('esp32', 'esp32s2')\n        elif key == 'CIRCUITPY_ESP_FLASH_SIZE':\n            flash_size = value\n        elif key == 'CIRCUITPY_ESP_FLASH_MODE':\n            flash_mode = value\n        elif key == 'CIRCUITPY_ESP_FLASH_FREQ':\n            flash_freq = value\n        elif key == 'CIRCUITPY_ESP_PSRAM_SIZE':\n            psram_size = value\n        elif key == 'CIRCUITPY_ESP_PSRAM_MODE':\n            psram_mode = value\n        elif key == 'CIRCUITPY_ESP_PSRAM_FREQ':\n            psram_freq = value\n        elif key == 'UF2_BOOTLOADER':\n            uf2_bootloader = not value == '0'\n        elif key == 'CIRCUITPY_BLEIO':\n            ble_enabled = not value == '0'\n    os.environ['IDF_TARGET'] = target\n    os.environ['COMPONENT_KCONFIGS_PROJBUILD_SOURCE_FILE'] = f'build-{board}/esp-idf/kconfigs_projbuild.in'\n    os.environ['COMPONENT_KCONFIGS_SOURCE_FILE'] = f'build-{board}/esp-idf/kconfigs.in'\n    kconfig_path = pathlib.Path(f'build-{board}/esp-idf/kconfigs.in')\n    kconfig_path = pathlib.Path(f'esp-idf/Kconfig')\n    kconfig = kconfiglib.Kconfig(kconfig_path)\n    input_config = pathlib.Path(f'build-{board}/esp-idf/sdkconfig')\n    kconfig.load_config(input_config)\n    sdkconfigs = []\n    default_config = pathlib.Path('esp-idf-config/sdkconfig.defaults')\n    sdkconfigs.append(default_config)\n    if debug:\n        opt_config = pathlib.Path('esp-idf-config/sdkconfig-debug.defaults')\n    else:\n        opt_config = pathlib.Path('esp-idf-config/sdkconfig-opt.defaults')\n    sdkconfigs.append(opt_config)\n    size_options = ''\n    if flash_size == '2MB':\n        size_options = '-no-ota-no-uf2'\n    elif not uf2_bootloader:\n        size_options = '-no-uf2'\n    flash_size_config = pathlib.Path(f'esp-idf-config/sdkconfig-flash-{flash_size}{size_options}.defaults')\n    flash_mode_config = pathlib.Path(f'esp-idf-config/sdkconfig-flash-{flash_mode}.defaults')\n    flash_freq_config = pathlib.Path(f'esp-idf-config/sdkconfig-flash-{flash_freq}.defaults')\n    sdkconfigs.extend((flash_size_config, flash_mode_config, flash_freq_config))\n    if psram_size != '0':\n        psram_config = pathlib.Path(f'esp-idf-config/sdkconfig-psram.defaults')\n        psram_size_config = pathlib.Path(f'esp-idf-config/sdkconfig-psram-{psram_size}.defaults')\n        psram_mode_config = pathlib.Path(f'esp-idf-config/sdkconfig-psram-{psram_mode}.defaults')\n        psram_freq_config = pathlib.Path(f'esp-idf-config/sdkconfig-psram-{psram_freq}.defaults')\n        sdkconfigs.extend((psram_config, psram_size_config, psram_mode_config, psram_freq_config))\n    target_config = pathlib.Path(f'esp-idf-config/sdkconfig-{target}.defaults')\n    sdkconfigs.append(target_config)\n    if ble_enabled:\n        ble_config = pathlib.Path(f'esp-idf-config/sdkconfig-ble.defaults')\n        sdkconfigs.append(ble_config)\n    board_config = pathlib.Path(f'boards/{board}/sdkconfig')\n    cp_kconfig_defaults = kconfiglib.Kconfig(kconfig_path)\n    for default_file in sdkconfigs:\n        cp_kconfig_defaults.load_config(default_file, replace=False)\n    board_settings = []\n    last_board_group = None\n    flash_size_settings = []\n    last_flash_size_group = None\n    flash_mode_settings = []\n    flash_freq_settings = []\n    psram_settings = []\n    last_psram_group = None\n    psram_size_settings = []\n    psram_mode_settings = []\n    psram_freq_settings = []\n    opt_settings = []\n    last_opt_group = None\n    target_settings = []\n    last_target_group = None\n    ble_settings = []\n    last_ble_group = None\n    default_settings = []\n    last_default_group = None\n    target_kconfig_snippets = set()\n    target_symbols = set()\n    current_group = []\n    for sym in kconfig.unique_defined_syms:\n        sym._visited = False\n    pending_nodes = [kconfig.top_node]\n    i = 0\n    while pending_nodes:\n        node = pending_nodes.pop()\n        if node is None:\n            current_group.pop()\n            continue\n        if node.item is kconfiglib.MENU:\n            if node.prompt:\n                print('  ' * len(current_group), i, node.prompt[0])\n        i += 1\n        if node.next:\n            pending_nodes.append(node.next)\n        item = node.item\n        if isinstance(item, kconfiglib.Symbol):\n            if item._visited:\n                continue\n            item._visited = True\n            config_string = item.config_string.strip()\n            if not config_string:\n                cp_sym = cp_kconfig_defaults.syms[item.name]\n                if cp_sym.str_value == 'n':\n                    config_string = f'# CONFIG_{item.name} is not set'\n                else:\n                    continue\n            if node.list:\n                pending_nodes.append(node.list)\n            matches_cp_default = cp_kconfig_defaults.syms[item.name].str_value == item.str_value\n            matches_esp_default = sym_default(item)\n            print_debug = not matches_esp_default or (not update_all and (not matches_cp_default))\n            if print_debug:\n                print('  ' * len(current_group), i, config_string.strip())\n            target_reference = target in item.name_and_loc\n            if target_reference:\n                loc = item.name_and_loc.split('defined at ')[1].split(':')[0].replace(target, '*')\n                if loc not in target_kconfig_snippets:\n                    differing_keys = set()\n                    shared_keys = {}\n                    first = True\n                    for path in pathlib.Path('.').glob(loc):\n                        kc = kconfiglib.Kconfig(path)\n                        all_file_syms = set()\n                        for sym in kc.unique_defined_syms:\n                            all_file_syms.add(sym)\n                            if sym.name in differing_keys:\n                                continue\n                            if first:\n                                shared_keys[sym.name] = sym.str_value\n                            elif sym.name not in shared_keys or shared_keys[sym.name] != sym.str_value:\n                                differing_keys.add(sym.name)\n                                if sym.name in shared_keys:\n                                    del shared_keys[sym.name]\n                        shared_syms = set(shared_keys.keys())\n                        for missing in shared_syms - all_file_syms:\n                            differing_keys.add(missing)\n                            del shared_keys[missing]\n                        first = False\n                    target_kconfig_snippets.add(loc)\n                    target_symbols = target_symbols.union(differing_keys)\n            all_references = set(item.referenced)\n            to_unpack = [item.rev_dep]\n            while to_unpack:\n                rdep = to_unpack.pop()\n                if isinstance(rdep, tuple):\n                    to_unpack.extend(rdep)\n                elif isinstance(rdep, int):\n                    pass\n                else:\n                    all_references.add(rdep)\n                    all_references.update(rdep.referenced)\n            psram_reference = False\n            for referenced in all_references:\n                if referenced.name.startswith('IDF_TARGET'):\n                    target_reference = True\n                if referenced.name in target_symbols:\n                    target_reference = True\n                if referenced.name == 'SPIRAM':\n                    psram_reference = True\n            if not update_all and (not matches_cp_default) or (update_all and matches_group(config_string, BOARD_SETTINGS) and (not matches_esp_default)):\n                print('  ' * (len(current_group) + 1), 'board')\n                last_board_group = add_group(board_settings, last_board_group, current_group)\n                board_settings.append(config_string)\n            elif update_all:\n                target_setting = target_reference or matches_group(config_string, TARGET_SETTINGS)\n                if matches_group(config_string, FLASH_SIZE_SETTINGS):\n                    print('  ' * (len(current_group) + 1), 'flash size')\n                    last_flash_size_group = add_group(flash_size_settings, last_flash_size_group, current_group)\n                    flash_size_settings.append(config_string)\n                elif matches_group(config_string, FLASH_MODE_SETTINGS):\n                    print('  ' * (len(current_group) + 1), 'flash mode')\n                    flash_mode_settings.append(config_string)\n                elif matches_group(config_string, FLASH_FREQ_SETTINGS):\n                    print('  ' * (len(current_group) + 1), 'flash freq')\n                    flash_freq_settings.append(config_string)\n                elif matches_group(config_string, PSRAM_SIZE_SETTINGS):\n                    print('  ' * (len(current_group) + 1), 'psram size')\n                    psram_size_settings.append(config_string)\n                elif matches_group(config_string, PSRAM_MODE_SETTINGS):\n                    print('  ' * (len(current_group) + 1), 'psram mode')\n                    psram_mode_settings.append(config_string)\n                elif matches_group(config_string, PSRAM_FREQ_SETTINGS) and '26M' not in config_string and ('20M' not in config_string):\n                    print('  ' * (len(current_group) + 1), 'psram freq')\n                    psram_freq_settings.append(config_string)\n                elif matches_esp_default:\n                    if print_debug:\n                        print('  ' * (len(current_group) + 1), 'default')\n                    pass\n                elif matches_group(config_string, PSRAM_SETTINGS) or psram_reference:\n                    print('  ' * (len(current_group) + 1), 'psram shared')\n                    last_psram_group = add_group(psram_settings, last_psram_group, current_group)\n                    psram_settings.append(config_string)\n                elif matches_group(config_string, OPT_SETTINGS):\n                    print('  ' * (len(current_group) + 1), 'opt')\n                    last_opt_group = add_group(opt_settings, last_opt_group, current_group)\n                    opt_settings.append(config_string)\n                elif target_setting:\n                    print('  ' * (len(current_group) + 1), 'target')\n                    last_target_group = add_group(target_settings, last_target_group, current_group)\n                    target_settings.append(config_string)\n                elif matches_group(config_string, BLE_SETTINGS):\n                    print('  ' * (len(current_group) + 1), 'ble')\n                    last_ble_group = add_group(ble_settings, last_ble_group, current_group)\n                    ble_settings.append(config_string)\n                else:\n                    print('  ' * (len(current_group) + 1), 'all')\n                    last_default_group = add_group(default_settings, last_default_group, current_group)\n                    default_settings.append(config_string)\n        elif item is kconfiglib.COMMENT:\n            print('comment', repr(item))\n        elif item is kconfiglib.MENU:\n            if node.list:\n                current_group.append(node.prompt[0])\n                pending_nodes.append(None)\n                pending_nodes.append(node.list)\n        elif isinstance(item, kconfiglib.Choice):\n            pending_nodes.append(node.list)\n        else:\n            print('unknown', repr(item))\n    add_group(board_settings, last_board_group, current_group)\n    add_group(opt_settings, last_opt_group, current_group)\n    add_group(flash_size_settings, last_flash_size_group, current_group)\n    add_group(psram_settings, last_psram_group, current_group)\n    add_group(target_settings, last_target_group, current_group)\n    add_group(ble_settings, last_ble_group, current_group)\n    add_group(default_settings, last_default_group, current_group)\n    board_config.write_text('\\n'.join(board_settings))\n    if update_all:\n        flash_mode_settings.append('')\n        flash_freq_settings.append('')\n        flash_size_config.write_text('\\n'.join(flash_size_settings))\n        flash_mode_config.write_text('\\n'.join(flash_mode_settings))\n        flash_freq_config.write_text('\\n'.join(flash_freq_settings))\n        if psram_size != '0':\n            psram_size_settings.append('')\n            psram_mode_settings.append('')\n            psram_freq_settings.append('')\n            psram_config.write_text('\\n'.join(psram_settings))\n            psram_size_config.write_text('\\n'.join(psram_size_settings))\n            psram_mode_config.write_text('\\n'.join(psram_mode_settings))\n            psram_freq_config.write_text('\\n'.join(psram_freq_settings))\n        opt_config.write_text('\\n'.join(opt_settings))\n        default_config.write_text('\\n'.join(default_settings))\n        target_config.write_text('\\n'.join(target_settings))\n        if ble_settings:\n            ble_config.write_text('\\n'.join(ble_settings))",
            "@click.command()\n@click.option('--debug')\n@click.option('--board')\n@click.option('--update_all', is_flag=True, default=False, help='Updates the sdkconfigs outside of the board directory.')\ndef update(debug, board, update_all):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Updates related sdkconfig files based on the build directory version that\\n    was likely modified by menuconfig.'\n    board_make = pathlib.Path(f'boards/{board}/mpconfigboard.mk')\n    psram_size = '0'\n    uf2_bootloader = None\n    ble_enabled = None\n    for line in board_make.read_text().split('\\n'):\n        if '=' not in line or line.startswith('#'):\n            continue\n        (key, value) = line.split('=', maxsplit=1)\n        key = key.strip()\n        value = value.strip()\n        if key == 'IDF_TARGET':\n            target = value\n            if uf2_bootloader is None:\n                uf2_bootloader = target not in ('esp32', 'esp32c3', 'esp32c6', 'esp32h2')\n            if ble_enabled is None:\n                ble_enabled = target not in ('esp32', 'esp32s2')\n        elif key == 'CIRCUITPY_ESP_FLASH_SIZE':\n            flash_size = value\n        elif key == 'CIRCUITPY_ESP_FLASH_MODE':\n            flash_mode = value\n        elif key == 'CIRCUITPY_ESP_FLASH_FREQ':\n            flash_freq = value\n        elif key == 'CIRCUITPY_ESP_PSRAM_SIZE':\n            psram_size = value\n        elif key == 'CIRCUITPY_ESP_PSRAM_MODE':\n            psram_mode = value\n        elif key == 'CIRCUITPY_ESP_PSRAM_FREQ':\n            psram_freq = value\n        elif key == 'UF2_BOOTLOADER':\n            uf2_bootloader = not value == '0'\n        elif key == 'CIRCUITPY_BLEIO':\n            ble_enabled = not value == '0'\n    os.environ['IDF_TARGET'] = target\n    os.environ['COMPONENT_KCONFIGS_PROJBUILD_SOURCE_FILE'] = f'build-{board}/esp-idf/kconfigs_projbuild.in'\n    os.environ['COMPONENT_KCONFIGS_SOURCE_FILE'] = f'build-{board}/esp-idf/kconfigs.in'\n    kconfig_path = pathlib.Path(f'build-{board}/esp-idf/kconfigs.in')\n    kconfig_path = pathlib.Path(f'esp-idf/Kconfig')\n    kconfig = kconfiglib.Kconfig(kconfig_path)\n    input_config = pathlib.Path(f'build-{board}/esp-idf/sdkconfig')\n    kconfig.load_config(input_config)\n    sdkconfigs = []\n    default_config = pathlib.Path('esp-idf-config/sdkconfig.defaults')\n    sdkconfigs.append(default_config)\n    if debug:\n        opt_config = pathlib.Path('esp-idf-config/sdkconfig-debug.defaults')\n    else:\n        opt_config = pathlib.Path('esp-idf-config/sdkconfig-opt.defaults')\n    sdkconfigs.append(opt_config)\n    size_options = ''\n    if flash_size == '2MB':\n        size_options = '-no-ota-no-uf2'\n    elif not uf2_bootloader:\n        size_options = '-no-uf2'\n    flash_size_config = pathlib.Path(f'esp-idf-config/sdkconfig-flash-{flash_size}{size_options}.defaults')\n    flash_mode_config = pathlib.Path(f'esp-idf-config/sdkconfig-flash-{flash_mode}.defaults')\n    flash_freq_config = pathlib.Path(f'esp-idf-config/sdkconfig-flash-{flash_freq}.defaults')\n    sdkconfigs.extend((flash_size_config, flash_mode_config, flash_freq_config))\n    if psram_size != '0':\n        psram_config = pathlib.Path(f'esp-idf-config/sdkconfig-psram.defaults')\n        psram_size_config = pathlib.Path(f'esp-idf-config/sdkconfig-psram-{psram_size}.defaults')\n        psram_mode_config = pathlib.Path(f'esp-idf-config/sdkconfig-psram-{psram_mode}.defaults')\n        psram_freq_config = pathlib.Path(f'esp-idf-config/sdkconfig-psram-{psram_freq}.defaults')\n        sdkconfigs.extend((psram_config, psram_size_config, psram_mode_config, psram_freq_config))\n    target_config = pathlib.Path(f'esp-idf-config/sdkconfig-{target}.defaults')\n    sdkconfigs.append(target_config)\n    if ble_enabled:\n        ble_config = pathlib.Path(f'esp-idf-config/sdkconfig-ble.defaults')\n        sdkconfigs.append(ble_config)\n    board_config = pathlib.Path(f'boards/{board}/sdkconfig')\n    cp_kconfig_defaults = kconfiglib.Kconfig(kconfig_path)\n    for default_file in sdkconfigs:\n        cp_kconfig_defaults.load_config(default_file, replace=False)\n    board_settings = []\n    last_board_group = None\n    flash_size_settings = []\n    last_flash_size_group = None\n    flash_mode_settings = []\n    flash_freq_settings = []\n    psram_settings = []\n    last_psram_group = None\n    psram_size_settings = []\n    psram_mode_settings = []\n    psram_freq_settings = []\n    opt_settings = []\n    last_opt_group = None\n    target_settings = []\n    last_target_group = None\n    ble_settings = []\n    last_ble_group = None\n    default_settings = []\n    last_default_group = None\n    target_kconfig_snippets = set()\n    target_symbols = set()\n    current_group = []\n    for sym in kconfig.unique_defined_syms:\n        sym._visited = False\n    pending_nodes = [kconfig.top_node]\n    i = 0\n    while pending_nodes:\n        node = pending_nodes.pop()\n        if node is None:\n            current_group.pop()\n            continue\n        if node.item is kconfiglib.MENU:\n            if node.prompt:\n                print('  ' * len(current_group), i, node.prompt[0])\n        i += 1\n        if node.next:\n            pending_nodes.append(node.next)\n        item = node.item\n        if isinstance(item, kconfiglib.Symbol):\n            if item._visited:\n                continue\n            item._visited = True\n            config_string = item.config_string.strip()\n            if not config_string:\n                cp_sym = cp_kconfig_defaults.syms[item.name]\n                if cp_sym.str_value == 'n':\n                    config_string = f'# CONFIG_{item.name} is not set'\n                else:\n                    continue\n            if node.list:\n                pending_nodes.append(node.list)\n            matches_cp_default = cp_kconfig_defaults.syms[item.name].str_value == item.str_value\n            matches_esp_default = sym_default(item)\n            print_debug = not matches_esp_default or (not update_all and (not matches_cp_default))\n            if print_debug:\n                print('  ' * len(current_group), i, config_string.strip())\n            target_reference = target in item.name_and_loc\n            if target_reference:\n                loc = item.name_and_loc.split('defined at ')[1].split(':')[0].replace(target, '*')\n                if loc not in target_kconfig_snippets:\n                    differing_keys = set()\n                    shared_keys = {}\n                    first = True\n                    for path in pathlib.Path('.').glob(loc):\n                        kc = kconfiglib.Kconfig(path)\n                        all_file_syms = set()\n                        for sym in kc.unique_defined_syms:\n                            all_file_syms.add(sym)\n                            if sym.name in differing_keys:\n                                continue\n                            if first:\n                                shared_keys[sym.name] = sym.str_value\n                            elif sym.name not in shared_keys or shared_keys[sym.name] != sym.str_value:\n                                differing_keys.add(sym.name)\n                                if sym.name in shared_keys:\n                                    del shared_keys[sym.name]\n                        shared_syms = set(shared_keys.keys())\n                        for missing in shared_syms - all_file_syms:\n                            differing_keys.add(missing)\n                            del shared_keys[missing]\n                        first = False\n                    target_kconfig_snippets.add(loc)\n                    target_symbols = target_symbols.union(differing_keys)\n            all_references = set(item.referenced)\n            to_unpack = [item.rev_dep]\n            while to_unpack:\n                rdep = to_unpack.pop()\n                if isinstance(rdep, tuple):\n                    to_unpack.extend(rdep)\n                elif isinstance(rdep, int):\n                    pass\n                else:\n                    all_references.add(rdep)\n                    all_references.update(rdep.referenced)\n            psram_reference = False\n            for referenced in all_references:\n                if referenced.name.startswith('IDF_TARGET'):\n                    target_reference = True\n                if referenced.name in target_symbols:\n                    target_reference = True\n                if referenced.name == 'SPIRAM':\n                    psram_reference = True\n            if not update_all and (not matches_cp_default) or (update_all and matches_group(config_string, BOARD_SETTINGS) and (not matches_esp_default)):\n                print('  ' * (len(current_group) + 1), 'board')\n                last_board_group = add_group(board_settings, last_board_group, current_group)\n                board_settings.append(config_string)\n            elif update_all:\n                target_setting = target_reference or matches_group(config_string, TARGET_SETTINGS)\n                if matches_group(config_string, FLASH_SIZE_SETTINGS):\n                    print('  ' * (len(current_group) + 1), 'flash size')\n                    last_flash_size_group = add_group(flash_size_settings, last_flash_size_group, current_group)\n                    flash_size_settings.append(config_string)\n                elif matches_group(config_string, FLASH_MODE_SETTINGS):\n                    print('  ' * (len(current_group) + 1), 'flash mode')\n                    flash_mode_settings.append(config_string)\n                elif matches_group(config_string, FLASH_FREQ_SETTINGS):\n                    print('  ' * (len(current_group) + 1), 'flash freq')\n                    flash_freq_settings.append(config_string)\n                elif matches_group(config_string, PSRAM_SIZE_SETTINGS):\n                    print('  ' * (len(current_group) + 1), 'psram size')\n                    psram_size_settings.append(config_string)\n                elif matches_group(config_string, PSRAM_MODE_SETTINGS):\n                    print('  ' * (len(current_group) + 1), 'psram mode')\n                    psram_mode_settings.append(config_string)\n                elif matches_group(config_string, PSRAM_FREQ_SETTINGS) and '26M' not in config_string and ('20M' not in config_string):\n                    print('  ' * (len(current_group) + 1), 'psram freq')\n                    psram_freq_settings.append(config_string)\n                elif matches_esp_default:\n                    if print_debug:\n                        print('  ' * (len(current_group) + 1), 'default')\n                    pass\n                elif matches_group(config_string, PSRAM_SETTINGS) or psram_reference:\n                    print('  ' * (len(current_group) + 1), 'psram shared')\n                    last_psram_group = add_group(psram_settings, last_psram_group, current_group)\n                    psram_settings.append(config_string)\n                elif matches_group(config_string, OPT_SETTINGS):\n                    print('  ' * (len(current_group) + 1), 'opt')\n                    last_opt_group = add_group(opt_settings, last_opt_group, current_group)\n                    opt_settings.append(config_string)\n                elif target_setting:\n                    print('  ' * (len(current_group) + 1), 'target')\n                    last_target_group = add_group(target_settings, last_target_group, current_group)\n                    target_settings.append(config_string)\n                elif matches_group(config_string, BLE_SETTINGS):\n                    print('  ' * (len(current_group) + 1), 'ble')\n                    last_ble_group = add_group(ble_settings, last_ble_group, current_group)\n                    ble_settings.append(config_string)\n                else:\n                    print('  ' * (len(current_group) + 1), 'all')\n                    last_default_group = add_group(default_settings, last_default_group, current_group)\n                    default_settings.append(config_string)\n        elif item is kconfiglib.COMMENT:\n            print('comment', repr(item))\n        elif item is kconfiglib.MENU:\n            if node.list:\n                current_group.append(node.prompt[0])\n                pending_nodes.append(None)\n                pending_nodes.append(node.list)\n        elif isinstance(item, kconfiglib.Choice):\n            pending_nodes.append(node.list)\n        else:\n            print('unknown', repr(item))\n    add_group(board_settings, last_board_group, current_group)\n    add_group(opt_settings, last_opt_group, current_group)\n    add_group(flash_size_settings, last_flash_size_group, current_group)\n    add_group(psram_settings, last_psram_group, current_group)\n    add_group(target_settings, last_target_group, current_group)\n    add_group(ble_settings, last_ble_group, current_group)\n    add_group(default_settings, last_default_group, current_group)\n    board_config.write_text('\\n'.join(board_settings))\n    if update_all:\n        flash_mode_settings.append('')\n        flash_freq_settings.append('')\n        flash_size_config.write_text('\\n'.join(flash_size_settings))\n        flash_mode_config.write_text('\\n'.join(flash_mode_settings))\n        flash_freq_config.write_text('\\n'.join(flash_freq_settings))\n        if psram_size != '0':\n            psram_size_settings.append('')\n            psram_mode_settings.append('')\n            psram_freq_settings.append('')\n            psram_config.write_text('\\n'.join(psram_settings))\n            psram_size_config.write_text('\\n'.join(psram_size_settings))\n            psram_mode_config.write_text('\\n'.join(psram_mode_settings))\n            psram_freq_config.write_text('\\n'.join(psram_freq_settings))\n        opt_config.write_text('\\n'.join(opt_settings))\n        default_config.write_text('\\n'.join(default_settings))\n        target_config.write_text('\\n'.join(target_settings))\n        if ble_settings:\n            ble_config.write_text('\\n'.join(ble_settings))",
            "@click.command()\n@click.option('--debug')\n@click.option('--board')\n@click.option('--update_all', is_flag=True, default=False, help='Updates the sdkconfigs outside of the board directory.')\ndef update(debug, board, update_all):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Updates related sdkconfig files based on the build directory version that\\n    was likely modified by menuconfig.'\n    board_make = pathlib.Path(f'boards/{board}/mpconfigboard.mk')\n    psram_size = '0'\n    uf2_bootloader = None\n    ble_enabled = None\n    for line in board_make.read_text().split('\\n'):\n        if '=' not in line or line.startswith('#'):\n            continue\n        (key, value) = line.split('=', maxsplit=1)\n        key = key.strip()\n        value = value.strip()\n        if key == 'IDF_TARGET':\n            target = value\n            if uf2_bootloader is None:\n                uf2_bootloader = target not in ('esp32', 'esp32c3', 'esp32c6', 'esp32h2')\n            if ble_enabled is None:\n                ble_enabled = target not in ('esp32', 'esp32s2')\n        elif key == 'CIRCUITPY_ESP_FLASH_SIZE':\n            flash_size = value\n        elif key == 'CIRCUITPY_ESP_FLASH_MODE':\n            flash_mode = value\n        elif key == 'CIRCUITPY_ESP_FLASH_FREQ':\n            flash_freq = value\n        elif key == 'CIRCUITPY_ESP_PSRAM_SIZE':\n            psram_size = value\n        elif key == 'CIRCUITPY_ESP_PSRAM_MODE':\n            psram_mode = value\n        elif key == 'CIRCUITPY_ESP_PSRAM_FREQ':\n            psram_freq = value\n        elif key == 'UF2_BOOTLOADER':\n            uf2_bootloader = not value == '0'\n        elif key == 'CIRCUITPY_BLEIO':\n            ble_enabled = not value == '0'\n    os.environ['IDF_TARGET'] = target\n    os.environ['COMPONENT_KCONFIGS_PROJBUILD_SOURCE_FILE'] = f'build-{board}/esp-idf/kconfigs_projbuild.in'\n    os.environ['COMPONENT_KCONFIGS_SOURCE_FILE'] = f'build-{board}/esp-idf/kconfigs.in'\n    kconfig_path = pathlib.Path(f'build-{board}/esp-idf/kconfigs.in')\n    kconfig_path = pathlib.Path(f'esp-idf/Kconfig')\n    kconfig = kconfiglib.Kconfig(kconfig_path)\n    input_config = pathlib.Path(f'build-{board}/esp-idf/sdkconfig')\n    kconfig.load_config(input_config)\n    sdkconfigs = []\n    default_config = pathlib.Path('esp-idf-config/sdkconfig.defaults')\n    sdkconfigs.append(default_config)\n    if debug:\n        opt_config = pathlib.Path('esp-idf-config/sdkconfig-debug.defaults')\n    else:\n        opt_config = pathlib.Path('esp-idf-config/sdkconfig-opt.defaults')\n    sdkconfigs.append(opt_config)\n    size_options = ''\n    if flash_size == '2MB':\n        size_options = '-no-ota-no-uf2'\n    elif not uf2_bootloader:\n        size_options = '-no-uf2'\n    flash_size_config = pathlib.Path(f'esp-idf-config/sdkconfig-flash-{flash_size}{size_options}.defaults')\n    flash_mode_config = pathlib.Path(f'esp-idf-config/sdkconfig-flash-{flash_mode}.defaults')\n    flash_freq_config = pathlib.Path(f'esp-idf-config/sdkconfig-flash-{flash_freq}.defaults')\n    sdkconfigs.extend((flash_size_config, flash_mode_config, flash_freq_config))\n    if psram_size != '0':\n        psram_config = pathlib.Path(f'esp-idf-config/sdkconfig-psram.defaults')\n        psram_size_config = pathlib.Path(f'esp-idf-config/sdkconfig-psram-{psram_size}.defaults')\n        psram_mode_config = pathlib.Path(f'esp-idf-config/sdkconfig-psram-{psram_mode}.defaults')\n        psram_freq_config = pathlib.Path(f'esp-idf-config/sdkconfig-psram-{psram_freq}.defaults')\n        sdkconfigs.extend((psram_config, psram_size_config, psram_mode_config, psram_freq_config))\n    target_config = pathlib.Path(f'esp-idf-config/sdkconfig-{target}.defaults')\n    sdkconfigs.append(target_config)\n    if ble_enabled:\n        ble_config = pathlib.Path(f'esp-idf-config/sdkconfig-ble.defaults')\n        sdkconfigs.append(ble_config)\n    board_config = pathlib.Path(f'boards/{board}/sdkconfig')\n    cp_kconfig_defaults = kconfiglib.Kconfig(kconfig_path)\n    for default_file in sdkconfigs:\n        cp_kconfig_defaults.load_config(default_file, replace=False)\n    board_settings = []\n    last_board_group = None\n    flash_size_settings = []\n    last_flash_size_group = None\n    flash_mode_settings = []\n    flash_freq_settings = []\n    psram_settings = []\n    last_psram_group = None\n    psram_size_settings = []\n    psram_mode_settings = []\n    psram_freq_settings = []\n    opt_settings = []\n    last_opt_group = None\n    target_settings = []\n    last_target_group = None\n    ble_settings = []\n    last_ble_group = None\n    default_settings = []\n    last_default_group = None\n    target_kconfig_snippets = set()\n    target_symbols = set()\n    current_group = []\n    for sym in kconfig.unique_defined_syms:\n        sym._visited = False\n    pending_nodes = [kconfig.top_node]\n    i = 0\n    while pending_nodes:\n        node = pending_nodes.pop()\n        if node is None:\n            current_group.pop()\n            continue\n        if node.item is kconfiglib.MENU:\n            if node.prompt:\n                print('  ' * len(current_group), i, node.prompt[0])\n        i += 1\n        if node.next:\n            pending_nodes.append(node.next)\n        item = node.item\n        if isinstance(item, kconfiglib.Symbol):\n            if item._visited:\n                continue\n            item._visited = True\n            config_string = item.config_string.strip()\n            if not config_string:\n                cp_sym = cp_kconfig_defaults.syms[item.name]\n                if cp_sym.str_value == 'n':\n                    config_string = f'# CONFIG_{item.name} is not set'\n                else:\n                    continue\n            if node.list:\n                pending_nodes.append(node.list)\n            matches_cp_default = cp_kconfig_defaults.syms[item.name].str_value == item.str_value\n            matches_esp_default = sym_default(item)\n            print_debug = not matches_esp_default or (not update_all and (not matches_cp_default))\n            if print_debug:\n                print('  ' * len(current_group), i, config_string.strip())\n            target_reference = target in item.name_and_loc\n            if target_reference:\n                loc = item.name_and_loc.split('defined at ')[1].split(':')[0].replace(target, '*')\n                if loc not in target_kconfig_snippets:\n                    differing_keys = set()\n                    shared_keys = {}\n                    first = True\n                    for path in pathlib.Path('.').glob(loc):\n                        kc = kconfiglib.Kconfig(path)\n                        all_file_syms = set()\n                        for sym in kc.unique_defined_syms:\n                            all_file_syms.add(sym)\n                            if sym.name in differing_keys:\n                                continue\n                            if first:\n                                shared_keys[sym.name] = sym.str_value\n                            elif sym.name not in shared_keys or shared_keys[sym.name] != sym.str_value:\n                                differing_keys.add(sym.name)\n                                if sym.name in shared_keys:\n                                    del shared_keys[sym.name]\n                        shared_syms = set(shared_keys.keys())\n                        for missing in shared_syms - all_file_syms:\n                            differing_keys.add(missing)\n                            del shared_keys[missing]\n                        first = False\n                    target_kconfig_snippets.add(loc)\n                    target_symbols = target_symbols.union(differing_keys)\n            all_references = set(item.referenced)\n            to_unpack = [item.rev_dep]\n            while to_unpack:\n                rdep = to_unpack.pop()\n                if isinstance(rdep, tuple):\n                    to_unpack.extend(rdep)\n                elif isinstance(rdep, int):\n                    pass\n                else:\n                    all_references.add(rdep)\n                    all_references.update(rdep.referenced)\n            psram_reference = False\n            for referenced in all_references:\n                if referenced.name.startswith('IDF_TARGET'):\n                    target_reference = True\n                if referenced.name in target_symbols:\n                    target_reference = True\n                if referenced.name == 'SPIRAM':\n                    psram_reference = True\n            if not update_all and (not matches_cp_default) or (update_all and matches_group(config_string, BOARD_SETTINGS) and (not matches_esp_default)):\n                print('  ' * (len(current_group) + 1), 'board')\n                last_board_group = add_group(board_settings, last_board_group, current_group)\n                board_settings.append(config_string)\n            elif update_all:\n                target_setting = target_reference or matches_group(config_string, TARGET_SETTINGS)\n                if matches_group(config_string, FLASH_SIZE_SETTINGS):\n                    print('  ' * (len(current_group) + 1), 'flash size')\n                    last_flash_size_group = add_group(flash_size_settings, last_flash_size_group, current_group)\n                    flash_size_settings.append(config_string)\n                elif matches_group(config_string, FLASH_MODE_SETTINGS):\n                    print('  ' * (len(current_group) + 1), 'flash mode')\n                    flash_mode_settings.append(config_string)\n                elif matches_group(config_string, FLASH_FREQ_SETTINGS):\n                    print('  ' * (len(current_group) + 1), 'flash freq')\n                    flash_freq_settings.append(config_string)\n                elif matches_group(config_string, PSRAM_SIZE_SETTINGS):\n                    print('  ' * (len(current_group) + 1), 'psram size')\n                    psram_size_settings.append(config_string)\n                elif matches_group(config_string, PSRAM_MODE_SETTINGS):\n                    print('  ' * (len(current_group) + 1), 'psram mode')\n                    psram_mode_settings.append(config_string)\n                elif matches_group(config_string, PSRAM_FREQ_SETTINGS) and '26M' not in config_string and ('20M' not in config_string):\n                    print('  ' * (len(current_group) + 1), 'psram freq')\n                    psram_freq_settings.append(config_string)\n                elif matches_esp_default:\n                    if print_debug:\n                        print('  ' * (len(current_group) + 1), 'default')\n                    pass\n                elif matches_group(config_string, PSRAM_SETTINGS) or psram_reference:\n                    print('  ' * (len(current_group) + 1), 'psram shared')\n                    last_psram_group = add_group(psram_settings, last_psram_group, current_group)\n                    psram_settings.append(config_string)\n                elif matches_group(config_string, OPT_SETTINGS):\n                    print('  ' * (len(current_group) + 1), 'opt')\n                    last_opt_group = add_group(opt_settings, last_opt_group, current_group)\n                    opt_settings.append(config_string)\n                elif target_setting:\n                    print('  ' * (len(current_group) + 1), 'target')\n                    last_target_group = add_group(target_settings, last_target_group, current_group)\n                    target_settings.append(config_string)\n                elif matches_group(config_string, BLE_SETTINGS):\n                    print('  ' * (len(current_group) + 1), 'ble')\n                    last_ble_group = add_group(ble_settings, last_ble_group, current_group)\n                    ble_settings.append(config_string)\n                else:\n                    print('  ' * (len(current_group) + 1), 'all')\n                    last_default_group = add_group(default_settings, last_default_group, current_group)\n                    default_settings.append(config_string)\n        elif item is kconfiglib.COMMENT:\n            print('comment', repr(item))\n        elif item is kconfiglib.MENU:\n            if node.list:\n                current_group.append(node.prompt[0])\n                pending_nodes.append(None)\n                pending_nodes.append(node.list)\n        elif isinstance(item, kconfiglib.Choice):\n            pending_nodes.append(node.list)\n        else:\n            print('unknown', repr(item))\n    add_group(board_settings, last_board_group, current_group)\n    add_group(opt_settings, last_opt_group, current_group)\n    add_group(flash_size_settings, last_flash_size_group, current_group)\n    add_group(psram_settings, last_psram_group, current_group)\n    add_group(target_settings, last_target_group, current_group)\n    add_group(ble_settings, last_ble_group, current_group)\n    add_group(default_settings, last_default_group, current_group)\n    board_config.write_text('\\n'.join(board_settings))\n    if update_all:\n        flash_mode_settings.append('')\n        flash_freq_settings.append('')\n        flash_size_config.write_text('\\n'.join(flash_size_settings))\n        flash_mode_config.write_text('\\n'.join(flash_mode_settings))\n        flash_freq_config.write_text('\\n'.join(flash_freq_settings))\n        if psram_size != '0':\n            psram_size_settings.append('')\n            psram_mode_settings.append('')\n            psram_freq_settings.append('')\n            psram_config.write_text('\\n'.join(psram_settings))\n            psram_size_config.write_text('\\n'.join(psram_size_settings))\n            psram_mode_config.write_text('\\n'.join(psram_mode_settings))\n            psram_freq_config.write_text('\\n'.join(psram_freq_settings))\n        opt_config.write_text('\\n'.join(opt_settings))\n        default_config.write_text('\\n'.join(default_settings))\n        target_config.write_text('\\n'.join(target_settings))\n        if ble_settings:\n            ble_config.write_text('\\n'.join(ble_settings))",
            "@click.command()\n@click.option('--debug')\n@click.option('--board')\n@click.option('--update_all', is_flag=True, default=False, help='Updates the sdkconfigs outside of the board directory.')\ndef update(debug, board, update_all):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Updates related sdkconfig files based on the build directory version that\\n    was likely modified by menuconfig.'\n    board_make = pathlib.Path(f'boards/{board}/mpconfigboard.mk')\n    psram_size = '0'\n    uf2_bootloader = None\n    ble_enabled = None\n    for line in board_make.read_text().split('\\n'):\n        if '=' not in line or line.startswith('#'):\n            continue\n        (key, value) = line.split('=', maxsplit=1)\n        key = key.strip()\n        value = value.strip()\n        if key == 'IDF_TARGET':\n            target = value\n            if uf2_bootloader is None:\n                uf2_bootloader = target not in ('esp32', 'esp32c3', 'esp32c6', 'esp32h2')\n            if ble_enabled is None:\n                ble_enabled = target not in ('esp32', 'esp32s2')\n        elif key == 'CIRCUITPY_ESP_FLASH_SIZE':\n            flash_size = value\n        elif key == 'CIRCUITPY_ESP_FLASH_MODE':\n            flash_mode = value\n        elif key == 'CIRCUITPY_ESP_FLASH_FREQ':\n            flash_freq = value\n        elif key == 'CIRCUITPY_ESP_PSRAM_SIZE':\n            psram_size = value\n        elif key == 'CIRCUITPY_ESP_PSRAM_MODE':\n            psram_mode = value\n        elif key == 'CIRCUITPY_ESP_PSRAM_FREQ':\n            psram_freq = value\n        elif key == 'UF2_BOOTLOADER':\n            uf2_bootloader = not value == '0'\n        elif key == 'CIRCUITPY_BLEIO':\n            ble_enabled = not value == '0'\n    os.environ['IDF_TARGET'] = target\n    os.environ['COMPONENT_KCONFIGS_PROJBUILD_SOURCE_FILE'] = f'build-{board}/esp-idf/kconfigs_projbuild.in'\n    os.environ['COMPONENT_KCONFIGS_SOURCE_FILE'] = f'build-{board}/esp-idf/kconfigs.in'\n    kconfig_path = pathlib.Path(f'build-{board}/esp-idf/kconfigs.in')\n    kconfig_path = pathlib.Path(f'esp-idf/Kconfig')\n    kconfig = kconfiglib.Kconfig(kconfig_path)\n    input_config = pathlib.Path(f'build-{board}/esp-idf/sdkconfig')\n    kconfig.load_config(input_config)\n    sdkconfigs = []\n    default_config = pathlib.Path('esp-idf-config/sdkconfig.defaults')\n    sdkconfigs.append(default_config)\n    if debug:\n        opt_config = pathlib.Path('esp-idf-config/sdkconfig-debug.defaults')\n    else:\n        opt_config = pathlib.Path('esp-idf-config/sdkconfig-opt.defaults')\n    sdkconfigs.append(opt_config)\n    size_options = ''\n    if flash_size == '2MB':\n        size_options = '-no-ota-no-uf2'\n    elif not uf2_bootloader:\n        size_options = '-no-uf2'\n    flash_size_config = pathlib.Path(f'esp-idf-config/sdkconfig-flash-{flash_size}{size_options}.defaults')\n    flash_mode_config = pathlib.Path(f'esp-idf-config/sdkconfig-flash-{flash_mode}.defaults')\n    flash_freq_config = pathlib.Path(f'esp-idf-config/sdkconfig-flash-{flash_freq}.defaults')\n    sdkconfigs.extend((flash_size_config, flash_mode_config, flash_freq_config))\n    if psram_size != '0':\n        psram_config = pathlib.Path(f'esp-idf-config/sdkconfig-psram.defaults')\n        psram_size_config = pathlib.Path(f'esp-idf-config/sdkconfig-psram-{psram_size}.defaults')\n        psram_mode_config = pathlib.Path(f'esp-idf-config/sdkconfig-psram-{psram_mode}.defaults')\n        psram_freq_config = pathlib.Path(f'esp-idf-config/sdkconfig-psram-{psram_freq}.defaults')\n        sdkconfigs.extend((psram_config, psram_size_config, psram_mode_config, psram_freq_config))\n    target_config = pathlib.Path(f'esp-idf-config/sdkconfig-{target}.defaults')\n    sdkconfigs.append(target_config)\n    if ble_enabled:\n        ble_config = pathlib.Path(f'esp-idf-config/sdkconfig-ble.defaults')\n        sdkconfigs.append(ble_config)\n    board_config = pathlib.Path(f'boards/{board}/sdkconfig')\n    cp_kconfig_defaults = kconfiglib.Kconfig(kconfig_path)\n    for default_file in sdkconfigs:\n        cp_kconfig_defaults.load_config(default_file, replace=False)\n    board_settings = []\n    last_board_group = None\n    flash_size_settings = []\n    last_flash_size_group = None\n    flash_mode_settings = []\n    flash_freq_settings = []\n    psram_settings = []\n    last_psram_group = None\n    psram_size_settings = []\n    psram_mode_settings = []\n    psram_freq_settings = []\n    opt_settings = []\n    last_opt_group = None\n    target_settings = []\n    last_target_group = None\n    ble_settings = []\n    last_ble_group = None\n    default_settings = []\n    last_default_group = None\n    target_kconfig_snippets = set()\n    target_symbols = set()\n    current_group = []\n    for sym in kconfig.unique_defined_syms:\n        sym._visited = False\n    pending_nodes = [kconfig.top_node]\n    i = 0\n    while pending_nodes:\n        node = pending_nodes.pop()\n        if node is None:\n            current_group.pop()\n            continue\n        if node.item is kconfiglib.MENU:\n            if node.prompt:\n                print('  ' * len(current_group), i, node.prompt[0])\n        i += 1\n        if node.next:\n            pending_nodes.append(node.next)\n        item = node.item\n        if isinstance(item, kconfiglib.Symbol):\n            if item._visited:\n                continue\n            item._visited = True\n            config_string = item.config_string.strip()\n            if not config_string:\n                cp_sym = cp_kconfig_defaults.syms[item.name]\n                if cp_sym.str_value == 'n':\n                    config_string = f'# CONFIG_{item.name} is not set'\n                else:\n                    continue\n            if node.list:\n                pending_nodes.append(node.list)\n            matches_cp_default = cp_kconfig_defaults.syms[item.name].str_value == item.str_value\n            matches_esp_default = sym_default(item)\n            print_debug = not matches_esp_default or (not update_all and (not matches_cp_default))\n            if print_debug:\n                print('  ' * len(current_group), i, config_string.strip())\n            target_reference = target in item.name_and_loc\n            if target_reference:\n                loc = item.name_and_loc.split('defined at ')[1].split(':')[0].replace(target, '*')\n                if loc not in target_kconfig_snippets:\n                    differing_keys = set()\n                    shared_keys = {}\n                    first = True\n                    for path in pathlib.Path('.').glob(loc):\n                        kc = kconfiglib.Kconfig(path)\n                        all_file_syms = set()\n                        for sym in kc.unique_defined_syms:\n                            all_file_syms.add(sym)\n                            if sym.name in differing_keys:\n                                continue\n                            if first:\n                                shared_keys[sym.name] = sym.str_value\n                            elif sym.name not in shared_keys or shared_keys[sym.name] != sym.str_value:\n                                differing_keys.add(sym.name)\n                                if sym.name in shared_keys:\n                                    del shared_keys[sym.name]\n                        shared_syms = set(shared_keys.keys())\n                        for missing in shared_syms - all_file_syms:\n                            differing_keys.add(missing)\n                            del shared_keys[missing]\n                        first = False\n                    target_kconfig_snippets.add(loc)\n                    target_symbols = target_symbols.union(differing_keys)\n            all_references = set(item.referenced)\n            to_unpack = [item.rev_dep]\n            while to_unpack:\n                rdep = to_unpack.pop()\n                if isinstance(rdep, tuple):\n                    to_unpack.extend(rdep)\n                elif isinstance(rdep, int):\n                    pass\n                else:\n                    all_references.add(rdep)\n                    all_references.update(rdep.referenced)\n            psram_reference = False\n            for referenced in all_references:\n                if referenced.name.startswith('IDF_TARGET'):\n                    target_reference = True\n                if referenced.name in target_symbols:\n                    target_reference = True\n                if referenced.name == 'SPIRAM':\n                    psram_reference = True\n            if not update_all and (not matches_cp_default) or (update_all and matches_group(config_string, BOARD_SETTINGS) and (not matches_esp_default)):\n                print('  ' * (len(current_group) + 1), 'board')\n                last_board_group = add_group(board_settings, last_board_group, current_group)\n                board_settings.append(config_string)\n            elif update_all:\n                target_setting = target_reference or matches_group(config_string, TARGET_SETTINGS)\n                if matches_group(config_string, FLASH_SIZE_SETTINGS):\n                    print('  ' * (len(current_group) + 1), 'flash size')\n                    last_flash_size_group = add_group(flash_size_settings, last_flash_size_group, current_group)\n                    flash_size_settings.append(config_string)\n                elif matches_group(config_string, FLASH_MODE_SETTINGS):\n                    print('  ' * (len(current_group) + 1), 'flash mode')\n                    flash_mode_settings.append(config_string)\n                elif matches_group(config_string, FLASH_FREQ_SETTINGS):\n                    print('  ' * (len(current_group) + 1), 'flash freq')\n                    flash_freq_settings.append(config_string)\n                elif matches_group(config_string, PSRAM_SIZE_SETTINGS):\n                    print('  ' * (len(current_group) + 1), 'psram size')\n                    psram_size_settings.append(config_string)\n                elif matches_group(config_string, PSRAM_MODE_SETTINGS):\n                    print('  ' * (len(current_group) + 1), 'psram mode')\n                    psram_mode_settings.append(config_string)\n                elif matches_group(config_string, PSRAM_FREQ_SETTINGS) and '26M' not in config_string and ('20M' not in config_string):\n                    print('  ' * (len(current_group) + 1), 'psram freq')\n                    psram_freq_settings.append(config_string)\n                elif matches_esp_default:\n                    if print_debug:\n                        print('  ' * (len(current_group) + 1), 'default')\n                    pass\n                elif matches_group(config_string, PSRAM_SETTINGS) or psram_reference:\n                    print('  ' * (len(current_group) + 1), 'psram shared')\n                    last_psram_group = add_group(psram_settings, last_psram_group, current_group)\n                    psram_settings.append(config_string)\n                elif matches_group(config_string, OPT_SETTINGS):\n                    print('  ' * (len(current_group) + 1), 'opt')\n                    last_opt_group = add_group(opt_settings, last_opt_group, current_group)\n                    opt_settings.append(config_string)\n                elif target_setting:\n                    print('  ' * (len(current_group) + 1), 'target')\n                    last_target_group = add_group(target_settings, last_target_group, current_group)\n                    target_settings.append(config_string)\n                elif matches_group(config_string, BLE_SETTINGS):\n                    print('  ' * (len(current_group) + 1), 'ble')\n                    last_ble_group = add_group(ble_settings, last_ble_group, current_group)\n                    ble_settings.append(config_string)\n                else:\n                    print('  ' * (len(current_group) + 1), 'all')\n                    last_default_group = add_group(default_settings, last_default_group, current_group)\n                    default_settings.append(config_string)\n        elif item is kconfiglib.COMMENT:\n            print('comment', repr(item))\n        elif item is kconfiglib.MENU:\n            if node.list:\n                current_group.append(node.prompt[0])\n                pending_nodes.append(None)\n                pending_nodes.append(node.list)\n        elif isinstance(item, kconfiglib.Choice):\n            pending_nodes.append(node.list)\n        else:\n            print('unknown', repr(item))\n    add_group(board_settings, last_board_group, current_group)\n    add_group(opt_settings, last_opt_group, current_group)\n    add_group(flash_size_settings, last_flash_size_group, current_group)\n    add_group(psram_settings, last_psram_group, current_group)\n    add_group(target_settings, last_target_group, current_group)\n    add_group(ble_settings, last_ble_group, current_group)\n    add_group(default_settings, last_default_group, current_group)\n    board_config.write_text('\\n'.join(board_settings))\n    if update_all:\n        flash_mode_settings.append('')\n        flash_freq_settings.append('')\n        flash_size_config.write_text('\\n'.join(flash_size_settings))\n        flash_mode_config.write_text('\\n'.join(flash_mode_settings))\n        flash_freq_config.write_text('\\n'.join(flash_freq_settings))\n        if psram_size != '0':\n            psram_size_settings.append('')\n            psram_mode_settings.append('')\n            psram_freq_settings.append('')\n            psram_config.write_text('\\n'.join(psram_settings))\n            psram_size_config.write_text('\\n'.join(psram_size_settings))\n            psram_mode_config.write_text('\\n'.join(psram_mode_settings))\n            psram_freq_config.write_text('\\n'.join(psram_freq_settings))\n        opt_config.write_text('\\n'.join(opt_settings))\n        default_config.write_text('\\n'.join(default_settings))\n        target_config.write_text('\\n'.join(target_settings))\n        if ble_settings:\n            ble_config.write_text('\\n'.join(ble_settings))"
        ]
    }
]
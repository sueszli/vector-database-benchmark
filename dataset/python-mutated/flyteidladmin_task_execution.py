"""
    flyteidl/service/admin.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
import pprint
import re
import six
from flyteadmin.models.admin_task_execution_closure import AdminTaskExecutionClosure
from flyteadmin.models.core_task_execution_identifier import CoreTaskExecutionIdentifier

class FlyteidladminTaskExecution(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    '\n    Attributes:\n      swagger_types (dict): The key is attribute name\n                            and the value is attribute type.\n      attribute_map (dict): The key is attribute name\n                            and the value is json key in definition.\n    '
    swagger_types = {'id': 'CoreTaskExecutionIdentifier', 'input_uri': 'str', 'closure': 'AdminTaskExecutionClosure', 'is_parent': 'bool'}
    attribute_map = {'id': 'id', 'input_uri': 'input_uri', 'closure': 'closure', 'is_parent': 'is_parent'}

    def __init__(self, id=None, input_uri=None, closure=None, is_parent=None):
        if False:
            i = 10
            return i + 15
        'FlyteidladminTaskExecution - a model defined in Swagger'
        self._id = None
        self._input_uri = None
        self._closure = None
        self._is_parent = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if input_uri is not None:
            self.input_uri = input_uri
        if closure is not None:
            self.closure = closure
        if is_parent is not None:
            self.is_parent = is_parent

    @property
    def id(self):
        if False:
            while True:
                i = 10
        'Gets the id of this FlyteidladminTaskExecution.  # noqa: E501\n\n        Unique identifier for the task execution.  # noqa: E501\n\n        :return: The id of this FlyteidladminTaskExecution.  # noqa: E501\n        :rtype: CoreTaskExecutionIdentifier\n        '
        return self._id

    @id.setter
    def id(self, id):
        if False:
            while True:
                i = 10
        'Sets the id of this FlyteidladminTaskExecution.\n\n        Unique identifier for the task execution.  # noqa: E501\n\n        :param id: The id of this FlyteidladminTaskExecution.  # noqa: E501\n        :type: CoreTaskExecutionIdentifier\n        '
        self._id = id

    @property
    def input_uri(self):
        if False:
            return 10
        'Gets the input_uri of this FlyteidladminTaskExecution.  # noqa: E501\n\n        Path to remote data store where input blob is stored.  # noqa: E501\n\n        :return: The input_uri of this FlyteidladminTaskExecution.  # noqa: E501\n        :rtype: str\n        '
        return self._input_uri

    @input_uri.setter
    def input_uri(self, input_uri):
        if False:
            i = 10
            return i + 15
        'Sets the input_uri of this FlyteidladminTaskExecution.\n\n        Path to remote data store where input blob is stored.  # noqa: E501\n\n        :param input_uri: The input_uri of this FlyteidladminTaskExecution.  # noqa: E501\n        :type: str\n        '
        self._input_uri = input_uri

    @property
    def closure(self):
        if False:
            print('Hello World!')
        'Gets the closure of this FlyteidladminTaskExecution.  # noqa: E501\n\n        Task execution details and results.  # noqa: E501\n\n        :return: The closure of this FlyteidladminTaskExecution.  # noqa: E501\n        :rtype: AdminTaskExecutionClosure\n        '
        return self._closure

    @closure.setter
    def closure(self, closure):
        if False:
            print('Hello World!')
        'Sets the closure of this FlyteidladminTaskExecution.\n\n        Task execution details and results.  # noqa: E501\n\n        :param closure: The closure of this FlyteidladminTaskExecution.  # noqa: E501\n        :type: AdminTaskExecutionClosure\n        '
        self._closure = closure

    @property
    def is_parent(self):
        if False:
            print('Hello World!')
        'Gets the is_parent of this FlyteidladminTaskExecution.  # noqa: E501\n\n        Whether this task spawned nodes.  # noqa: E501\n\n        :return: The is_parent of this FlyteidladminTaskExecution.  # noqa: E501\n        :rtype: bool\n        '
        return self._is_parent

    @is_parent.setter
    def is_parent(self, is_parent):
        if False:
            for i in range(10):
                print('nop')
        'Sets the is_parent of this FlyteidladminTaskExecution.\n\n        Whether this task spawned nodes.  # noqa: E501\n\n        :param is_parent: The is_parent of this FlyteidladminTaskExecution.  # noqa: E501\n        :type: bool\n        '
        self._is_parent = is_parent

    def to_dict(self):
        if False:
            return 10
        'Returns the model properties as a dict'
        result = {}
        for (attr, _) in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))
            elif hasattr(value, 'to_dict'):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))
            else:
                result[attr] = value
        if issubclass(FlyteidladminTaskExecution, dict):
            for (key, value) in self.items():
                result[key] = value
        return result

    def to_str(self):
        if False:
            i = 10
            return i + 15
        'Returns the string representation of the model'
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        if False:
            i = 10
            return i + 15
        'For `print` and `pprint`'
        return self.to_str()

    def __eq__(self, other):
        if False:
            i = 10
            return i + 15
        'Returns true if both objects are equal'
        if not isinstance(other, FlyteidladminTaskExecution):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        if False:
            print('Hello World!')
        'Returns true if both objects are not equal'
        return not self == other
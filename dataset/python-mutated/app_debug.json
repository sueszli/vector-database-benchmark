[
    {
        "func_name": "flask_debug_true",
        "original": "@test.test_id('B201')\n@test.checks('Call')\ndef flask_debug_true(context):\n    if context.is_module_imported_like('flask'):\n        if context.call_function_name_qual.endswith('.run'):\n            if context.check_call_arg_value('debug', 'True'):\n                return bandit.Issue(severity=bandit.HIGH, confidence=bandit.MEDIUM, cwe=issue.Cwe.CODE_INJECTION, text='A Flask app appears to be run with debug=True, which exposes the Werkzeug debugger and allows the execution of arbitrary code.', lineno=context.get_lineno_for_call_arg('debug'))",
        "mutated": [
            "@test.test_id('B201')\n@test.checks('Call')\ndef flask_debug_true(context):\n    if False:\n        i = 10\n    if context.is_module_imported_like('flask'):\n        if context.call_function_name_qual.endswith('.run'):\n            if context.check_call_arg_value('debug', 'True'):\n                return bandit.Issue(severity=bandit.HIGH, confidence=bandit.MEDIUM, cwe=issue.Cwe.CODE_INJECTION, text='A Flask app appears to be run with debug=True, which exposes the Werkzeug debugger and allows the execution of arbitrary code.', lineno=context.get_lineno_for_call_arg('debug'))",
            "@test.test_id('B201')\n@test.checks('Call')\ndef flask_debug_true(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if context.is_module_imported_like('flask'):\n        if context.call_function_name_qual.endswith('.run'):\n            if context.check_call_arg_value('debug', 'True'):\n                return bandit.Issue(severity=bandit.HIGH, confidence=bandit.MEDIUM, cwe=issue.Cwe.CODE_INJECTION, text='A Flask app appears to be run with debug=True, which exposes the Werkzeug debugger and allows the execution of arbitrary code.', lineno=context.get_lineno_for_call_arg('debug'))",
            "@test.test_id('B201')\n@test.checks('Call')\ndef flask_debug_true(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if context.is_module_imported_like('flask'):\n        if context.call_function_name_qual.endswith('.run'):\n            if context.check_call_arg_value('debug', 'True'):\n                return bandit.Issue(severity=bandit.HIGH, confidence=bandit.MEDIUM, cwe=issue.Cwe.CODE_INJECTION, text='A Flask app appears to be run with debug=True, which exposes the Werkzeug debugger and allows the execution of arbitrary code.', lineno=context.get_lineno_for_call_arg('debug'))",
            "@test.test_id('B201')\n@test.checks('Call')\ndef flask_debug_true(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if context.is_module_imported_like('flask'):\n        if context.call_function_name_qual.endswith('.run'):\n            if context.check_call_arg_value('debug', 'True'):\n                return bandit.Issue(severity=bandit.HIGH, confidence=bandit.MEDIUM, cwe=issue.Cwe.CODE_INJECTION, text='A Flask app appears to be run with debug=True, which exposes the Werkzeug debugger and allows the execution of arbitrary code.', lineno=context.get_lineno_for_call_arg('debug'))",
            "@test.test_id('B201')\n@test.checks('Call')\ndef flask_debug_true(context):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if context.is_module_imported_like('flask'):\n        if context.call_function_name_qual.endswith('.run'):\n            if context.check_call_arg_value('debug', 'True'):\n                return bandit.Issue(severity=bandit.HIGH, confidence=bandit.MEDIUM, cwe=issue.Cwe.CODE_INJECTION, text='A Flask app appears to be run with debug=True, which exposes the Werkzeug debugger and allows the execution of arbitrary code.', lineno=context.get_lineno_for_call_arg('debug'))"
        ]
    }
]
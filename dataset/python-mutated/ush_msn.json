[
    {
        "func_name": "__init__",
        "original": "def __init__(self, smtp_server, from_mail, password, to_mail):\n    self.server = smtp_server\n    self.username = from_mail.split('@')[0]\n    self.from_mail = from_mail\n    self.password = password\n    self.to_mail = to_mail",
        "mutated": [
            "def __init__(self, smtp_server, from_mail, password, to_mail):\n    if False:\n        i = 10\n    self.server = smtp_server\n    self.username = from_mail.split('@')[0]\n    self.from_mail = from_mail\n    self.password = password\n    self.to_mail = to_mail",
            "def __init__(self, smtp_server, from_mail, password, to_mail):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.server = smtp_server\n    self.username = from_mail.split('@')[0]\n    self.from_mail = from_mail\n    self.password = password\n    self.to_mail = to_mail",
            "def __init__(self, smtp_server, from_mail, password, to_mail):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.server = smtp_server\n    self.username = from_mail.split('@')[0]\n    self.from_mail = from_mail\n    self.password = password\n    self.to_mail = to_mail",
            "def __init__(self, smtp_server, from_mail, password, to_mail):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.server = smtp_server\n    self.username = from_mail.split('@')[0]\n    self.from_mail = from_mail\n    self.password = password\n    self.to_mail = to_mail",
            "def __init__(self, smtp_server, from_mail, password, to_mail):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.server = smtp_server\n    self.username = from_mail.split('@')[0]\n    self.from_mail = from_mail\n    self.password = password\n    self.to_mail = to_mail"
        ]
    },
    {
        "func_name": "send_txt",
        "original": "def send_txt(self, name, price, percent, status):\n    if 'up' == status:\n        content = '%s > %.2f , %.2f' % (name, price, percent)\n    if 'down' == status:\n        content = '%s < %.2f , %.2f' % (name, price, percent)\n    content = content + '%'\n    print(content)\n    subject = '%s' % name\n    self.msg = MIMEText(content, 'plain', 'utf-8')\n    self.msg['to'] = self.to_mail\n    self.msg['from'] = self.from_mail\n    self.msg['Subject'] = subject\n    self.msg['Date'] = Utils.formatdate(localtime=1)\n    try:\n        self.smtp = smtplib.SMTP_SSL(port=465)\n        self.smtp.connect(self.server)\n        self.smtp.login(self.username, self.password)\n        self.smtp.sendmail(self.msg['from'], self.msg['to'], self.msg.as_string())\n        self.smtp.quit()\n        print('sent')\n    except smtplib.SMTPException as e:\n        print(e)\n        return 0",
        "mutated": [
            "def send_txt(self, name, price, percent, status):\n    if False:\n        i = 10\n    if 'up' == status:\n        content = '%s > %.2f , %.2f' % (name, price, percent)\n    if 'down' == status:\n        content = '%s < %.2f , %.2f' % (name, price, percent)\n    content = content + '%'\n    print(content)\n    subject = '%s' % name\n    self.msg = MIMEText(content, 'plain', 'utf-8')\n    self.msg['to'] = self.to_mail\n    self.msg['from'] = self.from_mail\n    self.msg['Subject'] = subject\n    self.msg['Date'] = Utils.formatdate(localtime=1)\n    try:\n        self.smtp = smtplib.SMTP_SSL(port=465)\n        self.smtp.connect(self.server)\n        self.smtp.login(self.username, self.password)\n        self.smtp.sendmail(self.msg['from'], self.msg['to'], self.msg.as_string())\n        self.smtp.quit()\n        print('sent')\n    except smtplib.SMTPException as e:\n        print(e)\n        return 0",
            "def send_txt(self, name, price, percent, status):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if 'up' == status:\n        content = '%s > %.2f , %.2f' % (name, price, percent)\n    if 'down' == status:\n        content = '%s < %.2f , %.2f' % (name, price, percent)\n    content = content + '%'\n    print(content)\n    subject = '%s' % name\n    self.msg = MIMEText(content, 'plain', 'utf-8')\n    self.msg['to'] = self.to_mail\n    self.msg['from'] = self.from_mail\n    self.msg['Subject'] = subject\n    self.msg['Date'] = Utils.formatdate(localtime=1)\n    try:\n        self.smtp = smtplib.SMTP_SSL(port=465)\n        self.smtp.connect(self.server)\n        self.smtp.login(self.username, self.password)\n        self.smtp.sendmail(self.msg['from'], self.msg['to'], self.msg.as_string())\n        self.smtp.quit()\n        print('sent')\n    except smtplib.SMTPException as e:\n        print(e)\n        return 0",
            "def send_txt(self, name, price, percent, status):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if 'up' == status:\n        content = '%s > %.2f , %.2f' % (name, price, percent)\n    if 'down' == status:\n        content = '%s < %.2f , %.2f' % (name, price, percent)\n    content = content + '%'\n    print(content)\n    subject = '%s' % name\n    self.msg = MIMEText(content, 'plain', 'utf-8')\n    self.msg['to'] = self.to_mail\n    self.msg['from'] = self.from_mail\n    self.msg['Subject'] = subject\n    self.msg['Date'] = Utils.formatdate(localtime=1)\n    try:\n        self.smtp = smtplib.SMTP_SSL(port=465)\n        self.smtp.connect(self.server)\n        self.smtp.login(self.username, self.password)\n        self.smtp.sendmail(self.msg['from'], self.msg['to'], self.msg.as_string())\n        self.smtp.quit()\n        print('sent')\n    except smtplib.SMTPException as e:\n        print(e)\n        return 0",
            "def send_txt(self, name, price, percent, status):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if 'up' == status:\n        content = '%s > %.2f , %.2f' % (name, price, percent)\n    if 'down' == status:\n        content = '%s < %.2f , %.2f' % (name, price, percent)\n    content = content + '%'\n    print(content)\n    subject = '%s' % name\n    self.msg = MIMEText(content, 'plain', 'utf-8')\n    self.msg['to'] = self.to_mail\n    self.msg['from'] = self.from_mail\n    self.msg['Subject'] = subject\n    self.msg['Date'] = Utils.formatdate(localtime=1)\n    try:\n        self.smtp = smtplib.SMTP_SSL(port=465)\n        self.smtp.connect(self.server)\n        self.smtp.login(self.username, self.password)\n        self.smtp.sendmail(self.msg['from'], self.msg['to'], self.msg.as_string())\n        self.smtp.quit()\n        print('sent')\n    except smtplib.SMTPException as e:\n        print(e)\n        return 0",
            "def send_txt(self, name, price, percent, status):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if 'up' == status:\n        content = '%s > %.2f , %.2f' % (name, price, percent)\n    if 'down' == status:\n        content = '%s < %.2f , %.2f' % (name, price, percent)\n    content = content + '%'\n    print(content)\n    subject = '%s' % name\n    self.msg = MIMEText(content, 'plain', 'utf-8')\n    self.msg['to'] = self.to_mail\n    self.msg['from'] = self.from_mail\n    self.msg['Subject'] = subject\n    self.msg['Date'] = Utils.formatdate(localtime=1)\n    try:\n        self.smtp = smtplib.SMTP_SSL(port=465)\n        self.smtp.connect(self.server)\n        self.smtp.login(self.username, self.password)\n        self.smtp.sendmail(self.msg['from'], self.msg['to'], self.msg.as_string())\n        self.smtp.quit()\n        print('sent')\n    except smtplib.SMTPException as e:\n        print(e)\n        return 0"
        ]
    },
    {
        "func_name": "push_msg",
        "original": "def push_msg(name, price, percent, status):\n    cfg = Toolkit.getUserData('data.cfg')\n    from_mail = cfg['from_mail']\n    password = cfg['password']\n    to_mail = cfg['to_mail']\n    obj = MailSend('smtp.qq.com', from_mail, password, to_mail)\n    obj.send_txt(name, price, percent, status)",
        "mutated": [
            "def push_msg(name, price, percent, status):\n    if False:\n        i = 10\n    cfg = Toolkit.getUserData('data.cfg')\n    from_mail = cfg['from_mail']\n    password = cfg['password']\n    to_mail = cfg['to_mail']\n    obj = MailSend('smtp.qq.com', from_mail, password, to_mail)\n    obj.send_txt(name, price, percent, status)",
            "def push_msg(name, price, percent, status):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    cfg = Toolkit.getUserData('data.cfg')\n    from_mail = cfg['from_mail']\n    password = cfg['password']\n    to_mail = cfg['to_mail']\n    obj = MailSend('smtp.qq.com', from_mail, password, to_mail)\n    obj.send_txt(name, price, percent, status)",
            "def push_msg(name, price, percent, status):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    cfg = Toolkit.getUserData('data.cfg')\n    from_mail = cfg['from_mail']\n    password = cfg['password']\n    to_mail = cfg['to_mail']\n    obj = MailSend('smtp.qq.com', from_mail, password, to_mail)\n    obj.send_txt(name, price, percent, status)",
            "def push_msg(name, price, percent, status):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    cfg = Toolkit.getUserData('data.cfg')\n    from_mail = cfg['from_mail']\n    password = cfg['password']\n    to_mail = cfg['to_mail']\n    obj = MailSend('smtp.qq.com', from_mail, password, to_mail)\n    obj.send_txt(name, price, percent, status)",
            "def push_msg(name, price, percent, status):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    cfg = Toolkit.getUserData('data.cfg')\n    from_mail = cfg['from_mail']\n    password = cfg['password']\n    to_mail = cfg['to_mail']\n    obj = MailSend('smtp.qq.com', from_mail, password, to_mail)\n    obj.send_txt(name, price, percent, status)"
        ]
    },
    {
        "func_name": "read_stock",
        "original": "def read_stock(name):\n    f = open(name)\n    stock_list = []\n    for s in f.readlines():\n        s = s.strip()\n        row = s.split(';')\n        stock_list.append(row)\n    return stock_list",
        "mutated": [
            "def read_stock(name):\n    if False:\n        i = 10\n    f = open(name)\n    stock_list = []\n    for s in f.readlines():\n        s = s.strip()\n        row = s.split(';')\n        stock_list.append(row)\n    return stock_list",
            "def read_stock(name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    f = open(name)\n    stock_list = []\n    for s in f.readlines():\n        s = s.strip()\n        row = s.split(';')\n        stock_list.append(row)\n    return stock_list",
            "def read_stock(name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    f = open(name)\n    stock_list = []\n    for s in f.readlines():\n        s = s.strip()\n        row = s.split(';')\n        stock_list.append(row)\n    return stock_list",
            "def read_stock(name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    f = open(name)\n    stock_list = []\n    for s in f.readlines():\n        s = s.strip()\n        row = s.split(';')\n        stock_list.append(row)\n    return stock_list",
            "def read_stock(name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    f = open(name)\n    stock_list = []\n    for s in f.readlines():\n        s = s.strip()\n        row = s.split(';')\n        stock_list.append(row)\n    return stock_list"
        ]
    },
    {
        "func_name": "meet_price",
        "original": "def meet_price(code, price_up, price_down, type):\n    try:\n        df = ts.get_realtime_quotes(code)\n    except Exception as e:\n        print(e)\n        time.sleep(5)\n        return 0\n    real_price = df['price'].values[0]\n    name = df['name'].values[0]\n    real_price = float(real_price)\n    pre_close = float(df['pre_close'].values[0])\n    percent = (real_price - pre_close) / pre_close * 100\n    if real_price >= price_up:\n        print('%s price higher than %.2f , %.2f' % (name, real_price, percent))\n        print('%')\n        if type == 'msn':\n            push_msg(name, real_price, percent, 'up')\n            return 1\n        elif type == 'wechat':\n            pass\n    if real_price <= price_down:\n        print('%s price lower than %.2f , %.2f' % (name, real_price, percent))\n        print('%')\n        if type == 'msn':\n            push_msg(name, real_price, percent, 'down')\n            return 1\n        elif type == 'wechat':\n            pass",
        "mutated": [
            "def meet_price(code, price_up, price_down, type):\n    if False:\n        i = 10\n    try:\n        df = ts.get_realtime_quotes(code)\n    except Exception as e:\n        print(e)\n        time.sleep(5)\n        return 0\n    real_price = df['price'].values[0]\n    name = df['name'].values[0]\n    real_price = float(real_price)\n    pre_close = float(df['pre_close'].values[0])\n    percent = (real_price - pre_close) / pre_close * 100\n    if real_price >= price_up:\n        print('%s price higher than %.2f , %.2f' % (name, real_price, percent))\n        print('%')\n        if type == 'msn':\n            push_msg(name, real_price, percent, 'up')\n            return 1\n        elif type == 'wechat':\n            pass\n    if real_price <= price_down:\n        print('%s price lower than %.2f , %.2f' % (name, real_price, percent))\n        print('%')\n        if type == 'msn':\n            push_msg(name, real_price, percent, 'down')\n            return 1\n        elif type == 'wechat':\n            pass",
            "def meet_price(code, price_up, price_down, type):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    try:\n        df = ts.get_realtime_quotes(code)\n    except Exception as e:\n        print(e)\n        time.sleep(5)\n        return 0\n    real_price = df['price'].values[0]\n    name = df['name'].values[0]\n    real_price = float(real_price)\n    pre_close = float(df['pre_close'].values[0])\n    percent = (real_price - pre_close) / pre_close * 100\n    if real_price >= price_up:\n        print('%s price higher than %.2f , %.2f' % (name, real_price, percent))\n        print('%')\n        if type == 'msn':\n            push_msg(name, real_price, percent, 'up')\n            return 1\n        elif type == 'wechat':\n            pass\n    if real_price <= price_down:\n        print('%s price lower than %.2f , %.2f' % (name, real_price, percent))\n        print('%')\n        if type == 'msn':\n            push_msg(name, real_price, percent, 'down')\n            return 1\n        elif type == 'wechat':\n            pass",
            "def meet_price(code, price_up, price_down, type):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    try:\n        df = ts.get_realtime_quotes(code)\n    except Exception as e:\n        print(e)\n        time.sleep(5)\n        return 0\n    real_price = df['price'].values[0]\n    name = df['name'].values[0]\n    real_price = float(real_price)\n    pre_close = float(df['pre_close'].values[0])\n    percent = (real_price - pre_close) / pre_close * 100\n    if real_price >= price_up:\n        print('%s price higher than %.2f , %.2f' % (name, real_price, percent))\n        print('%')\n        if type == 'msn':\n            push_msg(name, real_price, percent, 'up')\n            return 1\n        elif type == 'wechat':\n            pass\n    if real_price <= price_down:\n        print('%s price lower than %.2f , %.2f' % (name, real_price, percent))\n        print('%')\n        if type == 'msn':\n            push_msg(name, real_price, percent, 'down')\n            return 1\n        elif type == 'wechat':\n            pass",
            "def meet_price(code, price_up, price_down, type):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    try:\n        df = ts.get_realtime_quotes(code)\n    except Exception as e:\n        print(e)\n        time.sleep(5)\n        return 0\n    real_price = df['price'].values[0]\n    name = df['name'].values[0]\n    real_price = float(real_price)\n    pre_close = float(df['pre_close'].values[0])\n    percent = (real_price - pre_close) / pre_close * 100\n    if real_price >= price_up:\n        print('%s price higher than %.2f , %.2f' % (name, real_price, percent))\n        print('%')\n        if type == 'msn':\n            push_msg(name, real_price, percent, 'up')\n            return 1\n        elif type == 'wechat':\n            pass\n    if real_price <= price_down:\n        print('%s price lower than %.2f , %.2f' % (name, real_price, percent))\n        print('%')\n        if type == 'msn':\n            push_msg(name, real_price, percent, 'down')\n            return 1\n        elif type == 'wechat':\n            pass",
            "def meet_price(code, price_up, price_down, type):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    try:\n        df = ts.get_realtime_quotes(code)\n    except Exception as e:\n        print(e)\n        time.sleep(5)\n        return 0\n    real_price = df['price'].values[0]\n    name = df['name'].values[0]\n    real_price = float(real_price)\n    pre_close = float(df['pre_close'].values[0])\n    percent = (real_price - pre_close) / pre_close * 100\n    if real_price >= price_up:\n        print('%s price higher than %.2f , %.2f' % (name, real_price, percent))\n        print('%')\n        if type == 'msn':\n            push_msg(name, real_price, percent, 'up')\n            return 1\n        elif type == 'wechat':\n            pass\n    if real_price <= price_down:\n        print('%s price lower than %.2f , %.2f' % (name, real_price, percent))\n        print('%')\n        if type == 'msn':\n            push_msg(name, real_price, percent, 'down')\n            return 1\n        elif type == 'wechat':\n            pass"
        ]
    },
    {
        "func_name": "meet_percent",
        "original": "def meet_percent(code, percent_up, percent_down, type):\n    try:\n        df = ts.get_realtime_quotes(code)\n    except Exception as e:\n        print(e)\n        time.sleep(5)\n        return 0\n    real_price = df['price'].values[0]\n    name = df['name'].values[0]\n    real_price = float(real_price)\n    pre_close = float(df['pre_close'].values[0])\n    real_percent = (real_price - pre_close) / pre_close * 100\n    if real_percent >= percent_up:\n        print('%s percent higher than %.2f , %.2f' % (name, real_percent, real_price))\n        if type == 'msn':\n            push_msg(name, real_price, real_price, 'up')\n            return 1\n        elif type == 'wechat':\n            pass\n            return 1\n    if real_percent <= percent_down:\n        print('%s percent lower than %.2f , %.2f' % (name, real_percent, real_price))\n        print('%')\n        if type == 'mns':\n            push_msg(name, real_price, real_percent, 'down')\n            return 1\n        elif type == 'wechat':\n            pass\n            return 1",
        "mutated": [
            "def meet_percent(code, percent_up, percent_down, type):\n    if False:\n        i = 10\n    try:\n        df = ts.get_realtime_quotes(code)\n    except Exception as e:\n        print(e)\n        time.sleep(5)\n        return 0\n    real_price = df['price'].values[0]\n    name = df['name'].values[0]\n    real_price = float(real_price)\n    pre_close = float(df['pre_close'].values[0])\n    real_percent = (real_price - pre_close) / pre_close * 100\n    if real_percent >= percent_up:\n        print('%s percent higher than %.2f , %.2f' % (name, real_percent, real_price))\n        if type == 'msn':\n            push_msg(name, real_price, real_price, 'up')\n            return 1\n        elif type == 'wechat':\n            pass\n            return 1\n    if real_percent <= percent_down:\n        print('%s percent lower than %.2f , %.2f' % (name, real_percent, real_price))\n        print('%')\n        if type == 'mns':\n            push_msg(name, real_price, real_percent, 'down')\n            return 1\n        elif type == 'wechat':\n            pass\n            return 1",
            "def meet_percent(code, percent_up, percent_down, type):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    try:\n        df = ts.get_realtime_quotes(code)\n    except Exception as e:\n        print(e)\n        time.sleep(5)\n        return 0\n    real_price = df['price'].values[0]\n    name = df['name'].values[0]\n    real_price = float(real_price)\n    pre_close = float(df['pre_close'].values[0])\n    real_percent = (real_price - pre_close) / pre_close * 100\n    if real_percent >= percent_up:\n        print('%s percent higher than %.2f , %.2f' % (name, real_percent, real_price))\n        if type == 'msn':\n            push_msg(name, real_price, real_price, 'up')\n            return 1\n        elif type == 'wechat':\n            pass\n            return 1\n    if real_percent <= percent_down:\n        print('%s percent lower than %.2f , %.2f' % (name, real_percent, real_price))\n        print('%')\n        if type == 'mns':\n            push_msg(name, real_price, real_percent, 'down')\n            return 1\n        elif type == 'wechat':\n            pass\n            return 1",
            "def meet_percent(code, percent_up, percent_down, type):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    try:\n        df = ts.get_realtime_quotes(code)\n    except Exception as e:\n        print(e)\n        time.sleep(5)\n        return 0\n    real_price = df['price'].values[0]\n    name = df['name'].values[0]\n    real_price = float(real_price)\n    pre_close = float(df['pre_close'].values[0])\n    real_percent = (real_price - pre_close) / pre_close * 100\n    if real_percent >= percent_up:\n        print('%s percent higher than %.2f , %.2f' % (name, real_percent, real_price))\n        if type == 'msn':\n            push_msg(name, real_price, real_price, 'up')\n            return 1\n        elif type == 'wechat':\n            pass\n            return 1\n    if real_percent <= percent_down:\n        print('%s percent lower than %.2f , %.2f' % (name, real_percent, real_price))\n        print('%')\n        if type == 'mns':\n            push_msg(name, real_price, real_percent, 'down')\n            return 1\n        elif type == 'wechat':\n            pass\n            return 1",
            "def meet_percent(code, percent_up, percent_down, type):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    try:\n        df = ts.get_realtime_quotes(code)\n    except Exception as e:\n        print(e)\n        time.sleep(5)\n        return 0\n    real_price = df['price'].values[0]\n    name = df['name'].values[0]\n    real_price = float(real_price)\n    pre_close = float(df['pre_close'].values[0])\n    real_percent = (real_price - pre_close) / pre_close * 100\n    if real_percent >= percent_up:\n        print('%s percent higher than %.2f , %.2f' % (name, real_percent, real_price))\n        if type == 'msn':\n            push_msg(name, real_price, real_price, 'up')\n            return 1\n        elif type == 'wechat':\n            pass\n            return 1\n    if real_percent <= percent_down:\n        print('%s percent lower than %.2f , %.2f' % (name, real_percent, real_price))\n        print('%')\n        if type == 'mns':\n            push_msg(name, real_price, real_percent, 'down')\n            return 1\n        elif type == 'wechat':\n            pass\n            return 1",
            "def meet_percent(code, percent_up, percent_down, type):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    try:\n        df = ts.get_realtime_quotes(code)\n    except Exception as e:\n        print(e)\n        time.sleep(5)\n        return 0\n    real_price = df['price'].values[0]\n    name = df['name'].values[0]\n    real_price = float(real_price)\n    pre_close = float(df['pre_close'].values[0])\n    real_percent = (real_price - pre_close) / pre_close * 100\n    if real_percent >= percent_up:\n        print('%s percent higher than %.2f , %.2f' % (name, real_percent, real_price))\n        if type == 'msn':\n            push_msg(name, real_price, real_price, 'up')\n            return 1\n        elif type == 'wechat':\n            pass\n            return 1\n    if real_percent <= percent_down:\n        print('%s percent lower than %.2f , %.2f' % (name, real_percent, real_price))\n        print('%')\n        if type == 'mns':\n            push_msg(name, real_price, real_percent, 'down')\n            return 1\n        elif type == 'wechat':\n            pass\n            return 1"
        ]
    },
    {
        "func_name": "general_info",
        "original": "def general_info():\n    t_all = ts.get_today_all()\n    result = []\n    t1 = t_all[t_all['changepercent'] <= -9.0].count()['changepercent']\n    result.append(t1)\n    for i in range(-9, 9, 1):\n        temp = t_all[(i * 1.0 < t_all['changepercent']) & (t_all['changepercent'] <= (i + 1) * 1.0)].count()['changepercent']\n        result.append(temp)\n    t2 = t_all[t_all['changepercent'] > 9.0].count()['changepercent']\n    result.append(t2)\n    return result",
        "mutated": [
            "def general_info():\n    if False:\n        i = 10\n    t_all = ts.get_today_all()\n    result = []\n    t1 = t_all[t_all['changepercent'] <= -9.0].count()['changepercent']\n    result.append(t1)\n    for i in range(-9, 9, 1):\n        temp = t_all[(i * 1.0 < t_all['changepercent']) & (t_all['changepercent'] <= (i + 1) * 1.0)].count()['changepercent']\n        result.append(temp)\n    t2 = t_all[t_all['changepercent'] > 9.0].count()['changepercent']\n    result.append(t2)\n    return result",
            "def general_info():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    t_all = ts.get_today_all()\n    result = []\n    t1 = t_all[t_all['changepercent'] <= -9.0].count()['changepercent']\n    result.append(t1)\n    for i in range(-9, 9, 1):\n        temp = t_all[(i * 1.0 < t_all['changepercent']) & (t_all['changepercent'] <= (i + 1) * 1.0)].count()['changepercent']\n        result.append(temp)\n    t2 = t_all[t_all['changepercent'] > 9.0].count()['changepercent']\n    result.append(t2)\n    return result",
            "def general_info():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    t_all = ts.get_today_all()\n    result = []\n    t1 = t_all[t_all['changepercent'] <= -9.0].count()['changepercent']\n    result.append(t1)\n    for i in range(-9, 9, 1):\n        temp = t_all[(i * 1.0 < t_all['changepercent']) & (t_all['changepercent'] <= (i + 1) * 1.0)].count()['changepercent']\n        result.append(temp)\n    t2 = t_all[t_all['changepercent'] > 9.0].count()['changepercent']\n    result.append(t2)\n    return result",
            "def general_info():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    t_all = ts.get_today_all()\n    result = []\n    t1 = t_all[t_all['changepercent'] <= -9.0].count()['changepercent']\n    result.append(t1)\n    for i in range(-9, 9, 1):\n        temp = t_all[(i * 1.0 < t_all['changepercent']) & (t_all['changepercent'] <= (i + 1) * 1.0)].count()['changepercent']\n        result.append(temp)\n    t2 = t_all[t_all['changepercent'] > 9.0].count()['changepercent']\n    result.append(t2)\n    return result",
            "def general_info():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    t_all = ts.get_today_all()\n    result = []\n    t1 = t_all[t_all['changepercent'] <= -9.0].count()['changepercent']\n    result.append(t1)\n    for i in range(-9, 9, 1):\n        temp = t_all[(i * 1.0 < t_all['changepercent']) & (t_all['changepercent'] <= (i + 1) * 1.0)].count()['changepercent']\n        result.append(temp)\n    t2 = t_all[t_all['changepercent'] > 9.0].count()['changepercent']\n    result.append(t2)\n    return result"
        ]
    },
    {
        "func_name": "break_ceil",
        "original": "def break_ceil(code):\n    while 1:\n        time.sleep(2)\n        try:\n            df = ts.get_realtime_quotes(code)\n        except:\n            time.sleep(5)\n            continue\n        v = long(df['b1_v'].values[0])\n        print(datetime.datetime.now().strftime('%H:%M:%S'))\n        print(v)\n        if v <= 10000:\n            print(u'\u5c0f\u4e8e\u4e07\u624b\uff0c\u5c0f\u5fc3\uff01\u8dd1')\n            push_msg('break', 10, 10, 'down')",
        "mutated": [
            "def break_ceil(code):\n    if False:\n        i = 10\n    while 1:\n        time.sleep(2)\n        try:\n            df = ts.get_realtime_quotes(code)\n        except:\n            time.sleep(5)\n            continue\n        v = long(df['b1_v'].values[0])\n        print(datetime.datetime.now().strftime('%H:%M:%S'))\n        print(v)\n        if v <= 10000:\n            print(u'\u5c0f\u4e8e\u4e07\u624b\uff0c\u5c0f\u5fc3\uff01\u8dd1')\n            push_msg('break', 10, 10, 'down')",
            "def break_ceil(code):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    while 1:\n        time.sleep(2)\n        try:\n            df = ts.get_realtime_quotes(code)\n        except:\n            time.sleep(5)\n            continue\n        v = long(df['b1_v'].values[0])\n        print(datetime.datetime.now().strftime('%H:%M:%S'))\n        print(v)\n        if v <= 10000:\n            print(u'\u5c0f\u4e8e\u4e07\u624b\uff0c\u5c0f\u5fc3\uff01\u8dd1')\n            push_msg('break', 10, 10, 'down')",
            "def break_ceil(code):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    while 1:\n        time.sleep(2)\n        try:\n            df = ts.get_realtime_quotes(code)\n        except:\n            time.sleep(5)\n            continue\n        v = long(df['b1_v'].values[0])\n        print(datetime.datetime.now().strftime('%H:%M:%S'))\n        print(v)\n        if v <= 10000:\n            print(u'\u5c0f\u4e8e\u4e07\u624b\uff0c\u5c0f\u5fc3\uff01\u8dd1')\n            push_msg('break', 10, 10, 'down')",
            "def break_ceil(code):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    while 1:\n        time.sleep(2)\n        try:\n            df = ts.get_realtime_quotes(code)\n        except:\n            time.sleep(5)\n            continue\n        v = long(df['b1_v'].values[0])\n        print(datetime.datetime.now().strftime('%H:%M:%S'))\n        print(v)\n        if v <= 10000:\n            print(u'\u5c0f\u4e8e\u4e07\u624b\uff0c\u5c0f\u5fc3\uff01\u8dd1')\n            push_msg('break', 10, 10, 'down')",
            "def break_ceil(code):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    while 1:\n        time.sleep(2)\n        try:\n            df = ts.get_realtime_quotes(code)\n        except:\n            time.sleep(5)\n            continue\n        v = long(df['b1_v'].values[0])\n        print(datetime.datetime.now().strftime('%H:%M:%S'))\n        print(v)\n        if v <= 10000:\n            print(u'\u5c0f\u4e8e\u4e07\u624b\uff0c\u5c0f\u5fc3\uff01\u8dd1')\n            push_msg('break', 10, 10, 'down')"
        ]
    },
    {
        "func_name": "monitor_break",
        "original": "def monitor_break():\n    break_ceil('002868')",
        "mutated": [
            "def monitor_break():\n    if False:\n        i = 10\n    break_ceil('002868')",
            "def monitor_break():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    break_ceil('002868')",
            "def monitor_break():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    break_ceil('002868')",
            "def monitor_break():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    break_ceil('002868')",
            "def monitor_break():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    break_ceil('002868')"
        ]
    },
    {
        "func_name": "visual",
        "original": "def visual():\n    data = general_info()\n    s = Series(data=data, index=[range(-10, 10)])\n    print(s)\n    fg = s.plot(kind='bar', table=True)\n    plt.show(fg)",
        "mutated": [
            "def visual():\n    if False:\n        i = 10\n    data = general_info()\n    s = Series(data=data, index=[range(-10, 10)])\n    print(s)\n    fg = s.plot(kind='bar', table=True)\n    plt.show(fg)",
            "def visual():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    data = general_info()\n    s = Series(data=data, index=[range(-10, 10)])\n    print(s)\n    fg = s.plot(kind='bar', table=True)\n    plt.show(fg)",
            "def visual():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    data = general_info()\n    s = Series(data=data, index=[range(-10, 10)])\n    print(s)\n    fg = s.plot(kind='bar', table=True)\n    plt.show(fg)",
            "def visual():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    data = general_info()\n    s = Series(data=data, index=[range(-10, 10)])\n    print(s)\n    fg = s.plot(kind='bar', table=True)\n    plt.show(fg)",
            "def visual():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    data = general_info()\n    s = Series(data=data, index=[range(-10, 10)])\n    print(s)\n    fg = s.plot(kind='bar', table=True)\n    plt.show(fg)"
        ]
    },
    {
        "func_name": "main",
        "original": "def main():\n    choice = input('Input your choice:\\n')\n    if str(choice) == '1':\n        stock_lists_price = read_stock('price.txt')\n        while 1:\n            t = 0\n            for each_stock in stock_lists_price:\n                code = each_stock[0]\n                price_down = float(each_stock[1])\n                price_up = float(each_stock[2])\n                t = meet_price(code, price_up, price_down)\n                if t:\n                    stock_lists_price.remove(each_stock)\n    if str(choice) == '2':\n        stock_lists_percent = read_stock('percent.txt')\n        while 1:\n            t = 0\n            for each_stock in stock_lists_percent:\n                code = each_stock[0]\n                percent_down = float(each_stock[1])\n                percent_up = float(each_stock[2])\n                t = meet_percent(code, percent_up, percent_down, type)\n                if t:\n                    stock_lists_percent.remove(each_stock)",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    choice = input('Input your choice:\\n')\n    if str(choice) == '1':\n        stock_lists_price = read_stock('price.txt')\n        while 1:\n            t = 0\n            for each_stock in stock_lists_price:\n                code = each_stock[0]\n                price_down = float(each_stock[1])\n                price_up = float(each_stock[2])\n                t = meet_price(code, price_up, price_down)\n                if t:\n                    stock_lists_price.remove(each_stock)\n    if str(choice) == '2':\n        stock_lists_percent = read_stock('percent.txt')\n        while 1:\n            t = 0\n            for each_stock in stock_lists_percent:\n                code = each_stock[0]\n                percent_down = float(each_stock[1])\n                percent_up = float(each_stock[2])\n                t = meet_percent(code, percent_up, percent_down, type)\n                if t:\n                    stock_lists_percent.remove(each_stock)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    choice = input('Input your choice:\\n')\n    if str(choice) == '1':\n        stock_lists_price = read_stock('price.txt')\n        while 1:\n            t = 0\n            for each_stock in stock_lists_price:\n                code = each_stock[0]\n                price_down = float(each_stock[1])\n                price_up = float(each_stock[2])\n                t = meet_price(code, price_up, price_down)\n                if t:\n                    stock_lists_price.remove(each_stock)\n    if str(choice) == '2':\n        stock_lists_percent = read_stock('percent.txt')\n        while 1:\n            t = 0\n            for each_stock in stock_lists_percent:\n                code = each_stock[0]\n                percent_down = float(each_stock[1])\n                percent_up = float(each_stock[2])\n                t = meet_percent(code, percent_up, percent_down, type)\n                if t:\n                    stock_lists_percent.remove(each_stock)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    choice = input('Input your choice:\\n')\n    if str(choice) == '1':\n        stock_lists_price = read_stock('price.txt')\n        while 1:\n            t = 0\n            for each_stock in stock_lists_price:\n                code = each_stock[0]\n                price_down = float(each_stock[1])\n                price_up = float(each_stock[2])\n                t = meet_price(code, price_up, price_down)\n                if t:\n                    stock_lists_price.remove(each_stock)\n    if str(choice) == '2':\n        stock_lists_percent = read_stock('percent.txt')\n        while 1:\n            t = 0\n            for each_stock in stock_lists_percent:\n                code = each_stock[0]\n                percent_down = float(each_stock[1])\n                percent_up = float(each_stock[2])\n                t = meet_percent(code, percent_up, percent_down, type)\n                if t:\n                    stock_lists_percent.remove(each_stock)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    choice = input('Input your choice:\\n')\n    if str(choice) == '1':\n        stock_lists_price = read_stock('price.txt')\n        while 1:\n            t = 0\n            for each_stock in stock_lists_price:\n                code = each_stock[0]\n                price_down = float(each_stock[1])\n                price_up = float(each_stock[2])\n                t = meet_price(code, price_up, price_down)\n                if t:\n                    stock_lists_price.remove(each_stock)\n    if str(choice) == '2':\n        stock_lists_percent = read_stock('percent.txt')\n        while 1:\n            t = 0\n            for each_stock in stock_lists_percent:\n                code = each_stock[0]\n                percent_down = float(each_stock[1])\n                percent_up = float(each_stock[2])\n                t = meet_percent(code, percent_up, percent_down, type)\n                if t:\n                    stock_lists_percent.remove(each_stock)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    choice = input('Input your choice:\\n')\n    if str(choice) == '1':\n        stock_lists_price = read_stock('price.txt')\n        while 1:\n            t = 0\n            for each_stock in stock_lists_price:\n                code = each_stock[0]\n                price_down = float(each_stock[1])\n                price_up = float(each_stock[2])\n                t = meet_price(code, price_up, price_down)\n                if t:\n                    stock_lists_price.remove(each_stock)\n    if str(choice) == '2':\n        stock_lists_percent = read_stock('percent.txt')\n        while 1:\n            t = 0\n            for each_stock in stock_lists_percent:\n                code = each_stock[0]\n                percent_down = float(each_stock[1])\n                percent_up = float(each_stock[2])\n                t = meet_percent(code, percent_up, percent_down, type)\n                if t:\n                    stock_lists_percent.remove(each_stock)"
        ]
    }
]
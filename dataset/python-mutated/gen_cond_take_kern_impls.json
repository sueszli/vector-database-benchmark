[
    {
        "func_name": "main",
        "original": "def main():\n    parser = argparse.ArgumentParser(description='generate elemwise impl files', formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n    parser.add_argument('--type', type=str, choices=['cuda'], default='cuda', help='generate cuda cond take kernel file')\n    parser.add_argument('output', help='output directory')\n    args = parser.parse_args()\n    if not os.path.isdir(args.output):\n        os.makedirs(args.output)\n    assert args.type == 'cuda'\n    cpp_ext = 'cu'\n    for dtype in DTYPES.keys():\n        fname = '{}.{}'.format(dtype, cpp_ext)\n        fname = os.path.join(args.output, fname)\n        with open(fname, 'w') as fout:\n            w = lambda s: print(s, file=fout)\n            w('// generated by gen_cond_take_kern_impls.py')\n            w('#include \"../kern.inl\"')\n            w('')\n            if dtype == 'dt_float16' or dtype == 'dt_bfloat16':\n                w('#if !MEGDNN_DISABLE_FLOAT16')\n            w('namespace megdnn {')\n            w('namespace cuda {')\n            w('namespace cond_take {')\n            w('')\n            w('inst_genidx(::megdnn::dtype::{})'.format(DTYPES[dtype][0]))\n            w('#undef inst_genidx')\n            w('')\n            w('inst_copy(::megdnn::dtype::{})'.format(DTYPES[dtype][0]))\n            w('#undef inst_copy')\n            w('#undef inst_copy_')\n            w('')\n            w('}  // cond_take')\n            w('}  // cuda')\n            w('}  // megdnn')\n            if dtype == 'dt_float16' or dtype == 'dt_bfloat16':\n                w('#endif')\n            print('generated {}'.format(fname))\n    os.utime(args.output)",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    parser = argparse.ArgumentParser(description='generate elemwise impl files', formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n    parser.add_argument('--type', type=str, choices=['cuda'], default='cuda', help='generate cuda cond take kernel file')\n    parser.add_argument('output', help='output directory')\n    args = parser.parse_args()\n    if not os.path.isdir(args.output):\n        os.makedirs(args.output)\n    assert args.type == 'cuda'\n    cpp_ext = 'cu'\n    for dtype in DTYPES.keys():\n        fname = '{}.{}'.format(dtype, cpp_ext)\n        fname = os.path.join(args.output, fname)\n        with open(fname, 'w') as fout:\n            w = lambda s: print(s, file=fout)\n            w('// generated by gen_cond_take_kern_impls.py')\n            w('#include \"../kern.inl\"')\n            w('')\n            if dtype == 'dt_float16' or dtype == 'dt_bfloat16':\n                w('#if !MEGDNN_DISABLE_FLOAT16')\n            w('namespace megdnn {')\n            w('namespace cuda {')\n            w('namespace cond_take {')\n            w('')\n            w('inst_genidx(::megdnn::dtype::{})'.format(DTYPES[dtype][0]))\n            w('#undef inst_genidx')\n            w('')\n            w('inst_copy(::megdnn::dtype::{})'.format(DTYPES[dtype][0]))\n            w('#undef inst_copy')\n            w('#undef inst_copy_')\n            w('')\n            w('}  // cond_take')\n            w('}  // cuda')\n            w('}  // megdnn')\n            if dtype == 'dt_float16' or dtype == 'dt_bfloat16':\n                w('#endif')\n            print('generated {}'.format(fname))\n    os.utime(args.output)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    parser = argparse.ArgumentParser(description='generate elemwise impl files', formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n    parser.add_argument('--type', type=str, choices=['cuda'], default='cuda', help='generate cuda cond take kernel file')\n    parser.add_argument('output', help='output directory')\n    args = parser.parse_args()\n    if not os.path.isdir(args.output):\n        os.makedirs(args.output)\n    assert args.type == 'cuda'\n    cpp_ext = 'cu'\n    for dtype in DTYPES.keys():\n        fname = '{}.{}'.format(dtype, cpp_ext)\n        fname = os.path.join(args.output, fname)\n        with open(fname, 'w') as fout:\n            w = lambda s: print(s, file=fout)\n            w('// generated by gen_cond_take_kern_impls.py')\n            w('#include \"../kern.inl\"')\n            w('')\n            if dtype == 'dt_float16' or dtype == 'dt_bfloat16':\n                w('#if !MEGDNN_DISABLE_FLOAT16')\n            w('namespace megdnn {')\n            w('namespace cuda {')\n            w('namespace cond_take {')\n            w('')\n            w('inst_genidx(::megdnn::dtype::{})'.format(DTYPES[dtype][0]))\n            w('#undef inst_genidx')\n            w('')\n            w('inst_copy(::megdnn::dtype::{})'.format(DTYPES[dtype][0]))\n            w('#undef inst_copy')\n            w('#undef inst_copy_')\n            w('')\n            w('}  // cond_take')\n            w('}  // cuda')\n            w('}  // megdnn')\n            if dtype == 'dt_float16' or dtype == 'dt_bfloat16':\n                w('#endif')\n            print('generated {}'.format(fname))\n    os.utime(args.output)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    parser = argparse.ArgumentParser(description='generate elemwise impl files', formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n    parser.add_argument('--type', type=str, choices=['cuda'], default='cuda', help='generate cuda cond take kernel file')\n    parser.add_argument('output', help='output directory')\n    args = parser.parse_args()\n    if not os.path.isdir(args.output):\n        os.makedirs(args.output)\n    assert args.type == 'cuda'\n    cpp_ext = 'cu'\n    for dtype in DTYPES.keys():\n        fname = '{}.{}'.format(dtype, cpp_ext)\n        fname = os.path.join(args.output, fname)\n        with open(fname, 'w') as fout:\n            w = lambda s: print(s, file=fout)\n            w('// generated by gen_cond_take_kern_impls.py')\n            w('#include \"../kern.inl\"')\n            w('')\n            if dtype == 'dt_float16' or dtype == 'dt_bfloat16':\n                w('#if !MEGDNN_DISABLE_FLOAT16')\n            w('namespace megdnn {')\n            w('namespace cuda {')\n            w('namespace cond_take {')\n            w('')\n            w('inst_genidx(::megdnn::dtype::{})'.format(DTYPES[dtype][0]))\n            w('#undef inst_genidx')\n            w('')\n            w('inst_copy(::megdnn::dtype::{})'.format(DTYPES[dtype][0]))\n            w('#undef inst_copy')\n            w('#undef inst_copy_')\n            w('')\n            w('}  // cond_take')\n            w('}  // cuda')\n            w('}  // megdnn')\n            if dtype == 'dt_float16' or dtype == 'dt_bfloat16':\n                w('#endif')\n            print('generated {}'.format(fname))\n    os.utime(args.output)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    parser = argparse.ArgumentParser(description='generate elemwise impl files', formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n    parser.add_argument('--type', type=str, choices=['cuda'], default='cuda', help='generate cuda cond take kernel file')\n    parser.add_argument('output', help='output directory')\n    args = parser.parse_args()\n    if not os.path.isdir(args.output):\n        os.makedirs(args.output)\n    assert args.type == 'cuda'\n    cpp_ext = 'cu'\n    for dtype in DTYPES.keys():\n        fname = '{}.{}'.format(dtype, cpp_ext)\n        fname = os.path.join(args.output, fname)\n        with open(fname, 'w') as fout:\n            w = lambda s: print(s, file=fout)\n            w('// generated by gen_cond_take_kern_impls.py')\n            w('#include \"../kern.inl\"')\n            w('')\n            if dtype == 'dt_float16' or dtype == 'dt_bfloat16':\n                w('#if !MEGDNN_DISABLE_FLOAT16')\n            w('namespace megdnn {')\n            w('namespace cuda {')\n            w('namespace cond_take {')\n            w('')\n            w('inst_genidx(::megdnn::dtype::{})'.format(DTYPES[dtype][0]))\n            w('#undef inst_genidx')\n            w('')\n            w('inst_copy(::megdnn::dtype::{})'.format(DTYPES[dtype][0]))\n            w('#undef inst_copy')\n            w('#undef inst_copy_')\n            w('')\n            w('}  // cond_take')\n            w('}  // cuda')\n            w('}  // megdnn')\n            if dtype == 'dt_float16' or dtype == 'dt_bfloat16':\n                w('#endif')\n            print('generated {}'.format(fname))\n    os.utime(args.output)",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    parser = argparse.ArgumentParser(description='generate elemwise impl files', formatter_class=argparse.ArgumentDefaultsHelpFormatter)\n    parser.add_argument('--type', type=str, choices=['cuda'], default='cuda', help='generate cuda cond take kernel file')\n    parser.add_argument('output', help='output directory')\n    args = parser.parse_args()\n    if not os.path.isdir(args.output):\n        os.makedirs(args.output)\n    assert args.type == 'cuda'\n    cpp_ext = 'cu'\n    for dtype in DTYPES.keys():\n        fname = '{}.{}'.format(dtype, cpp_ext)\n        fname = os.path.join(args.output, fname)\n        with open(fname, 'w') as fout:\n            w = lambda s: print(s, file=fout)\n            w('// generated by gen_cond_take_kern_impls.py')\n            w('#include \"../kern.inl\"')\n            w('')\n            if dtype == 'dt_float16' or dtype == 'dt_bfloat16':\n                w('#if !MEGDNN_DISABLE_FLOAT16')\n            w('namespace megdnn {')\n            w('namespace cuda {')\n            w('namespace cond_take {')\n            w('')\n            w('inst_genidx(::megdnn::dtype::{})'.format(DTYPES[dtype][0]))\n            w('#undef inst_genidx')\n            w('')\n            w('inst_copy(::megdnn::dtype::{})'.format(DTYPES[dtype][0]))\n            w('#undef inst_copy')\n            w('#undef inst_copy_')\n            w('')\n            w('}  // cond_take')\n            w('}  // cuda')\n            w('}  // megdnn')\n            if dtype == 'dt_float16' or dtype == 'dt_bfloat16':\n                w('#endif')\n            print('generated {}'.format(fname))\n    os.utime(args.output)"
        ]
    }
]
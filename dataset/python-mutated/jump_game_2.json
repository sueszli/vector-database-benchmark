[
    {
        "func_name": "min_jumps_1",
        "original": "def min_jumps_1(nums):\n    n = len(nums)\n    if n <= 1:\n        return 0\n    dp = [-1] * n\n    dp[0] = 0\n    for i in range(n):\n        this_jump = i + nums[i]\n        jumps = dp[i] + 1\n        if this_jump >= n - 1:\n            return jumps\n        for j in range(this_jump, i, -1):\n            if dp[j] != -1:\n                break\n            dp[j] = jumps",
        "mutated": [
            "def min_jumps_1(nums):\n    if False:\n        i = 10\n    n = len(nums)\n    if n <= 1:\n        return 0\n    dp = [-1] * n\n    dp[0] = 0\n    for i in range(n):\n        this_jump = i + nums[i]\n        jumps = dp[i] + 1\n        if this_jump >= n - 1:\n            return jumps\n        for j in range(this_jump, i, -1):\n            if dp[j] != -1:\n                break\n            dp[j] = jumps",
            "def min_jumps_1(nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    n = len(nums)\n    if n <= 1:\n        return 0\n    dp = [-1] * n\n    dp[0] = 0\n    for i in range(n):\n        this_jump = i + nums[i]\n        jumps = dp[i] + 1\n        if this_jump >= n - 1:\n            return jumps\n        for j in range(this_jump, i, -1):\n            if dp[j] != -1:\n                break\n            dp[j] = jumps",
            "def min_jumps_1(nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    n = len(nums)\n    if n <= 1:\n        return 0\n    dp = [-1] * n\n    dp[0] = 0\n    for i in range(n):\n        this_jump = i + nums[i]\n        jumps = dp[i] + 1\n        if this_jump >= n - 1:\n            return jumps\n        for j in range(this_jump, i, -1):\n            if dp[j] != -1:\n                break\n            dp[j] = jumps",
            "def min_jumps_1(nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    n = len(nums)\n    if n <= 1:\n        return 0\n    dp = [-1] * n\n    dp[0] = 0\n    for i in range(n):\n        this_jump = i + nums[i]\n        jumps = dp[i] + 1\n        if this_jump >= n - 1:\n            return jumps\n        for j in range(this_jump, i, -1):\n            if dp[j] != -1:\n                break\n            dp[j] = jumps",
            "def min_jumps_1(nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    n = len(nums)\n    if n <= 1:\n        return 0\n    dp = [-1] * n\n    dp[0] = 0\n    for i in range(n):\n        this_jump = i + nums[i]\n        jumps = dp[i] + 1\n        if this_jump >= n - 1:\n            return jumps\n        for j in range(this_jump, i, -1):\n            if dp[j] != -1:\n                break\n            dp[j] = jumps"
        ]
    },
    {
        "func_name": "min_jumps_2",
        "original": "def min_jumps_2(nums):\n    n = len(nums)\n    if n <= 1:\n        return 0\n    jumps = 0\n    max_jump = 0\n    new_max_jump = 0\n    for i in range(n):\n        if max_jump < i:\n            max_jump = new_max_jump\n            jumps += 1\n        this_jump = i + nums[i]\n        if this_jump >= n - 1:\n            return jumps + 1\n        new_max_jump = max(new_max_jump, this_jump)",
        "mutated": [
            "def min_jumps_2(nums):\n    if False:\n        i = 10\n    n = len(nums)\n    if n <= 1:\n        return 0\n    jumps = 0\n    max_jump = 0\n    new_max_jump = 0\n    for i in range(n):\n        if max_jump < i:\n            max_jump = new_max_jump\n            jumps += 1\n        this_jump = i + nums[i]\n        if this_jump >= n - 1:\n            return jumps + 1\n        new_max_jump = max(new_max_jump, this_jump)",
            "def min_jumps_2(nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    n = len(nums)\n    if n <= 1:\n        return 0\n    jumps = 0\n    max_jump = 0\n    new_max_jump = 0\n    for i in range(n):\n        if max_jump < i:\n            max_jump = new_max_jump\n            jumps += 1\n        this_jump = i + nums[i]\n        if this_jump >= n - 1:\n            return jumps + 1\n        new_max_jump = max(new_max_jump, this_jump)",
            "def min_jumps_2(nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    n = len(nums)\n    if n <= 1:\n        return 0\n    jumps = 0\n    max_jump = 0\n    new_max_jump = 0\n    for i in range(n):\n        if max_jump < i:\n            max_jump = new_max_jump\n            jumps += 1\n        this_jump = i + nums[i]\n        if this_jump >= n - 1:\n            return jumps + 1\n        new_max_jump = max(new_max_jump, this_jump)",
            "def min_jumps_2(nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    n = len(nums)\n    if n <= 1:\n        return 0\n    jumps = 0\n    max_jump = 0\n    new_max_jump = 0\n    for i in range(n):\n        if max_jump < i:\n            max_jump = new_max_jump\n            jumps += 1\n        this_jump = i + nums[i]\n        if this_jump >= n - 1:\n            return jumps + 1\n        new_max_jump = max(new_max_jump, this_jump)",
            "def min_jumps_2(nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    n = len(nums)\n    if n <= 1:\n        return 0\n    jumps = 0\n    max_jump = 0\n    new_max_jump = 0\n    for i in range(n):\n        if max_jump < i:\n            max_jump = new_max_jump\n            jumps += 1\n        this_jump = i + nums[i]\n        if this_jump >= n - 1:\n            return jumps + 1\n        new_max_jump = max(new_max_jump, this_jump)"
        ]
    }
]
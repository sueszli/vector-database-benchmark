"""
Create a manifest file for a modpack
"""
import toml
from ..data_definition import DataDefinition

class ManifestFile(DataDefinition):
    """
    Used for creating a manifest file for a modpack.
    """

    def __init__(self, targetdir: str, filename: str):
        if False:
            while True:
                i = 10
        super().__init__(targetdir, filename)
        self.hash_values: list[tuple[str, str]] = []
        self.hashing_func: str = None

    def dump(self) -> str:
        if False:
            while True:
                i = 10
        '\n        Returns the manifest file content in TOML format.\n        '
        output_dict = {}
        info_table = {'info': {}}
        info_table['info'].update({'hash': self.hashing_func})
        output_dict.update(info_table)
        hash_values_table = {'hash-values': {}}
        for (hash_val, item_path) in self.hash_values:
            hash_values_table['hash-values'].update({hash_val: item_path})
        output_dict.update(hash_values_table)
        output_str = '# openage autogenerated modpack integrity check\n\n'
        output_str += toml.dumps(output_dict)
        return output_str

    def add_hash_value(self, hash_val: str, item_path: str) -> None:
        if False:
            return 10
        '\n        Add the item path and its hash value to the instances\n        hash_values list.\n\n        :param hash_val: the hash value of the item\n        :type hash_val: str\n        :param item_path: relative path of item to the exported path\n        :type item_path: str\n        '
        self.hash_values.append((hash_val, item_path))

    def set_hashing_func(self, hashing_func: str) -> None:
        if False:
            print('Hello World!')
        '\n        Add the hashing function used for generating\n        hash values for modpack files\n\n        :param hashing_func: Hashing algorithm\n        :type hashing_func: str\n        '
        self.hashing_func = hashing_func
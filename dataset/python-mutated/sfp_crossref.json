[
    {
        "func_name": "setup",
        "original": "def setup(self, sfc, userOpts=dict()):\n    self.sf = sfc\n    self.fetched = self.tempStorage()\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
        "mutated": [
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n    self.sf = sfc\n    self.fetched = self.tempStorage()\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.sf = sfc\n    self.fetched = self.tempStorage()\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.sf = sfc\n    self.fetched = self.tempStorage()\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.sf = sfc\n    self.fetched = self.tempStorage()\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.sf = sfc\n    self.fetched = self.tempStorage()\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]"
        ]
    },
    {
        "func_name": "watchedEvents",
        "original": "def watchedEvents(self):\n    return ['LINKED_URL_EXTERNAL', 'SIMILARDOMAIN', 'CO_HOSTED_SITE', 'DARKNET_MENTION_URL']",
        "mutated": [
            "def watchedEvents(self):\n    if False:\n        i = 10\n    return ['LINKED_URL_EXTERNAL', 'SIMILARDOMAIN', 'CO_HOSTED_SITE', 'DARKNET_MENTION_URL']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return ['LINKED_URL_EXTERNAL', 'SIMILARDOMAIN', 'CO_HOSTED_SITE', 'DARKNET_MENTION_URL']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return ['LINKED_URL_EXTERNAL', 'SIMILARDOMAIN', 'CO_HOSTED_SITE', 'DARKNET_MENTION_URL']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return ['LINKED_URL_EXTERNAL', 'SIMILARDOMAIN', 'CO_HOSTED_SITE', 'DARKNET_MENTION_URL']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return ['LINKED_URL_EXTERNAL', 'SIMILARDOMAIN', 'CO_HOSTED_SITE', 'DARKNET_MENTION_URL']"
        ]
    },
    {
        "func_name": "producedEvents",
        "original": "def producedEvents(self):\n    return ['AFFILIATE_INTERNET_NAME', 'AFFILIATE_WEB_CONTENT']",
        "mutated": [
            "def producedEvents(self):\n    if False:\n        i = 10\n    return ['AFFILIATE_INTERNET_NAME', 'AFFILIATE_WEB_CONTENT']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return ['AFFILIATE_INTERNET_NAME', 'AFFILIATE_WEB_CONTENT']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return ['AFFILIATE_INTERNET_NAME', 'AFFILIATE_WEB_CONTENT']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return ['AFFILIATE_INTERNET_NAME', 'AFFILIATE_WEB_CONTENT']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return ['AFFILIATE_INTERNET_NAME', 'AFFILIATE_WEB_CONTENT']"
        ]
    },
    {
        "func_name": "handleEvent",
        "original": "def handleEvent(self, event):\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if eventName in ['SIMILARDOMAIN', 'CO_HOSTED_SITE']:\n        url = 'http://' + eventData.lower()\n    elif 'URL' in eventName:\n        url = eventData\n    else:\n        return\n    fqdn = self.sf.urlFQDN(url)\n    if self.getTarget().matches(fqdn):\n        self.debug(f'Ignoring {url} as not external')\n        return\n    if eventData in self.fetched:\n        self.debug(f'Ignoring {url} as already tested')\n        return\n    if not self.sf.resolveHost(fqdn) and (not self.sf.resolveHost6(fqdn)):\n        self.debug(f'Ignoring {url} as {fqdn} does not resolve')\n        return\n    self.fetched[url] = True\n    self.debug(f'Testing URL for affiliation: {url}')\n    res = self.sf.fetchUrl(url, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'], sizeLimit=10000000, verify=False)\n    if res['content'] is None:\n        self.debug(f'Ignoring {url} as no data returned')\n        return\n    matched = False\n    for name in self.getTarget().getNames():\n        pat = re.compile('([\\\\.\\\\\\'\\\\/\\\\\"\\\\ ]' + re.escape(name) + '[\\\\.\\\\\\'\\\\/\\\\\"\\\\ ])', re.IGNORECASE)\n        matches = re.findall(pat, str(res['content']))\n        if len(matches) > 0:\n            matched = True\n            break\n    if not matched:\n        if eventName == 'LINKED_URL_EXTERNAL' and self.opts['checkbase']:\n            url = SpiderFootHelpers.urlBaseUrl(eventData)\n            if url in self.fetched:\n                return\n            self.fetched[url] = True\n            res = self.sf.fetchUrl(url, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'], sizeLimit=10000000, verify=False)\n            if res['content'] is not None:\n                for name in self.getTarget().getNames():\n                    pat = re.compile('([\\\\.\\\\\\'\\\\/\\\\\"\\\\ ]' + re.escape(name) + '[\\\\\\'\\\\/\\\\\"\\\\ ])', re.IGNORECASE)\n                    matches = re.findall(pat, str(res['content']))\n                    if len(matches) > 0:\n                        matched = True\n                        break\n    if not matched:\n        return\n    if not event.moduleDataSource:\n        event.moduleDataSource = 'Unknown'\n    self.info(f'Found link to target from affiliate: {url}')\n    evt1 = SpiderFootEvent('AFFILIATE_INTERNET_NAME', self.sf.urlFQDN(url), self.__name__, event)\n    evt1.moduleDataSource = event.moduleDataSource\n    self.notifyListeners(evt1)\n    evt2 = SpiderFootEvent('AFFILIATE_WEB_CONTENT', res['content'], self.__name__, evt1)\n    evt2.moduleDataSource = event.moduleDataSource\n    self.notifyListeners(evt2)",
        "mutated": [
            "def handleEvent(self, event):\n    if False:\n        i = 10\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if eventName in ['SIMILARDOMAIN', 'CO_HOSTED_SITE']:\n        url = 'http://' + eventData.lower()\n    elif 'URL' in eventName:\n        url = eventData\n    else:\n        return\n    fqdn = self.sf.urlFQDN(url)\n    if self.getTarget().matches(fqdn):\n        self.debug(f'Ignoring {url} as not external')\n        return\n    if eventData in self.fetched:\n        self.debug(f'Ignoring {url} as already tested')\n        return\n    if not self.sf.resolveHost(fqdn) and (not self.sf.resolveHost6(fqdn)):\n        self.debug(f'Ignoring {url} as {fqdn} does not resolve')\n        return\n    self.fetched[url] = True\n    self.debug(f'Testing URL for affiliation: {url}')\n    res = self.sf.fetchUrl(url, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'], sizeLimit=10000000, verify=False)\n    if res['content'] is None:\n        self.debug(f'Ignoring {url} as no data returned')\n        return\n    matched = False\n    for name in self.getTarget().getNames():\n        pat = re.compile('([\\\\.\\\\\\'\\\\/\\\\\"\\\\ ]' + re.escape(name) + '[\\\\.\\\\\\'\\\\/\\\\\"\\\\ ])', re.IGNORECASE)\n        matches = re.findall(pat, str(res['content']))\n        if len(matches) > 0:\n            matched = True\n            break\n    if not matched:\n        if eventName == 'LINKED_URL_EXTERNAL' and self.opts['checkbase']:\n            url = SpiderFootHelpers.urlBaseUrl(eventData)\n            if url in self.fetched:\n                return\n            self.fetched[url] = True\n            res = self.sf.fetchUrl(url, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'], sizeLimit=10000000, verify=False)\n            if res['content'] is not None:\n                for name in self.getTarget().getNames():\n                    pat = re.compile('([\\\\.\\\\\\'\\\\/\\\\\"\\\\ ]' + re.escape(name) + '[\\\\\\'\\\\/\\\\\"\\\\ ])', re.IGNORECASE)\n                    matches = re.findall(pat, str(res['content']))\n                    if len(matches) > 0:\n                        matched = True\n                        break\n    if not matched:\n        return\n    if not event.moduleDataSource:\n        event.moduleDataSource = 'Unknown'\n    self.info(f'Found link to target from affiliate: {url}')\n    evt1 = SpiderFootEvent('AFFILIATE_INTERNET_NAME', self.sf.urlFQDN(url), self.__name__, event)\n    evt1.moduleDataSource = event.moduleDataSource\n    self.notifyListeners(evt1)\n    evt2 = SpiderFootEvent('AFFILIATE_WEB_CONTENT', res['content'], self.__name__, evt1)\n    evt2.moduleDataSource = event.moduleDataSource\n    self.notifyListeners(evt2)",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if eventName in ['SIMILARDOMAIN', 'CO_HOSTED_SITE']:\n        url = 'http://' + eventData.lower()\n    elif 'URL' in eventName:\n        url = eventData\n    else:\n        return\n    fqdn = self.sf.urlFQDN(url)\n    if self.getTarget().matches(fqdn):\n        self.debug(f'Ignoring {url} as not external')\n        return\n    if eventData in self.fetched:\n        self.debug(f'Ignoring {url} as already tested')\n        return\n    if not self.sf.resolveHost(fqdn) and (not self.sf.resolveHost6(fqdn)):\n        self.debug(f'Ignoring {url} as {fqdn} does not resolve')\n        return\n    self.fetched[url] = True\n    self.debug(f'Testing URL for affiliation: {url}')\n    res = self.sf.fetchUrl(url, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'], sizeLimit=10000000, verify=False)\n    if res['content'] is None:\n        self.debug(f'Ignoring {url} as no data returned')\n        return\n    matched = False\n    for name in self.getTarget().getNames():\n        pat = re.compile('([\\\\.\\\\\\'\\\\/\\\\\"\\\\ ]' + re.escape(name) + '[\\\\.\\\\\\'\\\\/\\\\\"\\\\ ])', re.IGNORECASE)\n        matches = re.findall(pat, str(res['content']))\n        if len(matches) > 0:\n            matched = True\n            break\n    if not matched:\n        if eventName == 'LINKED_URL_EXTERNAL' and self.opts['checkbase']:\n            url = SpiderFootHelpers.urlBaseUrl(eventData)\n            if url in self.fetched:\n                return\n            self.fetched[url] = True\n            res = self.sf.fetchUrl(url, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'], sizeLimit=10000000, verify=False)\n            if res['content'] is not None:\n                for name in self.getTarget().getNames():\n                    pat = re.compile('([\\\\.\\\\\\'\\\\/\\\\\"\\\\ ]' + re.escape(name) + '[\\\\\\'\\\\/\\\\\"\\\\ ])', re.IGNORECASE)\n                    matches = re.findall(pat, str(res['content']))\n                    if len(matches) > 0:\n                        matched = True\n                        break\n    if not matched:\n        return\n    if not event.moduleDataSource:\n        event.moduleDataSource = 'Unknown'\n    self.info(f'Found link to target from affiliate: {url}')\n    evt1 = SpiderFootEvent('AFFILIATE_INTERNET_NAME', self.sf.urlFQDN(url), self.__name__, event)\n    evt1.moduleDataSource = event.moduleDataSource\n    self.notifyListeners(evt1)\n    evt2 = SpiderFootEvent('AFFILIATE_WEB_CONTENT', res['content'], self.__name__, evt1)\n    evt2.moduleDataSource = event.moduleDataSource\n    self.notifyListeners(evt2)",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if eventName in ['SIMILARDOMAIN', 'CO_HOSTED_SITE']:\n        url = 'http://' + eventData.lower()\n    elif 'URL' in eventName:\n        url = eventData\n    else:\n        return\n    fqdn = self.sf.urlFQDN(url)\n    if self.getTarget().matches(fqdn):\n        self.debug(f'Ignoring {url} as not external')\n        return\n    if eventData in self.fetched:\n        self.debug(f'Ignoring {url} as already tested')\n        return\n    if not self.sf.resolveHost(fqdn) and (not self.sf.resolveHost6(fqdn)):\n        self.debug(f'Ignoring {url} as {fqdn} does not resolve')\n        return\n    self.fetched[url] = True\n    self.debug(f'Testing URL for affiliation: {url}')\n    res = self.sf.fetchUrl(url, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'], sizeLimit=10000000, verify=False)\n    if res['content'] is None:\n        self.debug(f'Ignoring {url} as no data returned')\n        return\n    matched = False\n    for name in self.getTarget().getNames():\n        pat = re.compile('([\\\\.\\\\\\'\\\\/\\\\\"\\\\ ]' + re.escape(name) + '[\\\\.\\\\\\'\\\\/\\\\\"\\\\ ])', re.IGNORECASE)\n        matches = re.findall(pat, str(res['content']))\n        if len(matches) > 0:\n            matched = True\n            break\n    if not matched:\n        if eventName == 'LINKED_URL_EXTERNAL' and self.opts['checkbase']:\n            url = SpiderFootHelpers.urlBaseUrl(eventData)\n            if url in self.fetched:\n                return\n            self.fetched[url] = True\n            res = self.sf.fetchUrl(url, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'], sizeLimit=10000000, verify=False)\n            if res['content'] is not None:\n                for name in self.getTarget().getNames():\n                    pat = re.compile('([\\\\.\\\\\\'\\\\/\\\\\"\\\\ ]' + re.escape(name) + '[\\\\\\'\\\\/\\\\\"\\\\ ])', re.IGNORECASE)\n                    matches = re.findall(pat, str(res['content']))\n                    if len(matches) > 0:\n                        matched = True\n                        break\n    if not matched:\n        return\n    if not event.moduleDataSource:\n        event.moduleDataSource = 'Unknown'\n    self.info(f'Found link to target from affiliate: {url}')\n    evt1 = SpiderFootEvent('AFFILIATE_INTERNET_NAME', self.sf.urlFQDN(url), self.__name__, event)\n    evt1.moduleDataSource = event.moduleDataSource\n    self.notifyListeners(evt1)\n    evt2 = SpiderFootEvent('AFFILIATE_WEB_CONTENT', res['content'], self.__name__, evt1)\n    evt2.moduleDataSource = event.moduleDataSource\n    self.notifyListeners(evt2)",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if eventName in ['SIMILARDOMAIN', 'CO_HOSTED_SITE']:\n        url = 'http://' + eventData.lower()\n    elif 'URL' in eventName:\n        url = eventData\n    else:\n        return\n    fqdn = self.sf.urlFQDN(url)\n    if self.getTarget().matches(fqdn):\n        self.debug(f'Ignoring {url} as not external')\n        return\n    if eventData in self.fetched:\n        self.debug(f'Ignoring {url} as already tested')\n        return\n    if not self.sf.resolveHost(fqdn) and (not self.sf.resolveHost6(fqdn)):\n        self.debug(f'Ignoring {url} as {fqdn} does not resolve')\n        return\n    self.fetched[url] = True\n    self.debug(f'Testing URL for affiliation: {url}')\n    res = self.sf.fetchUrl(url, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'], sizeLimit=10000000, verify=False)\n    if res['content'] is None:\n        self.debug(f'Ignoring {url} as no data returned')\n        return\n    matched = False\n    for name in self.getTarget().getNames():\n        pat = re.compile('([\\\\.\\\\\\'\\\\/\\\\\"\\\\ ]' + re.escape(name) + '[\\\\.\\\\\\'\\\\/\\\\\"\\\\ ])', re.IGNORECASE)\n        matches = re.findall(pat, str(res['content']))\n        if len(matches) > 0:\n            matched = True\n            break\n    if not matched:\n        if eventName == 'LINKED_URL_EXTERNAL' and self.opts['checkbase']:\n            url = SpiderFootHelpers.urlBaseUrl(eventData)\n            if url in self.fetched:\n                return\n            self.fetched[url] = True\n            res = self.sf.fetchUrl(url, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'], sizeLimit=10000000, verify=False)\n            if res['content'] is not None:\n                for name in self.getTarget().getNames():\n                    pat = re.compile('([\\\\.\\\\\\'\\\\/\\\\\"\\\\ ]' + re.escape(name) + '[\\\\\\'\\\\/\\\\\"\\\\ ])', re.IGNORECASE)\n                    matches = re.findall(pat, str(res['content']))\n                    if len(matches) > 0:\n                        matched = True\n                        break\n    if not matched:\n        return\n    if not event.moduleDataSource:\n        event.moduleDataSource = 'Unknown'\n    self.info(f'Found link to target from affiliate: {url}')\n    evt1 = SpiderFootEvent('AFFILIATE_INTERNET_NAME', self.sf.urlFQDN(url), self.__name__, event)\n    evt1.moduleDataSource = event.moduleDataSource\n    self.notifyListeners(evt1)\n    evt2 = SpiderFootEvent('AFFILIATE_WEB_CONTENT', res['content'], self.__name__, evt1)\n    evt2.moduleDataSource = event.moduleDataSource\n    self.notifyListeners(evt2)",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    eventName = event.eventType\n    srcModuleName = event.module\n    eventData = event.data\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if eventName in ['SIMILARDOMAIN', 'CO_HOSTED_SITE']:\n        url = 'http://' + eventData.lower()\n    elif 'URL' in eventName:\n        url = eventData\n    else:\n        return\n    fqdn = self.sf.urlFQDN(url)\n    if self.getTarget().matches(fqdn):\n        self.debug(f'Ignoring {url} as not external')\n        return\n    if eventData in self.fetched:\n        self.debug(f'Ignoring {url} as already tested')\n        return\n    if not self.sf.resolveHost(fqdn) and (not self.sf.resolveHost6(fqdn)):\n        self.debug(f'Ignoring {url} as {fqdn} does not resolve')\n        return\n    self.fetched[url] = True\n    self.debug(f'Testing URL for affiliation: {url}')\n    res = self.sf.fetchUrl(url, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'], sizeLimit=10000000, verify=False)\n    if res['content'] is None:\n        self.debug(f'Ignoring {url} as no data returned')\n        return\n    matched = False\n    for name in self.getTarget().getNames():\n        pat = re.compile('([\\\\.\\\\\\'\\\\/\\\\\"\\\\ ]' + re.escape(name) + '[\\\\.\\\\\\'\\\\/\\\\\"\\\\ ])', re.IGNORECASE)\n        matches = re.findall(pat, str(res['content']))\n        if len(matches) > 0:\n            matched = True\n            break\n    if not matched:\n        if eventName == 'LINKED_URL_EXTERNAL' and self.opts['checkbase']:\n            url = SpiderFootHelpers.urlBaseUrl(eventData)\n            if url in self.fetched:\n                return\n            self.fetched[url] = True\n            res = self.sf.fetchUrl(url, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'], sizeLimit=10000000, verify=False)\n            if res['content'] is not None:\n                for name in self.getTarget().getNames():\n                    pat = re.compile('([\\\\.\\\\\\'\\\\/\\\\\"\\\\ ]' + re.escape(name) + '[\\\\\\'\\\\/\\\\\"\\\\ ])', re.IGNORECASE)\n                    matches = re.findall(pat, str(res['content']))\n                    if len(matches) > 0:\n                        matched = True\n                        break\n    if not matched:\n        return\n    if not event.moduleDataSource:\n        event.moduleDataSource = 'Unknown'\n    self.info(f'Found link to target from affiliate: {url}')\n    evt1 = SpiderFootEvent('AFFILIATE_INTERNET_NAME', self.sf.urlFQDN(url), self.__name__, event)\n    evt1.moduleDataSource = event.moduleDataSource\n    self.notifyListeners(evt1)\n    evt2 = SpiderFootEvent('AFFILIATE_WEB_CONTENT', res['content'], self.__name__, evt1)\n    evt2.moduleDataSource = event.moduleDataSource\n    self.notifyListeners(evt2)"
        ]
    }
]
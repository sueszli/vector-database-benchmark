[
    {
        "func_name": "test_load_pth",
        "original": "def test_load_pth(self):\n    img = np.random.random((1, 3, 224, 224)).astype('float32')\n    jt_img = jt.array(img)\n    torch_img = torch.Tensor(img)\n    torch_model = tv.models.resnet18(True)\n    jt_model = resnet.Resnet18()\n    jt_model.load_parameters(torch_model.state_dict())\n    jt_out = jt_model(jt_img)\n    torch_out = torch_model(torch_img)\n    print(np.max(np.abs(jt_out.fetch_sync() - torch_out.detach().numpy())))\n    assert np.max(np.abs(jt_out.fetch_sync() - torch_out.detach().numpy())) < 0.001\n    pth_name = os.path.join(jt.flags.cache_path, 'x.pth')\n    torch.save(torch_model.state_dict(), pth_name)\n    jt_model.load(pth_name)\n    jt_out = jt_model(jt_img)\n    print(np.max(np.abs(jt_out.fetch_sync() - torch_out.detach().numpy())))\n    assert np.max(np.abs(jt_out.fetch_sync() - torch_out.detach().numpy())) < 0.001",
        "mutated": [
            "def test_load_pth(self):\n    if False:\n        i = 10\n    img = np.random.random((1, 3, 224, 224)).astype('float32')\n    jt_img = jt.array(img)\n    torch_img = torch.Tensor(img)\n    torch_model = tv.models.resnet18(True)\n    jt_model = resnet.Resnet18()\n    jt_model.load_parameters(torch_model.state_dict())\n    jt_out = jt_model(jt_img)\n    torch_out = torch_model(torch_img)\n    print(np.max(np.abs(jt_out.fetch_sync() - torch_out.detach().numpy())))\n    assert np.max(np.abs(jt_out.fetch_sync() - torch_out.detach().numpy())) < 0.001\n    pth_name = os.path.join(jt.flags.cache_path, 'x.pth')\n    torch.save(torch_model.state_dict(), pth_name)\n    jt_model.load(pth_name)\n    jt_out = jt_model(jt_img)\n    print(np.max(np.abs(jt_out.fetch_sync() - torch_out.detach().numpy())))\n    assert np.max(np.abs(jt_out.fetch_sync() - torch_out.detach().numpy())) < 0.001",
            "def test_load_pth(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    img = np.random.random((1, 3, 224, 224)).astype('float32')\n    jt_img = jt.array(img)\n    torch_img = torch.Tensor(img)\n    torch_model = tv.models.resnet18(True)\n    jt_model = resnet.Resnet18()\n    jt_model.load_parameters(torch_model.state_dict())\n    jt_out = jt_model(jt_img)\n    torch_out = torch_model(torch_img)\n    print(np.max(np.abs(jt_out.fetch_sync() - torch_out.detach().numpy())))\n    assert np.max(np.abs(jt_out.fetch_sync() - torch_out.detach().numpy())) < 0.001\n    pth_name = os.path.join(jt.flags.cache_path, 'x.pth')\n    torch.save(torch_model.state_dict(), pth_name)\n    jt_model.load(pth_name)\n    jt_out = jt_model(jt_img)\n    print(np.max(np.abs(jt_out.fetch_sync() - torch_out.detach().numpy())))\n    assert np.max(np.abs(jt_out.fetch_sync() - torch_out.detach().numpy())) < 0.001",
            "def test_load_pth(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    img = np.random.random((1, 3, 224, 224)).astype('float32')\n    jt_img = jt.array(img)\n    torch_img = torch.Tensor(img)\n    torch_model = tv.models.resnet18(True)\n    jt_model = resnet.Resnet18()\n    jt_model.load_parameters(torch_model.state_dict())\n    jt_out = jt_model(jt_img)\n    torch_out = torch_model(torch_img)\n    print(np.max(np.abs(jt_out.fetch_sync() - torch_out.detach().numpy())))\n    assert np.max(np.abs(jt_out.fetch_sync() - torch_out.detach().numpy())) < 0.001\n    pth_name = os.path.join(jt.flags.cache_path, 'x.pth')\n    torch.save(torch_model.state_dict(), pth_name)\n    jt_model.load(pth_name)\n    jt_out = jt_model(jt_img)\n    print(np.max(np.abs(jt_out.fetch_sync() - torch_out.detach().numpy())))\n    assert np.max(np.abs(jt_out.fetch_sync() - torch_out.detach().numpy())) < 0.001",
            "def test_load_pth(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    img = np.random.random((1, 3, 224, 224)).astype('float32')\n    jt_img = jt.array(img)\n    torch_img = torch.Tensor(img)\n    torch_model = tv.models.resnet18(True)\n    jt_model = resnet.Resnet18()\n    jt_model.load_parameters(torch_model.state_dict())\n    jt_out = jt_model(jt_img)\n    torch_out = torch_model(torch_img)\n    print(np.max(np.abs(jt_out.fetch_sync() - torch_out.detach().numpy())))\n    assert np.max(np.abs(jt_out.fetch_sync() - torch_out.detach().numpy())) < 0.001\n    pth_name = os.path.join(jt.flags.cache_path, 'x.pth')\n    torch.save(torch_model.state_dict(), pth_name)\n    jt_model.load(pth_name)\n    jt_out = jt_model(jt_img)\n    print(np.max(np.abs(jt_out.fetch_sync() - torch_out.detach().numpy())))\n    assert np.max(np.abs(jt_out.fetch_sync() - torch_out.detach().numpy())) < 0.001",
            "def test_load_pth(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    img = np.random.random((1, 3, 224, 224)).astype('float32')\n    jt_img = jt.array(img)\n    torch_img = torch.Tensor(img)\n    torch_model = tv.models.resnet18(True)\n    jt_model = resnet.Resnet18()\n    jt_model.load_parameters(torch_model.state_dict())\n    jt_out = jt_model(jt_img)\n    torch_out = torch_model(torch_img)\n    print(np.max(np.abs(jt_out.fetch_sync() - torch_out.detach().numpy())))\n    assert np.max(np.abs(jt_out.fetch_sync() - torch_out.detach().numpy())) < 0.001\n    pth_name = os.path.join(jt.flags.cache_path, 'x.pth')\n    torch.save(torch_model.state_dict(), pth_name)\n    jt_model.load(pth_name)\n    jt_out = jt_model(jt_img)\n    print(np.max(np.abs(jt_out.fetch_sync() - torch_out.detach().numpy())))\n    assert np.max(np.abs(jt_out.fetch_sync() - torch_out.detach().numpy())) < 0.001"
        ]
    }
]
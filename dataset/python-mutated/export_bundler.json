[
    {
        "func_name": "run_dataset",
        "original": "def run_dataset(data: DataSet, list_path, bundle_path, undistorted) -> None:\n    \"\"\"Export reconstruction to bundler format.\n\n    Args:\n        list_path: txt list of images to export\n        bundle_path : output path\n        undistorted : export undistorted reconstruction\n\n    \"\"\"\n    udata = data.undistorted_dataset()\n    default_path = os.path.join(data.data_path, 'bundler')\n    list_file_path = list_path if list_path else default_path\n    bundle_file_path = bundle_path if bundle_path else default_path\n    if undistorted:\n        reconstructions = udata.load_undistorted_reconstruction()\n        track_manager = udata.load_undistorted_tracks_manager()\n        images = reconstructions[0].shots.keys()\n    else:\n        reconstructions = data.load_reconstruction()\n        track_manager = data.load_tracks_manager()\n        images = data.images()\n    export_bundler(images, reconstructions, track_manager, bundle_file_path, list_file_path)",
        "mutated": [
            "def run_dataset(data: DataSet, list_path, bundle_path, undistorted) -> None:\n    if False:\n        i = 10\n    'Export reconstruction to bundler format.\\n\\n    Args:\\n        list_path: txt list of images to export\\n        bundle_path : output path\\n        undistorted : export undistorted reconstruction\\n\\n    '\n    udata = data.undistorted_dataset()\n    default_path = os.path.join(data.data_path, 'bundler')\n    list_file_path = list_path if list_path else default_path\n    bundle_file_path = bundle_path if bundle_path else default_path\n    if undistorted:\n        reconstructions = udata.load_undistorted_reconstruction()\n        track_manager = udata.load_undistorted_tracks_manager()\n        images = reconstructions[0].shots.keys()\n    else:\n        reconstructions = data.load_reconstruction()\n        track_manager = data.load_tracks_manager()\n        images = data.images()\n    export_bundler(images, reconstructions, track_manager, bundle_file_path, list_file_path)",
            "def run_dataset(data: DataSet, list_path, bundle_path, undistorted) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Export reconstruction to bundler format.\\n\\n    Args:\\n        list_path: txt list of images to export\\n        bundle_path : output path\\n        undistorted : export undistorted reconstruction\\n\\n    '\n    udata = data.undistorted_dataset()\n    default_path = os.path.join(data.data_path, 'bundler')\n    list_file_path = list_path if list_path else default_path\n    bundle_file_path = bundle_path if bundle_path else default_path\n    if undistorted:\n        reconstructions = udata.load_undistorted_reconstruction()\n        track_manager = udata.load_undistorted_tracks_manager()\n        images = reconstructions[0].shots.keys()\n    else:\n        reconstructions = data.load_reconstruction()\n        track_manager = data.load_tracks_manager()\n        images = data.images()\n    export_bundler(images, reconstructions, track_manager, bundle_file_path, list_file_path)",
            "def run_dataset(data: DataSet, list_path, bundle_path, undistorted) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Export reconstruction to bundler format.\\n\\n    Args:\\n        list_path: txt list of images to export\\n        bundle_path : output path\\n        undistorted : export undistorted reconstruction\\n\\n    '\n    udata = data.undistorted_dataset()\n    default_path = os.path.join(data.data_path, 'bundler')\n    list_file_path = list_path if list_path else default_path\n    bundle_file_path = bundle_path if bundle_path else default_path\n    if undistorted:\n        reconstructions = udata.load_undistorted_reconstruction()\n        track_manager = udata.load_undistorted_tracks_manager()\n        images = reconstructions[0].shots.keys()\n    else:\n        reconstructions = data.load_reconstruction()\n        track_manager = data.load_tracks_manager()\n        images = data.images()\n    export_bundler(images, reconstructions, track_manager, bundle_file_path, list_file_path)",
            "def run_dataset(data: DataSet, list_path, bundle_path, undistorted) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Export reconstruction to bundler format.\\n\\n    Args:\\n        list_path: txt list of images to export\\n        bundle_path : output path\\n        undistorted : export undistorted reconstruction\\n\\n    '\n    udata = data.undistorted_dataset()\n    default_path = os.path.join(data.data_path, 'bundler')\n    list_file_path = list_path if list_path else default_path\n    bundle_file_path = bundle_path if bundle_path else default_path\n    if undistorted:\n        reconstructions = udata.load_undistorted_reconstruction()\n        track_manager = udata.load_undistorted_tracks_manager()\n        images = reconstructions[0].shots.keys()\n    else:\n        reconstructions = data.load_reconstruction()\n        track_manager = data.load_tracks_manager()\n        images = data.images()\n    export_bundler(images, reconstructions, track_manager, bundle_file_path, list_file_path)",
            "def run_dataset(data: DataSet, list_path, bundle_path, undistorted) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Export reconstruction to bundler format.\\n\\n    Args:\\n        list_path: txt list of images to export\\n        bundle_path : output path\\n        undistorted : export undistorted reconstruction\\n\\n    '\n    udata = data.undistorted_dataset()\n    default_path = os.path.join(data.data_path, 'bundler')\n    list_file_path = list_path if list_path else default_path\n    bundle_file_path = bundle_path if bundle_path else default_path\n    if undistorted:\n        reconstructions = udata.load_undistorted_reconstruction()\n        track_manager = udata.load_undistorted_tracks_manager()\n        images = reconstructions[0].shots.keys()\n    else:\n        reconstructions = data.load_reconstruction()\n        track_manager = data.load_tracks_manager()\n        images = data.images()\n    export_bundler(images, reconstructions, track_manager, bundle_file_path, list_file_path)"
        ]
    },
    {
        "func_name": "export_bundler",
        "original": "def export_bundler(image_list, reconstructions, track_manager, bundle_file_path: str, list_file_path: str) -> None:\n    \"\"\"\n    Generate a reconstruction file that is consistent with Bundler's format\n    \"\"\"\n    io.mkdir_p(bundle_file_path)\n    io.mkdir_p(list_file_path)\n    for (j, reconstruction) in enumerate(reconstructions):\n        lines = []\n        lines.append('# Bundle file v0.3')\n        points = reconstruction.points\n        shots = reconstruction.shots\n        num_point = len(points)\n        num_shot = len(image_list)\n        lines.append(' '.join(map(str, [num_shot, num_point])))\n        shots_order = {key: i for (i, key) in enumerate(image_list)}\n        for shot_id in image_list:\n            if shot_id in shots:\n                shot = shots[shot_id]\n                camera = shot.camera\n                if shot.camera.projection_type == 'brown':\n                    focal_normalized = camera.focal_x\n                else:\n                    focal_normalized = camera.focal\n                scale = max(camera.width, camera.height)\n                focal = focal_normalized * scale\n                k1 = camera.k1\n                k2 = camera.k2\n                R = shot.pose.get_rotation_matrix()\n                t = np.array(shot.pose.translation)\n                (R[1], R[2]) = (-R[1], -R[2])\n                (t[1], t[2]) = (-t[1], -t[2])\n                lines.append(' '.join(map(str, [focal, k1, k2])))\n                for i in range(3):\n                    lines.append(' '.join(map(str, R[i])))\n                t = ' '.join(map(str, t))\n                lines.append(t)\n            else:\n                for _ in range(5):\n                    lines.append('0 0 0')\n        for point in points.values():\n            coord = point.coordinates\n            color = list(map(int, point.color))\n            view_list = track_manager.get_track_observations(point.id)\n            lines.append(' '.join(map(str, coord)))\n            lines.append(' '.join(map(str, color)))\n            view_line = []\n            for (shot_key, obs) in view_list.items():\n                if shot_key in shots.keys():\n                    v = obs.point\n                    shot_index = shots_order[shot_key]\n                    camera = shots[shot_key].camera\n                    scale = max(camera.width, camera.height)\n                    x = v[0] * scale\n                    y = -v[1] * scale\n                    view_line.append(' '.join(map(str, [shot_index, obs.id, x, y])))\n            lines.append(str(len(view_line)) + ' ' + ' '.join(view_line))\n        bundle_file = os.path.join(bundle_file_path, 'bundle_r' + str(j).zfill(3) + '.out')\n        with io.open_wt(bundle_file) as fout:\n            fout.writelines('\\n'.join(lines) + '\\n')\n        list_file = os.path.join(list_file_path, 'list_r' + str(j).zfill(3) + '.out')\n        with io.open_wt(list_file) as fout:\n            fout.writelines('\\n'.join(map(str, image_list)))",
        "mutated": [
            "def export_bundler(image_list, reconstructions, track_manager, bundle_file_path: str, list_file_path: str) -> None:\n    if False:\n        i = 10\n    \"\\n    Generate a reconstruction file that is consistent with Bundler's format\\n    \"\n    io.mkdir_p(bundle_file_path)\n    io.mkdir_p(list_file_path)\n    for (j, reconstruction) in enumerate(reconstructions):\n        lines = []\n        lines.append('# Bundle file v0.3')\n        points = reconstruction.points\n        shots = reconstruction.shots\n        num_point = len(points)\n        num_shot = len(image_list)\n        lines.append(' '.join(map(str, [num_shot, num_point])))\n        shots_order = {key: i for (i, key) in enumerate(image_list)}\n        for shot_id in image_list:\n            if shot_id in shots:\n                shot = shots[shot_id]\n                camera = shot.camera\n                if shot.camera.projection_type == 'brown':\n                    focal_normalized = camera.focal_x\n                else:\n                    focal_normalized = camera.focal\n                scale = max(camera.width, camera.height)\n                focal = focal_normalized * scale\n                k1 = camera.k1\n                k2 = camera.k2\n                R = shot.pose.get_rotation_matrix()\n                t = np.array(shot.pose.translation)\n                (R[1], R[2]) = (-R[1], -R[2])\n                (t[1], t[2]) = (-t[1], -t[2])\n                lines.append(' '.join(map(str, [focal, k1, k2])))\n                for i in range(3):\n                    lines.append(' '.join(map(str, R[i])))\n                t = ' '.join(map(str, t))\n                lines.append(t)\n            else:\n                for _ in range(5):\n                    lines.append('0 0 0')\n        for point in points.values():\n            coord = point.coordinates\n            color = list(map(int, point.color))\n            view_list = track_manager.get_track_observations(point.id)\n            lines.append(' '.join(map(str, coord)))\n            lines.append(' '.join(map(str, color)))\n            view_line = []\n            for (shot_key, obs) in view_list.items():\n                if shot_key in shots.keys():\n                    v = obs.point\n                    shot_index = shots_order[shot_key]\n                    camera = shots[shot_key].camera\n                    scale = max(camera.width, camera.height)\n                    x = v[0] * scale\n                    y = -v[1] * scale\n                    view_line.append(' '.join(map(str, [shot_index, obs.id, x, y])))\n            lines.append(str(len(view_line)) + ' ' + ' '.join(view_line))\n        bundle_file = os.path.join(bundle_file_path, 'bundle_r' + str(j).zfill(3) + '.out')\n        with io.open_wt(bundle_file) as fout:\n            fout.writelines('\\n'.join(lines) + '\\n')\n        list_file = os.path.join(list_file_path, 'list_r' + str(j).zfill(3) + '.out')\n        with io.open_wt(list_file) as fout:\n            fout.writelines('\\n'.join(map(str, image_list)))",
            "def export_bundler(image_list, reconstructions, track_manager, bundle_file_path: str, list_file_path: str) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n    Generate a reconstruction file that is consistent with Bundler's format\\n    \"\n    io.mkdir_p(bundle_file_path)\n    io.mkdir_p(list_file_path)\n    for (j, reconstruction) in enumerate(reconstructions):\n        lines = []\n        lines.append('# Bundle file v0.3')\n        points = reconstruction.points\n        shots = reconstruction.shots\n        num_point = len(points)\n        num_shot = len(image_list)\n        lines.append(' '.join(map(str, [num_shot, num_point])))\n        shots_order = {key: i for (i, key) in enumerate(image_list)}\n        for shot_id in image_list:\n            if shot_id in shots:\n                shot = shots[shot_id]\n                camera = shot.camera\n                if shot.camera.projection_type == 'brown':\n                    focal_normalized = camera.focal_x\n                else:\n                    focal_normalized = camera.focal\n                scale = max(camera.width, camera.height)\n                focal = focal_normalized * scale\n                k1 = camera.k1\n                k2 = camera.k2\n                R = shot.pose.get_rotation_matrix()\n                t = np.array(shot.pose.translation)\n                (R[1], R[2]) = (-R[1], -R[2])\n                (t[1], t[2]) = (-t[1], -t[2])\n                lines.append(' '.join(map(str, [focal, k1, k2])))\n                for i in range(3):\n                    lines.append(' '.join(map(str, R[i])))\n                t = ' '.join(map(str, t))\n                lines.append(t)\n            else:\n                for _ in range(5):\n                    lines.append('0 0 0')\n        for point in points.values():\n            coord = point.coordinates\n            color = list(map(int, point.color))\n            view_list = track_manager.get_track_observations(point.id)\n            lines.append(' '.join(map(str, coord)))\n            lines.append(' '.join(map(str, color)))\n            view_line = []\n            for (shot_key, obs) in view_list.items():\n                if shot_key in shots.keys():\n                    v = obs.point\n                    shot_index = shots_order[shot_key]\n                    camera = shots[shot_key].camera\n                    scale = max(camera.width, camera.height)\n                    x = v[0] * scale\n                    y = -v[1] * scale\n                    view_line.append(' '.join(map(str, [shot_index, obs.id, x, y])))\n            lines.append(str(len(view_line)) + ' ' + ' '.join(view_line))\n        bundle_file = os.path.join(bundle_file_path, 'bundle_r' + str(j).zfill(3) + '.out')\n        with io.open_wt(bundle_file) as fout:\n            fout.writelines('\\n'.join(lines) + '\\n')\n        list_file = os.path.join(list_file_path, 'list_r' + str(j).zfill(3) + '.out')\n        with io.open_wt(list_file) as fout:\n            fout.writelines('\\n'.join(map(str, image_list)))",
            "def export_bundler(image_list, reconstructions, track_manager, bundle_file_path: str, list_file_path: str) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n    Generate a reconstruction file that is consistent with Bundler's format\\n    \"\n    io.mkdir_p(bundle_file_path)\n    io.mkdir_p(list_file_path)\n    for (j, reconstruction) in enumerate(reconstructions):\n        lines = []\n        lines.append('# Bundle file v0.3')\n        points = reconstruction.points\n        shots = reconstruction.shots\n        num_point = len(points)\n        num_shot = len(image_list)\n        lines.append(' '.join(map(str, [num_shot, num_point])))\n        shots_order = {key: i for (i, key) in enumerate(image_list)}\n        for shot_id in image_list:\n            if shot_id in shots:\n                shot = shots[shot_id]\n                camera = shot.camera\n                if shot.camera.projection_type == 'brown':\n                    focal_normalized = camera.focal_x\n                else:\n                    focal_normalized = camera.focal\n                scale = max(camera.width, camera.height)\n                focal = focal_normalized * scale\n                k1 = camera.k1\n                k2 = camera.k2\n                R = shot.pose.get_rotation_matrix()\n                t = np.array(shot.pose.translation)\n                (R[1], R[2]) = (-R[1], -R[2])\n                (t[1], t[2]) = (-t[1], -t[2])\n                lines.append(' '.join(map(str, [focal, k1, k2])))\n                for i in range(3):\n                    lines.append(' '.join(map(str, R[i])))\n                t = ' '.join(map(str, t))\n                lines.append(t)\n            else:\n                for _ in range(5):\n                    lines.append('0 0 0')\n        for point in points.values():\n            coord = point.coordinates\n            color = list(map(int, point.color))\n            view_list = track_manager.get_track_observations(point.id)\n            lines.append(' '.join(map(str, coord)))\n            lines.append(' '.join(map(str, color)))\n            view_line = []\n            for (shot_key, obs) in view_list.items():\n                if shot_key in shots.keys():\n                    v = obs.point\n                    shot_index = shots_order[shot_key]\n                    camera = shots[shot_key].camera\n                    scale = max(camera.width, camera.height)\n                    x = v[0] * scale\n                    y = -v[1] * scale\n                    view_line.append(' '.join(map(str, [shot_index, obs.id, x, y])))\n            lines.append(str(len(view_line)) + ' ' + ' '.join(view_line))\n        bundle_file = os.path.join(bundle_file_path, 'bundle_r' + str(j).zfill(3) + '.out')\n        with io.open_wt(bundle_file) as fout:\n            fout.writelines('\\n'.join(lines) + '\\n')\n        list_file = os.path.join(list_file_path, 'list_r' + str(j).zfill(3) + '.out')\n        with io.open_wt(list_file) as fout:\n            fout.writelines('\\n'.join(map(str, image_list)))",
            "def export_bundler(image_list, reconstructions, track_manager, bundle_file_path: str, list_file_path: str) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n    Generate a reconstruction file that is consistent with Bundler's format\\n    \"\n    io.mkdir_p(bundle_file_path)\n    io.mkdir_p(list_file_path)\n    for (j, reconstruction) in enumerate(reconstructions):\n        lines = []\n        lines.append('# Bundle file v0.3')\n        points = reconstruction.points\n        shots = reconstruction.shots\n        num_point = len(points)\n        num_shot = len(image_list)\n        lines.append(' '.join(map(str, [num_shot, num_point])))\n        shots_order = {key: i for (i, key) in enumerate(image_list)}\n        for shot_id in image_list:\n            if shot_id in shots:\n                shot = shots[shot_id]\n                camera = shot.camera\n                if shot.camera.projection_type == 'brown':\n                    focal_normalized = camera.focal_x\n                else:\n                    focal_normalized = camera.focal\n                scale = max(camera.width, camera.height)\n                focal = focal_normalized * scale\n                k1 = camera.k1\n                k2 = camera.k2\n                R = shot.pose.get_rotation_matrix()\n                t = np.array(shot.pose.translation)\n                (R[1], R[2]) = (-R[1], -R[2])\n                (t[1], t[2]) = (-t[1], -t[2])\n                lines.append(' '.join(map(str, [focal, k1, k2])))\n                for i in range(3):\n                    lines.append(' '.join(map(str, R[i])))\n                t = ' '.join(map(str, t))\n                lines.append(t)\n            else:\n                for _ in range(5):\n                    lines.append('0 0 0')\n        for point in points.values():\n            coord = point.coordinates\n            color = list(map(int, point.color))\n            view_list = track_manager.get_track_observations(point.id)\n            lines.append(' '.join(map(str, coord)))\n            lines.append(' '.join(map(str, color)))\n            view_line = []\n            for (shot_key, obs) in view_list.items():\n                if shot_key in shots.keys():\n                    v = obs.point\n                    shot_index = shots_order[shot_key]\n                    camera = shots[shot_key].camera\n                    scale = max(camera.width, camera.height)\n                    x = v[0] * scale\n                    y = -v[1] * scale\n                    view_line.append(' '.join(map(str, [shot_index, obs.id, x, y])))\n            lines.append(str(len(view_line)) + ' ' + ' '.join(view_line))\n        bundle_file = os.path.join(bundle_file_path, 'bundle_r' + str(j).zfill(3) + '.out')\n        with io.open_wt(bundle_file) as fout:\n            fout.writelines('\\n'.join(lines) + '\\n')\n        list_file = os.path.join(list_file_path, 'list_r' + str(j).zfill(3) + '.out')\n        with io.open_wt(list_file) as fout:\n            fout.writelines('\\n'.join(map(str, image_list)))",
            "def export_bundler(image_list, reconstructions, track_manager, bundle_file_path: str, list_file_path: str) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n    Generate a reconstruction file that is consistent with Bundler's format\\n    \"\n    io.mkdir_p(bundle_file_path)\n    io.mkdir_p(list_file_path)\n    for (j, reconstruction) in enumerate(reconstructions):\n        lines = []\n        lines.append('# Bundle file v0.3')\n        points = reconstruction.points\n        shots = reconstruction.shots\n        num_point = len(points)\n        num_shot = len(image_list)\n        lines.append(' '.join(map(str, [num_shot, num_point])))\n        shots_order = {key: i for (i, key) in enumerate(image_list)}\n        for shot_id in image_list:\n            if shot_id in shots:\n                shot = shots[shot_id]\n                camera = shot.camera\n                if shot.camera.projection_type == 'brown':\n                    focal_normalized = camera.focal_x\n                else:\n                    focal_normalized = camera.focal\n                scale = max(camera.width, camera.height)\n                focal = focal_normalized * scale\n                k1 = camera.k1\n                k2 = camera.k2\n                R = shot.pose.get_rotation_matrix()\n                t = np.array(shot.pose.translation)\n                (R[1], R[2]) = (-R[1], -R[2])\n                (t[1], t[2]) = (-t[1], -t[2])\n                lines.append(' '.join(map(str, [focal, k1, k2])))\n                for i in range(3):\n                    lines.append(' '.join(map(str, R[i])))\n                t = ' '.join(map(str, t))\n                lines.append(t)\n            else:\n                for _ in range(5):\n                    lines.append('0 0 0')\n        for point in points.values():\n            coord = point.coordinates\n            color = list(map(int, point.color))\n            view_list = track_manager.get_track_observations(point.id)\n            lines.append(' '.join(map(str, coord)))\n            lines.append(' '.join(map(str, color)))\n            view_line = []\n            for (shot_key, obs) in view_list.items():\n                if shot_key in shots.keys():\n                    v = obs.point\n                    shot_index = shots_order[shot_key]\n                    camera = shots[shot_key].camera\n                    scale = max(camera.width, camera.height)\n                    x = v[0] * scale\n                    y = -v[1] * scale\n                    view_line.append(' '.join(map(str, [shot_index, obs.id, x, y])))\n            lines.append(str(len(view_line)) + ' ' + ' '.join(view_line))\n        bundle_file = os.path.join(bundle_file_path, 'bundle_r' + str(j).zfill(3) + '.out')\n        with io.open_wt(bundle_file) as fout:\n            fout.writelines('\\n'.join(lines) + '\\n')\n        list_file = os.path.join(list_file_path, 'list_r' + str(j).zfill(3) + '.out')\n        with io.open_wt(list_file) as fout:\n            fout.writelines('\\n'.join(map(str, image_list)))"
        ]
    }
]
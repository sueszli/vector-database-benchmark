"""Generate reStructuredText source for the User Reference Manual.
Loosely based on the manpage generator autodoc_man.py.

Written by the Bazaar community.
"""
from __future__ import absolute_import
import time
import bzrlib
import bzrlib.help
import bzrlib.help_topics
import bzrlib.commands
import bzrlib.osutils

def get_filename(options):
    if False:
        return 10
    'Provides name of manual'
    return '%s_man.txt' % options.bzr_name

def infogen(options, outfile):
    if False:
        return 10
    'Create manual in RSTX format'
    tt = bzrlib.osutils.gmtime()
    params = {'bzrcmd': options.bzr_name, 'datestamp': time.strftime('%Y-%m-%d', tt), 'timestamp': time.strftime('%Y-%m-%d %H:%M:%S +0000', tt), 'version': bzrlib.__version__}
    nominated_filename = getattr(options, 'filename', None)
    if nominated_filename is None:
        topic_dir = None
    else:
        topic_dir = bzrlib.osutils.dirname(nominated_filename)
    outfile.write(rstx_preamble % params)
    outfile.write(rstx_head % params)
    outfile.write(_get_body(params, topic_dir))
    outfile.write(rstx_foot % params)

def _get_body(params, topic_dir):
    if False:
        print('Hello World!')
    'Build the manual content.'
    from bzrlib.help_topics import SECT_CONCEPT, SECT_LIST, SECT_PLUGIN
    registry = bzrlib.help_topics.topic_registry
    result = []
    result.append(_get_section(registry, SECT_CONCEPT, 'Concepts', output_dir=topic_dir))
    result.append(_get_section(registry, SECT_LIST, 'Lists', output_dir=topic_dir))
    result.append(_get_commands_section(registry, output_dir=topic_dir))
    return '\n'.join(result)

def _get_section(registry, section, title, hdg_level1='#', hdg_level2='=', output_dir=None):
    if False:
        for i in range(10):
            print('nop')
    'Build the manual part from topics matching that section.\n    \n    If output_dir is not None, topics are dumped into text files there\n    during processing, as well as being included in the return result.\n    '
    file_per_topic = output_dir is not None
    lines = [title, hdg_level1 * len(title), '']
    if file_per_topic:
        lines.extend(['.. toctree::', '   :maxdepth: 1', ''])
    topics = sorted(registry.get_topics_for_section(section))
    for topic in topics:
        help = registry.get_detail(topic)
        (heading, text) = help.split('\n', 1)
        if not text.startswith(hdg_level2):
            underline = hdg_level2 * len(heading)
            help = '%s\n%s\n\n%s\n\n' % (heading, underline, text)
        else:
            help = '%s\n%s\n\n' % (heading, text)
        if file_per_topic:
            topic_id = _dump_text(output_dir, topic, help)
            lines.append('   %s' % topic_id)
        else:
            lines.append(help)
    return '\n' + '\n'.join(lines) + '\n'

def _get_commands_section(registry, title='Commands', hdg_level1='#', hdg_level2='=', output_dir=None):
    if False:
        while True:
            i = 10
    'Build the commands reference section of the manual.'
    file_per_topic = output_dir is not None
    lines = [title, hdg_level1 * len(title), '']
    if file_per_topic:
        lines.extend(['.. toctree::', '   :maxdepth: 1', ''])
    cmds = sorted(bzrlib.commands.builtin_command_names())
    for cmd_name in cmds:
        cmd_object = bzrlib.commands.get_cmd_object(cmd_name)
        if cmd_object.hidden:
            continue
        heading = cmd_name
        underline = hdg_level2 * len(heading)
        text = cmd_object.get_help_text(plain=False, see_also_as_links=True)
        help = '%s\n%s\n\n%s\n\n' % (heading, underline, text)
        if file_per_topic:
            topic_id = _dump_text(output_dir, cmd_name, help)
            lines.append('   %s' % topic_id)
        else:
            lines.append(help)
    return '\n' + '\n'.join(lines) + '\n'

def _dump_text(output_dir, topic, text):
    if False:
        while True:
            i = 10
    'Dump text for a topic to a file.'
    topic_id = '%s-%s' % (topic, 'help')
    filename = bzrlib.osutils.pathjoin(output_dir, topic_id + '.txt')
    f = open(filename, 'w')
    f.write(text.encode('utf-8'))
    f.close()
    return topic_id
rstx_preamble = '.. This file is autogenerated from the output of\n..     %(bzrcmd)s help topics\n..     %(bzrcmd)s help commands\n..     %(bzrcmd)s help <cmd>\n..\n\n'
rstx_head = "#####################\nBazaar User Reference\n#####################\n\nAbout This Manual\n#################\n\nThis manual is generated from Bazaar's online help. To use\nthe online help system, try the following commands.\n\n    Introduction including a list of commonly used commands::\n\n        bzr help\n\n    List of topics and a summary of each::\n\n        bzr help topics\n\n    List of commands and a summary of each::\n\n        bzr help commands\n\n    More information about a particular topic or command::\n\n        bzr help topic-or-command-name\n\nThe following web sites provide further information on Bazaar:\n\n:Home page:                     http://bazaar.canonical.com/\n:Official docs:                 http://doc.bazaar.canonical.com/\n:Launchpad:                     https://launchpad.net/bzr/\n"
rstx_foot = '\n'
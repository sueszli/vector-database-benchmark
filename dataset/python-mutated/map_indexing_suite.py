from __future__ import print_function
'\n\n#####################################################################\n# Check an object that we will use as container element\n#####################################################################\n\n>>> from map_indexing_suite_ext import *\n>>> assert "map_indexing_suite_IntMap_entry" in dir()\n>>> assert "map_indexing_suite_TestMap_entry" in dir()\n>>> assert "map_indexing_suite_XMap_entry" in dir()\n>>> assert "map_indexing_suite_AMap_entry" in dir()\n>>> x = X(\'hi\')\n>>> x\nhi\n>>> x.reset() # a member function that modifies X\n>>> x\nreset\n>>> x.foo() # another member function that modifies X\n>>> x\nfoo\n\n# test that a string is implicitly convertible\n# to an X\n>>> x_value(\'bochi bochi\')\n\'gotya bochi bochi\'\n\n#####################################################################\n# Iteration\n#####################################################################\n>>> def print_xmap(xmap):\n...     s = \'[ \'\n...     for x in xmap:\n...         s += repr(x)\n...         s += \' \'\n...     s += \']\'\n...     print(s)\n\n#####################################################################\n# Setting (adding entries)\n#####################################################################\n>>> xm = XMap()\n>>> xm[\'joel\'] = \'apple\'\n>>> xm[\'tenji\'] = \'orange\'\n>>> xm[\'mariel\'] = \'grape\'\n>>> xm[\'tutit\'] = \'banana\'\n>>> xm[\'kim\'] = \'kiwi\'\n\n>>> print_xmap(xm)\n[ (joel, apple) (kim, kiwi) (mariel, grape) (tenji, orange) (tutit, banana) ]\n\n#####################################################################\n# Changing an entry\n#####################################################################\n>>> xm[\'joel\'] = \'pineapple\'\n>>> print_xmap(xm)\n[ (joel, pineapple) (kim, kiwi) (mariel, grape) (tenji, orange) (tutit, banana) ]\n\n#####################################################################\n# Deleting an entry\n#####################################################################\n>>> del xm[\'joel\']\n>>> print_xmap(xm)\n[ (kim, kiwi) (mariel, grape) (tenji, orange) (tutit, banana) ]\n\n#####################################################################\n# adding an entry\n#####################################################################\n>>> xm[\'joel\'] = \'apple\'\n>>> print_xmap(xm)\n[ (joel, apple) (kim, kiwi) (mariel, grape) (tenji, orange) (tutit, banana) ]\n\n#####################################################################\n# Indexing\n#####################################################################\n>>> len(xm)\n5\n>>> xm[\'joel\']\napple\n>>> xm[\'tenji\']\norange\n>>> xm[\'mariel\']\ngrape\n>>> xm[\'tutit\']\nbanana\n>>> xm[\'kim\']\nkiwi\n\n#####################################################################\n# Calling a mutating function of a container element\n#####################################################################\n>>> xm[\'joel\'].reset()\n>>> xm[\'joel\']\nreset\n\n#####################################################################\n# Copying a container element\n#####################################################################\n>>> x = X(xm[\'mariel\'])\n>>> x\ngrape\n>>> x.foo()\n>>> x\nfoo\n>>> xm[\'mariel\'] # should not be changed to \'foo\'\ngrape\n\n#####################################################################\n# Referencing a container element\n#####################################################################\n>>> x = xm[\'mariel\']\n>>> x\ngrape\n>>> x.foo()\n>>> x\nfoo\n>>> xm[\'mariel\'] # should be changed to \'foo\'\nfoo\n\n>>> xm[\'mariel\'] = \'grape\' # take it back\n>>> xm[\'joel\'] = \'apple\' # take it back\n\n#####################################################################\n# Contains\n#####################################################################\n>>> assert \'joel\' in xm\n>>> assert \'mariel\' in xm\n>>> assert \'tenji\' in xm\n>>> assert \'tutit\' in xm\n>>> assert \'kim\' in xm\n>>> assert not \'X\' in xm\n>>> assert not 12345 in xm\n\n#####################################################################\n# Some references to the container elements\n#####################################################################\n\n>>> z0 = xm[\'joel\']\n>>> z1 = xm[\'mariel\']\n>>> z2 = xm[\'tenji\']\n>>> z3 = xm[\'tutit\']\n>>> z4 = xm[\'kim\']\n\n>>> z0 # proxy\napple\n>>> z1 # proxy\ngrape\n>>> z2 # proxy\norange\n>>> z3 # proxy\nbanana\n>>> z4 # proxy\nkiwi\n\n#####################################################################\n# Delete some container element\n#####################################################################\n\n>>> del xm[\'tenji\']\n>>> print_xmap(xm)\n[ (joel, apple) (kim, kiwi) (mariel, grape) (tutit, banana) ]\n\n>>> del xm[\'tutit\']\n>>> print_xmap(xm)\n[ (joel, apple) (kim, kiwi) (mariel, grape) ]\n\n#####################################################################\n# Show that the references are still valid\n#####################################################################\n>>> z0 # proxy\napple\n>>> z1 # proxy\ngrape\n>>> z2 # proxy detached\norange\n>>> z3 # proxy detached\nbanana\n>>> z4 # proxy\nkiwi\n\n#####################################################################\n# Show that iteration allows mutable access to the elements\n#####################################################################\n>>> for x in xm:\n...     x.data().reset()\n>>> print_xmap(xm)\n[ (joel, reset) (kim, reset) (mariel, reset) ]\n\n#####################################################################\n# Some more...\n#####################################################################\n\n>>> tm = TestMap()\n>>> tm["joel"] = X("aaa")\n>>> tm["kimpo"] = X("bbb")\n>>> print_xmap(tm)\n[ (joel, aaa) (kimpo, bbb) ]\n>>> for el in tm: #doctest: +NORMALIZE_WHITESPACE\n...     print(el.key(), end=\'\')\n...     dom = el.data()\njoel kimpo\n\n#####################################################################\n# Test custom converter...\n#####################################################################\n\n>>> am = AMap()\n>>> am[3] = 4\n>>> am[3]\n4\n>>> for i in am:\n...     i.data()\n4\n\n#####################################################################\n# END....\n#####################################################################\n\n'

def run(args=None):
    if False:
        while True:
            i = 10
    import sys
    import doctest
    if args is not None:
        sys.argxm = args
    return doctest.testmod(sys.modules.get(__name__))
if __name__ == '__main__':
    print('running...')
    import sys
    status = run()[0]
    if status == 0:
        print('Done.')
    sys.exit(status)
[
    {
        "func_name": "InfBinaryParser",
        "original": "def InfBinaryParser(self, SectionString, InfSectionObject, FileName):\n    SectionMacros = {}\n    ValueList = []\n    UiBinaryList = []\n    VerBinaryList = []\n    ComBinaryList = []\n    StillCommentFalg = False\n    HeaderComments = []\n    LineComment = None\n    AllSectionContent = ''\n    for Line in SectionString:\n        BinLineContent = Line[0]\n        BinLineNo = Line[1]\n        if BinLineContent.strip() == '':\n            continue\n        CurrentLineObj = CurrentLine()\n        CurrentLineObj.FileName = FileName\n        CurrentLineObj.LineString = BinLineContent\n        CurrentLineObj.LineNo = BinLineNo\n        if BinLineContent.strip().startswith(DT.TAB_COMMENT_SPLIT):\n            if StillCommentFalg:\n                HeaderComments.append(Line)\n                AllSectionContent += BinLineContent + DT.END_OF_LINE\n                continue\n            else:\n                HeaderComments = []\n                HeaderComments.append(Line)\n                AllSectionContent += BinLineContent + DT.END_OF_LINE\n                StillCommentFalg = True\n                continue\n        else:\n            StillCommentFalg = False\n        if len(HeaderComments) >= 1:\n            LineComment = InfLineCommentObject()\n            LineCommentContent = ''\n            for Item in HeaderComments:\n                LineCommentContent += Item[0] + DT.END_OF_LINE\n            LineComment.SetHeaderComments(LineCommentContent)\n        if BinLineContent.find(DT.TAB_COMMENT_SPLIT) > -1:\n            TailComments = BinLineContent[BinLineContent.find(DT.TAB_COMMENT_SPLIT):]\n            BinLineContent = BinLineContent[:BinLineContent.find(DT.TAB_COMMENT_SPLIT)]\n            if LineComment is None:\n                LineComment = InfLineCommentObject()\n            LineComment.SetTailComments(TailComments)\n        MacroDef = MacroParser((BinLineContent, BinLineNo), FileName, DT.MODEL_EFI_BINARY_FILE, self.FileLocalMacros)\n        if MacroDef[0] is not None:\n            SectionMacros[MacroDef[0]] = MacroDef[1]\n            LineComment = None\n            HeaderComments = []\n            continue\n        LineContent = InfExpandMacro(BinLineContent, (FileName, BinLineContent, BinLineNo), self.FileLocalMacros, SectionMacros, True)\n        AllSectionContent += LineContent + DT.END_OF_LINE\n        TokenList = GetSplitValueList(LineContent, DT.TAB_VALUE_SPLIT, 1)\n        ValueList[0:len(TokenList)] = TokenList\n        ValueList[0] = ValueList[0].strip()\n        if ValueList[0] == DT.BINARY_FILE_TYPE_UNI_UI or ValueList[0] == DT.BINARY_FILE_TYPE_SEC_UI or ValueList[0] == DT.BINARY_FILE_TYPE_UI:\n            if len(ValueList) == 2:\n                TokenList = GetSplitValueList(ValueList[1], DT.TAB_VALUE_SPLIT, 2)\n                NewValueList = []\n                NewValueList.append(ValueList[0])\n                for Item in TokenList:\n                    NewValueList.append(Item)\n                UiBinaryList.append((NewValueList, LineComment, CurrentLineObj))\n        elif ValueList[0] == DT.BINARY_FILE_TYPE_UNI_VER or ValueList[0] == DT.BINARY_FILE_TYPE_SEC_VER or ValueList[0] == DT.BINARY_FILE_TYPE_VER:\n            if len(ValueList) == 2:\n                TokenList = GetSplitValueList(ValueList[1], DT.TAB_VALUE_SPLIT, 2)\n                NewValueList = []\n                NewValueList.append(ValueList[0])\n                for Item in TokenList:\n                    NewValueList.append(Item)\n                VerBinaryList.append((NewValueList, LineComment, CurrentLineObj))\n        elif len(ValueList) == 2:\n            if ValueList[0].strip() == 'SUBTYPE_GUID':\n                TokenList = GetSplitValueList(ValueList[1], DT.TAB_VALUE_SPLIT, 5)\n            else:\n                TokenList = GetSplitValueList(ValueList[1], DT.TAB_VALUE_SPLIT, 4)\n            NewValueList = []\n            NewValueList.append(ValueList[0])\n            for Item in TokenList:\n                NewValueList.append(Item)\n            ComBinaryList.append((NewValueList, LineComment, CurrentLineObj))\n        elif len(ValueList) == 1:\n            NewValueList = []\n            NewValueList.append(ValueList[0])\n            ComBinaryList.append((NewValueList, LineComment, CurrentLineObj))\n        ValueList = []\n        LineComment = None\n        TailComments = ''\n        HeaderComments = []\n        continue\n    ArchList = []\n    for Item in self.LastSectionHeaderContent:\n        if Item[1] not in ArchList:\n            ArchList.append(Item[1])\n            InfSectionObject.SetSupArchList(Item[1])\n    InfSectionObject.SetAllContent(AllSectionContent)\n    if not InfSectionObject.SetBinary(UiBinaryList, VerBinaryList, ComBinaryList, ArchList):\n        Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_INF_PARSER_MODULE_SECTION_TYPE_ERROR % '[Binaries]', File=FileName, Line=Item[3])",
        "mutated": [
            "def InfBinaryParser(self, SectionString, InfSectionObject, FileName):\n    if False:\n        i = 10\n    SectionMacros = {}\n    ValueList = []\n    UiBinaryList = []\n    VerBinaryList = []\n    ComBinaryList = []\n    StillCommentFalg = False\n    HeaderComments = []\n    LineComment = None\n    AllSectionContent = ''\n    for Line in SectionString:\n        BinLineContent = Line[0]\n        BinLineNo = Line[1]\n        if BinLineContent.strip() == '':\n            continue\n        CurrentLineObj = CurrentLine()\n        CurrentLineObj.FileName = FileName\n        CurrentLineObj.LineString = BinLineContent\n        CurrentLineObj.LineNo = BinLineNo\n        if BinLineContent.strip().startswith(DT.TAB_COMMENT_SPLIT):\n            if StillCommentFalg:\n                HeaderComments.append(Line)\n                AllSectionContent += BinLineContent + DT.END_OF_LINE\n                continue\n            else:\n                HeaderComments = []\n                HeaderComments.append(Line)\n                AllSectionContent += BinLineContent + DT.END_OF_LINE\n                StillCommentFalg = True\n                continue\n        else:\n            StillCommentFalg = False\n        if len(HeaderComments) >= 1:\n            LineComment = InfLineCommentObject()\n            LineCommentContent = ''\n            for Item in HeaderComments:\n                LineCommentContent += Item[0] + DT.END_OF_LINE\n            LineComment.SetHeaderComments(LineCommentContent)\n        if BinLineContent.find(DT.TAB_COMMENT_SPLIT) > -1:\n            TailComments = BinLineContent[BinLineContent.find(DT.TAB_COMMENT_SPLIT):]\n            BinLineContent = BinLineContent[:BinLineContent.find(DT.TAB_COMMENT_SPLIT)]\n            if LineComment is None:\n                LineComment = InfLineCommentObject()\n            LineComment.SetTailComments(TailComments)\n        MacroDef = MacroParser((BinLineContent, BinLineNo), FileName, DT.MODEL_EFI_BINARY_FILE, self.FileLocalMacros)\n        if MacroDef[0] is not None:\n            SectionMacros[MacroDef[0]] = MacroDef[1]\n            LineComment = None\n            HeaderComments = []\n            continue\n        LineContent = InfExpandMacro(BinLineContent, (FileName, BinLineContent, BinLineNo), self.FileLocalMacros, SectionMacros, True)\n        AllSectionContent += LineContent + DT.END_OF_LINE\n        TokenList = GetSplitValueList(LineContent, DT.TAB_VALUE_SPLIT, 1)\n        ValueList[0:len(TokenList)] = TokenList\n        ValueList[0] = ValueList[0].strip()\n        if ValueList[0] == DT.BINARY_FILE_TYPE_UNI_UI or ValueList[0] == DT.BINARY_FILE_TYPE_SEC_UI or ValueList[0] == DT.BINARY_FILE_TYPE_UI:\n            if len(ValueList) == 2:\n                TokenList = GetSplitValueList(ValueList[1], DT.TAB_VALUE_SPLIT, 2)\n                NewValueList = []\n                NewValueList.append(ValueList[0])\n                for Item in TokenList:\n                    NewValueList.append(Item)\n                UiBinaryList.append((NewValueList, LineComment, CurrentLineObj))\n        elif ValueList[0] == DT.BINARY_FILE_TYPE_UNI_VER or ValueList[0] == DT.BINARY_FILE_TYPE_SEC_VER or ValueList[0] == DT.BINARY_FILE_TYPE_VER:\n            if len(ValueList) == 2:\n                TokenList = GetSplitValueList(ValueList[1], DT.TAB_VALUE_SPLIT, 2)\n                NewValueList = []\n                NewValueList.append(ValueList[0])\n                for Item in TokenList:\n                    NewValueList.append(Item)\n                VerBinaryList.append((NewValueList, LineComment, CurrentLineObj))\n        elif len(ValueList) == 2:\n            if ValueList[0].strip() == 'SUBTYPE_GUID':\n                TokenList = GetSplitValueList(ValueList[1], DT.TAB_VALUE_SPLIT, 5)\n            else:\n                TokenList = GetSplitValueList(ValueList[1], DT.TAB_VALUE_SPLIT, 4)\n            NewValueList = []\n            NewValueList.append(ValueList[0])\n            for Item in TokenList:\n                NewValueList.append(Item)\n            ComBinaryList.append((NewValueList, LineComment, CurrentLineObj))\n        elif len(ValueList) == 1:\n            NewValueList = []\n            NewValueList.append(ValueList[0])\n            ComBinaryList.append((NewValueList, LineComment, CurrentLineObj))\n        ValueList = []\n        LineComment = None\n        TailComments = ''\n        HeaderComments = []\n        continue\n    ArchList = []\n    for Item in self.LastSectionHeaderContent:\n        if Item[1] not in ArchList:\n            ArchList.append(Item[1])\n            InfSectionObject.SetSupArchList(Item[1])\n    InfSectionObject.SetAllContent(AllSectionContent)\n    if not InfSectionObject.SetBinary(UiBinaryList, VerBinaryList, ComBinaryList, ArchList):\n        Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_INF_PARSER_MODULE_SECTION_TYPE_ERROR % '[Binaries]', File=FileName, Line=Item[3])",
            "def InfBinaryParser(self, SectionString, InfSectionObject, FileName):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    SectionMacros = {}\n    ValueList = []\n    UiBinaryList = []\n    VerBinaryList = []\n    ComBinaryList = []\n    StillCommentFalg = False\n    HeaderComments = []\n    LineComment = None\n    AllSectionContent = ''\n    for Line in SectionString:\n        BinLineContent = Line[0]\n        BinLineNo = Line[1]\n        if BinLineContent.strip() == '':\n            continue\n        CurrentLineObj = CurrentLine()\n        CurrentLineObj.FileName = FileName\n        CurrentLineObj.LineString = BinLineContent\n        CurrentLineObj.LineNo = BinLineNo\n        if BinLineContent.strip().startswith(DT.TAB_COMMENT_SPLIT):\n            if StillCommentFalg:\n                HeaderComments.append(Line)\n                AllSectionContent += BinLineContent + DT.END_OF_LINE\n                continue\n            else:\n                HeaderComments = []\n                HeaderComments.append(Line)\n                AllSectionContent += BinLineContent + DT.END_OF_LINE\n                StillCommentFalg = True\n                continue\n        else:\n            StillCommentFalg = False\n        if len(HeaderComments) >= 1:\n            LineComment = InfLineCommentObject()\n            LineCommentContent = ''\n            for Item in HeaderComments:\n                LineCommentContent += Item[0] + DT.END_OF_LINE\n            LineComment.SetHeaderComments(LineCommentContent)\n        if BinLineContent.find(DT.TAB_COMMENT_SPLIT) > -1:\n            TailComments = BinLineContent[BinLineContent.find(DT.TAB_COMMENT_SPLIT):]\n            BinLineContent = BinLineContent[:BinLineContent.find(DT.TAB_COMMENT_SPLIT)]\n            if LineComment is None:\n                LineComment = InfLineCommentObject()\n            LineComment.SetTailComments(TailComments)\n        MacroDef = MacroParser((BinLineContent, BinLineNo), FileName, DT.MODEL_EFI_BINARY_FILE, self.FileLocalMacros)\n        if MacroDef[0] is not None:\n            SectionMacros[MacroDef[0]] = MacroDef[1]\n            LineComment = None\n            HeaderComments = []\n            continue\n        LineContent = InfExpandMacro(BinLineContent, (FileName, BinLineContent, BinLineNo), self.FileLocalMacros, SectionMacros, True)\n        AllSectionContent += LineContent + DT.END_OF_LINE\n        TokenList = GetSplitValueList(LineContent, DT.TAB_VALUE_SPLIT, 1)\n        ValueList[0:len(TokenList)] = TokenList\n        ValueList[0] = ValueList[0].strip()\n        if ValueList[0] == DT.BINARY_FILE_TYPE_UNI_UI or ValueList[0] == DT.BINARY_FILE_TYPE_SEC_UI or ValueList[0] == DT.BINARY_FILE_TYPE_UI:\n            if len(ValueList) == 2:\n                TokenList = GetSplitValueList(ValueList[1], DT.TAB_VALUE_SPLIT, 2)\n                NewValueList = []\n                NewValueList.append(ValueList[0])\n                for Item in TokenList:\n                    NewValueList.append(Item)\n                UiBinaryList.append((NewValueList, LineComment, CurrentLineObj))\n        elif ValueList[0] == DT.BINARY_FILE_TYPE_UNI_VER or ValueList[0] == DT.BINARY_FILE_TYPE_SEC_VER or ValueList[0] == DT.BINARY_FILE_TYPE_VER:\n            if len(ValueList) == 2:\n                TokenList = GetSplitValueList(ValueList[1], DT.TAB_VALUE_SPLIT, 2)\n                NewValueList = []\n                NewValueList.append(ValueList[0])\n                for Item in TokenList:\n                    NewValueList.append(Item)\n                VerBinaryList.append((NewValueList, LineComment, CurrentLineObj))\n        elif len(ValueList) == 2:\n            if ValueList[0].strip() == 'SUBTYPE_GUID':\n                TokenList = GetSplitValueList(ValueList[1], DT.TAB_VALUE_SPLIT, 5)\n            else:\n                TokenList = GetSplitValueList(ValueList[1], DT.TAB_VALUE_SPLIT, 4)\n            NewValueList = []\n            NewValueList.append(ValueList[0])\n            for Item in TokenList:\n                NewValueList.append(Item)\n            ComBinaryList.append((NewValueList, LineComment, CurrentLineObj))\n        elif len(ValueList) == 1:\n            NewValueList = []\n            NewValueList.append(ValueList[0])\n            ComBinaryList.append((NewValueList, LineComment, CurrentLineObj))\n        ValueList = []\n        LineComment = None\n        TailComments = ''\n        HeaderComments = []\n        continue\n    ArchList = []\n    for Item in self.LastSectionHeaderContent:\n        if Item[1] not in ArchList:\n            ArchList.append(Item[1])\n            InfSectionObject.SetSupArchList(Item[1])\n    InfSectionObject.SetAllContent(AllSectionContent)\n    if not InfSectionObject.SetBinary(UiBinaryList, VerBinaryList, ComBinaryList, ArchList):\n        Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_INF_PARSER_MODULE_SECTION_TYPE_ERROR % '[Binaries]', File=FileName, Line=Item[3])",
            "def InfBinaryParser(self, SectionString, InfSectionObject, FileName):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    SectionMacros = {}\n    ValueList = []\n    UiBinaryList = []\n    VerBinaryList = []\n    ComBinaryList = []\n    StillCommentFalg = False\n    HeaderComments = []\n    LineComment = None\n    AllSectionContent = ''\n    for Line in SectionString:\n        BinLineContent = Line[0]\n        BinLineNo = Line[1]\n        if BinLineContent.strip() == '':\n            continue\n        CurrentLineObj = CurrentLine()\n        CurrentLineObj.FileName = FileName\n        CurrentLineObj.LineString = BinLineContent\n        CurrentLineObj.LineNo = BinLineNo\n        if BinLineContent.strip().startswith(DT.TAB_COMMENT_SPLIT):\n            if StillCommentFalg:\n                HeaderComments.append(Line)\n                AllSectionContent += BinLineContent + DT.END_OF_LINE\n                continue\n            else:\n                HeaderComments = []\n                HeaderComments.append(Line)\n                AllSectionContent += BinLineContent + DT.END_OF_LINE\n                StillCommentFalg = True\n                continue\n        else:\n            StillCommentFalg = False\n        if len(HeaderComments) >= 1:\n            LineComment = InfLineCommentObject()\n            LineCommentContent = ''\n            for Item in HeaderComments:\n                LineCommentContent += Item[0] + DT.END_OF_LINE\n            LineComment.SetHeaderComments(LineCommentContent)\n        if BinLineContent.find(DT.TAB_COMMENT_SPLIT) > -1:\n            TailComments = BinLineContent[BinLineContent.find(DT.TAB_COMMENT_SPLIT):]\n            BinLineContent = BinLineContent[:BinLineContent.find(DT.TAB_COMMENT_SPLIT)]\n            if LineComment is None:\n                LineComment = InfLineCommentObject()\n            LineComment.SetTailComments(TailComments)\n        MacroDef = MacroParser((BinLineContent, BinLineNo), FileName, DT.MODEL_EFI_BINARY_FILE, self.FileLocalMacros)\n        if MacroDef[0] is not None:\n            SectionMacros[MacroDef[0]] = MacroDef[1]\n            LineComment = None\n            HeaderComments = []\n            continue\n        LineContent = InfExpandMacro(BinLineContent, (FileName, BinLineContent, BinLineNo), self.FileLocalMacros, SectionMacros, True)\n        AllSectionContent += LineContent + DT.END_OF_LINE\n        TokenList = GetSplitValueList(LineContent, DT.TAB_VALUE_SPLIT, 1)\n        ValueList[0:len(TokenList)] = TokenList\n        ValueList[0] = ValueList[0].strip()\n        if ValueList[0] == DT.BINARY_FILE_TYPE_UNI_UI or ValueList[0] == DT.BINARY_FILE_TYPE_SEC_UI or ValueList[0] == DT.BINARY_FILE_TYPE_UI:\n            if len(ValueList) == 2:\n                TokenList = GetSplitValueList(ValueList[1], DT.TAB_VALUE_SPLIT, 2)\n                NewValueList = []\n                NewValueList.append(ValueList[0])\n                for Item in TokenList:\n                    NewValueList.append(Item)\n                UiBinaryList.append((NewValueList, LineComment, CurrentLineObj))\n        elif ValueList[0] == DT.BINARY_FILE_TYPE_UNI_VER or ValueList[0] == DT.BINARY_FILE_TYPE_SEC_VER or ValueList[0] == DT.BINARY_FILE_TYPE_VER:\n            if len(ValueList) == 2:\n                TokenList = GetSplitValueList(ValueList[1], DT.TAB_VALUE_SPLIT, 2)\n                NewValueList = []\n                NewValueList.append(ValueList[0])\n                for Item in TokenList:\n                    NewValueList.append(Item)\n                VerBinaryList.append((NewValueList, LineComment, CurrentLineObj))\n        elif len(ValueList) == 2:\n            if ValueList[0].strip() == 'SUBTYPE_GUID':\n                TokenList = GetSplitValueList(ValueList[1], DT.TAB_VALUE_SPLIT, 5)\n            else:\n                TokenList = GetSplitValueList(ValueList[1], DT.TAB_VALUE_SPLIT, 4)\n            NewValueList = []\n            NewValueList.append(ValueList[0])\n            for Item in TokenList:\n                NewValueList.append(Item)\n            ComBinaryList.append((NewValueList, LineComment, CurrentLineObj))\n        elif len(ValueList) == 1:\n            NewValueList = []\n            NewValueList.append(ValueList[0])\n            ComBinaryList.append((NewValueList, LineComment, CurrentLineObj))\n        ValueList = []\n        LineComment = None\n        TailComments = ''\n        HeaderComments = []\n        continue\n    ArchList = []\n    for Item in self.LastSectionHeaderContent:\n        if Item[1] not in ArchList:\n            ArchList.append(Item[1])\n            InfSectionObject.SetSupArchList(Item[1])\n    InfSectionObject.SetAllContent(AllSectionContent)\n    if not InfSectionObject.SetBinary(UiBinaryList, VerBinaryList, ComBinaryList, ArchList):\n        Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_INF_PARSER_MODULE_SECTION_TYPE_ERROR % '[Binaries]', File=FileName, Line=Item[3])",
            "def InfBinaryParser(self, SectionString, InfSectionObject, FileName):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    SectionMacros = {}\n    ValueList = []\n    UiBinaryList = []\n    VerBinaryList = []\n    ComBinaryList = []\n    StillCommentFalg = False\n    HeaderComments = []\n    LineComment = None\n    AllSectionContent = ''\n    for Line in SectionString:\n        BinLineContent = Line[0]\n        BinLineNo = Line[1]\n        if BinLineContent.strip() == '':\n            continue\n        CurrentLineObj = CurrentLine()\n        CurrentLineObj.FileName = FileName\n        CurrentLineObj.LineString = BinLineContent\n        CurrentLineObj.LineNo = BinLineNo\n        if BinLineContent.strip().startswith(DT.TAB_COMMENT_SPLIT):\n            if StillCommentFalg:\n                HeaderComments.append(Line)\n                AllSectionContent += BinLineContent + DT.END_OF_LINE\n                continue\n            else:\n                HeaderComments = []\n                HeaderComments.append(Line)\n                AllSectionContent += BinLineContent + DT.END_OF_LINE\n                StillCommentFalg = True\n                continue\n        else:\n            StillCommentFalg = False\n        if len(HeaderComments) >= 1:\n            LineComment = InfLineCommentObject()\n            LineCommentContent = ''\n            for Item in HeaderComments:\n                LineCommentContent += Item[0] + DT.END_OF_LINE\n            LineComment.SetHeaderComments(LineCommentContent)\n        if BinLineContent.find(DT.TAB_COMMENT_SPLIT) > -1:\n            TailComments = BinLineContent[BinLineContent.find(DT.TAB_COMMENT_SPLIT):]\n            BinLineContent = BinLineContent[:BinLineContent.find(DT.TAB_COMMENT_SPLIT)]\n            if LineComment is None:\n                LineComment = InfLineCommentObject()\n            LineComment.SetTailComments(TailComments)\n        MacroDef = MacroParser((BinLineContent, BinLineNo), FileName, DT.MODEL_EFI_BINARY_FILE, self.FileLocalMacros)\n        if MacroDef[0] is not None:\n            SectionMacros[MacroDef[0]] = MacroDef[1]\n            LineComment = None\n            HeaderComments = []\n            continue\n        LineContent = InfExpandMacro(BinLineContent, (FileName, BinLineContent, BinLineNo), self.FileLocalMacros, SectionMacros, True)\n        AllSectionContent += LineContent + DT.END_OF_LINE\n        TokenList = GetSplitValueList(LineContent, DT.TAB_VALUE_SPLIT, 1)\n        ValueList[0:len(TokenList)] = TokenList\n        ValueList[0] = ValueList[0].strip()\n        if ValueList[0] == DT.BINARY_FILE_TYPE_UNI_UI or ValueList[0] == DT.BINARY_FILE_TYPE_SEC_UI or ValueList[0] == DT.BINARY_FILE_TYPE_UI:\n            if len(ValueList) == 2:\n                TokenList = GetSplitValueList(ValueList[1], DT.TAB_VALUE_SPLIT, 2)\n                NewValueList = []\n                NewValueList.append(ValueList[0])\n                for Item in TokenList:\n                    NewValueList.append(Item)\n                UiBinaryList.append((NewValueList, LineComment, CurrentLineObj))\n        elif ValueList[0] == DT.BINARY_FILE_TYPE_UNI_VER or ValueList[0] == DT.BINARY_FILE_TYPE_SEC_VER or ValueList[0] == DT.BINARY_FILE_TYPE_VER:\n            if len(ValueList) == 2:\n                TokenList = GetSplitValueList(ValueList[1], DT.TAB_VALUE_SPLIT, 2)\n                NewValueList = []\n                NewValueList.append(ValueList[0])\n                for Item in TokenList:\n                    NewValueList.append(Item)\n                VerBinaryList.append((NewValueList, LineComment, CurrentLineObj))\n        elif len(ValueList) == 2:\n            if ValueList[0].strip() == 'SUBTYPE_GUID':\n                TokenList = GetSplitValueList(ValueList[1], DT.TAB_VALUE_SPLIT, 5)\n            else:\n                TokenList = GetSplitValueList(ValueList[1], DT.TAB_VALUE_SPLIT, 4)\n            NewValueList = []\n            NewValueList.append(ValueList[0])\n            for Item in TokenList:\n                NewValueList.append(Item)\n            ComBinaryList.append((NewValueList, LineComment, CurrentLineObj))\n        elif len(ValueList) == 1:\n            NewValueList = []\n            NewValueList.append(ValueList[0])\n            ComBinaryList.append((NewValueList, LineComment, CurrentLineObj))\n        ValueList = []\n        LineComment = None\n        TailComments = ''\n        HeaderComments = []\n        continue\n    ArchList = []\n    for Item in self.LastSectionHeaderContent:\n        if Item[1] not in ArchList:\n            ArchList.append(Item[1])\n            InfSectionObject.SetSupArchList(Item[1])\n    InfSectionObject.SetAllContent(AllSectionContent)\n    if not InfSectionObject.SetBinary(UiBinaryList, VerBinaryList, ComBinaryList, ArchList):\n        Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_INF_PARSER_MODULE_SECTION_TYPE_ERROR % '[Binaries]', File=FileName, Line=Item[3])",
            "def InfBinaryParser(self, SectionString, InfSectionObject, FileName):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    SectionMacros = {}\n    ValueList = []\n    UiBinaryList = []\n    VerBinaryList = []\n    ComBinaryList = []\n    StillCommentFalg = False\n    HeaderComments = []\n    LineComment = None\n    AllSectionContent = ''\n    for Line in SectionString:\n        BinLineContent = Line[0]\n        BinLineNo = Line[1]\n        if BinLineContent.strip() == '':\n            continue\n        CurrentLineObj = CurrentLine()\n        CurrentLineObj.FileName = FileName\n        CurrentLineObj.LineString = BinLineContent\n        CurrentLineObj.LineNo = BinLineNo\n        if BinLineContent.strip().startswith(DT.TAB_COMMENT_SPLIT):\n            if StillCommentFalg:\n                HeaderComments.append(Line)\n                AllSectionContent += BinLineContent + DT.END_OF_LINE\n                continue\n            else:\n                HeaderComments = []\n                HeaderComments.append(Line)\n                AllSectionContent += BinLineContent + DT.END_OF_LINE\n                StillCommentFalg = True\n                continue\n        else:\n            StillCommentFalg = False\n        if len(HeaderComments) >= 1:\n            LineComment = InfLineCommentObject()\n            LineCommentContent = ''\n            for Item in HeaderComments:\n                LineCommentContent += Item[0] + DT.END_OF_LINE\n            LineComment.SetHeaderComments(LineCommentContent)\n        if BinLineContent.find(DT.TAB_COMMENT_SPLIT) > -1:\n            TailComments = BinLineContent[BinLineContent.find(DT.TAB_COMMENT_SPLIT):]\n            BinLineContent = BinLineContent[:BinLineContent.find(DT.TAB_COMMENT_SPLIT)]\n            if LineComment is None:\n                LineComment = InfLineCommentObject()\n            LineComment.SetTailComments(TailComments)\n        MacroDef = MacroParser((BinLineContent, BinLineNo), FileName, DT.MODEL_EFI_BINARY_FILE, self.FileLocalMacros)\n        if MacroDef[0] is not None:\n            SectionMacros[MacroDef[0]] = MacroDef[1]\n            LineComment = None\n            HeaderComments = []\n            continue\n        LineContent = InfExpandMacro(BinLineContent, (FileName, BinLineContent, BinLineNo), self.FileLocalMacros, SectionMacros, True)\n        AllSectionContent += LineContent + DT.END_OF_LINE\n        TokenList = GetSplitValueList(LineContent, DT.TAB_VALUE_SPLIT, 1)\n        ValueList[0:len(TokenList)] = TokenList\n        ValueList[0] = ValueList[0].strip()\n        if ValueList[0] == DT.BINARY_FILE_TYPE_UNI_UI or ValueList[0] == DT.BINARY_FILE_TYPE_SEC_UI or ValueList[0] == DT.BINARY_FILE_TYPE_UI:\n            if len(ValueList) == 2:\n                TokenList = GetSplitValueList(ValueList[1], DT.TAB_VALUE_SPLIT, 2)\n                NewValueList = []\n                NewValueList.append(ValueList[0])\n                for Item in TokenList:\n                    NewValueList.append(Item)\n                UiBinaryList.append((NewValueList, LineComment, CurrentLineObj))\n        elif ValueList[0] == DT.BINARY_FILE_TYPE_UNI_VER or ValueList[0] == DT.BINARY_FILE_TYPE_SEC_VER or ValueList[0] == DT.BINARY_FILE_TYPE_VER:\n            if len(ValueList) == 2:\n                TokenList = GetSplitValueList(ValueList[1], DT.TAB_VALUE_SPLIT, 2)\n                NewValueList = []\n                NewValueList.append(ValueList[0])\n                for Item in TokenList:\n                    NewValueList.append(Item)\n                VerBinaryList.append((NewValueList, LineComment, CurrentLineObj))\n        elif len(ValueList) == 2:\n            if ValueList[0].strip() == 'SUBTYPE_GUID':\n                TokenList = GetSplitValueList(ValueList[1], DT.TAB_VALUE_SPLIT, 5)\n            else:\n                TokenList = GetSplitValueList(ValueList[1], DT.TAB_VALUE_SPLIT, 4)\n            NewValueList = []\n            NewValueList.append(ValueList[0])\n            for Item in TokenList:\n                NewValueList.append(Item)\n            ComBinaryList.append((NewValueList, LineComment, CurrentLineObj))\n        elif len(ValueList) == 1:\n            NewValueList = []\n            NewValueList.append(ValueList[0])\n            ComBinaryList.append((NewValueList, LineComment, CurrentLineObj))\n        ValueList = []\n        LineComment = None\n        TailComments = ''\n        HeaderComments = []\n        continue\n    ArchList = []\n    for Item in self.LastSectionHeaderContent:\n        if Item[1] not in ArchList:\n            ArchList.append(Item[1])\n            InfSectionObject.SetSupArchList(Item[1])\n    InfSectionObject.SetAllContent(AllSectionContent)\n    if not InfSectionObject.SetBinary(UiBinaryList, VerBinaryList, ComBinaryList, ArchList):\n        Logger.Error('InfParser', FORMAT_INVALID, ST.ERR_INF_PARSER_MODULE_SECTION_TYPE_ERROR % '[Binaries]', File=FileName, Line=Item[3])"
        ]
    }
]
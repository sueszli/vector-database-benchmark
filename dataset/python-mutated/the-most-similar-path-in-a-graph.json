[
    {
        "func_name": "mostSimilar",
        "original": "def mostSimilar(self, n, roads, names, targetPath):\n    \"\"\"\n        :type n: int\n        :type roads: List[List[int]]\n        :type names: List[str]\n        :type targetPath: List[str]\n        :rtype: List[int]\n        \"\"\"\n    adj = [[] for _ in xrange(n)]\n    for (u, v) in roads:\n        adj[u].append(v)\n        adj[v].append(u)\n    dp = [[0] * n for _ in xrange(len(targetPath) + 1)]\n    for i in xrange(1, len(targetPath) + 1):\n        for v in xrange(n):\n            dp[i][v] = (names[v] != targetPath[i - 1]) + min((dp[i - 1][u] for u in adj[v]))\n    path = [dp[-1].index(min(dp[-1]))]\n    for i in reversed(xrange(2, len(targetPath) + 1)):\n        for u in adj[path[-1]]:\n            if dp[i - 1][u] + (names[path[-1]] != targetPath[i - 1]) == dp[i][path[-1]]:\n                path.append(u)\n                break\n    return path[::-1]",
        "mutated": [
            "def mostSimilar(self, n, roads, names, targetPath):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type roads: List[List[int]]\\n        :type names: List[str]\\n        :type targetPath: List[str]\\n        :rtype: List[int]\\n        '\n    adj = [[] for _ in xrange(n)]\n    for (u, v) in roads:\n        adj[u].append(v)\n        adj[v].append(u)\n    dp = [[0] * n for _ in xrange(len(targetPath) + 1)]\n    for i in xrange(1, len(targetPath) + 1):\n        for v in xrange(n):\n            dp[i][v] = (names[v] != targetPath[i - 1]) + min((dp[i - 1][u] for u in adj[v]))\n    path = [dp[-1].index(min(dp[-1]))]\n    for i in reversed(xrange(2, len(targetPath) + 1)):\n        for u in adj[path[-1]]:\n            if dp[i - 1][u] + (names[path[-1]] != targetPath[i - 1]) == dp[i][path[-1]]:\n                path.append(u)\n                break\n    return path[::-1]",
            "def mostSimilar(self, n, roads, names, targetPath):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type roads: List[List[int]]\\n        :type names: List[str]\\n        :type targetPath: List[str]\\n        :rtype: List[int]\\n        '\n    adj = [[] for _ in xrange(n)]\n    for (u, v) in roads:\n        adj[u].append(v)\n        adj[v].append(u)\n    dp = [[0] * n for _ in xrange(len(targetPath) + 1)]\n    for i in xrange(1, len(targetPath) + 1):\n        for v in xrange(n):\n            dp[i][v] = (names[v] != targetPath[i - 1]) + min((dp[i - 1][u] for u in adj[v]))\n    path = [dp[-1].index(min(dp[-1]))]\n    for i in reversed(xrange(2, len(targetPath) + 1)):\n        for u in adj[path[-1]]:\n            if dp[i - 1][u] + (names[path[-1]] != targetPath[i - 1]) == dp[i][path[-1]]:\n                path.append(u)\n                break\n    return path[::-1]",
            "def mostSimilar(self, n, roads, names, targetPath):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type roads: List[List[int]]\\n        :type names: List[str]\\n        :type targetPath: List[str]\\n        :rtype: List[int]\\n        '\n    adj = [[] for _ in xrange(n)]\n    for (u, v) in roads:\n        adj[u].append(v)\n        adj[v].append(u)\n    dp = [[0] * n for _ in xrange(len(targetPath) + 1)]\n    for i in xrange(1, len(targetPath) + 1):\n        for v in xrange(n):\n            dp[i][v] = (names[v] != targetPath[i - 1]) + min((dp[i - 1][u] for u in adj[v]))\n    path = [dp[-1].index(min(dp[-1]))]\n    for i in reversed(xrange(2, len(targetPath) + 1)):\n        for u in adj[path[-1]]:\n            if dp[i - 1][u] + (names[path[-1]] != targetPath[i - 1]) == dp[i][path[-1]]:\n                path.append(u)\n                break\n    return path[::-1]",
            "def mostSimilar(self, n, roads, names, targetPath):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type roads: List[List[int]]\\n        :type names: List[str]\\n        :type targetPath: List[str]\\n        :rtype: List[int]\\n        '\n    adj = [[] for _ in xrange(n)]\n    for (u, v) in roads:\n        adj[u].append(v)\n        adj[v].append(u)\n    dp = [[0] * n for _ in xrange(len(targetPath) + 1)]\n    for i in xrange(1, len(targetPath) + 1):\n        for v in xrange(n):\n            dp[i][v] = (names[v] != targetPath[i - 1]) + min((dp[i - 1][u] for u in adj[v]))\n    path = [dp[-1].index(min(dp[-1]))]\n    for i in reversed(xrange(2, len(targetPath) + 1)):\n        for u in adj[path[-1]]:\n            if dp[i - 1][u] + (names[path[-1]] != targetPath[i - 1]) == dp[i][path[-1]]:\n                path.append(u)\n                break\n    return path[::-1]",
            "def mostSimilar(self, n, roads, names, targetPath):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type roads: List[List[int]]\\n        :type names: List[str]\\n        :type targetPath: List[str]\\n        :rtype: List[int]\\n        '\n    adj = [[] for _ in xrange(n)]\n    for (u, v) in roads:\n        adj[u].append(v)\n        adj[v].append(u)\n    dp = [[0] * n for _ in xrange(len(targetPath) + 1)]\n    for i in xrange(1, len(targetPath) + 1):\n        for v in xrange(n):\n            dp[i][v] = (names[v] != targetPath[i - 1]) + min((dp[i - 1][u] for u in adj[v]))\n    path = [dp[-1].index(min(dp[-1]))]\n    for i in reversed(xrange(2, len(targetPath) + 1)):\n        for u in adj[path[-1]]:\n            if dp[i - 1][u] + (names[path[-1]] != targetPath[i - 1]) == dp[i][path[-1]]:\n                path.append(u)\n                break\n    return path[::-1]"
        ]
    }
]
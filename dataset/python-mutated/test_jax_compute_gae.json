[
    {
        "func_name": "compute_gae_once",
        "original": "def compute_gae_once(carry, inp, gamma, gae_lambda):\n    advantages = carry\n    (nextdone, nextvalues, curvalues, reward) = inp\n    nextnonterminal = 1.0 - nextdone\n    delta = reward + gamma * nextvalues * nextnonterminal - curvalues\n    advantages = delta + gamma * gae_lambda * nextnonterminal * advantages\n    return (advantages, advantages)",
        "mutated": [
            "def compute_gae_once(carry, inp, gamma, gae_lambda):\n    if False:\n        i = 10\n    advantages = carry\n    (nextdone, nextvalues, curvalues, reward) = inp\n    nextnonterminal = 1.0 - nextdone\n    delta = reward + gamma * nextvalues * nextnonterminal - curvalues\n    advantages = delta + gamma * gae_lambda * nextnonterminal * advantages\n    return (advantages, advantages)",
            "def compute_gae_once(carry, inp, gamma, gae_lambda):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    advantages = carry\n    (nextdone, nextvalues, curvalues, reward) = inp\n    nextnonterminal = 1.0 - nextdone\n    delta = reward + gamma * nextvalues * nextnonterminal - curvalues\n    advantages = delta + gamma * gae_lambda * nextnonterminal * advantages\n    return (advantages, advantages)",
            "def compute_gae_once(carry, inp, gamma, gae_lambda):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    advantages = carry\n    (nextdone, nextvalues, curvalues, reward) = inp\n    nextnonterminal = 1.0 - nextdone\n    delta = reward + gamma * nextvalues * nextnonterminal - curvalues\n    advantages = delta + gamma * gae_lambda * nextnonterminal * advantages\n    return (advantages, advantages)",
            "def compute_gae_once(carry, inp, gamma, gae_lambda):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    advantages = carry\n    (nextdone, nextvalues, curvalues, reward) = inp\n    nextnonterminal = 1.0 - nextdone\n    delta = reward + gamma * nextvalues * nextnonterminal - curvalues\n    advantages = delta + gamma * gae_lambda * nextnonterminal * advantages\n    return (advantages, advantages)",
            "def compute_gae_once(carry, inp, gamma, gae_lambda):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    advantages = carry\n    (nextdone, nextvalues, curvalues, reward) = inp\n    nextnonterminal = 1.0 - nextdone\n    delta = reward + gamma * nextvalues * nextnonterminal - curvalues\n    advantages = delta + gamma * gae_lambda * nextnonterminal * advantages\n    return (advantages, advantages)"
        ]
    },
    {
        "func_name": "compute_gae_scan",
        "original": "def compute_gae_scan(next_done: np.ndarray, next_value: np.ndarray, storage: Storage, num_envs: int, compute_gae_once_fn: Callable):\n    advantages = jnp.zeros((num_envs,))\n    dones = jnp.concatenate([storage.dones, next_done[None, :]], axis=0)\n    values = jnp.concatenate([storage.values, next_value[None, :]], axis=0)\n    (_, advantages) = jax.lax.scan(compute_gae_once_fn, advantages, (dones[1:], values[1:], values[:-1], storage.rewards), reverse=True)\n    storage = storage.replace(advantages=advantages, returns=advantages + storage.values)\n    return storage",
        "mutated": [
            "def compute_gae_scan(next_done: np.ndarray, next_value: np.ndarray, storage: Storage, num_envs: int, compute_gae_once_fn: Callable):\n    if False:\n        i = 10\n    advantages = jnp.zeros((num_envs,))\n    dones = jnp.concatenate([storage.dones, next_done[None, :]], axis=0)\n    values = jnp.concatenate([storage.values, next_value[None, :]], axis=0)\n    (_, advantages) = jax.lax.scan(compute_gae_once_fn, advantages, (dones[1:], values[1:], values[:-1], storage.rewards), reverse=True)\n    storage = storage.replace(advantages=advantages, returns=advantages + storage.values)\n    return storage",
            "def compute_gae_scan(next_done: np.ndarray, next_value: np.ndarray, storage: Storage, num_envs: int, compute_gae_once_fn: Callable):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    advantages = jnp.zeros((num_envs,))\n    dones = jnp.concatenate([storage.dones, next_done[None, :]], axis=0)\n    values = jnp.concatenate([storage.values, next_value[None, :]], axis=0)\n    (_, advantages) = jax.lax.scan(compute_gae_once_fn, advantages, (dones[1:], values[1:], values[:-1], storage.rewards), reverse=True)\n    storage = storage.replace(advantages=advantages, returns=advantages + storage.values)\n    return storage",
            "def compute_gae_scan(next_done: np.ndarray, next_value: np.ndarray, storage: Storage, num_envs: int, compute_gae_once_fn: Callable):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    advantages = jnp.zeros((num_envs,))\n    dones = jnp.concatenate([storage.dones, next_done[None, :]], axis=0)\n    values = jnp.concatenate([storage.values, next_value[None, :]], axis=0)\n    (_, advantages) = jax.lax.scan(compute_gae_once_fn, advantages, (dones[1:], values[1:], values[:-1], storage.rewards), reverse=True)\n    storage = storage.replace(advantages=advantages, returns=advantages + storage.values)\n    return storage",
            "def compute_gae_scan(next_done: np.ndarray, next_value: np.ndarray, storage: Storage, num_envs: int, compute_gae_once_fn: Callable):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    advantages = jnp.zeros((num_envs,))\n    dones = jnp.concatenate([storage.dones, next_done[None, :]], axis=0)\n    values = jnp.concatenate([storage.values, next_value[None, :]], axis=0)\n    (_, advantages) = jax.lax.scan(compute_gae_once_fn, advantages, (dones[1:], values[1:], values[:-1], storage.rewards), reverse=True)\n    storage = storage.replace(advantages=advantages, returns=advantages + storage.values)\n    return storage",
            "def compute_gae_scan(next_done: np.ndarray, next_value: np.ndarray, storage: Storage, num_envs: int, compute_gae_once_fn: Callable):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    advantages = jnp.zeros((num_envs,))\n    dones = jnp.concatenate([storage.dones, next_done[None, :]], axis=0)\n    values = jnp.concatenate([storage.values, next_value[None, :]], axis=0)\n    (_, advantages) = jax.lax.scan(compute_gae_once_fn, advantages, (dones[1:], values[1:], values[:-1], storage.rewards), reverse=True)\n    storage = storage.replace(advantages=advantages, returns=advantages + storage.values)\n    return storage"
        ]
    },
    {
        "func_name": "compute_gae_python_loop",
        "original": "def compute_gae_python_loop(next_done: np.ndarray, next_value: np.ndarray, storage: Storage, num_steps: int, gamma: float, gae_lambda: float):\n    storage = storage.replace(advantages=storage.advantages.at[:].set(0.0))\n    lastgaelam = 0\n    for t in reversed(range(num_steps)):\n        if t == num_steps - 1:\n            nextnonterminal = 1.0 - next_done\n            nextvalues = next_value\n        else:\n            nextnonterminal = 1.0 - storage.dones[t + 1]\n            nextvalues = storage.values[t + 1]\n        delta = storage.rewards[t] + gamma * nextvalues * nextnonterminal - storage.values[t]\n        lastgaelam = delta + gamma * gae_lambda * nextnonterminal * lastgaelam\n        storage = storage.replace(advantages=storage.advantages.at[t].set(lastgaelam))\n    storage = storage.replace(returns=storage.advantages + storage.values)\n    return storage",
        "mutated": [
            "def compute_gae_python_loop(next_done: np.ndarray, next_value: np.ndarray, storage: Storage, num_steps: int, gamma: float, gae_lambda: float):\n    if False:\n        i = 10\n    storage = storage.replace(advantages=storage.advantages.at[:].set(0.0))\n    lastgaelam = 0\n    for t in reversed(range(num_steps)):\n        if t == num_steps - 1:\n            nextnonterminal = 1.0 - next_done\n            nextvalues = next_value\n        else:\n            nextnonterminal = 1.0 - storage.dones[t + 1]\n            nextvalues = storage.values[t + 1]\n        delta = storage.rewards[t] + gamma * nextvalues * nextnonterminal - storage.values[t]\n        lastgaelam = delta + gamma * gae_lambda * nextnonterminal * lastgaelam\n        storage = storage.replace(advantages=storage.advantages.at[t].set(lastgaelam))\n    storage = storage.replace(returns=storage.advantages + storage.values)\n    return storage",
            "def compute_gae_python_loop(next_done: np.ndarray, next_value: np.ndarray, storage: Storage, num_steps: int, gamma: float, gae_lambda: float):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    storage = storage.replace(advantages=storage.advantages.at[:].set(0.0))\n    lastgaelam = 0\n    for t in reversed(range(num_steps)):\n        if t == num_steps - 1:\n            nextnonterminal = 1.0 - next_done\n            nextvalues = next_value\n        else:\n            nextnonterminal = 1.0 - storage.dones[t + 1]\n            nextvalues = storage.values[t + 1]\n        delta = storage.rewards[t] + gamma * nextvalues * nextnonterminal - storage.values[t]\n        lastgaelam = delta + gamma * gae_lambda * nextnonterminal * lastgaelam\n        storage = storage.replace(advantages=storage.advantages.at[t].set(lastgaelam))\n    storage = storage.replace(returns=storage.advantages + storage.values)\n    return storage",
            "def compute_gae_python_loop(next_done: np.ndarray, next_value: np.ndarray, storage: Storage, num_steps: int, gamma: float, gae_lambda: float):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    storage = storage.replace(advantages=storage.advantages.at[:].set(0.0))\n    lastgaelam = 0\n    for t in reversed(range(num_steps)):\n        if t == num_steps - 1:\n            nextnonterminal = 1.0 - next_done\n            nextvalues = next_value\n        else:\n            nextnonterminal = 1.0 - storage.dones[t + 1]\n            nextvalues = storage.values[t + 1]\n        delta = storage.rewards[t] + gamma * nextvalues * nextnonterminal - storage.values[t]\n        lastgaelam = delta + gamma * gae_lambda * nextnonterminal * lastgaelam\n        storage = storage.replace(advantages=storage.advantages.at[t].set(lastgaelam))\n    storage = storage.replace(returns=storage.advantages + storage.values)\n    return storage",
            "def compute_gae_python_loop(next_done: np.ndarray, next_value: np.ndarray, storage: Storage, num_steps: int, gamma: float, gae_lambda: float):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    storage = storage.replace(advantages=storage.advantages.at[:].set(0.0))\n    lastgaelam = 0\n    for t in reversed(range(num_steps)):\n        if t == num_steps - 1:\n            nextnonterminal = 1.0 - next_done\n            nextvalues = next_value\n        else:\n            nextnonterminal = 1.0 - storage.dones[t + 1]\n            nextvalues = storage.values[t + 1]\n        delta = storage.rewards[t] + gamma * nextvalues * nextnonterminal - storage.values[t]\n        lastgaelam = delta + gamma * gae_lambda * nextnonterminal * lastgaelam\n        storage = storage.replace(advantages=storage.advantages.at[t].set(lastgaelam))\n    storage = storage.replace(returns=storage.advantages + storage.values)\n    return storage",
            "def compute_gae_python_loop(next_done: np.ndarray, next_value: np.ndarray, storage: Storage, num_steps: int, gamma: float, gae_lambda: float):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    storage = storage.replace(advantages=storage.advantages.at[:].set(0.0))\n    lastgaelam = 0\n    for t in reversed(range(num_steps)):\n        if t == num_steps - 1:\n            nextnonterminal = 1.0 - next_done\n            nextvalues = next_value\n        else:\n            nextnonterminal = 1.0 - storage.dones[t + 1]\n            nextvalues = storage.values[t + 1]\n        delta = storage.rewards[t] + gamma * nextvalues * nextnonterminal - storage.values[t]\n        lastgaelam = delta + gamma * gae_lambda * nextnonterminal * lastgaelam\n        storage = storage.replace(advantages=storage.advantages.at[t].set(lastgaelam))\n    storage = storage.replace(returns=storage.advantages + storage.values)\n    return storage"
        ]
    },
    {
        "func_name": "test_compute_gae",
        "original": "def test_compute_gae():\n\n    @flax.struct.dataclass\n    class Storage:\n        dones: jnp.array\n        values: jnp.array\n        advantages: jnp.array\n        returns: jnp.array\n        rewards: jnp.array\n\n    def compute_gae_once(carry, inp, gamma, gae_lambda):\n        advantages = carry\n        (nextdone, nextvalues, curvalues, reward) = inp\n        nextnonterminal = 1.0 - nextdone\n        delta = reward + gamma * nextvalues * nextnonterminal - curvalues\n        advantages = delta + gamma * gae_lambda * nextnonterminal * advantages\n        return (advantages, advantages)\n\n    def compute_gae_scan(next_done: np.ndarray, next_value: np.ndarray, storage: Storage, num_envs: int, compute_gae_once_fn: Callable):\n        advantages = jnp.zeros((num_envs,))\n        dones = jnp.concatenate([storage.dones, next_done[None, :]], axis=0)\n        values = jnp.concatenate([storage.values, next_value[None, :]], axis=0)\n        (_, advantages) = jax.lax.scan(compute_gae_once_fn, advantages, (dones[1:], values[1:], values[:-1], storage.rewards), reverse=True)\n        storage = storage.replace(advantages=advantages, returns=advantages + storage.values)\n        return storage\n\n    def compute_gae_python_loop(next_done: np.ndarray, next_value: np.ndarray, storage: Storage, num_steps: int, gamma: float, gae_lambda: float):\n        storage = storage.replace(advantages=storage.advantages.at[:].set(0.0))\n        lastgaelam = 0\n        for t in reversed(range(num_steps)):\n            if t == num_steps - 1:\n                nextnonterminal = 1.0 - next_done\n                nextvalues = next_value\n            else:\n                nextnonterminal = 1.0 - storage.dones[t + 1]\n                nextvalues = storage.values[t + 1]\n            delta = storage.rewards[t] + gamma * nextvalues * nextnonterminal - storage.values[t]\n            lastgaelam = delta + gamma * gae_lambda * nextnonterminal * lastgaelam\n            storage = storage.replace(advantages=storage.advantages.at[t].set(lastgaelam))\n        storage = storage.replace(returns=storage.advantages + storage.values)\n        return storage\n    num_steps = 123\n    num_envs = 7\n    gamma = 0.99\n    gae_lambda = 0.95\n    seed = 42\n    compute_gae_once_fn = partial(compute_gae_once, gamma=gamma, gae_lambda=gae_lambda)\n    compute_gae_scan = jax.jit(partial(compute_gae_scan, num_envs=num_envs, compute_gae_once_fn=compute_gae_once_fn))\n    compute_gae_python_loop = jax.jit(partial(compute_gae_python_loop, num_steps=num_steps, gamma=gamma, gae_lambda=gae_lambda))\n    key = jax.random.PRNGKey(seed)\n    (key, *k) = jax.random.split(key, 6)\n    storage1 = Storage(dones=jax.random.randint(k[0], (num_steps, num_envs), 0, 2), values=jax.random.uniform(k[1], (num_steps, num_envs)), advantages=jnp.zeros((num_steps, num_envs)), returns=jnp.zeros((num_steps, num_envs)), rewards=jax.random.uniform(k[2], (num_steps, num_envs), minval=-1, maxval=1))\n    storage2 = deepcopy(storage1)\n    next_value = jax.random.uniform(k[3], (num_envs,))\n    next_done = jax.random.randint(k[4], (num_envs,), 0, 2)\n    storage1 = compute_gae_scan(next_done, next_value, storage1)\n    storage2 = compute_gae_python_loop(next_done, next_value, storage2)\n    assert (storage1.advantages == storage2.advantages).all()\n    assert (storage1.returns == storage2.returns).all()",
        "mutated": [
            "def test_compute_gae():\n    if False:\n        i = 10\n\n    @flax.struct.dataclass\n    class Storage:\n        dones: jnp.array\n        values: jnp.array\n        advantages: jnp.array\n        returns: jnp.array\n        rewards: jnp.array\n\n    def compute_gae_once(carry, inp, gamma, gae_lambda):\n        advantages = carry\n        (nextdone, nextvalues, curvalues, reward) = inp\n        nextnonterminal = 1.0 - nextdone\n        delta = reward + gamma * nextvalues * nextnonterminal - curvalues\n        advantages = delta + gamma * gae_lambda * nextnonterminal * advantages\n        return (advantages, advantages)\n\n    def compute_gae_scan(next_done: np.ndarray, next_value: np.ndarray, storage: Storage, num_envs: int, compute_gae_once_fn: Callable):\n        advantages = jnp.zeros((num_envs,))\n        dones = jnp.concatenate([storage.dones, next_done[None, :]], axis=0)\n        values = jnp.concatenate([storage.values, next_value[None, :]], axis=0)\n        (_, advantages) = jax.lax.scan(compute_gae_once_fn, advantages, (dones[1:], values[1:], values[:-1], storage.rewards), reverse=True)\n        storage = storage.replace(advantages=advantages, returns=advantages + storage.values)\n        return storage\n\n    def compute_gae_python_loop(next_done: np.ndarray, next_value: np.ndarray, storage: Storage, num_steps: int, gamma: float, gae_lambda: float):\n        storage = storage.replace(advantages=storage.advantages.at[:].set(0.0))\n        lastgaelam = 0\n        for t in reversed(range(num_steps)):\n            if t == num_steps - 1:\n                nextnonterminal = 1.0 - next_done\n                nextvalues = next_value\n            else:\n                nextnonterminal = 1.0 - storage.dones[t + 1]\n                nextvalues = storage.values[t + 1]\n            delta = storage.rewards[t] + gamma * nextvalues * nextnonterminal - storage.values[t]\n            lastgaelam = delta + gamma * gae_lambda * nextnonterminal * lastgaelam\n            storage = storage.replace(advantages=storage.advantages.at[t].set(lastgaelam))\n        storage = storage.replace(returns=storage.advantages + storage.values)\n        return storage\n    num_steps = 123\n    num_envs = 7\n    gamma = 0.99\n    gae_lambda = 0.95\n    seed = 42\n    compute_gae_once_fn = partial(compute_gae_once, gamma=gamma, gae_lambda=gae_lambda)\n    compute_gae_scan = jax.jit(partial(compute_gae_scan, num_envs=num_envs, compute_gae_once_fn=compute_gae_once_fn))\n    compute_gae_python_loop = jax.jit(partial(compute_gae_python_loop, num_steps=num_steps, gamma=gamma, gae_lambda=gae_lambda))\n    key = jax.random.PRNGKey(seed)\n    (key, *k) = jax.random.split(key, 6)\n    storage1 = Storage(dones=jax.random.randint(k[0], (num_steps, num_envs), 0, 2), values=jax.random.uniform(k[1], (num_steps, num_envs)), advantages=jnp.zeros((num_steps, num_envs)), returns=jnp.zeros((num_steps, num_envs)), rewards=jax.random.uniform(k[2], (num_steps, num_envs), minval=-1, maxval=1))\n    storage2 = deepcopy(storage1)\n    next_value = jax.random.uniform(k[3], (num_envs,))\n    next_done = jax.random.randint(k[4], (num_envs,), 0, 2)\n    storage1 = compute_gae_scan(next_done, next_value, storage1)\n    storage2 = compute_gae_python_loop(next_done, next_value, storage2)\n    assert (storage1.advantages == storage2.advantages).all()\n    assert (storage1.returns == storage2.returns).all()",
            "def test_compute_gae():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    @flax.struct.dataclass\n    class Storage:\n        dones: jnp.array\n        values: jnp.array\n        advantages: jnp.array\n        returns: jnp.array\n        rewards: jnp.array\n\n    def compute_gae_once(carry, inp, gamma, gae_lambda):\n        advantages = carry\n        (nextdone, nextvalues, curvalues, reward) = inp\n        nextnonterminal = 1.0 - nextdone\n        delta = reward + gamma * nextvalues * nextnonterminal - curvalues\n        advantages = delta + gamma * gae_lambda * nextnonterminal * advantages\n        return (advantages, advantages)\n\n    def compute_gae_scan(next_done: np.ndarray, next_value: np.ndarray, storage: Storage, num_envs: int, compute_gae_once_fn: Callable):\n        advantages = jnp.zeros((num_envs,))\n        dones = jnp.concatenate([storage.dones, next_done[None, :]], axis=0)\n        values = jnp.concatenate([storage.values, next_value[None, :]], axis=0)\n        (_, advantages) = jax.lax.scan(compute_gae_once_fn, advantages, (dones[1:], values[1:], values[:-1], storage.rewards), reverse=True)\n        storage = storage.replace(advantages=advantages, returns=advantages + storage.values)\n        return storage\n\n    def compute_gae_python_loop(next_done: np.ndarray, next_value: np.ndarray, storage: Storage, num_steps: int, gamma: float, gae_lambda: float):\n        storage = storage.replace(advantages=storage.advantages.at[:].set(0.0))\n        lastgaelam = 0\n        for t in reversed(range(num_steps)):\n            if t == num_steps - 1:\n                nextnonterminal = 1.0 - next_done\n                nextvalues = next_value\n            else:\n                nextnonterminal = 1.0 - storage.dones[t + 1]\n                nextvalues = storage.values[t + 1]\n            delta = storage.rewards[t] + gamma * nextvalues * nextnonterminal - storage.values[t]\n            lastgaelam = delta + gamma * gae_lambda * nextnonterminal * lastgaelam\n            storage = storage.replace(advantages=storage.advantages.at[t].set(lastgaelam))\n        storage = storage.replace(returns=storage.advantages + storage.values)\n        return storage\n    num_steps = 123\n    num_envs = 7\n    gamma = 0.99\n    gae_lambda = 0.95\n    seed = 42\n    compute_gae_once_fn = partial(compute_gae_once, gamma=gamma, gae_lambda=gae_lambda)\n    compute_gae_scan = jax.jit(partial(compute_gae_scan, num_envs=num_envs, compute_gae_once_fn=compute_gae_once_fn))\n    compute_gae_python_loop = jax.jit(partial(compute_gae_python_loop, num_steps=num_steps, gamma=gamma, gae_lambda=gae_lambda))\n    key = jax.random.PRNGKey(seed)\n    (key, *k) = jax.random.split(key, 6)\n    storage1 = Storage(dones=jax.random.randint(k[0], (num_steps, num_envs), 0, 2), values=jax.random.uniform(k[1], (num_steps, num_envs)), advantages=jnp.zeros((num_steps, num_envs)), returns=jnp.zeros((num_steps, num_envs)), rewards=jax.random.uniform(k[2], (num_steps, num_envs), minval=-1, maxval=1))\n    storage2 = deepcopy(storage1)\n    next_value = jax.random.uniform(k[3], (num_envs,))\n    next_done = jax.random.randint(k[4], (num_envs,), 0, 2)\n    storage1 = compute_gae_scan(next_done, next_value, storage1)\n    storage2 = compute_gae_python_loop(next_done, next_value, storage2)\n    assert (storage1.advantages == storage2.advantages).all()\n    assert (storage1.returns == storage2.returns).all()",
            "def test_compute_gae():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    @flax.struct.dataclass\n    class Storage:\n        dones: jnp.array\n        values: jnp.array\n        advantages: jnp.array\n        returns: jnp.array\n        rewards: jnp.array\n\n    def compute_gae_once(carry, inp, gamma, gae_lambda):\n        advantages = carry\n        (nextdone, nextvalues, curvalues, reward) = inp\n        nextnonterminal = 1.0 - nextdone\n        delta = reward + gamma * nextvalues * nextnonterminal - curvalues\n        advantages = delta + gamma * gae_lambda * nextnonterminal * advantages\n        return (advantages, advantages)\n\n    def compute_gae_scan(next_done: np.ndarray, next_value: np.ndarray, storage: Storage, num_envs: int, compute_gae_once_fn: Callable):\n        advantages = jnp.zeros((num_envs,))\n        dones = jnp.concatenate([storage.dones, next_done[None, :]], axis=0)\n        values = jnp.concatenate([storage.values, next_value[None, :]], axis=0)\n        (_, advantages) = jax.lax.scan(compute_gae_once_fn, advantages, (dones[1:], values[1:], values[:-1], storage.rewards), reverse=True)\n        storage = storage.replace(advantages=advantages, returns=advantages + storage.values)\n        return storage\n\n    def compute_gae_python_loop(next_done: np.ndarray, next_value: np.ndarray, storage: Storage, num_steps: int, gamma: float, gae_lambda: float):\n        storage = storage.replace(advantages=storage.advantages.at[:].set(0.0))\n        lastgaelam = 0\n        for t in reversed(range(num_steps)):\n            if t == num_steps - 1:\n                nextnonterminal = 1.0 - next_done\n                nextvalues = next_value\n            else:\n                nextnonterminal = 1.0 - storage.dones[t + 1]\n                nextvalues = storage.values[t + 1]\n            delta = storage.rewards[t] + gamma * nextvalues * nextnonterminal - storage.values[t]\n            lastgaelam = delta + gamma * gae_lambda * nextnonterminal * lastgaelam\n            storage = storage.replace(advantages=storage.advantages.at[t].set(lastgaelam))\n        storage = storage.replace(returns=storage.advantages + storage.values)\n        return storage\n    num_steps = 123\n    num_envs = 7\n    gamma = 0.99\n    gae_lambda = 0.95\n    seed = 42\n    compute_gae_once_fn = partial(compute_gae_once, gamma=gamma, gae_lambda=gae_lambda)\n    compute_gae_scan = jax.jit(partial(compute_gae_scan, num_envs=num_envs, compute_gae_once_fn=compute_gae_once_fn))\n    compute_gae_python_loop = jax.jit(partial(compute_gae_python_loop, num_steps=num_steps, gamma=gamma, gae_lambda=gae_lambda))\n    key = jax.random.PRNGKey(seed)\n    (key, *k) = jax.random.split(key, 6)\n    storage1 = Storage(dones=jax.random.randint(k[0], (num_steps, num_envs), 0, 2), values=jax.random.uniform(k[1], (num_steps, num_envs)), advantages=jnp.zeros((num_steps, num_envs)), returns=jnp.zeros((num_steps, num_envs)), rewards=jax.random.uniform(k[2], (num_steps, num_envs), minval=-1, maxval=1))\n    storage2 = deepcopy(storage1)\n    next_value = jax.random.uniform(k[3], (num_envs,))\n    next_done = jax.random.randint(k[4], (num_envs,), 0, 2)\n    storage1 = compute_gae_scan(next_done, next_value, storage1)\n    storage2 = compute_gae_python_loop(next_done, next_value, storage2)\n    assert (storage1.advantages == storage2.advantages).all()\n    assert (storage1.returns == storage2.returns).all()",
            "def test_compute_gae():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    @flax.struct.dataclass\n    class Storage:\n        dones: jnp.array\n        values: jnp.array\n        advantages: jnp.array\n        returns: jnp.array\n        rewards: jnp.array\n\n    def compute_gae_once(carry, inp, gamma, gae_lambda):\n        advantages = carry\n        (nextdone, nextvalues, curvalues, reward) = inp\n        nextnonterminal = 1.0 - nextdone\n        delta = reward + gamma * nextvalues * nextnonterminal - curvalues\n        advantages = delta + gamma * gae_lambda * nextnonterminal * advantages\n        return (advantages, advantages)\n\n    def compute_gae_scan(next_done: np.ndarray, next_value: np.ndarray, storage: Storage, num_envs: int, compute_gae_once_fn: Callable):\n        advantages = jnp.zeros((num_envs,))\n        dones = jnp.concatenate([storage.dones, next_done[None, :]], axis=0)\n        values = jnp.concatenate([storage.values, next_value[None, :]], axis=0)\n        (_, advantages) = jax.lax.scan(compute_gae_once_fn, advantages, (dones[1:], values[1:], values[:-1], storage.rewards), reverse=True)\n        storage = storage.replace(advantages=advantages, returns=advantages + storage.values)\n        return storage\n\n    def compute_gae_python_loop(next_done: np.ndarray, next_value: np.ndarray, storage: Storage, num_steps: int, gamma: float, gae_lambda: float):\n        storage = storage.replace(advantages=storage.advantages.at[:].set(0.0))\n        lastgaelam = 0\n        for t in reversed(range(num_steps)):\n            if t == num_steps - 1:\n                nextnonterminal = 1.0 - next_done\n                nextvalues = next_value\n            else:\n                nextnonterminal = 1.0 - storage.dones[t + 1]\n                nextvalues = storage.values[t + 1]\n            delta = storage.rewards[t] + gamma * nextvalues * nextnonterminal - storage.values[t]\n            lastgaelam = delta + gamma * gae_lambda * nextnonterminal * lastgaelam\n            storage = storage.replace(advantages=storage.advantages.at[t].set(lastgaelam))\n        storage = storage.replace(returns=storage.advantages + storage.values)\n        return storage\n    num_steps = 123\n    num_envs = 7\n    gamma = 0.99\n    gae_lambda = 0.95\n    seed = 42\n    compute_gae_once_fn = partial(compute_gae_once, gamma=gamma, gae_lambda=gae_lambda)\n    compute_gae_scan = jax.jit(partial(compute_gae_scan, num_envs=num_envs, compute_gae_once_fn=compute_gae_once_fn))\n    compute_gae_python_loop = jax.jit(partial(compute_gae_python_loop, num_steps=num_steps, gamma=gamma, gae_lambda=gae_lambda))\n    key = jax.random.PRNGKey(seed)\n    (key, *k) = jax.random.split(key, 6)\n    storage1 = Storage(dones=jax.random.randint(k[0], (num_steps, num_envs), 0, 2), values=jax.random.uniform(k[1], (num_steps, num_envs)), advantages=jnp.zeros((num_steps, num_envs)), returns=jnp.zeros((num_steps, num_envs)), rewards=jax.random.uniform(k[2], (num_steps, num_envs), minval=-1, maxval=1))\n    storage2 = deepcopy(storage1)\n    next_value = jax.random.uniform(k[3], (num_envs,))\n    next_done = jax.random.randint(k[4], (num_envs,), 0, 2)\n    storage1 = compute_gae_scan(next_done, next_value, storage1)\n    storage2 = compute_gae_python_loop(next_done, next_value, storage2)\n    assert (storage1.advantages == storage2.advantages).all()\n    assert (storage1.returns == storage2.returns).all()",
            "def test_compute_gae():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    @flax.struct.dataclass\n    class Storage:\n        dones: jnp.array\n        values: jnp.array\n        advantages: jnp.array\n        returns: jnp.array\n        rewards: jnp.array\n\n    def compute_gae_once(carry, inp, gamma, gae_lambda):\n        advantages = carry\n        (nextdone, nextvalues, curvalues, reward) = inp\n        nextnonterminal = 1.0 - nextdone\n        delta = reward + gamma * nextvalues * nextnonterminal - curvalues\n        advantages = delta + gamma * gae_lambda * nextnonterminal * advantages\n        return (advantages, advantages)\n\n    def compute_gae_scan(next_done: np.ndarray, next_value: np.ndarray, storage: Storage, num_envs: int, compute_gae_once_fn: Callable):\n        advantages = jnp.zeros((num_envs,))\n        dones = jnp.concatenate([storage.dones, next_done[None, :]], axis=0)\n        values = jnp.concatenate([storage.values, next_value[None, :]], axis=0)\n        (_, advantages) = jax.lax.scan(compute_gae_once_fn, advantages, (dones[1:], values[1:], values[:-1], storage.rewards), reverse=True)\n        storage = storage.replace(advantages=advantages, returns=advantages + storage.values)\n        return storage\n\n    def compute_gae_python_loop(next_done: np.ndarray, next_value: np.ndarray, storage: Storage, num_steps: int, gamma: float, gae_lambda: float):\n        storage = storage.replace(advantages=storage.advantages.at[:].set(0.0))\n        lastgaelam = 0\n        for t in reversed(range(num_steps)):\n            if t == num_steps - 1:\n                nextnonterminal = 1.0 - next_done\n                nextvalues = next_value\n            else:\n                nextnonterminal = 1.0 - storage.dones[t + 1]\n                nextvalues = storage.values[t + 1]\n            delta = storage.rewards[t] + gamma * nextvalues * nextnonterminal - storage.values[t]\n            lastgaelam = delta + gamma * gae_lambda * nextnonterminal * lastgaelam\n            storage = storage.replace(advantages=storage.advantages.at[t].set(lastgaelam))\n        storage = storage.replace(returns=storage.advantages + storage.values)\n        return storage\n    num_steps = 123\n    num_envs = 7\n    gamma = 0.99\n    gae_lambda = 0.95\n    seed = 42\n    compute_gae_once_fn = partial(compute_gae_once, gamma=gamma, gae_lambda=gae_lambda)\n    compute_gae_scan = jax.jit(partial(compute_gae_scan, num_envs=num_envs, compute_gae_once_fn=compute_gae_once_fn))\n    compute_gae_python_loop = jax.jit(partial(compute_gae_python_loop, num_steps=num_steps, gamma=gamma, gae_lambda=gae_lambda))\n    key = jax.random.PRNGKey(seed)\n    (key, *k) = jax.random.split(key, 6)\n    storage1 = Storage(dones=jax.random.randint(k[0], (num_steps, num_envs), 0, 2), values=jax.random.uniform(k[1], (num_steps, num_envs)), advantages=jnp.zeros((num_steps, num_envs)), returns=jnp.zeros((num_steps, num_envs)), rewards=jax.random.uniform(k[2], (num_steps, num_envs), minval=-1, maxval=1))\n    storage2 = deepcopy(storage1)\n    next_value = jax.random.uniform(k[3], (num_envs,))\n    next_done = jax.random.randint(k[4], (num_envs,), 0, 2)\n    storage1 = compute_gae_scan(next_done, next_value, storage1)\n    storage2 = compute_gae_python_loop(next_done, next_value, storage2)\n    assert (storage1.advantages == storage2.advantages).all()\n    assert (storage1.returns == storage2.returns).all()"
        ]
    }
]
[
    {
        "func_name": "getFood",
        "original": "def getFood(self, grid):\n    \"\"\"\n        :type grid: List[List[str]]\n        :rtype: int\n        \"\"\"\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    q = []\n    for r in xrange(len(grid)):\n        for c in xrange(len(grid[0])):\n            if grid[r][c] == '*':\n                q.append((r, c))\n                break\n    result = 0\n    while q:\n        result += 1\n        new_q = []\n        for (r, c) in q:\n            for (dr, dc) in directions:\n                (nr, nc) = (r + dr, c + dc)\n                if not (0 <= nr < len(grid) and 0 <= nc < len(grid[0]) and (grid[nr][nc] != 'X')):\n                    continue\n                if grid[nr][nc] == '#':\n                    return result\n                grid[nr][nc] = 'X'\n                new_q.append((nr, nc))\n        q = new_q\n    return -1",
        "mutated": [
            "def getFood(self, grid):\n    if False:\n        i = 10\n    '\\n        :type grid: List[List[str]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    q = []\n    for r in xrange(len(grid)):\n        for c in xrange(len(grid[0])):\n            if grid[r][c] == '*':\n                q.append((r, c))\n                break\n    result = 0\n    while q:\n        result += 1\n        new_q = []\n        for (r, c) in q:\n            for (dr, dc) in directions:\n                (nr, nc) = (r + dr, c + dc)\n                if not (0 <= nr < len(grid) and 0 <= nc < len(grid[0]) and (grid[nr][nc] != 'X')):\n                    continue\n                if grid[nr][nc] == '#':\n                    return result\n                grid[nr][nc] = 'X'\n                new_q.append((nr, nc))\n        q = new_q\n    return -1",
            "def getFood(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type grid: List[List[str]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    q = []\n    for r in xrange(len(grid)):\n        for c in xrange(len(grid[0])):\n            if grid[r][c] == '*':\n                q.append((r, c))\n                break\n    result = 0\n    while q:\n        result += 1\n        new_q = []\n        for (r, c) in q:\n            for (dr, dc) in directions:\n                (nr, nc) = (r + dr, c + dc)\n                if not (0 <= nr < len(grid) and 0 <= nc < len(grid[0]) and (grid[nr][nc] != 'X')):\n                    continue\n                if grid[nr][nc] == '#':\n                    return result\n                grid[nr][nc] = 'X'\n                new_q.append((nr, nc))\n        q = new_q\n    return -1",
            "def getFood(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type grid: List[List[str]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    q = []\n    for r in xrange(len(grid)):\n        for c in xrange(len(grid[0])):\n            if grid[r][c] == '*':\n                q.append((r, c))\n                break\n    result = 0\n    while q:\n        result += 1\n        new_q = []\n        for (r, c) in q:\n            for (dr, dc) in directions:\n                (nr, nc) = (r + dr, c + dc)\n                if not (0 <= nr < len(grid) and 0 <= nc < len(grid[0]) and (grid[nr][nc] != 'X')):\n                    continue\n                if grid[nr][nc] == '#':\n                    return result\n                grid[nr][nc] = 'X'\n                new_q.append((nr, nc))\n        q = new_q\n    return -1",
            "def getFood(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type grid: List[List[str]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    q = []\n    for r in xrange(len(grid)):\n        for c in xrange(len(grid[0])):\n            if grid[r][c] == '*':\n                q.append((r, c))\n                break\n    result = 0\n    while q:\n        result += 1\n        new_q = []\n        for (r, c) in q:\n            for (dr, dc) in directions:\n                (nr, nc) = (r + dr, c + dc)\n                if not (0 <= nr < len(grid) and 0 <= nc < len(grid[0]) and (grid[nr][nc] != 'X')):\n                    continue\n                if grid[nr][nc] == '#':\n                    return result\n                grid[nr][nc] = 'X'\n                new_q.append((nr, nc))\n        q = new_q\n    return -1",
            "def getFood(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type grid: List[List[str]]\\n        :rtype: int\\n        '\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n    q = []\n    for r in xrange(len(grid)):\n        for c in xrange(len(grid[0])):\n            if grid[r][c] == '*':\n                q.append((r, c))\n                break\n    result = 0\n    while q:\n        result += 1\n        new_q = []\n        for (r, c) in q:\n            for (dr, dc) in directions:\n                (nr, nc) = (r + dr, c + dc)\n                if not (0 <= nr < len(grid) and 0 <= nc < len(grid[0]) and (grid[nr][nc] != 'X')):\n                    continue\n                if grid[nr][nc] == '#':\n                    return result\n                grid[nr][nc] = 'X'\n                new_q.append((nr, nc))\n        q = new_q\n    return -1"
        ]
    }
]
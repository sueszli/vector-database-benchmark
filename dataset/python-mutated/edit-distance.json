[
    {
        "func_name": "minDistance",
        "original": "def minDistance(self, word1, word2):\n    if len(word1) < len(word2):\n        return self.minDistance(word2, word1)\n    distance = [i for i in xrange(len(word2) + 1)]\n    for i in xrange(1, len(word1) + 1):\n        pre_distance_i_j = distance[0]\n        distance[0] = i\n        for j in xrange(1, len(word2) + 1):\n            insert = distance[j - 1] + 1\n            delete = distance[j] + 1\n            replace = pre_distance_i_j\n            if word1[i - 1] != word2[j - 1]:\n                replace += 1\n            pre_distance_i_j = distance[j]\n            distance[j] = min(insert, delete, replace)\n    return distance[-1]",
        "mutated": [
            "def minDistance(self, word1, word2):\n    if False:\n        i = 10\n    if len(word1) < len(word2):\n        return self.minDistance(word2, word1)\n    distance = [i for i in xrange(len(word2) + 1)]\n    for i in xrange(1, len(word1) + 1):\n        pre_distance_i_j = distance[0]\n        distance[0] = i\n        for j in xrange(1, len(word2) + 1):\n            insert = distance[j - 1] + 1\n            delete = distance[j] + 1\n            replace = pre_distance_i_j\n            if word1[i - 1] != word2[j - 1]:\n                replace += 1\n            pre_distance_i_j = distance[j]\n            distance[j] = min(insert, delete, replace)\n    return distance[-1]",
            "def minDistance(self, word1, word2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if len(word1) < len(word2):\n        return self.minDistance(word2, word1)\n    distance = [i for i in xrange(len(word2) + 1)]\n    for i in xrange(1, len(word1) + 1):\n        pre_distance_i_j = distance[0]\n        distance[0] = i\n        for j in xrange(1, len(word2) + 1):\n            insert = distance[j - 1] + 1\n            delete = distance[j] + 1\n            replace = pre_distance_i_j\n            if word1[i - 1] != word2[j - 1]:\n                replace += 1\n            pre_distance_i_j = distance[j]\n            distance[j] = min(insert, delete, replace)\n    return distance[-1]",
            "def minDistance(self, word1, word2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if len(word1) < len(word2):\n        return self.minDistance(word2, word1)\n    distance = [i for i in xrange(len(word2) + 1)]\n    for i in xrange(1, len(word1) + 1):\n        pre_distance_i_j = distance[0]\n        distance[0] = i\n        for j in xrange(1, len(word2) + 1):\n            insert = distance[j - 1] + 1\n            delete = distance[j] + 1\n            replace = pre_distance_i_j\n            if word1[i - 1] != word2[j - 1]:\n                replace += 1\n            pre_distance_i_j = distance[j]\n            distance[j] = min(insert, delete, replace)\n    return distance[-1]",
            "def minDistance(self, word1, word2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if len(word1) < len(word2):\n        return self.minDistance(word2, word1)\n    distance = [i for i in xrange(len(word2) + 1)]\n    for i in xrange(1, len(word1) + 1):\n        pre_distance_i_j = distance[0]\n        distance[0] = i\n        for j in xrange(1, len(word2) + 1):\n            insert = distance[j - 1] + 1\n            delete = distance[j] + 1\n            replace = pre_distance_i_j\n            if word1[i - 1] != word2[j - 1]:\n                replace += 1\n            pre_distance_i_j = distance[j]\n            distance[j] = min(insert, delete, replace)\n    return distance[-1]",
            "def minDistance(self, word1, word2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if len(word1) < len(word2):\n        return self.minDistance(word2, word1)\n    distance = [i for i in xrange(len(word2) + 1)]\n    for i in xrange(1, len(word1) + 1):\n        pre_distance_i_j = distance[0]\n        distance[0] = i\n        for j in xrange(1, len(word2) + 1):\n            insert = distance[j - 1] + 1\n            delete = distance[j] + 1\n            replace = pre_distance_i_j\n            if word1[i - 1] != word2[j - 1]:\n                replace += 1\n            pre_distance_i_j = distance[j]\n            distance[j] = min(insert, delete, replace)\n    return distance[-1]"
        ]
    },
    {
        "func_name": "minDistance",
        "original": "def minDistance(self, word1, word2):\n    distance = [[i] for i in xrange(len(word1) + 1)]\n    distance[0] = [j for j in xrange(len(word2) + 1)]\n    for i in xrange(1, len(word1) + 1):\n        for j in xrange(1, len(word2) + 1):\n            insert = distance[i][j - 1] + 1\n            delete = distance[i - 1][j] + 1\n            replace = distance[i - 1][j - 1]\n            if word1[i - 1] != word2[j - 1]:\n                replace += 1\n            distance[i].append(min(insert, delete, replace))\n    return distance[-1][-1]",
        "mutated": [
            "def minDistance(self, word1, word2):\n    if False:\n        i = 10\n    distance = [[i] for i in xrange(len(word1) + 1)]\n    distance[0] = [j for j in xrange(len(word2) + 1)]\n    for i in xrange(1, len(word1) + 1):\n        for j in xrange(1, len(word2) + 1):\n            insert = distance[i][j - 1] + 1\n            delete = distance[i - 1][j] + 1\n            replace = distance[i - 1][j - 1]\n            if word1[i - 1] != word2[j - 1]:\n                replace += 1\n            distance[i].append(min(insert, delete, replace))\n    return distance[-1][-1]",
            "def minDistance(self, word1, word2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    distance = [[i] for i in xrange(len(word1) + 1)]\n    distance[0] = [j for j in xrange(len(word2) + 1)]\n    for i in xrange(1, len(word1) + 1):\n        for j in xrange(1, len(word2) + 1):\n            insert = distance[i][j - 1] + 1\n            delete = distance[i - 1][j] + 1\n            replace = distance[i - 1][j - 1]\n            if word1[i - 1] != word2[j - 1]:\n                replace += 1\n            distance[i].append(min(insert, delete, replace))\n    return distance[-1][-1]",
            "def minDistance(self, word1, word2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    distance = [[i] for i in xrange(len(word1) + 1)]\n    distance[0] = [j for j in xrange(len(word2) + 1)]\n    for i in xrange(1, len(word1) + 1):\n        for j in xrange(1, len(word2) + 1):\n            insert = distance[i][j - 1] + 1\n            delete = distance[i - 1][j] + 1\n            replace = distance[i - 1][j - 1]\n            if word1[i - 1] != word2[j - 1]:\n                replace += 1\n            distance[i].append(min(insert, delete, replace))\n    return distance[-1][-1]",
            "def minDistance(self, word1, word2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    distance = [[i] for i in xrange(len(word1) + 1)]\n    distance[0] = [j for j in xrange(len(word2) + 1)]\n    for i in xrange(1, len(word1) + 1):\n        for j in xrange(1, len(word2) + 1):\n            insert = distance[i][j - 1] + 1\n            delete = distance[i - 1][j] + 1\n            replace = distance[i - 1][j - 1]\n            if word1[i - 1] != word2[j - 1]:\n                replace += 1\n            distance[i].append(min(insert, delete, replace))\n    return distance[-1][-1]",
            "def minDistance(self, word1, word2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    distance = [[i] for i in xrange(len(word1) + 1)]\n    distance[0] = [j for j in xrange(len(word2) + 1)]\n    for i in xrange(1, len(word1) + 1):\n        for j in xrange(1, len(word2) + 1):\n            insert = distance[i][j - 1] + 1\n            delete = distance[i - 1][j] + 1\n            replace = distance[i - 1][j - 1]\n            if word1[i - 1] != word2[j - 1]:\n                replace += 1\n            distance[i].append(min(insert, delete, replace))\n    return distance[-1][-1]"
        ]
    }
]
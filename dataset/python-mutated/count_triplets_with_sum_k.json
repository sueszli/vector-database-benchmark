[
    {
        "func_name": "count_triplets_1",
        "original": "def count_triplets_1(arr, k):\n    count = 0\n    n = len(arr)\n    for i in range(n - 2):\n        elements = set()\n        curr_sum = k - arr[i]\n        for j in range(i + 1, n):\n            if curr_sum - arr[j] in elements:\n                count += 1\n            elements.add(arr[j])\n    return count",
        "mutated": [
            "def count_triplets_1(arr, k):\n    if False:\n        i = 10\n    count = 0\n    n = len(arr)\n    for i in range(n - 2):\n        elements = set()\n        curr_sum = k - arr[i]\n        for j in range(i + 1, n):\n            if curr_sum - arr[j] in elements:\n                count += 1\n            elements.add(arr[j])\n    return count",
            "def count_triplets_1(arr, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    count = 0\n    n = len(arr)\n    for i in range(n - 2):\n        elements = set()\n        curr_sum = k - arr[i]\n        for j in range(i + 1, n):\n            if curr_sum - arr[j] in elements:\n                count += 1\n            elements.add(arr[j])\n    return count",
            "def count_triplets_1(arr, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    count = 0\n    n = len(arr)\n    for i in range(n - 2):\n        elements = set()\n        curr_sum = k - arr[i]\n        for j in range(i + 1, n):\n            if curr_sum - arr[j] in elements:\n                count += 1\n            elements.add(arr[j])\n    return count",
            "def count_triplets_1(arr, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    count = 0\n    n = len(arr)\n    for i in range(n - 2):\n        elements = set()\n        curr_sum = k - arr[i]\n        for j in range(i + 1, n):\n            if curr_sum - arr[j] in elements:\n                count += 1\n            elements.add(arr[j])\n    return count",
            "def count_triplets_1(arr, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    count = 0\n    n = len(arr)\n    for i in range(n - 2):\n        elements = set()\n        curr_sum = k - arr[i]\n        for j in range(i + 1, n):\n            if curr_sum - arr[j] in elements:\n                count += 1\n            elements.add(arr[j])\n    return count"
        ]
    },
    {
        "func_name": "count_triplets_2",
        "original": "def count_triplets_2(arr, k):\n    count = 0\n    n = len(arr)\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            curr_sum = arr[i] + arr[left] + arr[right]\n            if curr_sum == k:\n                count += 1\n                right -= 1\n            elif curr_sum < k:\n                left += 1\n            else:\n                right -= 1\n    return count",
        "mutated": [
            "def count_triplets_2(arr, k):\n    if False:\n        i = 10\n    count = 0\n    n = len(arr)\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            curr_sum = arr[i] + arr[left] + arr[right]\n            if curr_sum == k:\n                count += 1\n                right -= 1\n            elif curr_sum < k:\n                left += 1\n            else:\n                right -= 1\n    return count",
            "def count_triplets_2(arr, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    count = 0\n    n = len(arr)\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            curr_sum = arr[i] + arr[left] + arr[right]\n            if curr_sum == k:\n                count += 1\n                right -= 1\n            elif curr_sum < k:\n                left += 1\n            else:\n                right -= 1\n    return count",
            "def count_triplets_2(arr, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    count = 0\n    n = len(arr)\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            curr_sum = arr[i] + arr[left] + arr[right]\n            if curr_sum == k:\n                count += 1\n                right -= 1\n            elif curr_sum < k:\n                left += 1\n            else:\n                right -= 1\n    return count",
            "def count_triplets_2(arr, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    count = 0\n    n = len(arr)\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            curr_sum = arr[i] + arr[left] + arr[right]\n            if curr_sum == k:\n                count += 1\n                right -= 1\n            elif curr_sum < k:\n                left += 1\n            else:\n                right -= 1\n    return count",
            "def count_triplets_2(arr, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    count = 0\n    n = len(arr)\n    for i in range(n - 2):\n        left = i + 1\n        right = n - 1\n        while left < right:\n            curr_sum = arr[i] + arr[left] + arr[right]\n            if curr_sum == k:\n                count += 1\n                right -= 1\n            elif curr_sum < k:\n                left += 1\n            else:\n                right -= 1\n    return count"
        ]
    }
]
[
    {
        "func_name": "prepare_sale_for_variant",
        "original": "def prepare_sale_for_variant(e2e_staff_api_client, channel_id, product_variant_id, sale_discount_type, sale_discount_value):\n    sale_name = 'Sale'\n    sale = create_sale(e2e_staff_api_client, sale_name, sale_discount_type)\n    sale_id = sale['id']\n    sale_listing_input = [{'channelId': channel_id, 'discountValue': sale_discount_value}]\n    create_sale_channel_listing(e2e_staff_api_client, sale_id, add_channels=sale_listing_input)\n    catalogue_input = {'variants': [product_variant_id]}\n    sale_catalogues_add(e2e_staff_api_client, sale_id, catalogue_input)\n    return (sale_id, sale_discount_value)",
        "mutated": [
            "def prepare_sale_for_variant(e2e_staff_api_client, channel_id, product_variant_id, sale_discount_type, sale_discount_value):\n    if False:\n        i = 10\n    sale_name = 'Sale'\n    sale = create_sale(e2e_staff_api_client, sale_name, sale_discount_type)\n    sale_id = sale['id']\n    sale_listing_input = [{'channelId': channel_id, 'discountValue': sale_discount_value}]\n    create_sale_channel_listing(e2e_staff_api_client, sale_id, add_channels=sale_listing_input)\n    catalogue_input = {'variants': [product_variant_id]}\n    sale_catalogues_add(e2e_staff_api_client, sale_id, catalogue_input)\n    return (sale_id, sale_discount_value)",
            "def prepare_sale_for_variant(e2e_staff_api_client, channel_id, product_variant_id, sale_discount_type, sale_discount_value):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    sale_name = 'Sale'\n    sale = create_sale(e2e_staff_api_client, sale_name, sale_discount_type)\n    sale_id = sale['id']\n    sale_listing_input = [{'channelId': channel_id, 'discountValue': sale_discount_value}]\n    create_sale_channel_listing(e2e_staff_api_client, sale_id, add_channels=sale_listing_input)\n    catalogue_input = {'variants': [product_variant_id]}\n    sale_catalogues_add(e2e_staff_api_client, sale_id, catalogue_input)\n    return (sale_id, sale_discount_value)",
            "def prepare_sale_for_variant(e2e_staff_api_client, channel_id, product_variant_id, sale_discount_type, sale_discount_value):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    sale_name = 'Sale'\n    sale = create_sale(e2e_staff_api_client, sale_name, sale_discount_type)\n    sale_id = sale['id']\n    sale_listing_input = [{'channelId': channel_id, 'discountValue': sale_discount_value}]\n    create_sale_channel_listing(e2e_staff_api_client, sale_id, add_channels=sale_listing_input)\n    catalogue_input = {'variants': [product_variant_id]}\n    sale_catalogues_add(e2e_staff_api_client, sale_id, catalogue_input)\n    return (sale_id, sale_discount_value)",
            "def prepare_sale_for_variant(e2e_staff_api_client, channel_id, product_variant_id, sale_discount_type, sale_discount_value):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    sale_name = 'Sale'\n    sale = create_sale(e2e_staff_api_client, sale_name, sale_discount_type)\n    sale_id = sale['id']\n    sale_listing_input = [{'channelId': channel_id, 'discountValue': sale_discount_value}]\n    create_sale_channel_listing(e2e_staff_api_client, sale_id, add_channels=sale_listing_input)\n    catalogue_input = {'variants': [product_variant_id]}\n    sale_catalogues_add(e2e_staff_api_client, sale_id, catalogue_input)\n    return (sale_id, sale_discount_value)",
            "def prepare_sale_for_variant(e2e_staff_api_client, channel_id, product_variant_id, sale_discount_type, sale_discount_value):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    sale_name = 'Sale'\n    sale = create_sale(e2e_staff_api_client, sale_name, sale_discount_type)\n    sale_id = sale['id']\n    sale_listing_input = [{'channelId': channel_id, 'discountValue': sale_discount_value}]\n    create_sale_channel_listing(e2e_staff_api_client, sale_id, add_channels=sale_listing_input)\n    catalogue_input = {'variants': [product_variant_id]}\n    sale_catalogues_add(e2e_staff_api_client, sale_id, catalogue_input)\n    return (sale_id, sale_discount_value)"
        ]
    },
    {
        "func_name": "prepare_voucher",
        "original": "def prepare_voucher(e2e_staff_api_client, channel_id, voucher_code, voucher_discount_type, voucher_discount_value):\n    input = {'code': voucher_code, 'discountValueType': voucher_discount_type, 'type': 'ENTIRE_ORDER'}\n    voucher_data = create_voucher(e2e_staff_api_client, input)\n    voucher_id = voucher_data['id']\n    channel_listing = [{'channelId': channel_id, 'discountValue': voucher_discount_value}]\n    create_voucher_channel_listing(e2e_staff_api_client, voucher_id, channel_listing)\n    return (voucher_discount_value, voucher_code)",
        "mutated": [
            "def prepare_voucher(e2e_staff_api_client, channel_id, voucher_code, voucher_discount_type, voucher_discount_value):\n    if False:\n        i = 10\n    input = {'code': voucher_code, 'discountValueType': voucher_discount_type, 'type': 'ENTIRE_ORDER'}\n    voucher_data = create_voucher(e2e_staff_api_client, input)\n    voucher_id = voucher_data['id']\n    channel_listing = [{'channelId': channel_id, 'discountValue': voucher_discount_value}]\n    create_voucher_channel_listing(e2e_staff_api_client, voucher_id, channel_listing)\n    return (voucher_discount_value, voucher_code)",
            "def prepare_voucher(e2e_staff_api_client, channel_id, voucher_code, voucher_discount_type, voucher_discount_value):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    input = {'code': voucher_code, 'discountValueType': voucher_discount_type, 'type': 'ENTIRE_ORDER'}\n    voucher_data = create_voucher(e2e_staff_api_client, input)\n    voucher_id = voucher_data['id']\n    channel_listing = [{'channelId': channel_id, 'discountValue': voucher_discount_value}]\n    create_voucher_channel_listing(e2e_staff_api_client, voucher_id, channel_listing)\n    return (voucher_discount_value, voucher_code)",
            "def prepare_voucher(e2e_staff_api_client, channel_id, voucher_code, voucher_discount_type, voucher_discount_value):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    input = {'code': voucher_code, 'discountValueType': voucher_discount_type, 'type': 'ENTIRE_ORDER'}\n    voucher_data = create_voucher(e2e_staff_api_client, input)\n    voucher_id = voucher_data['id']\n    channel_listing = [{'channelId': channel_id, 'discountValue': voucher_discount_value}]\n    create_voucher_channel_listing(e2e_staff_api_client, voucher_id, channel_listing)\n    return (voucher_discount_value, voucher_code)",
            "def prepare_voucher(e2e_staff_api_client, channel_id, voucher_code, voucher_discount_type, voucher_discount_value):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    input = {'code': voucher_code, 'discountValueType': voucher_discount_type, 'type': 'ENTIRE_ORDER'}\n    voucher_data = create_voucher(e2e_staff_api_client, input)\n    voucher_id = voucher_data['id']\n    channel_listing = [{'channelId': channel_id, 'discountValue': voucher_discount_value}]\n    create_voucher_channel_listing(e2e_staff_api_client, voucher_id, channel_listing)\n    return (voucher_discount_value, voucher_code)",
            "def prepare_voucher(e2e_staff_api_client, channel_id, voucher_code, voucher_discount_type, voucher_discount_value):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    input = {'code': voucher_code, 'discountValueType': voucher_discount_type, 'type': 'ENTIRE_ORDER'}\n    voucher_data = create_voucher(e2e_staff_api_client, input)\n    voucher_id = voucher_data['id']\n    channel_listing = [{'channelId': channel_id, 'discountValue': voucher_discount_value}]\n    create_voucher_channel_listing(e2e_staff_api_client, voucher_id, channel_listing)\n    return (voucher_discount_value, voucher_code)"
        ]
    },
    {
        "func_name": "test_checkout_calculate_discount_for_sale_and_voucher_1014",
        "original": "@pytest.mark.e2e\n@pytest.mark.parametrize(('variant_price', 'sale_discount_value', 'sale_discount_type', 'expected_sale_discount', 'voucher_discount_value', 'voucher_discount_type', 'expected_voucher_discount', 'expected_unit_price'), [('19.99', 13, 'PERCENTAGE', 2.6, 13, 'PERCENTAGE', 2.26, 15.13), ('30', 10, 'FIXED', 10, 5, 'FIXED', 5, 17.5), ('56.50', 19.99, 'FIXED', 19.99, 33, 'PERCENTAGE', 12.05, 24.46), ('77.77', 17.5, 'PERCENTAGE', 13.61, 25, 'FIXED', 25, 51.66)])\ndef test_checkout_calculate_discount_for_sale_and_voucher_1014(e2e_not_logged_api_client, e2e_staff_api_client, permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts, variant_price, sale_discount_value, sale_discount_type, expected_sale_discount, voucher_discount_value, voucher_discount_type, expected_voucher_discount, expected_unit_price):\n    permissions = [permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts]\n    assign_permissions(e2e_staff_api_client, permissions)\n    (warehouse_id, channel_id, channel_slug, shipping_method_id) = prepare_shop(e2e_staff_api_client)\n    (_product_id, product_variant_id, product_variant_price) = prepare_product(e2e_staff_api_client, warehouse_id, channel_id, variant_price)\n    (sale_id, sale_discount_value) = prepare_sale_for_variant(e2e_staff_api_client, channel_id, product_variant_id, sale_discount_type, sale_discount_value)\n    (voucher_discount_value, voucher_code) = prepare_voucher(e2e_staff_api_client, channel_id, 'VOUCHER001', voucher_discount_type, voucher_discount_value)\n    lines = [{'variantId': product_variant_id, 'quantity': 1}]\n    checkout_data = checkout_create(e2e_not_logged_api_client, lines, channel_slug, email='testEmail@example.com', set_default_billing_address=True, set_default_shipping_address=True)\n    checkout_id = checkout_data['id']\n    checkout_lines = checkout_data['lines'][0]\n    shipping_method_id = checkout_data['shippingMethods'][0]['id']\n    assert checkout_data['isShippingRequired'] is True\n    unit_price_on_sale = round(float(product_variant_price - expected_sale_discount), 2)\n    assert checkout_lines['unitPrice']['gross']['amount'] == unit_price_on_sale\n    assert checkout_lines['undiscountedUnitPrice']['amount'] == product_variant_price\n    checkout_data = checkout_add_promo_code(e2e_not_logged_api_client, checkout_id, voucher_code)\n    assert checkout_data['discount']['amount'] == expected_voucher_discount\n    assert checkout_data['lines'][0]['unitPrice']['gross']['amount'] == round(float(unit_price_on_sale - expected_voucher_discount), 2)\n    lines_add = [{'variantId': product_variant_id, 'quantity': 1}]\n    checkout_data = checkout_lines_add(e2e_staff_api_client, checkout_id, lines_add)\n    checkout_lines = checkout_data['lines'][0]\n    assert checkout_lines['quantity'] == 2\n    assert checkout_lines['unitPrice']['gross']['amount'] == expected_unit_price\n    subtotal_amount = expected_unit_price * 2\n    assert checkout_lines['totalPrice']['gross']['amount'] == subtotal_amount\n    checkout_data = checkout_delivery_method_update(e2e_not_logged_api_client, checkout_id, shipping_method_id)\n    assert checkout_data['deliveryMethod']['id'] == shipping_method_id\n    shipping_price = checkout_data['deliveryMethod']['price']['amount']\n    total_gross_amount = round(subtotal_amount + shipping_price, 2)\n    assert checkout_data['totalPrice']['gross']['amount'] == total_gross_amount\n    checkout_dummy_payment_create(e2e_not_logged_api_client, checkout_id, total_gross_amount)\n    order_data = checkout_complete(e2e_not_logged_api_client, checkout_id)\n    assert order_data['status'] == 'UNFULFILLED'\n    assert order_data['discounts'][0]['type'] == 'VOUCHER'\n    assert order_data['voucher']['code'] == voucher_code\n    order_line = order_data['lines'][0]\n    assert order_line['unitDiscountType'] == 'FIXED'\n    assert order_line['unitPrice']['gross']['amount'] == expected_unit_price\n    assert order_line['unitDiscountReason'] == f'Sale: {sale_id}'\n    assert order_data['total']['gross']['amount'] == total_gross_amount\n    assert order_data['subtotal']['gross']['amount'] == subtotal_amount\n    assert order_line['undiscountedUnitPrice']['gross']['amount'] == float(product_variant_price)",
        "mutated": [
            "@pytest.mark.e2e\n@pytest.mark.parametrize(('variant_price', 'sale_discount_value', 'sale_discount_type', 'expected_sale_discount', 'voucher_discount_value', 'voucher_discount_type', 'expected_voucher_discount', 'expected_unit_price'), [('19.99', 13, 'PERCENTAGE', 2.6, 13, 'PERCENTAGE', 2.26, 15.13), ('30', 10, 'FIXED', 10, 5, 'FIXED', 5, 17.5), ('56.50', 19.99, 'FIXED', 19.99, 33, 'PERCENTAGE', 12.05, 24.46), ('77.77', 17.5, 'PERCENTAGE', 13.61, 25, 'FIXED', 25, 51.66)])\ndef test_checkout_calculate_discount_for_sale_and_voucher_1014(e2e_not_logged_api_client, e2e_staff_api_client, permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts, variant_price, sale_discount_value, sale_discount_type, expected_sale_discount, voucher_discount_value, voucher_discount_type, expected_voucher_discount, expected_unit_price):\n    if False:\n        i = 10\n    permissions = [permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts]\n    assign_permissions(e2e_staff_api_client, permissions)\n    (warehouse_id, channel_id, channel_slug, shipping_method_id) = prepare_shop(e2e_staff_api_client)\n    (_product_id, product_variant_id, product_variant_price) = prepare_product(e2e_staff_api_client, warehouse_id, channel_id, variant_price)\n    (sale_id, sale_discount_value) = prepare_sale_for_variant(e2e_staff_api_client, channel_id, product_variant_id, sale_discount_type, sale_discount_value)\n    (voucher_discount_value, voucher_code) = prepare_voucher(e2e_staff_api_client, channel_id, 'VOUCHER001', voucher_discount_type, voucher_discount_value)\n    lines = [{'variantId': product_variant_id, 'quantity': 1}]\n    checkout_data = checkout_create(e2e_not_logged_api_client, lines, channel_slug, email='testEmail@example.com', set_default_billing_address=True, set_default_shipping_address=True)\n    checkout_id = checkout_data['id']\n    checkout_lines = checkout_data['lines'][0]\n    shipping_method_id = checkout_data['shippingMethods'][0]['id']\n    assert checkout_data['isShippingRequired'] is True\n    unit_price_on_sale = round(float(product_variant_price - expected_sale_discount), 2)\n    assert checkout_lines['unitPrice']['gross']['amount'] == unit_price_on_sale\n    assert checkout_lines['undiscountedUnitPrice']['amount'] == product_variant_price\n    checkout_data = checkout_add_promo_code(e2e_not_logged_api_client, checkout_id, voucher_code)\n    assert checkout_data['discount']['amount'] == expected_voucher_discount\n    assert checkout_data['lines'][0]['unitPrice']['gross']['amount'] == round(float(unit_price_on_sale - expected_voucher_discount), 2)\n    lines_add = [{'variantId': product_variant_id, 'quantity': 1}]\n    checkout_data = checkout_lines_add(e2e_staff_api_client, checkout_id, lines_add)\n    checkout_lines = checkout_data['lines'][0]\n    assert checkout_lines['quantity'] == 2\n    assert checkout_lines['unitPrice']['gross']['amount'] == expected_unit_price\n    subtotal_amount = expected_unit_price * 2\n    assert checkout_lines['totalPrice']['gross']['amount'] == subtotal_amount\n    checkout_data = checkout_delivery_method_update(e2e_not_logged_api_client, checkout_id, shipping_method_id)\n    assert checkout_data['deliveryMethod']['id'] == shipping_method_id\n    shipping_price = checkout_data['deliveryMethod']['price']['amount']\n    total_gross_amount = round(subtotal_amount + shipping_price, 2)\n    assert checkout_data['totalPrice']['gross']['amount'] == total_gross_amount\n    checkout_dummy_payment_create(e2e_not_logged_api_client, checkout_id, total_gross_amount)\n    order_data = checkout_complete(e2e_not_logged_api_client, checkout_id)\n    assert order_data['status'] == 'UNFULFILLED'\n    assert order_data['discounts'][0]['type'] == 'VOUCHER'\n    assert order_data['voucher']['code'] == voucher_code\n    order_line = order_data['lines'][0]\n    assert order_line['unitDiscountType'] == 'FIXED'\n    assert order_line['unitPrice']['gross']['amount'] == expected_unit_price\n    assert order_line['unitDiscountReason'] == f'Sale: {sale_id}'\n    assert order_data['total']['gross']['amount'] == total_gross_amount\n    assert order_data['subtotal']['gross']['amount'] == subtotal_amount\n    assert order_line['undiscountedUnitPrice']['gross']['amount'] == float(product_variant_price)",
            "@pytest.mark.e2e\n@pytest.mark.parametrize(('variant_price', 'sale_discount_value', 'sale_discount_type', 'expected_sale_discount', 'voucher_discount_value', 'voucher_discount_type', 'expected_voucher_discount', 'expected_unit_price'), [('19.99', 13, 'PERCENTAGE', 2.6, 13, 'PERCENTAGE', 2.26, 15.13), ('30', 10, 'FIXED', 10, 5, 'FIXED', 5, 17.5), ('56.50', 19.99, 'FIXED', 19.99, 33, 'PERCENTAGE', 12.05, 24.46), ('77.77', 17.5, 'PERCENTAGE', 13.61, 25, 'FIXED', 25, 51.66)])\ndef test_checkout_calculate_discount_for_sale_and_voucher_1014(e2e_not_logged_api_client, e2e_staff_api_client, permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts, variant_price, sale_discount_value, sale_discount_type, expected_sale_discount, voucher_discount_value, voucher_discount_type, expected_voucher_discount, expected_unit_price):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    permissions = [permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts]\n    assign_permissions(e2e_staff_api_client, permissions)\n    (warehouse_id, channel_id, channel_slug, shipping_method_id) = prepare_shop(e2e_staff_api_client)\n    (_product_id, product_variant_id, product_variant_price) = prepare_product(e2e_staff_api_client, warehouse_id, channel_id, variant_price)\n    (sale_id, sale_discount_value) = prepare_sale_for_variant(e2e_staff_api_client, channel_id, product_variant_id, sale_discount_type, sale_discount_value)\n    (voucher_discount_value, voucher_code) = prepare_voucher(e2e_staff_api_client, channel_id, 'VOUCHER001', voucher_discount_type, voucher_discount_value)\n    lines = [{'variantId': product_variant_id, 'quantity': 1}]\n    checkout_data = checkout_create(e2e_not_logged_api_client, lines, channel_slug, email='testEmail@example.com', set_default_billing_address=True, set_default_shipping_address=True)\n    checkout_id = checkout_data['id']\n    checkout_lines = checkout_data['lines'][0]\n    shipping_method_id = checkout_data['shippingMethods'][0]['id']\n    assert checkout_data['isShippingRequired'] is True\n    unit_price_on_sale = round(float(product_variant_price - expected_sale_discount), 2)\n    assert checkout_lines['unitPrice']['gross']['amount'] == unit_price_on_sale\n    assert checkout_lines['undiscountedUnitPrice']['amount'] == product_variant_price\n    checkout_data = checkout_add_promo_code(e2e_not_logged_api_client, checkout_id, voucher_code)\n    assert checkout_data['discount']['amount'] == expected_voucher_discount\n    assert checkout_data['lines'][0]['unitPrice']['gross']['amount'] == round(float(unit_price_on_sale - expected_voucher_discount), 2)\n    lines_add = [{'variantId': product_variant_id, 'quantity': 1}]\n    checkout_data = checkout_lines_add(e2e_staff_api_client, checkout_id, lines_add)\n    checkout_lines = checkout_data['lines'][0]\n    assert checkout_lines['quantity'] == 2\n    assert checkout_lines['unitPrice']['gross']['amount'] == expected_unit_price\n    subtotal_amount = expected_unit_price * 2\n    assert checkout_lines['totalPrice']['gross']['amount'] == subtotal_amount\n    checkout_data = checkout_delivery_method_update(e2e_not_logged_api_client, checkout_id, shipping_method_id)\n    assert checkout_data['deliveryMethod']['id'] == shipping_method_id\n    shipping_price = checkout_data['deliveryMethod']['price']['amount']\n    total_gross_amount = round(subtotal_amount + shipping_price, 2)\n    assert checkout_data['totalPrice']['gross']['amount'] == total_gross_amount\n    checkout_dummy_payment_create(e2e_not_logged_api_client, checkout_id, total_gross_amount)\n    order_data = checkout_complete(e2e_not_logged_api_client, checkout_id)\n    assert order_data['status'] == 'UNFULFILLED'\n    assert order_data['discounts'][0]['type'] == 'VOUCHER'\n    assert order_data['voucher']['code'] == voucher_code\n    order_line = order_data['lines'][0]\n    assert order_line['unitDiscountType'] == 'FIXED'\n    assert order_line['unitPrice']['gross']['amount'] == expected_unit_price\n    assert order_line['unitDiscountReason'] == f'Sale: {sale_id}'\n    assert order_data['total']['gross']['amount'] == total_gross_amount\n    assert order_data['subtotal']['gross']['amount'] == subtotal_amount\n    assert order_line['undiscountedUnitPrice']['gross']['amount'] == float(product_variant_price)",
            "@pytest.mark.e2e\n@pytest.mark.parametrize(('variant_price', 'sale_discount_value', 'sale_discount_type', 'expected_sale_discount', 'voucher_discount_value', 'voucher_discount_type', 'expected_voucher_discount', 'expected_unit_price'), [('19.99', 13, 'PERCENTAGE', 2.6, 13, 'PERCENTAGE', 2.26, 15.13), ('30', 10, 'FIXED', 10, 5, 'FIXED', 5, 17.5), ('56.50', 19.99, 'FIXED', 19.99, 33, 'PERCENTAGE', 12.05, 24.46), ('77.77', 17.5, 'PERCENTAGE', 13.61, 25, 'FIXED', 25, 51.66)])\ndef test_checkout_calculate_discount_for_sale_and_voucher_1014(e2e_not_logged_api_client, e2e_staff_api_client, permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts, variant_price, sale_discount_value, sale_discount_type, expected_sale_discount, voucher_discount_value, voucher_discount_type, expected_voucher_discount, expected_unit_price):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    permissions = [permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts]\n    assign_permissions(e2e_staff_api_client, permissions)\n    (warehouse_id, channel_id, channel_slug, shipping_method_id) = prepare_shop(e2e_staff_api_client)\n    (_product_id, product_variant_id, product_variant_price) = prepare_product(e2e_staff_api_client, warehouse_id, channel_id, variant_price)\n    (sale_id, sale_discount_value) = prepare_sale_for_variant(e2e_staff_api_client, channel_id, product_variant_id, sale_discount_type, sale_discount_value)\n    (voucher_discount_value, voucher_code) = prepare_voucher(e2e_staff_api_client, channel_id, 'VOUCHER001', voucher_discount_type, voucher_discount_value)\n    lines = [{'variantId': product_variant_id, 'quantity': 1}]\n    checkout_data = checkout_create(e2e_not_logged_api_client, lines, channel_slug, email='testEmail@example.com', set_default_billing_address=True, set_default_shipping_address=True)\n    checkout_id = checkout_data['id']\n    checkout_lines = checkout_data['lines'][0]\n    shipping_method_id = checkout_data['shippingMethods'][0]['id']\n    assert checkout_data['isShippingRequired'] is True\n    unit_price_on_sale = round(float(product_variant_price - expected_sale_discount), 2)\n    assert checkout_lines['unitPrice']['gross']['amount'] == unit_price_on_sale\n    assert checkout_lines['undiscountedUnitPrice']['amount'] == product_variant_price\n    checkout_data = checkout_add_promo_code(e2e_not_logged_api_client, checkout_id, voucher_code)\n    assert checkout_data['discount']['amount'] == expected_voucher_discount\n    assert checkout_data['lines'][0]['unitPrice']['gross']['amount'] == round(float(unit_price_on_sale - expected_voucher_discount), 2)\n    lines_add = [{'variantId': product_variant_id, 'quantity': 1}]\n    checkout_data = checkout_lines_add(e2e_staff_api_client, checkout_id, lines_add)\n    checkout_lines = checkout_data['lines'][0]\n    assert checkout_lines['quantity'] == 2\n    assert checkout_lines['unitPrice']['gross']['amount'] == expected_unit_price\n    subtotal_amount = expected_unit_price * 2\n    assert checkout_lines['totalPrice']['gross']['amount'] == subtotal_amount\n    checkout_data = checkout_delivery_method_update(e2e_not_logged_api_client, checkout_id, shipping_method_id)\n    assert checkout_data['deliveryMethod']['id'] == shipping_method_id\n    shipping_price = checkout_data['deliveryMethod']['price']['amount']\n    total_gross_amount = round(subtotal_amount + shipping_price, 2)\n    assert checkout_data['totalPrice']['gross']['amount'] == total_gross_amount\n    checkout_dummy_payment_create(e2e_not_logged_api_client, checkout_id, total_gross_amount)\n    order_data = checkout_complete(e2e_not_logged_api_client, checkout_id)\n    assert order_data['status'] == 'UNFULFILLED'\n    assert order_data['discounts'][0]['type'] == 'VOUCHER'\n    assert order_data['voucher']['code'] == voucher_code\n    order_line = order_data['lines'][0]\n    assert order_line['unitDiscountType'] == 'FIXED'\n    assert order_line['unitPrice']['gross']['amount'] == expected_unit_price\n    assert order_line['unitDiscountReason'] == f'Sale: {sale_id}'\n    assert order_data['total']['gross']['amount'] == total_gross_amount\n    assert order_data['subtotal']['gross']['amount'] == subtotal_amount\n    assert order_line['undiscountedUnitPrice']['gross']['amount'] == float(product_variant_price)",
            "@pytest.mark.e2e\n@pytest.mark.parametrize(('variant_price', 'sale_discount_value', 'sale_discount_type', 'expected_sale_discount', 'voucher_discount_value', 'voucher_discount_type', 'expected_voucher_discount', 'expected_unit_price'), [('19.99', 13, 'PERCENTAGE', 2.6, 13, 'PERCENTAGE', 2.26, 15.13), ('30', 10, 'FIXED', 10, 5, 'FIXED', 5, 17.5), ('56.50', 19.99, 'FIXED', 19.99, 33, 'PERCENTAGE', 12.05, 24.46), ('77.77', 17.5, 'PERCENTAGE', 13.61, 25, 'FIXED', 25, 51.66)])\ndef test_checkout_calculate_discount_for_sale_and_voucher_1014(e2e_not_logged_api_client, e2e_staff_api_client, permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts, variant_price, sale_discount_value, sale_discount_type, expected_sale_discount, voucher_discount_value, voucher_discount_type, expected_voucher_discount, expected_unit_price):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    permissions = [permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts]\n    assign_permissions(e2e_staff_api_client, permissions)\n    (warehouse_id, channel_id, channel_slug, shipping_method_id) = prepare_shop(e2e_staff_api_client)\n    (_product_id, product_variant_id, product_variant_price) = prepare_product(e2e_staff_api_client, warehouse_id, channel_id, variant_price)\n    (sale_id, sale_discount_value) = prepare_sale_for_variant(e2e_staff_api_client, channel_id, product_variant_id, sale_discount_type, sale_discount_value)\n    (voucher_discount_value, voucher_code) = prepare_voucher(e2e_staff_api_client, channel_id, 'VOUCHER001', voucher_discount_type, voucher_discount_value)\n    lines = [{'variantId': product_variant_id, 'quantity': 1}]\n    checkout_data = checkout_create(e2e_not_logged_api_client, lines, channel_slug, email='testEmail@example.com', set_default_billing_address=True, set_default_shipping_address=True)\n    checkout_id = checkout_data['id']\n    checkout_lines = checkout_data['lines'][0]\n    shipping_method_id = checkout_data['shippingMethods'][0]['id']\n    assert checkout_data['isShippingRequired'] is True\n    unit_price_on_sale = round(float(product_variant_price - expected_sale_discount), 2)\n    assert checkout_lines['unitPrice']['gross']['amount'] == unit_price_on_sale\n    assert checkout_lines['undiscountedUnitPrice']['amount'] == product_variant_price\n    checkout_data = checkout_add_promo_code(e2e_not_logged_api_client, checkout_id, voucher_code)\n    assert checkout_data['discount']['amount'] == expected_voucher_discount\n    assert checkout_data['lines'][0]['unitPrice']['gross']['amount'] == round(float(unit_price_on_sale - expected_voucher_discount), 2)\n    lines_add = [{'variantId': product_variant_id, 'quantity': 1}]\n    checkout_data = checkout_lines_add(e2e_staff_api_client, checkout_id, lines_add)\n    checkout_lines = checkout_data['lines'][0]\n    assert checkout_lines['quantity'] == 2\n    assert checkout_lines['unitPrice']['gross']['amount'] == expected_unit_price\n    subtotal_amount = expected_unit_price * 2\n    assert checkout_lines['totalPrice']['gross']['amount'] == subtotal_amount\n    checkout_data = checkout_delivery_method_update(e2e_not_logged_api_client, checkout_id, shipping_method_id)\n    assert checkout_data['deliveryMethod']['id'] == shipping_method_id\n    shipping_price = checkout_data['deliveryMethod']['price']['amount']\n    total_gross_amount = round(subtotal_amount + shipping_price, 2)\n    assert checkout_data['totalPrice']['gross']['amount'] == total_gross_amount\n    checkout_dummy_payment_create(e2e_not_logged_api_client, checkout_id, total_gross_amount)\n    order_data = checkout_complete(e2e_not_logged_api_client, checkout_id)\n    assert order_data['status'] == 'UNFULFILLED'\n    assert order_data['discounts'][0]['type'] == 'VOUCHER'\n    assert order_data['voucher']['code'] == voucher_code\n    order_line = order_data['lines'][0]\n    assert order_line['unitDiscountType'] == 'FIXED'\n    assert order_line['unitPrice']['gross']['amount'] == expected_unit_price\n    assert order_line['unitDiscountReason'] == f'Sale: {sale_id}'\n    assert order_data['total']['gross']['amount'] == total_gross_amount\n    assert order_data['subtotal']['gross']['amount'] == subtotal_amount\n    assert order_line['undiscountedUnitPrice']['gross']['amount'] == float(product_variant_price)",
            "@pytest.mark.e2e\n@pytest.mark.parametrize(('variant_price', 'sale_discount_value', 'sale_discount_type', 'expected_sale_discount', 'voucher_discount_value', 'voucher_discount_type', 'expected_voucher_discount', 'expected_unit_price'), [('19.99', 13, 'PERCENTAGE', 2.6, 13, 'PERCENTAGE', 2.26, 15.13), ('30', 10, 'FIXED', 10, 5, 'FIXED', 5, 17.5), ('56.50', 19.99, 'FIXED', 19.99, 33, 'PERCENTAGE', 12.05, 24.46), ('77.77', 17.5, 'PERCENTAGE', 13.61, 25, 'FIXED', 25, 51.66)])\ndef test_checkout_calculate_discount_for_sale_and_voucher_1014(e2e_not_logged_api_client, e2e_staff_api_client, permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts, variant_price, sale_discount_value, sale_discount_type, expected_sale_discount, voucher_discount_value, voucher_discount_type, expected_voucher_discount, expected_unit_price):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    permissions = [permission_manage_products, permission_manage_channels, permission_manage_shipping, permission_manage_product_types_and_attributes, permission_manage_discounts]\n    assign_permissions(e2e_staff_api_client, permissions)\n    (warehouse_id, channel_id, channel_slug, shipping_method_id) = prepare_shop(e2e_staff_api_client)\n    (_product_id, product_variant_id, product_variant_price) = prepare_product(e2e_staff_api_client, warehouse_id, channel_id, variant_price)\n    (sale_id, sale_discount_value) = prepare_sale_for_variant(e2e_staff_api_client, channel_id, product_variant_id, sale_discount_type, sale_discount_value)\n    (voucher_discount_value, voucher_code) = prepare_voucher(e2e_staff_api_client, channel_id, 'VOUCHER001', voucher_discount_type, voucher_discount_value)\n    lines = [{'variantId': product_variant_id, 'quantity': 1}]\n    checkout_data = checkout_create(e2e_not_logged_api_client, lines, channel_slug, email='testEmail@example.com', set_default_billing_address=True, set_default_shipping_address=True)\n    checkout_id = checkout_data['id']\n    checkout_lines = checkout_data['lines'][0]\n    shipping_method_id = checkout_data['shippingMethods'][0]['id']\n    assert checkout_data['isShippingRequired'] is True\n    unit_price_on_sale = round(float(product_variant_price - expected_sale_discount), 2)\n    assert checkout_lines['unitPrice']['gross']['amount'] == unit_price_on_sale\n    assert checkout_lines['undiscountedUnitPrice']['amount'] == product_variant_price\n    checkout_data = checkout_add_promo_code(e2e_not_logged_api_client, checkout_id, voucher_code)\n    assert checkout_data['discount']['amount'] == expected_voucher_discount\n    assert checkout_data['lines'][0]['unitPrice']['gross']['amount'] == round(float(unit_price_on_sale - expected_voucher_discount), 2)\n    lines_add = [{'variantId': product_variant_id, 'quantity': 1}]\n    checkout_data = checkout_lines_add(e2e_staff_api_client, checkout_id, lines_add)\n    checkout_lines = checkout_data['lines'][0]\n    assert checkout_lines['quantity'] == 2\n    assert checkout_lines['unitPrice']['gross']['amount'] == expected_unit_price\n    subtotal_amount = expected_unit_price * 2\n    assert checkout_lines['totalPrice']['gross']['amount'] == subtotal_amount\n    checkout_data = checkout_delivery_method_update(e2e_not_logged_api_client, checkout_id, shipping_method_id)\n    assert checkout_data['deliveryMethod']['id'] == shipping_method_id\n    shipping_price = checkout_data['deliveryMethod']['price']['amount']\n    total_gross_amount = round(subtotal_amount + shipping_price, 2)\n    assert checkout_data['totalPrice']['gross']['amount'] == total_gross_amount\n    checkout_dummy_payment_create(e2e_not_logged_api_client, checkout_id, total_gross_amount)\n    order_data = checkout_complete(e2e_not_logged_api_client, checkout_id)\n    assert order_data['status'] == 'UNFULFILLED'\n    assert order_data['discounts'][0]['type'] == 'VOUCHER'\n    assert order_data['voucher']['code'] == voucher_code\n    order_line = order_data['lines'][0]\n    assert order_line['unitDiscountType'] == 'FIXED'\n    assert order_line['unitPrice']['gross']['amount'] == expected_unit_price\n    assert order_line['unitDiscountReason'] == f'Sale: {sale_id}'\n    assert order_data['total']['gross']['amount'] == total_gross_amount\n    assert order_data['subtotal']['gross']['amount'] == subtotal_amount\n    assert order_line['undiscountedUnitPrice']['gross']['amount'] == float(product_variant_price)"
        ]
    }
]
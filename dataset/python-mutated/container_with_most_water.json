[
    {
        "func_name": "max_area",
        "original": "def max_area(height):\n    l = 0\n    r = len(height) - 1\n    max_height = 0\n    while l < r:\n        left = height[l]\n        right = height[r]\n        current_height = min(left, right) * (r - l)\n        max_height = max(max_height, current_height)\n        if left < right:\n            while l < r and left >= height[l]:\n                l += 1\n        else:\n            while l < r and right >= height[r]:\n                r -= 1\n    return max_height",
        "mutated": [
            "def max_area(height):\n    if False:\n        i = 10\n    l = 0\n    r = len(height) - 1\n    max_height = 0\n    while l < r:\n        left = height[l]\n        right = height[r]\n        current_height = min(left, right) * (r - l)\n        max_height = max(max_height, current_height)\n        if left < right:\n            while l < r and left >= height[l]:\n                l += 1\n        else:\n            while l < r and right >= height[r]:\n                r -= 1\n    return max_height",
            "def max_area(height):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    l = 0\n    r = len(height) - 1\n    max_height = 0\n    while l < r:\n        left = height[l]\n        right = height[r]\n        current_height = min(left, right) * (r - l)\n        max_height = max(max_height, current_height)\n        if left < right:\n            while l < r and left >= height[l]:\n                l += 1\n        else:\n            while l < r and right >= height[r]:\n                r -= 1\n    return max_height",
            "def max_area(height):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    l = 0\n    r = len(height) - 1\n    max_height = 0\n    while l < r:\n        left = height[l]\n        right = height[r]\n        current_height = min(left, right) * (r - l)\n        max_height = max(max_height, current_height)\n        if left < right:\n            while l < r and left >= height[l]:\n                l += 1\n        else:\n            while l < r and right >= height[r]:\n                r -= 1\n    return max_height",
            "def max_area(height):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    l = 0\n    r = len(height) - 1\n    max_height = 0\n    while l < r:\n        left = height[l]\n        right = height[r]\n        current_height = min(left, right) * (r - l)\n        max_height = max(max_height, current_height)\n        if left < right:\n            while l < r and left >= height[l]:\n                l += 1\n        else:\n            while l < r and right >= height[r]:\n                r -= 1\n    return max_height",
            "def max_area(height):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    l = 0\n    r = len(height) - 1\n    max_height = 0\n    while l < r:\n        left = height[l]\n        right = height[r]\n        current_height = min(left, right) * (r - l)\n        max_height = max(max_height, current_height)\n        if left < right:\n            while l < r and left >= height[l]:\n                l += 1\n        else:\n            while l < r and right >= height[r]:\n                r -= 1\n    return max_height"
        ]
    }
]
[
    {
        "func_name": "arrayStringsAreEqual",
        "original": "def arrayStringsAreEqual(self, word1, word2):\n    \"\"\"\n        :type word1: List[str]\n        :type word2: List[str]\n        :rtype: bool\n        \"\"\"\n    idx1 = idx2 = arr_idx1 = arr_idx2 = 0\n    while arr_idx1 < len(word1) and arr_idx2 < len(word2):\n        if word1[arr_idx1][idx1] != word2[arr_idx2][idx2]:\n            break\n        idx1 += 1\n        if idx1 == len(word1[arr_idx1]):\n            idx1 = 0\n            arr_idx1 += 1\n        idx2 += 1\n        if idx2 == len(word2[arr_idx2]):\n            idx2 = 0\n            arr_idx2 += 1\n    return arr_idx1 == len(word1) and arr_idx2 == len(word2)",
        "mutated": [
            "def arrayStringsAreEqual(self, word1, word2):\n    if False:\n        i = 10\n    '\\n        :type word1: List[str]\\n        :type word2: List[str]\\n        :rtype: bool\\n        '\n    idx1 = idx2 = arr_idx1 = arr_idx2 = 0\n    while arr_idx1 < len(word1) and arr_idx2 < len(word2):\n        if word1[arr_idx1][idx1] != word2[arr_idx2][idx2]:\n            break\n        idx1 += 1\n        if idx1 == len(word1[arr_idx1]):\n            idx1 = 0\n            arr_idx1 += 1\n        idx2 += 1\n        if idx2 == len(word2[arr_idx2]):\n            idx2 = 0\n            arr_idx2 += 1\n    return arr_idx1 == len(word1) and arr_idx2 == len(word2)",
            "def arrayStringsAreEqual(self, word1, word2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type word1: List[str]\\n        :type word2: List[str]\\n        :rtype: bool\\n        '\n    idx1 = idx2 = arr_idx1 = arr_idx2 = 0\n    while arr_idx1 < len(word1) and arr_idx2 < len(word2):\n        if word1[arr_idx1][idx1] != word2[arr_idx2][idx2]:\n            break\n        idx1 += 1\n        if idx1 == len(word1[arr_idx1]):\n            idx1 = 0\n            arr_idx1 += 1\n        idx2 += 1\n        if idx2 == len(word2[arr_idx2]):\n            idx2 = 0\n            arr_idx2 += 1\n    return arr_idx1 == len(word1) and arr_idx2 == len(word2)",
            "def arrayStringsAreEqual(self, word1, word2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type word1: List[str]\\n        :type word2: List[str]\\n        :rtype: bool\\n        '\n    idx1 = idx2 = arr_idx1 = arr_idx2 = 0\n    while arr_idx1 < len(word1) and arr_idx2 < len(word2):\n        if word1[arr_idx1][idx1] != word2[arr_idx2][idx2]:\n            break\n        idx1 += 1\n        if idx1 == len(word1[arr_idx1]):\n            idx1 = 0\n            arr_idx1 += 1\n        idx2 += 1\n        if idx2 == len(word2[arr_idx2]):\n            idx2 = 0\n            arr_idx2 += 1\n    return arr_idx1 == len(word1) and arr_idx2 == len(word2)",
            "def arrayStringsAreEqual(self, word1, word2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type word1: List[str]\\n        :type word2: List[str]\\n        :rtype: bool\\n        '\n    idx1 = idx2 = arr_idx1 = arr_idx2 = 0\n    while arr_idx1 < len(word1) and arr_idx2 < len(word2):\n        if word1[arr_idx1][idx1] != word2[arr_idx2][idx2]:\n            break\n        idx1 += 1\n        if idx1 == len(word1[arr_idx1]):\n            idx1 = 0\n            arr_idx1 += 1\n        idx2 += 1\n        if idx2 == len(word2[arr_idx2]):\n            idx2 = 0\n            arr_idx2 += 1\n    return arr_idx1 == len(word1) and arr_idx2 == len(word2)",
            "def arrayStringsAreEqual(self, word1, word2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type word1: List[str]\\n        :type word2: List[str]\\n        :rtype: bool\\n        '\n    idx1 = idx2 = arr_idx1 = arr_idx2 = 0\n    while arr_idx1 < len(word1) and arr_idx2 < len(word2):\n        if word1[arr_idx1][idx1] != word2[arr_idx2][idx2]:\n            break\n        idx1 += 1\n        if idx1 == len(word1[arr_idx1]):\n            idx1 = 0\n            arr_idx1 += 1\n        idx2 += 1\n        if idx2 == len(word2[arr_idx2]):\n            idx2 = 0\n            arr_idx2 += 1\n    return arr_idx1 == len(word1) and arr_idx2 == len(word2)"
        ]
    }
]
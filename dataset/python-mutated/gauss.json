[
    {
        "func_name": "gauss",
        "original": "def gauss(candles: np.ndarray, period: int=14, poles: int=4, source_type: str='close', sequential: bool=False) -> Union[float, np.ndarray]:\n    \"\"\"\n    Gaussian Filter\n\n    :param candles: np.ndarray\n    :param period: int - default: 14\n    :param poles: int - default: 4\n    :param source_type: str - default: \"close\"\n    :param sequential: bool - default: False\n\n    :return: float | np.ndarray\n    \"\"\"\n    if len(candles.shape) == 1:\n        source = candles\n    else:\n        candles = slice_candles(candles, sequential)\n        source = get_candle_source(candles, source_type=source_type)\n    (fil, to_fill) = gauss_fast(source, period, poles)\n    if to_fill != 0:\n        res = np.insert(fil[poles:], 0, np.repeat(np.nan, to_fill))\n    else:\n        res = fil[poles:]\n    return res if sequential else res[-1]",
        "mutated": [
            "def gauss(candles: np.ndarray, period: int=14, poles: int=4, source_type: str='close', sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n    '\\n    Gaussian Filter\\n\\n    :param candles: np.ndarray\\n    :param period: int - default: 14\\n    :param poles: int - default: 4\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    if len(candles.shape) == 1:\n        source = candles\n    else:\n        candles = slice_candles(candles, sequential)\n        source = get_candle_source(candles, source_type=source_type)\n    (fil, to_fill) = gauss_fast(source, period, poles)\n    if to_fill != 0:\n        res = np.insert(fil[poles:], 0, np.repeat(np.nan, to_fill))\n    else:\n        res = fil[poles:]\n    return res if sequential else res[-1]",
            "def gauss(candles: np.ndarray, period: int=14, poles: int=4, source_type: str='close', sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Gaussian Filter\\n\\n    :param candles: np.ndarray\\n    :param period: int - default: 14\\n    :param poles: int - default: 4\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    if len(candles.shape) == 1:\n        source = candles\n    else:\n        candles = slice_candles(candles, sequential)\n        source = get_candle_source(candles, source_type=source_type)\n    (fil, to_fill) = gauss_fast(source, period, poles)\n    if to_fill != 0:\n        res = np.insert(fil[poles:], 0, np.repeat(np.nan, to_fill))\n    else:\n        res = fil[poles:]\n    return res if sequential else res[-1]",
            "def gauss(candles: np.ndarray, period: int=14, poles: int=4, source_type: str='close', sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Gaussian Filter\\n\\n    :param candles: np.ndarray\\n    :param period: int - default: 14\\n    :param poles: int - default: 4\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    if len(candles.shape) == 1:\n        source = candles\n    else:\n        candles = slice_candles(candles, sequential)\n        source = get_candle_source(candles, source_type=source_type)\n    (fil, to_fill) = gauss_fast(source, period, poles)\n    if to_fill != 0:\n        res = np.insert(fil[poles:], 0, np.repeat(np.nan, to_fill))\n    else:\n        res = fil[poles:]\n    return res if sequential else res[-1]",
            "def gauss(candles: np.ndarray, period: int=14, poles: int=4, source_type: str='close', sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Gaussian Filter\\n\\n    :param candles: np.ndarray\\n    :param period: int - default: 14\\n    :param poles: int - default: 4\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    if len(candles.shape) == 1:\n        source = candles\n    else:\n        candles = slice_candles(candles, sequential)\n        source = get_candle_source(candles, source_type=source_type)\n    (fil, to_fill) = gauss_fast(source, period, poles)\n    if to_fill != 0:\n        res = np.insert(fil[poles:], 0, np.repeat(np.nan, to_fill))\n    else:\n        res = fil[poles:]\n    return res if sequential else res[-1]",
            "def gauss(candles: np.ndarray, period: int=14, poles: int=4, source_type: str='close', sequential: bool=False) -> Union[float, np.ndarray]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Gaussian Filter\\n\\n    :param candles: np.ndarray\\n    :param period: int - default: 14\\n    :param poles: int - default: 4\\n    :param source_type: str - default: \"close\"\\n    :param sequential: bool - default: False\\n\\n    :return: float | np.ndarray\\n    '\n    if len(candles.shape) == 1:\n        source = candles\n    else:\n        candles = slice_candles(candles, sequential)\n        source = get_candle_source(candles, source_type=source_type)\n    (fil, to_fill) = gauss_fast(source, period, poles)\n    if to_fill != 0:\n        res = np.insert(fil[poles:], 0, np.repeat(np.nan, to_fill))\n    else:\n        res = fil[poles:]\n    return res if sequential else res[-1]"
        ]
    },
    {
        "func_name": "gauss_fast",
        "original": "@njit\ndef gauss_fast(source, period, poles):\n    N = source.size\n    source = source[~np.isnan(source)]\n    to_fill = N - source.size\n    PI = np.pi\n    beta = (1 - np.cos(2 * PI / period)) / (np.power(2, 1 / poles) - 1)\n    alpha = -beta + np.sqrt(np.power(beta, 2) + 2 * beta)\n    fil = np.zeros(poles + source.size)\n    if poles == 1:\n        coeff = np.array([alpha, 1 - alpha])\n    elif poles == 2:\n        coeff = np.array([alpha ** 2, 2 * (1 - alpha), -(1 - alpha) ** 2])\n    elif poles == 3:\n        coeff = np.array([alpha ** 3, 3 * (1 - alpha), -3 * (1 - alpha) ** 2, (1 - alpha) ** 3])\n    elif poles == 4:\n        coeff = np.array([alpha ** 4, 4 * (1 - alpha), -6 * (1 - alpha) ** 2, 4 * (1 - alpha) ** 3, -(1 - alpha) ** 4])\n    for i in range(source.size):\n        if poles == 1:\n            val = np.array([source[i].item(), fil[i]])\n        elif poles == 2:\n            val = np.array([source[i].item(), fil[1 + i], fil[i]])\n        elif poles == 3:\n            val = np.array([source[i].item(), fil[2 + i], fil[1 + i], fil[i]])\n        elif poles == 4:\n            val = np.array([source[i].item(), fil[3 + i], fil[2 + i], fil[1 + i], fil[i]])\n        fil[poles + i] = np.dot(coeff, val)\n    return (fil, to_fill)",
        "mutated": [
            "@njit\ndef gauss_fast(source, period, poles):\n    if False:\n        i = 10\n    N = source.size\n    source = source[~np.isnan(source)]\n    to_fill = N - source.size\n    PI = np.pi\n    beta = (1 - np.cos(2 * PI / period)) / (np.power(2, 1 / poles) - 1)\n    alpha = -beta + np.sqrt(np.power(beta, 2) + 2 * beta)\n    fil = np.zeros(poles + source.size)\n    if poles == 1:\n        coeff = np.array([alpha, 1 - alpha])\n    elif poles == 2:\n        coeff = np.array([alpha ** 2, 2 * (1 - alpha), -(1 - alpha) ** 2])\n    elif poles == 3:\n        coeff = np.array([alpha ** 3, 3 * (1 - alpha), -3 * (1 - alpha) ** 2, (1 - alpha) ** 3])\n    elif poles == 4:\n        coeff = np.array([alpha ** 4, 4 * (1 - alpha), -6 * (1 - alpha) ** 2, 4 * (1 - alpha) ** 3, -(1 - alpha) ** 4])\n    for i in range(source.size):\n        if poles == 1:\n            val = np.array([source[i].item(), fil[i]])\n        elif poles == 2:\n            val = np.array([source[i].item(), fil[1 + i], fil[i]])\n        elif poles == 3:\n            val = np.array([source[i].item(), fil[2 + i], fil[1 + i], fil[i]])\n        elif poles == 4:\n            val = np.array([source[i].item(), fil[3 + i], fil[2 + i], fil[1 + i], fil[i]])\n        fil[poles + i] = np.dot(coeff, val)\n    return (fil, to_fill)",
            "@njit\ndef gauss_fast(source, period, poles):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    N = source.size\n    source = source[~np.isnan(source)]\n    to_fill = N - source.size\n    PI = np.pi\n    beta = (1 - np.cos(2 * PI / period)) / (np.power(2, 1 / poles) - 1)\n    alpha = -beta + np.sqrt(np.power(beta, 2) + 2 * beta)\n    fil = np.zeros(poles + source.size)\n    if poles == 1:\n        coeff = np.array([alpha, 1 - alpha])\n    elif poles == 2:\n        coeff = np.array([alpha ** 2, 2 * (1 - alpha), -(1 - alpha) ** 2])\n    elif poles == 3:\n        coeff = np.array([alpha ** 3, 3 * (1 - alpha), -3 * (1 - alpha) ** 2, (1 - alpha) ** 3])\n    elif poles == 4:\n        coeff = np.array([alpha ** 4, 4 * (1 - alpha), -6 * (1 - alpha) ** 2, 4 * (1 - alpha) ** 3, -(1 - alpha) ** 4])\n    for i in range(source.size):\n        if poles == 1:\n            val = np.array([source[i].item(), fil[i]])\n        elif poles == 2:\n            val = np.array([source[i].item(), fil[1 + i], fil[i]])\n        elif poles == 3:\n            val = np.array([source[i].item(), fil[2 + i], fil[1 + i], fil[i]])\n        elif poles == 4:\n            val = np.array([source[i].item(), fil[3 + i], fil[2 + i], fil[1 + i], fil[i]])\n        fil[poles + i] = np.dot(coeff, val)\n    return (fil, to_fill)",
            "@njit\ndef gauss_fast(source, period, poles):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    N = source.size\n    source = source[~np.isnan(source)]\n    to_fill = N - source.size\n    PI = np.pi\n    beta = (1 - np.cos(2 * PI / period)) / (np.power(2, 1 / poles) - 1)\n    alpha = -beta + np.sqrt(np.power(beta, 2) + 2 * beta)\n    fil = np.zeros(poles + source.size)\n    if poles == 1:\n        coeff = np.array([alpha, 1 - alpha])\n    elif poles == 2:\n        coeff = np.array([alpha ** 2, 2 * (1 - alpha), -(1 - alpha) ** 2])\n    elif poles == 3:\n        coeff = np.array([alpha ** 3, 3 * (1 - alpha), -3 * (1 - alpha) ** 2, (1 - alpha) ** 3])\n    elif poles == 4:\n        coeff = np.array([alpha ** 4, 4 * (1 - alpha), -6 * (1 - alpha) ** 2, 4 * (1 - alpha) ** 3, -(1 - alpha) ** 4])\n    for i in range(source.size):\n        if poles == 1:\n            val = np.array([source[i].item(), fil[i]])\n        elif poles == 2:\n            val = np.array([source[i].item(), fil[1 + i], fil[i]])\n        elif poles == 3:\n            val = np.array([source[i].item(), fil[2 + i], fil[1 + i], fil[i]])\n        elif poles == 4:\n            val = np.array([source[i].item(), fil[3 + i], fil[2 + i], fil[1 + i], fil[i]])\n        fil[poles + i] = np.dot(coeff, val)\n    return (fil, to_fill)",
            "@njit\ndef gauss_fast(source, period, poles):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    N = source.size\n    source = source[~np.isnan(source)]\n    to_fill = N - source.size\n    PI = np.pi\n    beta = (1 - np.cos(2 * PI / period)) / (np.power(2, 1 / poles) - 1)\n    alpha = -beta + np.sqrt(np.power(beta, 2) + 2 * beta)\n    fil = np.zeros(poles + source.size)\n    if poles == 1:\n        coeff = np.array([alpha, 1 - alpha])\n    elif poles == 2:\n        coeff = np.array([alpha ** 2, 2 * (1 - alpha), -(1 - alpha) ** 2])\n    elif poles == 3:\n        coeff = np.array([alpha ** 3, 3 * (1 - alpha), -3 * (1 - alpha) ** 2, (1 - alpha) ** 3])\n    elif poles == 4:\n        coeff = np.array([alpha ** 4, 4 * (1 - alpha), -6 * (1 - alpha) ** 2, 4 * (1 - alpha) ** 3, -(1 - alpha) ** 4])\n    for i in range(source.size):\n        if poles == 1:\n            val = np.array([source[i].item(), fil[i]])\n        elif poles == 2:\n            val = np.array([source[i].item(), fil[1 + i], fil[i]])\n        elif poles == 3:\n            val = np.array([source[i].item(), fil[2 + i], fil[1 + i], fil[i]])\n        elif poles == 4:\n            val = np.array([source[i].item(), fil[3 + i], fil[2 + i], fil[1 + i], fil[i]])\n        fil[poles + i] = np.dot(coeff, val)\n    return (fil, to_fill)",
            "@njit\ndef gauss_fast(source, period, poles):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    N = source.size\n    source = source[~np.isnan(source)]\n    to_fill = N - source.size\n    PI = np.pi\n    beta = (1 - np.cos(2 * PI / period)) / (np.power(2, 1 / poles) - 1)\n    alpha = -beta + np.sqrt(np.power(beta, 2) + 2 * beta)\n    fil = np.zeros(poles + source.size)\n    if poles == 1:\n        coeff = np.array([alpha, 1 - alpha])\n    elif poles == 2:\n        coeff = np.array([alpha ** 2, 2 * (1 - alpha), -(1 - alpha) ** 2])\n    elif poles == 3:\n        coeff = np.array([alpha ** 3, 3 * (1 - alpha), -3 * (1 - alpha) ** 2, (1 - alpha) ** 3])\n    elif poles == 4:\n        coeff = np.array([alpha ** 4, 4 * (1 - alpha), -6 * (1 - alpha) ** 2, 4 * (1 - alpha) ** 3, -(1 - alpha) ** 4])\n    for i in range(source.size):\n        if poles == 1:\n            val = np.array([source[i].item(), fil[i]])\n        elif poles == 2:\n            val = np.array([source[i].item(), fil[1 + i], fil[i]])\n        elif poles == 3:\n            val = np.array([source[i].item(), fil[2 + i], fil[1 + i], fil[i]])\n        elif poles == 4:\n            val = np.array([source[i].item(), fil[3 + i], fil[2 + i], fil[1 + i], fil[i]])\n        fil[poles + i] = np.dot(coeff, val)\n    return (fil, to_fill)"
        ]
    }
]
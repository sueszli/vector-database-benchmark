[
    {
        "func_name": "triples_pitagoricos",
        "original": "def triples_pitagoricos(x):\n    print('Los triples menores o iguales a', x, 'estan formados por:')\n    for a in range(1, x + 1):\n        for b in range(a + 1, x + 1):\n            for c in range(b + 1, x + 1):\n                if c != a and c != b:\n                    if a ** 2 + b ** 2 == c ** 2:\n                        triple = [a, b, c]\n                        print(triple)",
        "mutated": [
            "def triples_pitagoricos(x):\n    if False:\n        i = 10\n    print('Los triples menores o iguales a', x, 'estan formados por:')\n    for a in range(1, x + 1):\n        for b in range(a + 1, x + 1):\n            for c in range(b + 1, x + 1):\n                if c != a and c != b:\n                    if a ** 2 + b ** 2 == c ** 2:\n                        triple = [a, b, c]\n                        print(triple)",
            "def triples_pitagoricos(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    print('Los triples menores o iguales a', x, 'estan formados por:')\n    for a in range(1, x + 1):\n        for b in range(a + 1, x + 1):\n            for c in range(b + 1, x + 1):\n                if c != a and c != b:\n                    if a ** 2 + b ** 2 == c ** 2:\n                        triple = [a, b, c]\n                        print(triple)",
            "def triples_pitagoricos(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    print('Los triples menores o iguales a', x, 'estan formados por:')\n    for a in range(1, x + 1):\n        for b in range(a + 1, x + 1):\n            for c in range(b + 1, x + 1):\n                if c != a and c != b:\n                    if a ** 2 + b ** 2 == c ** 2:\n                        triple = [a, b, c]\n                        print(triple)",
            "def triples_pitagoricos(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    print('Los triples menores o iguales a', x, 'estan formados por:')\n    for a in range(1, x + 1):\n        for b in range(a + 1, x + 1):\n            for c in range(b + 1, x + 1):\n                if c != a and c != b:\n                    if a ** 2 + b ** 2 == c ** 2:\n                        triple = [a, b, c]\n                        print(triple)",
            "def triples_pitagoricos(x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    print('Los triples menores o iguales a', x, 'estan formados por:')\n    for a in range(1, x + 1):\n        for b in range(a + 1, x + 1):\n            for c in range(b + 1, x + 1):\n                if c != a and c != b:\n                    if a ** 2 + b ** 2 == c ** 2:\n                        triple = [a, b, c]\n                        print(triple)"
        ]
    }
]
[
    {
        "func_name": "__init__",
        "original": "def __init__(self, foods, cuisines, ratings):\n    \"\"\"\n        :type foods: List[str]\n        :type cuisines: List[str]\n        :type ratings: List[int]\n        \"\"\"\n    self.__food_to_cuisine = {}\n    self.__food_to_rating = {}\n    self.__cusine_to_rating_foods = collections.defaultdict(SortedList)\n    for (food, cuisine, rating) in itertools.izip(foods, cuisines, ratings):\n        self.__food_to_cuisine[food] = cuisine\n        self.__food_to_rating[food] = rating\n        self.__cusine_to_rating_foods[cuisine].add((-rating, food))",
        "mutated": [
            "def __init__(self, foods, cuisines, ratings):\n    if False:\n        i = 10\n    '\\n        :type foods: List[str]\\n        :type cuisines: List[str]\\n        :type ratings: List[int]\\n        '\n    self.__food_to_cuisine = {}\n    self.__food_to_rating = {}\n    self.__cusine_to_rating_foods = collections.defaultdict(SortedList)\n    for (food, cuisine, rating) in itertools.izip(foods, cuisines, ratings):\n        self.__food_to_cuisine[food] = cuisine\n        self.__food_to_rating[food] = rating\n        self.__cusine_to_rating_foods[cuisine].add((-rating, food))",
            "def __init__(self, foods, cuisines, ratings):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type foods: List[str]\\n        :type cuisines: List[str]\\n        :type ratings: List[int]\\n        '\n    self.__food_to_cuisine = {}\n    self.__food_to_rating = {}\n    self.__cusine_to_rating_foods = collections.defaultdict(SortedList)\n    for (food, cuisine, rating) in itertools.izip(foods, cuisines, ratings):\n        self.__food_to_cuisine[food] = cuisine\n        self.__food_to_rating[food] = rating\n        self.__cusine_to_rating_foods[cuisine].add((-rating, food))",
            "def __init__(self, foods, cuisines, ratings):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type foods: List[str]\\n        :type cuisines: List[str]\\n        :type ratings: List[int]\\n        '\n    self.__food_to_cuisine = {}\n    self.__food_to_rating = {}\n    self.__cusine_to_rating_foods = collections.defaultdict(SortedList)\n    for (food, cuisine, rating) in itertools.izip(foods, cuisines, ratings):\n        self.__food_to_cuisine[food] = cuisine\n        self.__food_to_rating[food] = rating\n        self.__cusine_to_rating_foods[cuisine].add((-rating, food))",
            "def __init__(self, foods, cuisines, ratings):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type foods: List[str]\\n        :type cuisines: List[str]\\n        :type ratings: List[int]\\n        '\n    self.__food_to_cuisine = {}\n    self.__food_to_rating = {}\n    self.__cusine_to_rating_foods = collections.defaultdict(SortedList)\n    for (food, cuisine, rating) in itertools.izip(foods, cuisines, ratings):\n        self.__food_to_cuisine[food] = cuisine\n        self.__food_to_rating[food] = rating\n        self.__cusine_to_rating_foods[cuisine].add((-rating, food))",
            "def __init__(self, foods, cuisines, ratings):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type foods: List[str]\\n        :type cuisines: List[str]\\n        :type ratings: List[int]\\n        '\n    self.__food_to_cuisine = {}\n    self.__food_to_rating = {}\n    self.__cusine_to_rating_foods = collections.defaultdict(SortedList)\n    for (food, cuisine, rating) in itertools.izip(foods, cuisines, ratings):\n        self.__food_to_cuisine[food] = cuisine\n        self.__food_to_rating[food] = rating\n        self.__cusine_to_rating_foods[cuisine].add((-rating, food))"
        ]
    },
    {
        "func_name": "changeRating",
        "original": "def changeRating(self, food, newRating):\n    \"\"\"\n        :type food: str\n        :type newRating: int\n        :rtype: None\n        \"\"\"\n    old_rating = self.__food_to_rating[food]\n    cuisine = self.__food_to_cuisine[food]\n    self.__cusine_to_rating_foods[cuisine].remove((-old_rating, food))\n    self.__food_to_rating[food] = newRating\n    self.__cusine_to_rating_foods[cuisine].add((-newRating, food))",
        "mutated": [
            "def changeRating(self, food, newRating):\n    if False:\n        i = 10\n    '\\n        :type food: str\\n        :type newRating: int\\n        :rtype: None\\n        '\n    old_rating = self.__food_to_rating[food]\n    cuisine = self.__food_to_cuisine[food]\n    self.__cusine_to_rating_foods[cuisine].remove((-old_rating, food))\n    self.__food_to_rating[food] = newRating\n    self.__cusine_to_rating_foods[cuisine].add((-newRating, food))",
            "def changeRating(self, food, newRating):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type food: str\\n        :type newRating: int\\n        :rtype: None\\n        '\n    old_rating = self.__food_to_rating[food]\n    cuisine = self.__food_to_cuisine[food]\n    self.__cusine_to_rating_foods[cuisine].remove((-old_rating, food))\n    self.__food_to_rating[food] = newRating\n    self.__cusine_to_rating_foods[cuisine].add((-newRating, food))",
            "def changeRating(self, food, newRating):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type food: str\\n        :type newRating: int\\n        :rtype: None\\n        '\n    old_rating = self.__food_to_rating[food]\n    cuisine = self.__food_to_cuisine[food]\n    self.__cusine_to_rating_foods[cuisine].remove((-old_rating, food))\n    self.__food_to_rating[food] = newRating\n    self.__cusine_to_rating_foods[cuisine].add((-newRating, food))",
            "def changeRating(self, food, newRating):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type food: str\\n        :type newRating: int\\n        :rtype: None\\n        '\n    old_rating = self.__food_to_rating[food]\n    cuisine = self.__food_to_cuisine[food]\n    self.__cusine_to_rating_foods[cuisine].remove((-old_rating, food))\n    self.__food_to_rating[food] = newRating\n    self.__cusine_to_rating_foods[cuisine].add((-newRating, food))",
            "def changeRating(self, food, newRating):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type food: str\\n        :type newRating: int\\n        :rtype: None\\n        '\n    old_rating = self.__food_to_rating[food]\n    cuisine = self.__food_to_cuisine[food]\n    self.__cusine_to_rating_foods[cuisine].remove((-old_rating, food))\n    self.__food_to_rating[food] = newRating\n    self.__cusine_to_rating_foods[cuisine].add((-newRating, food))"
        ]
    },
    {
        "func_name": "highestRated",
        "original": "def highestRated(self, cuisine):\n    \"\"\"\n        :type cuisine: str\n        :rtype: str\n        \"\"\"\n    return self.__cusine_to_rating_foods[cuisine][0][1]",
        "mutated": [
            "def highestRated(self, cuisine):\n    if False:\n        i = 10\n    '\\n        :type cuisine: str\\n        :rtype: str\\n        '\n    return self.__cusine_to_rating_foods[cuisine][0][1]",
            "def highestRated(self, cuisine):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type cuisine: str\\n        :rtype: str\\n        '\n    return self.__cusine_to_rating_foods[cuisine][0][1]",
            "def highestRated(self, cuisine):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type cuisine: str\\n        :rtype: str\\n        '\n    return self.__cusine_to_rating_foods[cuisine][0][1]",
            "def highestRated(self, cuisine):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type cuisine: str\\n        :rtype: str\\n        '\n    return self.__cusine_to_rating_foods[cuisine][0][1]",
            "def highestRated(self, cuisine):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type cuisine: str\\n        :rtype: str\\n        '\n    return self.__cusine_to_rating_foods[cuisine][0][1]"
        ]
    }
]
[
    {
        "func_name": "validTree",
        "original": "def validTree(self, n, edges):\n    if len(edges) != n - 1:\n        return False\n    neighbors = collections.defaultdict(list)\n    for (u, v) in edges:\n        neighbors[u].append(v)\n        neighbors[v].append(u)\n    q = collections.deque([0])\n    visited = set([0])\n    while q:\n        curr = q.popleft()\n        for node in neighbors[curr]:\n            if node not in visited:\n                visited.add(node)\n                q.append(node)\n    return len(visited) == n",
        "mutated": [
            "def validTree(self, n, edges):\n    if False:\n        i = 10\n    if len(edges) != n - 1:\n        return False\n    neighbors = collections.defaultdict(list)\n    for (u, v) in edges:\n        neighbors[u].append(v)\n        neighbors[v].append(u)\n    q = collections.deque([0])\n    visited = set([0])\n    while q:\n        curr = q.popleft()\n        for node in neighbors[curr]:\n            if node not in visited:\n                visited.add(node)\n                q.append(node)\n    return len(visited) == n",
            "def validTree(self, n, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if len(edges) != n - 1:\n        return False\n    neighbors = collections.defaultdict(list)\n    for (u, v) in edges:\n        neighbors[u].append(v)\n        neighbors[v].append(u)\n    q = collections.deque([0])\n    visited = set([0])\n    while q:\n        curr = q.popleft()\n        for node in neighbors[curr]:\n            if node not in visited:\n                visited.add(node)\n                q.append(node)\n    return len(visited) == n",
            "def validTree(self, n, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if len(edges) != n - 1:\n        return False\n    neighbors = collections.defaultdict(list)\n    for (u, v) in edges:\n        neighbors[u].append(v)\n        neighbors[v].append(u)\n    q = collections.deque([0])\n    visited = set([0])\n    while q:\n        curr = q.popleft()\n        for node in neighbors[curr]:\n            if node not in visited:\n                visited.add(node)\n                q.append(node)\n    return len(visited) == n",
            "def validTree(self, n, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if len(edges) != n - 1:\n        return False\n    neighbors = collections.defaultdict(list)\n    for (u, v) in edges:\n        neighbors[u].append(v)\n        neighbors[v].append(u)\n    q = collections.deque([0])\n    visited = set([0])\n    while q:\n        curr = q.popleft()\n        for node in neighbors[curr]:\n            if node not in visited:\n                visited.add(node)\n                q.append(node)\n    return len(visited) == n",
            "def validTree(self, n, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if len(edges) != n - 1:\n        return False\n    neighbors = collections.defaultdict(list)\n    for (u, v) in edges:\n        neighbors[u].append(v)\n        neighbors[v].append(u)\n    q = collections.deque([0])\n    visited = set([0])\n    while q:\n        curr = q.popleft()\n        for node in neighbors[curr]:\n            if node not in visited:\n                visited.add(node)\n                q.append(node)\n    return len(visited) == n"
        ]
    },
    {
        "func_name": "validTree",
        "original": "def validTree(self, n, edges):\n    visited_from = [-1] * n\n    neighbors = collections.defaultdict(list)\n    for (u, v) in edges:\n        neighbors[u].append(v)\n        neighbors[v].append(u)\n    q = collections.deque([0])\n    visited = set([0])\n    while q:\n        i = q.popleft()\n        for node in neighbors[i]:\n            if node != visited_from[i]:\n                if node in visited:\n                    return False\n                else:\n                    visited.add(node)\n                    visited_from[node] = i\n                    q.append(node)\n    return len(visited) == n",
        "mutated": [
            "def validTree(self, n, edges):\n    if False:\n        i = 10\n    visited_from = [-1] * n\n    neighbors = collections.defaultdict(list)\n    for (u, v) in edges:\n        neighbors[u].append(v)\n        neighbors[v].append(u)\n    q = collections.deque([0])\n    visited = set([0])\n    while q:\n        i = q.popleft()\n        for node in neighbors[i]:\n            if node != visited_from[i]:\n                if node in visited:\n                    return False\n                else:\n                    visited.add(node)\n                    visited_from[node] = i\n                    q.append(node)\n    return len(visited) == n",
            "def validTree(self, n, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    visited_from = [-1] * n\n    neighbors = collections.defaultdict(list)\n    for (u, v) in edges:\n        neighbors[u].append(v)\n        neighbors[v].append(u)\n    q = collections.deque([0])\n    visited = set([0])\n    while q:\n        i = q.popleft()\n        for node in neighbors[i]:\n            if node != visited_from[i]:\n                if node in visited:\n                    return False\n                else:\n                    visited.add(node)\n                    visited_from[node] = i\n                    q.append(node)\n    return len(visited) == n",
            "def validTree(self, n, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    visited_from = [-1] * n\n    neighbors = collections.defaultdict(list)\n    for (u, v) in edges:\n        neighbors[u].append(v)\n        neighbors[v].append(u)\n    q = collections.deque([0])\n    visited = set([0])\n    while q:\n        i = q.popleft()\n        for node in neighbors[i]:\n            if node != visited_from[i]:\n                if node in visited:\n                    return False\n                else:\n                    visited.add(node)\n                    visited_from[node] = i\n                    q.append(node)\n    return len(visited) == n",
            "def validTree(self, n, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    visited_from = [-1] * n\n    neighbors = collections.defaultdict(list)\n    for (u, v) in edges:\n        neighbors[u].append(v)\n        neighbors[v].append(u)\n    q = collections.deque([0])\n    visited = set([0])\n    while q:\n        i = q.popleft()\n        for node in neighbors[i]:\n            if node != visited_from[i]:\n                if node in visited:\n                    return False\n                else:\n                    visited.add(node)\n                    visited_from[node] = i\n                    q.append(node)\n    return len(visited) == n",
            "def validTree(self, n, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    visited_from = [-1] * n\n    neighbors = collections.defaultdict(list)\n    for (u, v) in edges:\n        neighbors[u].append(v)\n        neighbors[v].append(u)\n    q = collections.deque([0])\n    visited = set([0])\n    while q:\n        i = q.popleft()\n        for node in neighbors[i]:\n            if node != visited_from[i]:\n                if node in visited:\n                    return False\n                else:\n                    visited.add(node)\n                    visited_from[node] = i\n                    q.append(node)\n    return len(visited) == n"
        ]
    }
]
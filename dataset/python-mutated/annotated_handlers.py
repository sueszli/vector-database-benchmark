"""Type annotations to use with `__get_pydantic_core_schema__` and `__get_pydantic_json_schema__`."""
from __future__ import annotations as _annotations
from typing import TYPE_CHECKING, Any, Union
from pydantic_core import core_schema
if TYPE_CHECKING:
    from .json_schema import JsonSchemaMode, JsonSchemaValue
    CoreSchemaOrField = Union[core_schema.CoreSchema, core_schema.ModelField, core_schema.DataclassField, core_schema.TypedDictField, core_schema.ComputedField]
__all__ = ('GetJsonSchemaHandler', 'GetCoreSchemaHandler')

class GetJsonSchemaHandler:
    """Handler to call into the next JSON schema generation function.

    Attributes:
        mode: Json schema mode, can be `validation` or `serialization`.
    """
    mode: JsonSchemaMode

    def __call__(self, __core_schema: CoreSchemaOrField) -> JsonSchemaValue:
        if False:
            i = 10
            return i + 15
        'Call the inner handler and get the JsonSchemaValue it returns.\n        This will call the next JSON schema modifying function up until it calls\n        into `pydantic.json_schema.GenerateJsonSchema`, which will raise a\n        `pydantic.errors.PydanticInvalidForJsonSchema` error if it cannot generate\n        a JSON schema.\n\n        Args:\n            __core_schema: A `pydantic_core.core_schema.CoreSchema`.\n\n        Returns:\n            JsonSchemaValue: The JSON schema generated by the inner JSON schema modify\n            functions.\n        '
        raise NotImplementedError

    def resolve_ref_schema(self, __maybe_ref_json_schema: JsonSchemaValue) -> JsonSchemaValue:
        if False:
            i = 10
            return i + 15
        'Get the real schema for a `{"$ref": ...}` schema.\n        If the schema given is not a `$ref` schema, it will be returned as is.\n        This means you don\'t have to check before calling this function.\n\n        Args:\n            __maybe_ref_json_schema: A JsonSchemaValue, ref based or not.\n\n        Raises:\n            LookupError: If the ref is not found.\n\n        Returns:\n            JsonSchemaValue: A JsonSchemaValue that has no `$ref`.\n        '
        raise NotImplementedError

class GetCoreSchemaHandler:
    """Handler to call into the next CoreSchema schema generation function."""

    def __call__(self, __source_type: Any) -> core_schema.CoreSchema:
        if False:
            while True:
                i = 10
        "Call the inner handler and get the CoreSchema it returns.\n        This will call the next CoreSchema modifying function up until it calls\n        into Pydantic's internal schema generation machinery, which will raise a\n        `pydantic.errors.PydanticSchemaGenerationError` error if it cannot generate\n        a CoreSchema for the given source type.\n\n        Args:\n            __source_type: The input type.\n\n        Returns:\n            CoreSchema: The `pydantic-core` CoreSchema generated.\n        "
        raise NotImplementedError

    def generate_schema(self, __source_type: Any) -> core_schema.CoreSchema:
        if False:
            print('Hello World!')
        'Generate a schema unrelated to the current context.\n        Use this function if e.g. you are handling schema generation for a sequence\n        and want to generate a schema for its items.\n        Otherwise, you may end up doing something like applying a `min_length` constraint\n        that was intended for the sequence itself to its items!\n\n        Args:\n            __source_type: The input type.\n\n        Returns:\n            CoreSchema: The `pydantic-core` CoreSchema generated.\n        '
        raise NotImplementedError

    def resolve_ref_schema(self, __maybe_ref_schema: core_schema.CoreSchema) -> core_schema.CoreSchema:
        if False:
            return 10
        "Get the real schema for a `definition-ref` schema.\n        If the schema given is not a `definition-ref` schema, it will be returned as is.\n        This means you don't have to check before calling this function.\n\n        Args:\n            __maybe_ref_schema: A `CoreSchema`, `ref`-based or not.\n\n        Raises:\n            LookupError: If the `ref` is not found.\n\n        Returns:\n            A concrete `CoreSchema`.\n        "
        raise NotImplementedError

    @property
    def field_name(self) -> str | None:
        if False:
            while True:
                i = 10
        'Get the name of the closest field to this validator.'
        raise NotImplementedError

    def _get_types_namespace(self) -> dict[str, Any] | None:
        if False:
            for i in range(10):
                print('nop')
        'Internal method used during type resolution for serializer annotations.'
        raise NotImplementedError
[
    {
        "func_name": "Initialize",
        "original": "def Initialize(self):\n    \"\"\"Initialise the data and resolution required, as well as the cash and start-end dates for your algorithm. All algorithms must initialized.\"\"\"\n    self.SetStartDate(2004, 1, 1)\n    self.SetEndDate(2015, 1, 1)\n    self.symbol = self.AddSecurity(SecurityType.Equity, 'SPY', Resolution.Daily).Symbol\n    self.macd = self.MACD(self.symbol, self.FastEmaPeriod, self.SlowEmaPeriod, 9, MovingAverageType.Exponential, Resolution.Daily)",
        "mutated": [
            "def Initialize(self):\n    if False:\n        i = 10\n    'Initialise the data and resolution required, as well as the cash and start-end dates for your algorithm. All algorithms must initialized.'\n    self.SetStartDate(2004, 1, 1)\n    self.SetEndDate(2015, 1, 1)\n    self.symbol = self.AddSecurity(SecurityType.Equity, 'SPY', Resolution.Daily).Symbol\n    self.macd = self.MACD(self.symbol, self.FastEmaPeriod, self.SlowEmaPeriod, 9, MovingAverageType.Exponential, Resolution.Daily)",
            "def Initialize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Initialise the data and resolution required, as well as the cash and start-end dates for your algorithm. All algorithms must initialized.'\n    self.SetStartDate(2004, 1, 1)\n    self.SetEndDate(2015, 1, 1)\n    self.symbol = self.AddSecurity(SecurityType.Equity, 'SPY', Resolution.Daily).Symbol\n    self.macd = self.MACD(self.symbol, self.FastEmaPeriod, self.SlowEmaPeriod, 9, MovingAverageType.Exponential, Resolution.Daily)",
            "def Initialize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Initialise the data and resolution required, as well as the cash and start-end dates for your algorithm. All algorithms must initialized.'\n    self.SetStartDate(2004, 1, 1)\n    self.SetEndDate(2015, 1, 1)\n    self.symbol = self.AddSecurity(SecurityType.Equity, 'SPY', Resolution.Daily).Symbol\n    self.macd = self.MACD(self.symbol, self.FastEmaPeriod, self.SlowEmaPeriod, 9, MovingAverageType.Exponential, Resolution.Daily)",
            "def Initialize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Initialise the data and resolution required, as well as the cash and start-end dates for your algorithm. All algorithms must initialized.'\n    self.SetStartDate(2004, 1, 1)\n    self.SetEndDate(2015, 1, 1)\n    self.symbol = self.AddSecurity(SecurityType.Equity, 'SPY', Resolution.Daily).Symbol\n    self.macd = self.MACD(self.symbol, self.FastEmaPeriod, self.SlowEmaPeriod, 9, MovingAverageType.Exponential, Resolution.Daily)",
            "def Initialize(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Initialise the data and resolution required, as well as the cash and start-end dates for your algorithm. All algorithms must initialized.'\n    self.SetStartDate(2004, 1, 1)\n    self.SetEndDate(2015, 1, 1)\n    self.symbol = self.AddSecurity(SecurityType.Equity, 'SPY', Resolution.Daily).Symbol\n    self.macd = self.MACD(self.symbol, self.FastEmaPeriod, self.SlowEmaPeriod, 9, MovingAverageType.Exponential, Resolution.Daily)"
        ]
    },
    {
        "func_name": "OnData",
        "original": "def OnData(self, data):\n    \"\"\"OnData event is the primary entry point for your algorithm. Each new data point will be pumped in here.\n        Args:\n            data: Slice object with your stock data\"\"\"\n    if not self.macd.IsReady or not data.ContainsKey(self.symbol) or data[self.symbol] is None:\n        return\n    holding = self.Portfolio[self.symbol]\n    signalDeltaPercent = float(self.macd.Current.Value - self.macd.Signal.Current.Value) / float(self.macd.Fast.Current.Value)\n    tolerance = 0.0025\n    if holding.Quantity <= 0 and signalDeltaPercent > tolerance:\n        self.EmitInsights(Insight.Price(self.symbol, timedelta(self.FastEmaPeriod), InsightDirection.Up))\n        self.SetHoldings(self.symbol, 1)\n    elif holding.Quantity >= 0 and signalDeltaPercent < -tolerance:\n        self.EmitInsights(Insight.Price(self.symbol, timedelta(self.FastEmaPeriod), InsightDirection.Down))\n        self.SetHoldings(self.symbol, -1)\n    self.Plot('MACD', self.macd, self.macd.Signal)\n    self.Plot(self.symbol.Value, self.macd.Fast, self.macd.Slow)\n    self.Plot(self.symbol.Value, 'Open', data[self.symbol].Open)",
        "mutated": [
            "def OnData(self, data):\n    if False:\n        i = 10\n    'OnData event is the primary entry point for your algorithm. Each new data point will be pumped in here.\\n        Args:\\n            data: Slice object with your stock data'\n    if not self.macd.IsReady or not data.ContainsKey(self.symbol) or data[self.symbol] is None:\n        return\n    holding = self.Portfolio[self.symbol]\n    signalDeltaPercent = float(self.macd.Current.Value - self.macd.Signal.Current.Value) / float(self.macd.Fast.Current.Value)\n    tolerance = 0.0025\n    if holding.Quantity <= 0 and signalDeltaPercent > tolerance:\n        self.EmitInsights(Insight.Price(self.symbol, timedelta(self.FastEmaPeriod), InsightDirection.Up))\n        self.SetHoldings(self.symbol, 1)\n    elif holding.Quantity >= 0 and signalDeltaPercent < -tolerance:\n        self.EmitInsights(Insight.Price(self.symbol, timedelta(self.FastEmaPeriod), InsightDirection.Down))\n        self.SetHoldings(self.symbol, -1)\n    self.Plot('MACD', self.macd, self.macd.Signal)\n    self.Plot(self.symbol.Value, self.macd.Fast, self.macd.Slow)\n    self.Plot(self.symbol.Value, 'Open', data[self.symbol].Open)",
            "def OnData(self, data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'OnData event is the primary entry point for your algorithm. Each new data point will be pumped in here.\\n        Args:\\n            data: Slice object with your stock data'\n    if not self.macd.IsReady or not data.ContainsKey(self.symbol) or data[self.symbol] is None:\n        return\n    holding = self.Portfolio[self.symbol]\n    signalDeltaPercent = float(self.macd.Current.Value - self.macd.Signal.Current.Value) / float(self.macd.Fast.Current.Value)\n    tolerance = 0.0025\n    if holding.Quantity <= 0 and signalDeltaPercent > tolerance:\n        self.EmitInsights(Insight.Price(self.symbol, timedelta(self.FastEmaPeriod), InsightDirection.Up))\n        self.SetHoldings(self.symbol, 1)\n    elif holding.Quantity >= 0 and signalDeltaPercent < -tolerance:\n        self.EmitInsights(Insight.Price(self.symbol, timedelta(self.FastEmaPeriod), InsightDirection.Down))\n        self.SetHoldings(self.symbol, -1)\n    self.Plot('MACD', self.macd, self.macd.Signal)\n    self.Plot(self.symbol.Value, self.macd.Fast, self.macd.Slow)\n    self.Plot(self.symbol.Value, 'Open', data[self.symbol].Open)",
            "def OnData(self, data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'OnData event is the primary entry point for your algorithm. Each new data point will be pumped in here.\\n        Args:\\n            data: Slice object with your stock data'\n    if not self.macd.IsReady or not data.ContainsKey(self.symbol) or data[self.symbol] is None:\n        return\n    holding = self.Portfolio[self.symbol]\n    signalDeltaPercent = float(self.macd.Current.Value - self.macd.Signal.Current.Value) / float(self.macd.Fast.Current.Value)\n    tolerance = 0.0025\n    if holding.Quantity <= 0 and signalDeltaPercent > tolerance:\n        self.EmitInsights(Insight.Price(self.symbol, timedelta(self.FastEmaPeriod), InsightDirection.Up))\n        self.SetHoldings(self.symbol, 1)\n    elif holding.Quantity >= 0 and signalDeltaPercent < -tolerance:\n        self.EmitInsights(Insight.Price(self.symbol, timedelta(self.FastEmaPeriod), InsightDirection.Down))\n        self.SetHoldings(self.symbol, -1)\n    self.Plot('MACD', self.macd, self.macd.Signal)\n    self.Plot(self.symbol.Value, self.macd.Fast, self.macd.Slow)\n    self.Plot(self.symbol.Value, 'Open', data[self.symbol].Open)",
            "def OnData(self, data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'OnData event is the primary entry point for your algorithm. Each new data point will be pumped in here.\\n        Args:\\n            data: Slice object with your stock data'\n    if not self.macd.IsReady or not data.ContainsKey(self.symbol) or data[self.symbol] is None:\n        return\n    holding = self.Portfolio[self.symbol]\n    signalDeltaPercent = float(self.macd.Current.Value - self.macd.Signal.Current.Value) / float(self.macd.Fast.Current.Value)\n    tolerance = 0.0025\n    if holding.Quantity <= 0 and signalDeltaPercent > tolerance:\n        self.EmitInsights(Insight.Price(self.symbol, timedelta(self.FastEmaPeriod), InsightDirection.Up))\n        self.SetHoldings(self.symbol, 1)\n    elif holding.Quantity >= 0 and signalDeltaPercent < -tolerance:\n        self.EmitInsights(Insight.Price(self.symbol, timedelta(self.FastEmaPeriod), InsightDirection.Down))\n        self.SetHoldings(self.symbol, -1)\n    self.Plot('MACD', self.macd, self.macd.Signal)\n    self.Plot(self.symbol.Value, self.macd.Fast, self.macd.Slow)\n    self.Plot(self.symbol.Value, 'Open', data[self.symbol].Open)",
            "def OnData(self, data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'OnData event is the primary entry point for your algorithm. Each new data point will be pumped in here.\\n        Args:\\n            data: Slice object with your stock data'\n    if not self.macd.IsReady or not data.ContainsKey(self.symbol) or data[self.symbol] is None:\n        return\n    holding = self.Portfolio[self.symbol]\n    signalDeltaPercent = float(self.macd.Current.Value - self.macd.Signal.Current.Value) / float(self.macd.Fast.Current.Value)\n    tolerance = 0.0025\n    if holding.Quantity <= 0 and signalDeltaPercent > tolerance:\n        self.EmitInsights(Insight.Price(self.symbol, timedelta(self.FastEmaPeriod), InsightDirection.Up))\n        self.SetHoldings(self.symbol, 1)\n    elif holding.Quantity >= 0 and signalDeltaPercent < -tolerance:\n        self.EmitInsights(Insight.Price(self.symbol, timedelta(self.FastEmaPeriod), InsightDirection.Down))\n        self.SetHoldings(self.symbol, -1)\n    self.Plot('MACD', self.macd, self.macd.Signal)\n    self.Plot(self.symbol.Value, self.macd.Fast, self.macd.Slow)\n    self.Plot(self.symbol.Value, 'Open', data[self.symbol].Open)"
        ]
    }
]
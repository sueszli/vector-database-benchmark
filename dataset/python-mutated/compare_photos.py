"""
compare_photos.py:
"""
import cv2, pickle
from pprint import pprint
with open('photo_mat', 'rb') as f:
    mat = pickle.load(f)
pairs = []
lenX = 9
lenY = 8

def get_image_difference(image_1, image_2):
    if False:
        i = 10
        return i + 15
    first_image_hist = cv2.calcHist([image_1], [0], None, [256], [0, 256])
    second_image_hist = cv2.calcHist([image_2], [0], None, [256], [0, 256])
    img_hist_diff = cv2.compareHist(first_image_hist, second_image_hist, cv2.HISTCMP_BHATTACHARYYA)
    img_template_probability_match = cv2.matchTemplate(first_image_hist, second_image_hist, cv2.TM_CCOEFF_NORMED)[0][0]
    img_template_diff = 1 - img_template_probability_match
    commutative_image_diff = img_hist_diff / 10 + img_template_diff
    return commutative_image_diff

def compare(i, j, img):
    if False:
        return 10
    for x in range(lenX):
        if x < i:
            continue
        for y in range(lenY):
            if x <= i and y < j:
                continue
            z = mat[x][y]
            y1 = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
            z1 = cv2.cvtColor(z, cv2.COLOR_BGR2GRAY)
            res = cv2.matchTemplate(z1, y1, cv2.TM_CCOEFF_NORMED)
            print(i, j, x, y, res)
            if res[0][0] >= 0.8:
                if i == x and j == y:
                    continue
                pairs.append((i, j, x, y, res[0][0]))
        print('--------')
for (i, x) in enumerate(mat):
    for (j, y) in enumerate(x):
        compare(i, j, y)
print('--------', len(pairs))
pprint(pairs)
'\n[(0, 0, 0, 4, 0.81783479),\n (0, 0, 1, 0, 0.82939386),\n (0, 0, 1, 5, 0.80112994),\n (0, 0, 2, 4, 0.81963593),\n (0, 0, 2, 5, 0.80141765),\n (0, 0, 3, 2, 0.83176291),\n (0, 0, 5, 1, 0.82441366),\n (0, 0, 5, 3, 0.93773538),\n (0, 0, 6, 0, 0.80839384),\n (0, 0, 7, 3, 0.80357623),\n (0, 1, 4, 6, 0.84010893),\n (0, 2, 4, 5, 0.89919138),\n (0, 2, 5, 5, 0.89656675),\n (0, 2, 6, 2, 0.87691551),\n (0, 3, 2, 6, 0.94418496),\n (0, 3, 3, 4, 0.97784418),\n (0, 3, 5, 6, 0.91531861),\n (0, 3, 7, 4, 0.90034771),\n (0, 3, 8, 7, 0.8669098),\n (0, 4, 1, 0, 0.95897603),\n (0, 4, 1, 5, 0.9859665),\n (0, 4, 2, 3, 0.84755546),\n (0, 4, 2, 4, 0.98988521),\n (0, 4, 2, 5, 0.97593749),\n (0, 4, 3, 2, 0.96898985),\n (0, 4, 5, 1, 0.93505126),\n (0, 4, 5, 7, 0.92510819),\n (0, 4, 6, 0, 0.88995898),\n (0, 4, 7, 3, 0.91428041),\n (0, 5, 2, 0, 0.90362453),\n (0, 5, 2, 1, 0.93313634),\n (0, 5, 6, 4, 0.88912612),\n (0, 7, 2, 7, 0.98162633),\n (0, 7, 3, 0, 0.84628779),\n (0, 7, 6, 7, 0.85053468),\n (1, 0, 1, 5, 0.93375051),\n (1, 0, 2, 3, 0.80927575),\n (1, 0, 2, 4, 0.95577663),\n (1, 0, 2, 5, 0.93438679),\n (1, 0, 3, 2, 0.98244762),\n (1, 0, 5, 1, 0.95950162),\n (1, 0, 5, 7, 0.9012484),\n (1, 0, 6, 0, 0.93606734),\n (1, 0, 7, 0, 0.81604606),\n (1, 0, 7, 3, 0.91213149),\n (1, 1, 7, 1, 0.8624481),\n (1, 2, 1, 7, 0.94927907),\n (1, 2, 4, 3, 0.97030866),\n (1, 2, 6, 6, 0.89334244),\n (1, 3, 7, 5, 0.90350145),\n (1, 4, 3, 5, 0.92840946),\n (1, 4, 3, 6, 0.92976296),\n (1, 4, 8, 1, 0.87637573),\n (1, 4, 8, 5, 0.86086744),\n (1, 5, 2, 3, 0.83290088),\n (1, 5, 2, 4, 0.98093969),\n (1, 5, 2, 5, 0.9865284),\n (1, 5, 3, 2, 0.95161527),\n (1, 5, 5, 1, 0.91846502),\n (1, 5, 5, 7, 0.93449652),\n (1, 5, 6, 0, 0.87814039),\n (1, 5, 7, 3, 0.91769367),\n (1, 6, 3, 3, 0.87408149),\n (1, 6, 4, 7, 0.83912045),\n (1, 7, 4, 3, 0.93324989),\n (1, 7, 6, 6, 0.90282589),\n (2, 0, 2, 1, 0.98332465),\n (2, 0, 6, 4, 0.89946473),\n (2, 1, 6, 4, 0.91386253),\n (2, 2, 4, 0, 0.97106832),\n (2, 3, 2, 4, 0.85241109),\n (2, 3, 2, 5, 0.84527677),\n (2, 3, 3, 2, 0.83583575),\n (2, 3, 3, 4, 0.80124199),\n (2, 3, 5, 1, 0.81944293),\n (2, 3, 5, 7, 0.819251),\n (2, 3, 7, 0, 0.91440505),\n (2, 3, 7, 3, 0.80969107),\n (2, 4, 2, 5, 0.9853642),\n (2, 4, 3, 2, 0.98278183),\n (2, 4, 5, 1, 0.96176714),\n (2, 4, 5, 3, 0.81060904),\n (2, 4, 5, 7, 0.95080549),\n (2, 4, 6, 0, 0.92093289),\n (2, 4, 7, 0, 0.82010585),\n (2, 4, 7, 3, 0.94900286),\n (2, 5, 3, 2, 0.96413034),\n (2, 5, 5, 1, 0.93163985),\n (2, 5, 5, 3, 0.80133277),\n (2, 5, 5, 7, 0.95228308),\n (2, 5, 6, 0, 0.89228898),\n (2, 5, 7, 0, 0.80005699),\n (2, 5, 7, 3, 0.93504852),\n (2, 6, 3, 4, 0.9634583),\n (2, 6, 5, 6, 0.97281444),\n (2, 6, 7, 4, 0.90955776),\n (2, 6, 8, 6, 0.81169814),\n (2, 6, 8, 7, 0.87542808),\n (2, 7, 3, 0, 0.86373925),\n (2, 7, 6, 7, 0.90865624),\n (3, 0, 6, 7, 0.80371922),\n (3, 1, 3, 7, 0.89857602),\n (3, 2, 5, 1, 0.98385006),\n (3, 2, 5, 3, 0.80837327),\n (3, 2, 5, 7, 0.94026983),\n (3, 2, 6, 0, 0.95155406),\n (3, 2, 7, 0, 0.83519346),\n (3, 2, 7, 3, 0.95594138),\n (3, 3, 4, 7, 0.81548607),\n (3, 3, 8, 4, 0.88165134),\n (3, 4, 5, 6, 0.96190572),\n (3, 4, 7, 4, 0.95597637),\n (3, 4, 8, 7, 0.90763825),\n (3, 5, 3, 6, 0.96791953),\n (3, 5, 7, 7, 0.81160647),\n (3, 5, 8, 5, 0.88941646),\n (3, 6, 7, 7, 0.8219896),\n (3, 6, 8, 1, 0.80933893),\n (3, 6, 8, 5, 0.92017508),\n (4, 1, 6, 5, 0.8459152),\n (4, 1, 7, 2, 0.95110172),\n (4, 2, 6, 1, 0.95789027),\n (4, 3, 6, 6, 0.95759535),\n (4, 4, 5, 1, 0.80212337),\n (4, 4, 7, 3, 0.80778289),\n (4, 4, 8, 2, 0.92399627),\n (4, 5, 5, 5, 0.98698038),\n (4, 5, 6, 2, 0.91531587),\n (5, 0, 5, 4, 0.95705253),\n (5, 1, 5, 3, 0.81610906),\n (5, 1, 5, 7, 0.93452507),\n (5, 1, 6, 0, 0.98169124),\n (5, 1, 7, 0, 0.84997863),\n (5, 1, 7, 3, 0.97735828),\n (5, 2, 8, 3, 0.96606308),\n (5, 3, 5, 7, 0.80398655),\n (5, 3, 6, 0, 0.80013829),\n (5, 3, 7, 3, 0.82962543),\n (5, 5, 6, 2, 0.91919237),\n (5, 6, 7, 4, 0.96237701),\n (5, 6, 7, 6, 0.80884886),\n (5, 6, 8, 6, 0.80175209),\n (5, 6, 8, 7, 0.92764288),\n (5, 7, 6, 0, 0.90893477),\n (5, 7, 7, 0, 0.82358778),\n (5, 7, 7, 3, 0.94626212),\n (6, 0, 7, 0, 0.85159588),\n (6, 0, 7, 3, 0.96886152),\n (6, 3, 8, 0, 0.94173014),\n (6, 5, 7, 2, 0.90841216),\n (7, 0, 7, 3, 0.84417427),\n (7, 4, 8, 7, 0.93397516),\n (7, 6, 8, 6, 0.96749038),\n (7, 7, 8, 1, 0.80834168),\n (7, 7, 8, 5, 0.84336907),\n (8, 1, 8, 5, 0.89013624)]\n'
'\n#Test\n# 1, 0, 1, 5\na = mat[1][0]\nb = mat[1][5]\ny1 = cv2.cvtColor(a, cv2.COLOR_BGR2GRAY)\nz1 = cv2.cvtColor(b, cv2.COLOR_BGR2GRAY)\n# image_difference = get_image_difference(y1, z1)\nres = cv2.matchTemplate(z1, y1, cv2.TM_CCOEFF_NORMED)\nprint(1, 0, 1, 5, res)\n'

def compare_2(x1, y1, x2, y2):
    if False:
        i = 10
        return i + 15
    a = mat[x1][y1]
    b = mat[x2][y2]
    c1 = cv2.cvtColor(a, cv2.COLOR_BGR2GRAY)
    c2 = cv2.cvtColor(b, cv2.COLOR_BGR2GRAY)
    res = cv2.matchTemplate(c2, c1, cv2.TM_CCOEFF_NORMED)
    print(x1, y1, x2, y2, res)
[
    {
        "func_name": "neighbors",
        "original": "def neighbors(maze, node):\n    for dir in [(-1, 0), (0, 1), (0, -1), (1, 0)]:\n        (cur_node, dist) = (list(node), 0)\n        while 0 <= cur_node[0] + dir[0] < len(maze) and 0 <= cur_node[1] + dir[1] < len(maze[0]) and (not maze[cur_node[0] + dir[0]][cur_node[1] + dir[1]]):\n            cur_node[0] += dir[0]\n            cur_node[1] += dir[1]\n            dist += 1\n        yield (dist, tuple(cur_node))",
        "mutated": [
            "def neighbors(maze, node):\n    if False:\n        i = 10\n    for dir in [(-1, 0), (0, 1), (0, -1), (1, 0)]:\n        (cur_node, dist) = (list(node), 0)\n        while 0 <= cur_node[0] + dir[0] < len(maze) and 0 <= cur_node[1] + dir[1] < len(maze[0]) and (not maze[cur_node[0] + dir[0]][cur_node[1] + dir[1]]):\n            cur_node[0] += dir[0]\n            cur_node[1] += dir[1]\n            dist += 1\n        yield (dist, tuple(cur_node))",
            "def neighbors(maze, node):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for dir in [(-1, 0), (0, 1), (0, -1), (1, 0)]:\n        (cur_node, dist) = (list(node), 0)\n        while 0 <= cur_node[0] + dir[0] < len(maze) and 0 <= cur_node[1] + dir[1] < len(maze[0]) and (not maze[cur_node[0] + dir[0]][cur_node[1] + dir[1]]):\n            cur_node[0] += dir[0]\n            cur_node[1] += dir[1]\n            dist += 1\n        yield (dist, tuple(cur_node))",
            "def neighbors(maze, node):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for dir in [(-1, 0), (0, 1), (0, -1), (1, 0)]:\n        (cur_node, dist) = (list(node), 0)\n        while 0 <= cur_node[0] + dir[0] < len(maze) and 0 <= cur_node[1] + dir[1] < len(maze[0]) and (not maze[cur_node[0] + dir[0]][cur_node[1] + dir[1]]):\n            cur_node[0] += dir[0]\n            cur_node[1] += dir[1]\n            dist += 1\n        yield (dist, tuple(cur_node))",
            "def neighbors(maze, node):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for dir in [(-1, 0), (0, 1), (0, -1), (1, 0)]:\n        (cur_node, dist) = (list(node), 0)\n        while 0 <= cur_node[0] + dir[0] < len(maze) and 0 <= cur_node[1] + dir[1] < len(maze[0]) and (not maze[cur_node[0] + dir[0]][cur_node[1] + dir[1]]):\n            cur_node[0] += dir[0]\n            cur_node[1] += dir[1]\n            dist += 1\n        yield (dist, tuple(cur_node))",
            "def neighbors(maze, node):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for dir in [(-1, 0), (0, 1), (0, -1), (1, 0)]:\n        (cur_node, dist) = (list(node), 0)\n        while 0 <= cur_node[0] + dir[0] < len(maze) and 0 <= cur_node[1] + dir[1] < len(maze[0]) and (not maze[cur_node[0] + dir[0]][cur_node[1] + dir[1]]):\n            cur_node[0] += dir[0]\n            cur_node[1] += dir[1]\n            dist += 1\n        yield (dist, tuple(cur_node))"
        ]
    },
    {
        "func_name": "shortestDistance",
        "original": "def shortestDistance(self, maze, start, destination):\n    \"\"\"\n        :type maze: List[List[int]]\n        :type start: List[int]\n        :type destination: List[int]\n        :rtype: int\n        \"\"\"\n    (start, destination) = (tuple(start), tuple(destination))\n\n    def neighbors(maze, node):\n        for dir in [(-1, 0), (0, 1), (0, -1), (1, 0)]:\n            (cur_node, dist) = (list(node), 0)\n            while 0 <= cur_node[0] + dir[0] < len(maze) and 0 <= cur_node[1] + dir[1] < len(maze[0]) and (not maze[cur_node[0] + dir[0]][cur_node[1] + dir[1]]):\n                cur_node[0] += dir[0]\n                cur_node[1] += dir[1]\n                dist += 1\n            yield (dist, tuple(cur_node))\n    heap = [(0, start)]\n    visited = set()\n    while heap:\n        (dist, node) = heapq.heappop(heap)\n        if node in visited:\n            continue\n        if node == destination:\n            return dist\n        visited.add(node)\n        for (neighbor_dist, neighbor) in neighbors(maze, node):\n            heapq.heappush(heap, (dist + neighbor_dist, neighbor))\n    return -1",
        "mutated": [
            "def shortestDistance(self, maze, start, destination):\n    if False:\n        i = 10\n    '\\n        :type maze: List[List[int]]\\n        :type start: List[int]\\n        :type destination: List[int]\\n        :rtype: int\\n        '\n    (start, destination) = (tuple(start), tuple(destination))\n\n    def neighbors(maze, node):\n        for dir in [(-1, 0), (0, 1), (0, -1), (1, 0)]:\n            (cur_node, dist) = (list(node), 0)\n            while 0 <= cur_node[0] + dir[0] < len(maze) and 0 <= cur_node[1] + dir[1] < len(maze[0]) and (not maze[cur_node[0] + dir[0]][cur_node[1] + dir[1]]):\n                cur_node[0] += dir[0]\n                cur_node[1] += dir[1]\n                dist += 1\n            yield (dist, tuple(cur_node))\n    heap = [(0, start)]\n    visited = set()\n    while heap:\n        (dist, node) = heapq.heappop(heap)\n        if node in visited:\n            continue\n        if node == destination:\n            return dist\n        visited.add(node)\n        for (neighbor_dist, neighbor) in neighbors(maze, node):\n            heapq.heappush(heap, (dist + neighbor_dist, neighbor))\n    return -1",
            "def shortestDistance(self, maze, start, destination):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type maze: List[List[int]]\\n        :type start: List[int]\\n        :type destination: List[int]\\n        :rtype: int\\n        '\n    (start, destination) = (tuple(start), tuple(destination))\n\n    def neighbors(maze, node):\n        for dir in [(-1, 0), (0, 1), (0, -1), (1, 0)]:\n            (cur_node, dist) = (list(node), 0)\n            while 0 <= cur_node[0] + dir[0] < len(maze) and 0 <= cur_node[1] + dir[1] < len(maze[0]) and (not maze[cur_node[0] + dir[0]][cur_node[1] + dir[1]]):\n                cur_node[0] += dir[0]\n                cur_node[1] += dir[1]\n                dist += 1\n            yield (dist, tuple(cur_node))\n    heap = [(0, start)]\n    visited = set()\n    while heap:\n        (dist, node) = heapq.heappop(heap)\n        if node in visited:\n            continue\n        if node == destination:\n            return dist\n        visited.add(node)\n        for (neighbor_dist, neighbor) in neighbors(maze, node):\n            heapq.heappush(heap, (dist + neighbor_dist, neighbor))\n    return -1",
            "def shortestDistance(self, maze, start, destination):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type maze: List[List[int]]\\n        :type start: List[int]\\n        :type destination: List[int]\\n        :rtype: int\\n        '\n    (start, destination) = (tuple(start), tuple(destination))\n\n    def neighbors(maze, node):\n        for dir in [(-1, 0), (0, 1), (0, -1), (1, 0)]:\n            (cur_node, dist) = (list(node), 0)\n            while 0 <= cur_node[0] + dir[0] < len(maze) and 0 <= cur_node[1] + dir[1] < len(maze[0]) and (not maze[cur_node[0] + dir[0]][cur_node[1] + dir[1]]):\n                cur_node[0] += dir[0]\n                cur_node[1] += dir[1]\n                dist += 1\n            yield (dist, tuple(cur_node))\n    heap = [(0, start)]\n    visited = set()\n    while heap:\n        (dist, node) = heapq.heappop(heap)\n        if node in visited:\n            continue\n        if node == destination:\n            return dist\n        visited.add(node)\n        for (neighbor_dist, neighbor) in neighbors(maze, node):\n            heapq.heappush(heap, (dist + neighbor_dist, neighbor))\n    return -1",
            "def shortestDistance(self, maze, start, destination):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type maze: List[List[int]]\\n        :type start: List[int]\\n        :type destination: List[int]\\n        :rtype: int\\n        '\n    (start, destination) = (tuple(start), tuple(destination))\n\n    def neighbors(maze, node):\n        for dir in [(-1, 0), (0, 1), (0, -1), (1, 0)]:\n            (cur_node, dist) = (list(node), 0)\n            while 0 <= cur_node[0] + dir[0] < len(maze) and 0 <= cur_node[1] + dir[1] < len(maze[0]) and (not maze[cur_node[0] + dir[0]][cur_node[1] + dir[1]]):\n                cur_node[0] += dir[0]\n                cur_node[1] += dir[1]\n                dist += 1\n            yield (dist, tuple(cur_node))\n    heap = [(0, start)]\n    visited = set()\n    while heap:\n        (dist, node) = heapq.heappop(heap)\n        if node in visited:\n            continue\n        if node == destination:\n            return dist\n        visited.add(node)\n        for (neighbor_dist, neighbor) in neighbors(maze, node):\n            heapq.heappush(heap, (dist + neighbor_dist, neighbor))\n    return -1",
            "def shortestDistance(self, maze, start, destination):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type maze: List[List[int]]\\n        :type start: List[int]\\n        :type destination: List[int]\\n        :rtype: int\\n        '\n    (start, destination) = (tuple(start), tuple(destination))\n\n    def neighbors(maze, node):\n        for dir in [(-1, 0), (0, 1), (0, -1), (1, 0)]:\n            (cur_node, dist) = (list(node), 0)\n            while 0 <= cur_node[0] + dir[0] < len(maze) and 0 <= cur_node[1] + dir[1] < len(maze[0]) and (not maze[cur_node[0] + dir[0]][cur_node[1] + dir[1]]):\n                cur_node[0] += dir[0]\n                cur_node[1] += dir[1]\n                dist += 1\n            yield (dist, tuple(cur_node))\n    heap = [(0, start)]\n    visited = set()\n    while heap:\n        (dist, node) = heapq.heappop(heap)\n        if node in visited:\n            continue\n        if node == destination:\n            return dist\n        visited.add(node)\n        for (neighbor_dist, neighbor) in neighbors(maze, node):\n            heapq.heappush(heap, (dist + neighbor_dist, neighbor))\n    return -1"
        ]
    }
]
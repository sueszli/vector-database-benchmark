[
    {
        "func_name": "generate_random_graph",
        "original": "def generate_random_graph(node_num, edge_num, self_loops=False, multi_edges=False):\n    \"\"\"\n    Generates and returns a :py:class:`~altgraph.Graph.Graph` instance with\n    *node_num* nodes randomly connected by *edge_num* edges.\n    \"\"\"\n    g = Graph.Graph()\n    if not multi_edges:\n        if self_loops:\n            max_edges = node_num * node_num\n        else:\n            max_edges = node_num * (node_num - 1)\n        if edge_num > max_edges:\n            raise GraphError(\"inconsistent arguments to 'generate_random_graph'\")\n    nodes = range(node_num)\n    for node in nodes:\n        g.add_node(node)\n    while 1:\n        head = random.choice(nodes)\n        tail = random.choice(nodes)\n        if head == tail and (not self_loops):\n            continue\n        if g.edge_by_node(head, tail) is not None and (not multi_edges):\n            continue\n        g.add_edge(head, tail)\n        if g.number_of_edges() >= edge_num:\n            break\n    return g",
        "mutated": [
            "def generate_random_graph(node_num, edge_num, self_loops=False, multi_edges=False):\n    if False:\n        i = 10\n    '\\n    Generates and returns a :py:class:`~altgraph.Graph.Graph` instance with\\n    *node_num* nodes randomly connected by *edge_num* edges.\\n    '\n    g = Graph.Graph()\n    if not multi_edges:\n        if self_loops:\n            max_edges = node_num * node_num\n        else:\n            max_edges = node_num * (node_num - 1)\n        if edge_num > max_edges:\n            raise GraphError(\"inconsistent arguments to 'generate_random_graph'\")\n    nodes = range(node_num)\n    for node in nodes:\n        g.add_node(node)\n    while 1:\n        head = random.choice(nodes)\n        tail = random.choice(nodes)\n        if head == tail and (not self_loops):\n            continue\n        if g.edge_by_node(head, tail) is not None and (not multi_edges):\n            continue\n        g.add_edge(head, tail)\n        if g.number_of_edges() >= edge_num:\n            break\n    return g",
            "def generate_random_graph(node_num, edge_num, self_loops=False, multi_edges=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Generates and returns a :py:class:`~altgraph.Graph.Graph` instance with\\n    *node_num* nodes randomly connected by *edge_num* edges.\\n    '\n    g = Graph.Graph()\n    if not multi_edges:\n        if self_loops:\n            max_edges = node_num * node_num\n        else:\n            max_edges = node_num * (node_num - 1)\n        if edge_num > max_edges:\n            raise GraphError(\"inconsistent arguments to 'generate_random_graph'\")\n    nodes = range(node_num)\n    for node in nodes:\n        g.add_node(node)\n    while 1:\n        head = random.choice(nodes)\n        tail = random.choice(nodes)\n        if head == tail and (not self_loops):\n            continue\n        if g.edge_by_node(head, tail) is not None and (not multi_edges):\n            continue\n        g.add_edge(head, tail)\n        if g.number_of_edges() >= edge_num:\n            break\n    return g",
            "def generate_random_graph(node_num, edge_num, self_loops=False, multi_edges=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Generates and returns a :py:class:`~altgraph.Graph.Graph` instance with\\n    *node_num* nodes randomly connected by *edge_num* edges.\\n    '\n    g = Graph.Graph()\n    if not multi_edges:\n        if self_loops:\n            max_edges = node_num * node_num\n        else:\n            max_edges = node_num * (node_num - 1)\n        if edge_num > max_edges:\n            raise GraphError(\"inconsistent arguments to 'generate_random_graph'\")\n    nodes = range(node_num)\n    for node in nodes:\n        g.add_node(node)\n    while 1:\n        head = random.choice(nodes)\n        tail = random.choice(nodes)\n        if head == tail and (not self_loops):\n            continue\n        if g.edge_by_node(head, tail) is not None and (not multi_edges):\n            continue\n        g.add_edge(head, tail)\n        if g.number_of_edges() >= edge_num:\n            break\n    return g",
            "def generate_random_graph(node_num, edge_num, self_loops=False, multi_edges=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Generates and returns a :py:class:`~altgraph.Graph.Graph` instance with\\n    *node_num* nodes randomly connected by *edge_num* edges.\\n    '\n    g = Graph.Graph()\n    if not multi_edges:\n        if self_loops:\n            max_edges = node_num * node_num\n        else:\n            max_edges = node_num * (node_num - 1)\n        if edge_num > max_edges:\n            raise GraphError(\"inconsistent arguments to 'generate_random_graph'\")\n    nodes = range(node_num)\n    for node in nodes:\n        g.add_node(node)\n    while 1:\n        head = random.choice(nodes)\n        tail = random.choice(nodes)\n        if head == tail and (not self_loops):\n            continue\n        if g.edge_by_node(head, tail) is not None and (not multi_edges):\n            continue\n        g.add_edge(head, tail)\n        if g.number_of_edges() >= edge_num:\n            break\n    return g",
            "def generate_random_graph(node_num, edge_num, self_loops=False, multi_edges=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Generates and returns a :py:class:`~altgraph.Graph.Graph` instance with\\n    *node_num* nodes randomly connected by *edge_num* edges.\\n    '\n    g = Graph.Graph()\n    if not multi_edges:\n        if self_loops:\n            max_edges = node_num * node_num\n        else:\n            max_edges = node_num * (node_num - 1)\n        if edge_num > max_edges:\n            raise GraphError(\"inconsistent arguments to 'generate_random_graph'\")\n    nodes = range(node_num)\n    for node in nodes:\n        g.add_node(node)\n    while 1:\n        head = random.choice(nodes)\n        tail = random.choice(nodes)\n        if head == tail and (not self_loops):\n            continue\n        if g.edge_by_node(head, tail) is not None and (not multi_edges):\n            continue\n        g.add_edge(head, tail)\n        if g.number_of_edges() >= edge_num:\n            break\n    return g"
        ]
    },
    {
        "func_name": "generate_scale_free_graph",
        "original": "def generate_scale_free_graph(steps, growth_num, self_loops=False, multi_edges=False):\n    \"\"\"\n    Generates and returns a :py:class:`~altgraph.Graph.Graph` instance that\n    will have *steps* \\\\* *growth_num* nodes and a scale free (powerlaw)\n    connectivity. Starting with a fully connected graph with *growth_num*\n    nodes at every step *growth_num* nodes are added to the graph and are\n    connected to existing nodes with a probability proportional to the degree\n    of these existing nodes.\n    \"\"\"\n    graph = Graph.Graph()\n    store = []\n    for i in range(growth_num):\n        for j in range(i + 1, growth_num):\n            store.append(i)\n            store.append(j)\n            graph.add_edge(i, j)\n    for node in range(growth_num, steps * growth_num):\n        graph.add_node(node)\n        while graph.out_degree(node) < growth_num:\n            nbr = random.choice(store)\n            if node == nbr and (not self_loops):\n                continue\n            if graph.edge_by_node(node, nbr) and (not multi_edges):\n                continue\n            graph.add_edge(node, nbr)\n        for nbr in graph.out_nbrs(node):\n            store.append(node)\n            store.append(nbr)\n    return graph",
        "mutated": [
            "def generate_scale_free_graph(steps, growth_num, self_loops=False, multi_edges=False):\n    if False:\n        i = 10\n    '\\n    Generates and returns a :py:class:`~altgraph.Graph.Graph` instance that\\n    will have *steps* \\\\* *growth_num* nodes and a scale free (powerlaw)\\n    connectivity. Starting with a fully connected graph with *growth_num*\\n    nodes at every step *growth_num* nodes are added to the graph and are\\n    connected to existing nodes with a probability proportional to the degree\\n    of these existing nodes.\\n    '\n    graph = Graph.Graph()\n    store = []\n    for i in range(growth_num):\n        for j in range(i + 1, growth_num):\n            store.append(i)\n            store.append(j)\n            graph.add_edge(i, j)\n    for node in range(growth_num, steps * growth_num):\n        graph.add_node(node)\n        while graph.out_degree(node) < growth_num:\n            nbr = random.choice(store)\n            if node == nbr and (not self_loops):\n                continue\n            if graph.edge_by_node(node, nbr) and (not multi_edges):\n                continue\n            graph.add_edge(node, nbr)\n        for nbr in graph.out_nbrs(node):\n            store.append(node)\n            store.append(nbr)\n    return graph",
            "def generate_scale_free_graph(steps, growth_num, self_loops=False, multi_edges=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Generates and returns a :py:class:`~altgraph.Graph.Graph` instance that\\n    will have *steps* \\\\* *growth_num* nodes and a scale free (powerlaw)\\n    connectivity. Starting with a fully connected graph with *growth_num*\\n    nodes at every step *growth_num* nodes are added to the graph and are\\n    connected to existing nodes with a probability proportional to the degree\\n    of these existing nodes.\\n    '\n    graph = Graph.Graph()\n    store = []\n    for i in range(growth_num):\n        for j in range(i + 1, growth_num):\n            store.append(i)\n            store.append(j)\n            graph.add_edge(i, j)\n    for node in range(growth_num, steps * growth_num):\n        graph.add_node(node)\n        while graph.out_degree(node) < growth_num:\n            nbr = random.choice(store)\n            if node == nbr and (not self_loops):\n                continue\n            if graph.edge_by_node(node, nbr) and (not multi_edges):\n                continue\n            graph.add_edge(node, nbr)\n        for nbr in graph.out_nbrs(node):\n            store.append(node)\n            store.append(nbr)\n    return graph",
            "def generate_scale_free_graph(steps, growth_num, self_loops=False, multi_edges=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Generates and returns a :py:class:`~altgraph.Graph.Graph` instance that\\n    will have *steps* \\\\* *growth_num* nodes and a scale free (powerlaw)\\n    connectivity. Starting with a fully connected graph with *growth_num*\\n    nodes at every step *growth_num* nodes are added to the graph and are\\n    connected to existing nodes with a probability proportional to the degree\\n    of these existing nodes.\\n    '\n    graph = Graph.Graph()\n    store = []\n    for i in range(growth_num):\n        for j in range(i + 1, growth_num):\n            store.append(i)\n            store.append(j)\n            graph.add_edge(i, j)\n    for node in range(growth_num, steps * growth_num):\n        graph.add_node(node)\n        while graph.out_degree(node) < growth_num:\n            nbr = random.choice(store)\n            if node == nbr and (not self_loops):\n                continue\n            if graph.edge_by_node(node, nbr) and (not multi_edges):\n                continue\n            graph.add_edge(node, nbr)\n        for nbr in graph.out_nbrs(node):\n            store.append(node)\n            store.append(nbr)\n    return graph",
            "def generate_scale_free_graph(steps, growth_num, self_loops=False, multi_edges=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Generates and returns a :py:class:`~altgraph.Graph.Graph` instance that\\n    will have *steps* \\\\* *growth_num* nodes and a scale free (powerlaw)\\n    connectivity. Starting with a fully connected graph with *growth_num*\\n    nodes at every step *growth_num* nodes are added to the graph and are\\n    connected to existing nodes with a probability proportional to the degree\\n    of these existing nodes.\\n    '\n    graph = Graph.Graph()\n    store = []\n    for i in range(growth_num):\n        for j in range(i + 1, growth_num):\n            store.append(i)\n            store.append(j)\n            graph.add_edge(i, j)\n    for node in range(growth_num, steps * growth_num):\n        graph.add_node(node)\n        while graph.out_degree(node) < growth_num:\n            nbr = random.choice(store)\n            if node == nbr and (not self_loops):\n                continue\n            if graph.edge_by_node(node, nbr) and (not multi_edges):\n                continue\n            graph.add_edge(node, nbr)\n        for nbr in graph.out_nbrs(node):\n            store.append(node)\n            store.append(nbr)\n    return graph",
            "def generate_scale_free_graph(steps, growth_num, self_loops=False, multi_edges=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Generates and returns a :py:class:`~altgraph.Graph.Graph` instance that\\n    will have *steps* \\\\* *growth_num* nodes and a scale free (powerlaw)\\n    connectivity. Starting with a fully connected graph with *growth_num*\\n    nodes at every step *growth_num* nodes are added to the graph and are\\n    connected to existing nodes with a probability proportional to the degree\\n    of these existing nodes.\\n    '\n    graph = Graph.Graph()\n    store = []\n    for i in range(growth_num):\n        for j in range(i + 1, growth_num):\n            store.append(i)\n            store.append(j)\n            graph.add_edge(i, j)\n    for node in range(growth_num, steps * growth_num):\n        graph.add_node(node)\n        while graph.out_degree(node) < growth_num:\n            nbr = random.choice(store)\n            if node == nbr and (not self_loops):\n                continue\n            if graph.edge_by_node(node, nbr) and (not multi_edges):\n                continue\n            graph.add_edge(node, nbr)\n        for nbr in graph.out_nbrs(node):\n            store.append(node)\n            store.append(nbr)\n    return graph"
        ]
    },
    {
        "func_name": "filter_stack",
        "original": "def filter_stack(graph, head, filters):\n    \"\"\"\n    Perform a walk in a depth-first order starting\n    at *head*.\n\n    Returns (visited, removes, orphans).\n\n    * visited: the set of visited nodes\n    * removes: the list of nodes where the node\n      data does not all *filters*\n    * orphans: tuples of (last_good, node),\n      where node is not in removes, is directly\n      reachable from a node in *removes* and\n      *last_good* is the closest upstream node that is not\n      in *removes*.\n    \"\"\"\n    (visited, removes, orphans) = ({head}, set(), set())\n    stack = deque([(head, head)])\n    get_data = graph.node_data\n    get_edges = graph.out_edges\n    get_tail = graph.tail\n    while stack:\n        (last_good, node) = stack.pop()\n        data = get_data(node)\n        if data is not None:\n            for filtfunc in filters:\n                if not filtfunc(data):\n                    removes.add(node)\n                    break\n            else:\n                last_good = node\n        for edge in get_edges(node):\n            tail = get_tail(edge)\n            if last_good is not node:\n                orphans.add((last_good, tail))\n            if tail not in visited:\n                visited.add(tail)\n                stack.append((last_good, tail))\n    orphans = [(lg, tl) for (lg, tl) in orphans if tl not in removes]\n    return (visited, removes, orphans)",
        "mutated": [
            "def filter_stack(graph, head, filters):\n    if False:\n        i = 10\n    '\\n    Perform a walk in a depth-first order starting\\n    at *head*.\\n\\n    Returns (visited, removes, orphans).\\n\\n    * visited: the set of visited nodes\\n    * removes: the list of nodes where the node\\n      data does not all *filters*\\n    * orphans: tuples of (last_good, node),\\n      where node is not in removes, is directly\\n      reachable from a node in *removes* and\\n      *last_good* is the closest upstream node that is not\\n      in *removes*.\\n    '\n    (visited, removes, orphans) = ({head}, set(), set())\n    stack = deque([(head, head)])\n    get_data = graph.node_data\n    get_edges = graph.out_edges\n    get_tail = graph.tail\n    while stack:\n        (last_good, node) = stack.pop()\n        data = get_data(node)\n        if data is not None:\n            for filtfunc in filters:\n                if not filtfunc(data):\n                    removes.add(node)\n                    break\n            else:\n                last_good = node\n        for edge in get_edges(node):\n            tail = get_tail(edge)\n            if last_good is not node:\n                orphans.add((last_good, tail))\n            if tail not in visited:\n                visited.add(tail)\n                stack.append((last_good, tail))\n    orphans = [(lg, tl) for (lg, tl) in orphans if tl not in removes]\n    return (visited, removes, orphans)",
            "def filter_stack(graph, head, filters):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Perform a walk in a depth-first order starting\\n    at *head*.\\n\\n    Returns (visited, removes, orphans).\\n\\n    * visited: the set of visited nodes\\n    * removes: the list of nodes where the node\\n      data does not all *filters*\\n    * orphans: tuples of (last_good, node),\\n      where node is not in removes, is directly\\n      reachable from a node in *removes* and\\n      *last_good* is the closest upstream node that is not\\n      in *removes*.\\n    '\n    (visited, removes, orphans) = ({head}, set(), set())\n    stack = deque([(head, head)])\n    get_data = graph.node_data\n    get_edges = graph.out_edges\n    get_tail = graph.tail\n    while stack:\n        (last_good, node) = stack.pop()\n        data = get_data(node)\n        if data is not None:\n            for filtfunc in filters:\n                if not filtfunc(data):\n                    removes.add(node)\n                    break\n            else:\n                last_good = node\n        for edge in get_edges(node):\n            tail = get_tail(edge)\n            if last_good is not node:\n                orphans.add((last_good, tail))\n            if tail not in visited:\n                visited.add(tail)\n                stack.append((last_good, tail))\n    orphans = [(lg, tl) for (lg, tl) in orphans if tl not in removes]\n    return (visited, removes, orphans)",
            "def filter_stack(graph, head, filters):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Perform a walk in a depth-first order starting\\n    at *head*.\\n\\n    Returns (visited, removes, orphans).\\n\\n    * visited: the set of visited nodes\\n    * removes: the list of nodes where the node\\n      data does not all *filters*\\n    * orphans: tuples of (last_good, node),\\n      where node is not in removes, is directly\\n      reachable from a node in *removes* and\\n      *last_good* is the closest upstream node that is not\\n      in *removes*.\\n    '\n    (visited, removes, orphans) = ({head}, set(), set())\n    stack = deque([(head, head)])\n    get_data = graph.node_data\n    get_edges = graph.out_edges\n    get_tail = graph.tail\n    while stack:\n        (last_good, node) = stack.pop()\n        data = get_data(node)\n        if data is not None:\n            for filtfunc in filters:\n                if not filtfunc(data):\n                    removes.add(node)\n                    break\n            else:\n                last_good = node\n        for edge in get_edges(node):\n            tail = get_tail(edge)\n            if last_good is not node:\n                orphans.add((last_good, tail))\n            if tail not in visited:\n                visited.add(tail)\n                stack.append((last_good, tail))\n    orphans = [(lg, tl) for (lg, tl) in orphans if tl not in removes]\n    return (visited, removes, orphans)",
            "def filter_stack(graph, head, filters):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Perform a walk in a depth-first order starting\\n    at *head*.\\n\\n    Returns (visited, removes, orphans).\\n\\n    * visited: the set of visited nodes\\n    * removes: the list of nodes where the node\\n      data does not all *filters*\\n    * orphans: tuples of (last_good, node),\\n      where node is not in removes, is directly\\n      reachable from a node in *removes* and\\n      *last_good* is the closest upstream node that is not\\n      in *removes*.\\n    '\n    (visited, removes, orphans) = ({head}, set(), set())\n    stack = deque([(head, head)])\n    get_data = graph.node_data\n    get_edges = graph.out_edges\n    get_tail = graph.tail\n    while stack:\n        (last_good, node) = stack.pop()\n        data = get_data(node)\n        if data is not None:\n            for filtfunc in filters:\n                if not filtfunc(data):\n                    removes.add(node)\n                    break\n            else:\n                last_good = node\n        for edge in get_edges(node):\n            tail = get_tail(edge)\n            if last_good is not node:\n                orphans.add((last_good, tail))\n            if tail not in visited:\n                visited.add(tail)\n                stack.append((last_good, tail))\n    orphans = [(lg, tl) for (lg, tl) in orphans if tl not in removes]\n    return (visited, removes, orphans)",
            "def filter_stack(graph, head, filters):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Perform a walk in a depth-first order starting\\n    at *head*.\\n\\n    Returns (visited, removes, orphans).\\n\\n    * visited: the set of visited nodes\\n    * removes: the list of nodes where the node\\n      data does not all *filters*\\n    * orphans: tuples of (last_good, node),\\n      where node is not in removes, is directly\\n      reachable from a node in *removes* and\\n      *last_good* is the closest upstream node that is not\\n      in *removes*.\\n    '\n    (visited, removes, orphans) = ({head}, set(), set())\n    stack = deque([(head, head)])\n    get_data = graph.node_data\n    get_edges = graph.out_edges\n    get_tail = graph.tail\n    while stack:\n        (last_good, node) = stack.pop()\n        data = get_data(node)\n        if data is not None:\n            for filtfunc in filters:\n                if not filtfunc(data):\n                    removes.add(node)\n                    break\n            else:\n                last_good = node\n        for edge in get_edges(node):\n            tail = get_tail(edge)\n            if last_good is not node:\n                orphans.add((last_good, tail))\n            if tail not in visited:\n                visited.add(tail)\n                stack.append((last_good, tail))\n    orphans = [(lg, tl) for (lg, tl) in orphans if tl not in removes]\n    return (visited, removes, orphans)"
        ]
    }
]
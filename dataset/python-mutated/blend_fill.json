[
    {
        "func_name": "usage",
        "original": "def usage():\n    print('Press R, G, B to increase the color channel values,')\n    print('1-9 to set the step range for the increment,')\n    print('A - ADD, S- SUB, M- MULT, - MIN, + MAX')\n    print('  to change the blend modes')",
        "mutated": [
            "def usage():\n    if False:\n        i = 10\n    print('Press R, G, B to increase the color channel values,')\n    print('1-9 to set the step range for the increment,')\n    print('A - ADD, S- SUB, M- MULT, - MIN, + MAX')\n    print('  to change the blend modes')",
            "def usage():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    print('Press R, G, B to increase the color channel values,')\n    print('1-9 to set the step range for the increment,')\n    print('A - ADD, S- SUB, M- MULT, - MIN, + MAX')\n    print('  to change the blend modes')",
            "def usage():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    print('Press R, G, B to increase the color channel values,')\n    print('1-9 to set the step range for the increment,')\n    print('A - ADD, S- SUB, M- MULT, - MIN, + MAX')\n    print('  to change the blend modes')",
            "def usage():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    print('Press R, G, B to increase the color channel values,')\n    print('1-9 to set the step range for the increment,')\n    print('A - ADD, S- SUB, M- MULT, - MIN, + MAX')\n    print('  to change the blend modes')",
            "def usage():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    print('Press R, G, B to increase the color channel values,')\n    print('1-9 to set the step range for the increment,')\n    print('A - ADD, S- SUB, M- MULT, - MIN, + MAX')\n    print('  to change the blend modes')"
        ]
    },
    {
        "func_name": "main",
        "original": "def main():\n    color = [0, 0, 0]\n    changed = False\n    blendtype = 0\n    step = 5\n    pg.init()\n    screen = pg.display.set_mode((640, 480), 0, 32)\n    screen.fill((100, 100, 100))\n    image = pg.image.load(os.path.join(data_dir, 'liquid.bmp')).convert()\n    blendimage = pg.image.load(os.path.join(data_dir, 'liquid.bmp')).convert()\n    screen.blit(image, (10, 10))\n    screen.blit(blendimage, (200, 10))\n    pg.display.flip()\n    pg.key.set_repeat(500, 30)\n    usage()\n    going = True\n    while going:\n        for event in pg.event.get():\n            if event.type == pg.QUIT:\n                going = False\n            if event.type == pg.KEYDOWN:\n                usage()\n                if event.key == pg.K_ESCAPE:\n                    going = False\n                if event.key == pg.K_r:\n                    color[0] += step\n                    if color[0] > 255:\n                        color[0] = 0\n                    changed = True\n                elif event.key == pg.K_g:\n                    color[1] += step\n                    if color[1] > 255:\n                        color[1] = 0\n                    changed = True\n                elif event.key == pg.K_b:\n                    color[2] += step\n                    if color[2] > 255:\n                        color[2] = 0\n                    changed = True\n                elif event.key == pg.K_a:\n                    blendtype = pg.BLEND_ADD\n                    changed = True\n                elif event.key == pg.K_s:\n                    blendtype = pg.BLEND_SUB\n                    changed = True\n                elif event.key == pg.K_m:\n                    blendtype = pg.BLEND_MULT\n                    changed = True\n                elif event.key == pg.K_PLUS:\n                    blendtype = pg.BLEND_MAX\n                    changed = True\n                elif event.key == pg.K_MINUS:\n                    blendtype = pg.BLEND_MIN\n                    changed = True\n                elif event.key in (K_1, K_2, K_3, K_4, K_5, K_6, K_7, K_8, K_9):\n                    step = int(event.unicode)\n            if changed:\n                screen.fill((100, 100, 100))\n                screen.blit(image, (10, 10))\n                blendimage.blit(image, (0, 0))\n                blendimage.fill(color, None, blendtype)\n                screen.blit(blendimage, (200, 10))\n                print(f'Color: {tuple(color)}, Pixel (0,0): {[blendimage.get_at((0, 0))]}')\n                changed = False\n                pg.display.flip()\n    pg.quit()",
        "mutated": [
            "def main():\n    if False:\n        i = 10\n    color = [0, 0, 0]\n    changed = False\n    blendtype = 0\n    step = 5\n    pg.init()\n    screen = pg.display.set_mode((640, 480), 0, 32)\n    screen.fill((100, 100, 100))\n    image = pg.image.load(os.path.join(data_dir, 'liquid.bmp')).convert()\n    blendimage = pg.image.load(os.path.join(data_dir, 'liquid.bmp')).convert()\n    screen.blit(image, (10, 10))\n    screen.blit(blendimage, (200, 10))\n    pg.display.flip()\n    pg.key.set_repeat(500, 30)\n    usage()\n    going = True\n    while going:\n        for event in pg.event.get():\n            if event.type == pg.QUIT:\n                going = False\n            if event.type == pg.KEYDOWN:\n                usage()\n                if event.key == pg.K_ESCAPE:\n                    going = False\n                if event.key == pg.K_r:\n                    color[0] += step\n                    if color[0] > 255:\n                        color[0] = 0\n                    changed = True\n                elif event.key == pg.K_g:\n                    color[1] += step\n                    if color[1] > 255:\n                        color[1] = 0\n                    changed = True\n                elif event.key == pg.K_b:\n                    color[2] += step\n                    if color[2] > 255:\n                        color[2] = 0\n                    changed = True\n                elif event.key == pg.K_a:\n                    blendtype = pg.BLEND_ADD\n                    changed = True\n                elif event.key == pg.K_s:\n                    blendtype = pg.BLEND_SUB\n                    changed = True\n                elif event.key == pg.K_m:\n                    blendtype = pg.BLEND_MULT\n                    changed = True\n                elif event.key == pg.K_PLUS:\n                    blendtype = pg.BLEND_MAX\n                    changed = True\n                elif event.key == pg.K_MINUS:\n                    blendtype = pg.BLEND_MIN\n                    changed = True\n                elif event.key in (K_1, K_2, K_3, K_4, K_5, K_6, K_7, K_8, K_9):\n                    step = int(event.unicode)\n            if changed:\n                screen.fill((100, 100, 100))\n                screen.blit(image, (10, 10))\n                blendimage.blit(image, (0, 0))\n                blendimage.fill(color, None, blendtype)\n                screen.blit(blendimage, (200, 10))\n                print(f'Color: {tuple(color)}, Pixel (0,0): {[blendimage.get_at((0, 0))]}')\n                changed = False\n                pg.display.flip()\n    pg.quit()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    color = [0, 0, 0]\n    changed = False\n    blendtype = 0\n    step = 5\n    pg.init()\n    screen = pg.display.set_mode((640, 480), 0, 32)\n    screen.fill((100, 100, 100))\n    image = pg.image.load(os.path.join(data_dir, 'liquid.bmp')).convert()\n    blendimage = pg.image.load(os.path.join(data_dir, 'liquid.bmp')).convert()\n    screen.blit(image, (10, 10))\n    screen.blit(blendimage, (200, 10))\n    pg.display.flip()\n    pg.key.set_repeat(500, 30)\n    usage()\n    going = True\n    while going:\n        for event in pg.event.get():\n            if event.type == pg.QUIT:\n                going = False\n            if event.type == pg.KEYDOWN:\n                usage()\n                if event.key == pg.K_ESCAPE:\n                    going = False\n                if event.key == pg.K_r:\n                    color[0] += step\n                    if color[0] > 255:\n                        color[0] = 0\n                    changed = True\n                elif event.key == pg.K_g:\n                    color[1] += step\n                    if color[1] > 255:\n                        color[1] = 0\n                    changed = True\n                elif event.key == pg.K_b:\n                    color[2] += step\n                    if color[2] > 255:\n                        color[2] = 0\n                    changed = True\n                elif event.key == pg.K_a:\n                    blendtype = pg.BLEND_ADD\n                    changed = True\n                elif event.key == pg.K_s:\n                    blendtype = pg.BLEND_SUB\n                    changed = True\n                elif event.key == pg.K_m:\n                    blendtype = pg.BLEND_MULT\n                    changed = True\n                elif event.key == pg.K_PLUS:\n                    blendtype = pg.BLEND_MAX\n                    changed = True\n                elif event.key == pg.K_MINUS:\n                    blendtype = pg.BLEND_MIN\n                    changed = True\n                elif event.key in (K_1, K_2, K_3, K_4, K_5, K_6, K_7, K_8, K_9):\n                    step = int(event.unicode)\n            if changed:\n                screen.fill((100, 100, 100))\n                screen.blit(image, (10, 10))\n                blendimage.blit(image, (0, 0))\n                blendimage.fill(color, None, blendtype)\n                screen.blit(blendimage, (200, 10))\n                print(f'Color: {tuple(color)}, Pixel (0,0): {[blendimage.get_at((0, 0))]}')\n                changed = False\n                pg.display.flip()\n    pg.quit()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    color = [0, 0, 0]\n    changed = False\n    blendtype = 0\n    step = 5\n    pg.init()\n    screen = pg.display.set_mode((640, 480), 0, 32)\n    screen.fill((100, 100, 100))\n    image = pg.image.load(os.path.join(data_dir, 'liquid.bmp')).convert()\n    blendimage = pg.image.load(os.path.join(data_dir, 'liquid.bmp')).convert()\n    screen.blit(image, (10, 10))\n    screen.blit(blendimage, (200, 10))\n    pg.display.flip()\n    pg.key.set_repeat(500, 30)\n    usage()\n    going = True\n    while going:\n        for event in pg.event.get():\n            if event.type == pg.QUIT:\n                going = False\n            if event.type == pg.KEYDOWN:\n                usage()\n                if event.key == pg.K_ESCAPE:\n                    going = False\n                if event.key == pg.K_r:\n                    color[0] += step\n                    if color[0] > 255:\n                        color[0] = 0\n                    changed = True\n                elif event.key == pg.K_g:\n                    color[1] += step\n                    if color[1] > 255:\n                        color[1] = 0\n                    changed = True\n                elif event.key == pg.K_b:\n                    color[2] += step\n                    if color[2] > 255:\n                        color[2] = 0\n                    changed = True\n                elif event.key == pg.K_a:\n                    blendtype = pg.BLEND_ADD\n                    changed = True\n                elif event.key == pg.K_s:\n                    blendtype = pg.BLEND_SUB\n                    changed = True\n                elif event.key == pg.K_m:\n                    blendtype = pg.BLEND_MULT\n                    changed = True\n                elif event.key == pg.K_PLUS:\n                    blendtype = pg.BLEND_MAX\n                    changed = True\n                elif event.key == pg.K_MINUS:\n                    blendtype = pg.BLEND_MIN\n                    changed = True\n                elif event.key in (K_1, K_2, K_3, K_4, K_5, K_6, K_7, K_8, K_9):\n                    step = int(event.unicode)\n            if changed:\n                screen.fill((100, 100, 100))\n                screen.blit(image, (10, 10))\n                blendimage.blit(image, (0, 0))\n                blendimage.fill(color, None, blendtype)\n                screen.blit(blendimage, (200, 10))\n                print(f'Color: {tuple(color)}, Pixel (0,0): {[blendimage.get_at((0, 0))]}')\n                changed = False\n                pg.display.flip()\n    pg.quit()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    color = [0, 0, 0]\n    changed = False\n    blendtype = 0\n    step = 5\n    pg.init()\n    screen = pg.display.set_mode((640, 480), 0, 32)\n    screen.fill((100, 100, 100))\n    image = pg.image.load(os.path.join(data_dir, 'liquid.bmp')).convert()\n    blendimage = pg.image.load(os.path.join(data_dir, 'liquid.bmp')).convert()\n    screen.blit(image, (10, 10))\n    screen.blit(blendimage, (200, 10))\n    pg.display.flip()\n    pg.key.set_repeat(500, 30)\n    usage()\n    going = True\n    while going:\n        for event in pg.event.get():\n            if event.type == pg.QUIT:\n                going = False\n            if event.type == pg.KEYDOWN:\n                usage()\n                if event.key == pg.K_ESCAPE:\n                    going = False\n                if event.key == pg.K_r:\n                    color[0] += step\n                    if color[0] > 255:\n                        color[0] = 0\n                    changed = True\n                elif event.key == pg.K_g:\n                    color[1] += step\n                    if color[1] > 255:\n                        color[1] = 0\n                    changed = True\n                elif event.key == pg.K_b:\n                    color[2] += step\n                    if color[2] > 255:\n                        color[2] = 0\n                    changed = True\n                elif event.key == pg.K_a:\n                    blendtype = pg.BLEND_ADD\n                    changed = True\n                elif event.key == pg.K_s:\n                    blendtype = pg.BLEND_SUB\n                    changed = True\n                elif event.key == pg.K_m:\n                    blendtype = pg.BLEND_MULT\n                    changed = True\n                elif event.key == pg.K_PLUS:\n                    blendtype = pg.BLEND_MAX\n                    changed = True\n                elif event.key == pg.K_MINUS:\n                    blendtype = pg.BLEND_MIN\n                    changed = True\n                elif event.key in (K_1, K_2, K_3, K_4, K_5, K_6, K_7, K_8, K_9):\n                    step = int(event.unicode)\n            if changed:\n                screen.fill((100, 100, 100))\n                screen.blit(image, (10, 10))\n                blendimage.blit(image, (0, 0))\n                blendimage.fill(color, None, blendtype)\n                screen.blit(blendimage, (200, 10))\n                print(f'Color: {tuple(color)}, Pixel (0,0): {[blendimage.get_at((0, 0))]}')\n                changed = False\n                pg.display.flip()\n    pg.quit()",
            "def main():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    color = [0, 0, 0]\n    changed = False\n    blendtype = 0\n    step = 5\n    pg.init()\n    screen = pg.display.set_mode((640, 480), 0, 32)\n    screen.fill((100, 100, 100))\n    image = pg.image.load(os.path.join(data_dir, 'liquid.bmp')).convert()\n    blendimage = pg.image.load(os.path.join(data_dir, 'liquid.bmp')).convert()\n    screen.blit(image, (10, 10))\n    screen.blit(blendimage, (200, 10))\n    pg.display.flip()\n    pg.key.set_repeat(500, 30)\n    usage()\n    going = True\n    while going:\n        for event in pg.event.get():\n            if event.type == pg.QUIT:\n                going = False\n            if event.type == pg.KEYDOWN:\n                usage()\n                if event.key == pg.K_ESCAPE:\n                    going = False\n                if event.key == pg.K_r:\n                    color[0] += step\n                    if color[0] > 255:\n                        color[0] = 0\n                    changed = True\n                elif event.key == pg.K_g:\n                    color[1] += step\n                    if color[1] > 255:\n                        color[1] = 0\n                    changed = True\n                elif event.key == pg.K_b:\n                    color[2] += step\n                    if color[2] > 255:\n                        color[2] = 0\n                    changed = True\n                elif event.key == pg.K_a:\n                    blendtype = pg.BLEND_ADD\n                    changed = True\n                elif event.key == pg.K_s:\n                    blendtype = pg.BLEND_SUB\n                    changed = True\n                elif event.key == pg.K_m:\n                    blendtype = pg.BLEND_MULT\n                    changed = True\n                elif event.key == pg.K_PLUS:\n                    blendtype = pg.BLEND_MAX\n                    changed = True\n                elif event.key == pg.K_MINUS:\n                    blendtype = pg.BLEND_MIN\n                    changed = True\n                elif event.key in (K_1, K_2, K_3, K_4, K_5, K_6, K_7, K_8, K_9):\n                    step = int(event.unicode)\n            if changed:\n                screen.fill((100, 100, 100))\n                screen.blit(image, (10, 10))\n                blendimage.blit(image, (0, 0))\n                blendimage.fill(color, None, blendtype)\n                screen.blit(blendimage, (200, 10))\n                print(f'Color: {tuple(color)}, Pixel (0,0): {[blendimage.get_at((0, 0))]}')\n                changed = False\n                pg.display.flip()\n    pg.quit()"
        ]
    }
]
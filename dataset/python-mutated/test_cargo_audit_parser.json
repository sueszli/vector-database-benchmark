[
    {
        "func_name": "test_parse_no_findings",
        "original": "def test_parse_no_findings(self):\n    testfile = open('unittests/scans/cargo_audit/no_findings.json')\n    parser = CargoAuditParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))",
        "mutated": [
            "def test_parse_no_findings(self):\n    if False:\n        i = 10\n    testfile = open('unittests/scans/cargo_audit/no_findings.json')\n    parser = CargoAuditParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))",
            "def test_parse_no_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    testfile = open('unittests/scans/cargo_audit/no_findings.json')\n    parser = CargoAuditParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))",
            "def test_parse_no_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    testfile = open('unittests/scans/cargo_audit/no_findings.json')\n    parser = CargoAuditParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))",
            "def test_parse_no_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    testfile = open('unittests/scans/cargo_audit/no_findings.json')\n    parser = CargoAuditParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))",
            "def test_parse_no_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    testfile = open('unittests/scans/cargo_audit/no_findings.json')\n    parser = CargoAuditParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(0, len(findings))"
        ]
    },
    {
        "func_name": "test_parse_many_findings",
        "original": "def test_parse_many_findings(self):\n    testfile = open('unittests/scans/cargo_audit/many_findings.json')\n    parser = CargoAuditParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(4, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('[arc-swap 0.4.7] Dangling reference in `access::Map` with Constant', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(['dangling reference'], finding.tags)\n        self.assertEqual('arc-swap', finding.component_name)\n        self.assertEqual('0.4.7', finding.component_version)\n        self.assertEqual('RUSTSEC-2020-0091', finding.vuln_id_from_tool)\n        self.assertEqual('2020-12-10', finding.publish_date)\n        self.assertEqual(1, finding.nb_occurences)\n        self.assertEqual(2, len(finding.unsaved_vulnerability_ids))\n        self.assertEqual('RUSTSEC-2020-0091', finding.unsaved_vulnerability_ids[0])\n        self.assertEqual('CVE-2020-35711', finding.unsaved_vulnerability_ids[1])\n    with self.subTest(i=1):\n        finding = findings[1]\n        self.assertEqual('[hyper 0.13.9] Multiple Transfer-Encoding headers misinterprets request payload', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(['http', 'request-smuggling'], finding.tags)\n        self.assertEqual('hyper', finding.component_name)\n        self.assertEqual('0.13.9', finding.component_version)\n        self.assertEqual('RUSTSEC-2021-0020', finding.vuln_id_from_tool)\n        self.assertEqual('2021-02-05', finding.publish_date)\n        self.assertEqual(1, finding.nb_occurences)\n        self.assertEqual(2, len(finding.unsaved_vulnerability_ids))\n        self.assertEqual('RUSTSEC-2021-0020', finding.unsaved_vulnerability_ids[0])\n        self.assertEqual('CVE-2021-21299', finding.unsaved_vulnerability_ids[1])\n    with self.subTest(i=2):\n        finding = findings[2]\n        self.assertEqual('[smallvec 0.6.13] Buffer overflow in SmallVec::insert_many', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(['buffer-overflow', 'heap-overflow', 'unsound'], finding.tags)\n        self.assertEqual('smallvec', finding.component_name)\n        self.assertEqual('0.6.13', finding.component_version)\n        self.assertEqual('RUSTSEC-2021-0003', finding.vuln_id_from_tool)\n        self.assertEqual('2021-01-08', finding.publish_date)\n        self.assertEqual(1, finding.nb_occurences)\n        self.assertEqual(2, len(finding.unsaved_vulnerability_ids))\n        self.assertEqual('RUSTSEC-2021-0003', finding.unsaved_vulnerability_ids[0])\n        self.assertEqual('CVE-2021-25900', finding.unsaved_vulnerability_ids[1])\n    with self.subTest(i=3):\n        finding = findings[3]\n        self.assertEqual('[smallvec 1.5.0] Buffer overflow in SmallVec::insert_many', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(['buffer-overflow', 'heap-overflow', 'unsound'], finding.tags)\n        self.assertEqual('smallvec', finding.component_name)\n        self.assertEqual('1.5.0', finding.component_version)\n        self.assertEqual('RUSTSEC-2021-0003', finding.vuln_id_from_tool)\n        self.assertEqual('2021-01-08', finding.publish_date)\n        self.assertEqual(1, finding.nb_occurences)\n        self.assertEqual(2, len(finding.unsaved_vulnerability_ids))\n        self.assertEqual('RUSTSEC-2021-0003', finding.unsaved_vulnerability_ids[0])\n        self.assertEqual('CVE-2021-25900', finding.unsaved_vulnerability_ids[1])",
        "mutated": [
            "def test_parse_many_findings(self):\n    if False:\n        i = 10\n    testfile = open('unittests/scans/cargo_audit/many_findings.json')\n    parser = CargoAuditParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(4, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('[arc-swap 0.4.7] Dangling reference in `access::Map` with Constant', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(['dangling reference'], finding.tags)\n        self.assertEqual('arc-swap', finding.component_name)\n        self.assertEqual('0.4.7', finding.component_version)\n        self.assertEqual('RUSTSEC-2020-0091', finding.vuln_id_from_tool)\n        self.assertEqual('2020-12-10', finding.publish_date)\n        self.assertEqual(1, finding.nb_occurences)\n        self.assertEqual(2, len(finding.unsaved_vulnerability_ids))\n        self.assertEqual('RUSTSEC-2020-0091', finding.unsaved_vulnerability_ids[0])\n        self.assertEqual('CVE-2020-35711', finding.unsaved_vulnerability_ids[1])\n    with self.subTest(i=1):\n        finding = findings[1]\n        self.assertEqual('[hyper 0.13.9] Multiple Transfer-Encoding headers misinterprets request payload', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(['http', 'request-smuggling'], finding.tags)\n        self.assertEqual('hyper', finding.component_name)\n        self.assertEqual('0.13.9', finding.component_version)\n        self.assertEqual('RUSTSEC-2021-0020', finding.vuln_id_from_tool)\n        self.assertEqual('2021-02-05', finding.publish_date)\n        self.assertEqual(1, finding.nb_occurences)\n        self.assertEqual(2, len(finding.unsaved_vulnerability_ids))\n        self.assertEqual('RUSTSEC-2021-0020', finding.unsaved_vulnerability_ids[0])\n        self.assertEqual('CVE-2021-21299', finding.unsaved_vulnerability_ids[1])\n    with self.subTest(i=2):\n        finding = findings[2]\n        self.assertEqual('[smallvec 0.6.13] Buffer overflow in SmallVec::insert_many', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(['buffer-overflow', 'heap-overflow', 'unsound'], finding.tags)\n        self.assertEqual('smallvec', finding.component_name)\n        self.assertEqual('0.6.13', finding.component_version)\n        self.assertEqual('RUSTSEC-2021-0003', finding.vuln_id_from_tool)\n        self.assertEqual('2021-01-08', finding.publish_date)\n        self.assertEqual(1, finding.nb_occurences)\n        self.assertEqual(2, len(finding.unsaved_vulnerability_ids))\n        self.assertEqual('RUSTSEC-2021-0003', finding.unsaved_vulnerability_ids[0])\n        self.assertEqual('CVE-2021-25900', finding.unsaved_vulnerability_ids[1])\n    with self.subTest(i=3):\n        finding = findings[3]\n        self.assertEqual('[smallvec 1.5.0] Buffer overflow in SmallVec::insert_many', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(['buffer-overflow', 'heap-overflow', 'unsound'], finding.tags)\n        self.assertEqual('smallvec', finding.component_name)\n        self.assertEqual('1.5.0', finding.component_version)\n        self.assertEqual('RUSTSEC-2021-0003', finding.vuln_id_from_tool)\n        self.assertEqual('2021-01-08', finding.publish_date)\n        self.assertEqual(1, finding.nb_occurences)\n        self.assertEqual(2, len(finding.unsaved_vulnerability_ids))\n        self.assertEqual('RUSTSEC-2021-0003', finding.unsaved_vulnerability_ids[0])\n        self.assertEqual('CVE-2021-25900', finding.unsaved_vulnerability_ids[1])",
            "def test_parse_many_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    testfile = open('unittests/scans/cargo_audit/many_findings.json')\n    parser = CargoAuditParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(4, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('[arc-swap 0.4.7] Dangling reference in `access::Map` with Constant', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(['dangling reference'], finding.tags)\n        self.assertEqual('arc-swap', finding.component_name)\n        self.assertEqual('0.4.7', finding.component_version)\n        self.assertEqual('RUSTSEC-2020-0091', finding.vuln_id_from_tool)\n        self.assertEqual('2020-12-10', finding.publish_date)\n        self.assertEqual(1, finding.nb_occurences)\n        self.assertEqual(2, len(finding.unsaved_vulnerability_ids))\n        self.assertEqual('RUSTSEC-2020-0091', finding.unsaved_vulnerability_ids[0])\n        self.assertEqual('CVE-2020-35711', finding.unsaved_vulnerability_ids[1])\n    with self.subTest(i=1):\n        finding = findings[1]\n        self.assertEqual('[hyper 0.13.9] Multiple Transfer-Encoding headers misinterprets request payload', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(['http', 'request-smuggling'], finding.tags)\n        self.assertEqual('hyper', finding.component_name)\n        self.assertEqual('0.13.9', finding.component_version)\n        self.assertEqual('RUSTSEC-2021-0020', finding.vuln_id_from_tool)\n        self.assertEqual('2021-02-05', finding.publish_date)\n        self.assertEqual(1, finding.nb_occurences)\n        self.assertEqual(2, len(finding.unsaved_vulnerability_ids))\n        self.assertEqual('RUSTSEC-2021-0020', finding.unsaved_vulnerability_ids[0])\n        self.assertEqual('CVE-2021-21299', finding.unsaved_vulnerability_ids[1])\n    with self.subTest(i=2):\n        finding = findings[2]\n        self.assertEqual('[smallvec 0.6.13] Buffer overflow in SmallVec::insert_many', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(['buffer-overflow', 'heap-overflow', 'unsound'], finding.tags)\n        self.assertEqual('smallvec', finding.component_name)\n        self.assertEqual('0.6.13', finding.component_version)\n        self.assertEqual('RUSTSEC-2021-0003', finding.vuln_id_from_tool)\n        self.assertEqual('2021-01-08', finding.publish_date)\n        self.assertEqual(1, finding.nb_occurences)\n        self.assertEqual(2, len(finding.unsaved_vulnerability_ids))\n        self.assertEqual('RUSTSEC-2021-0003', finding.unsaved_vulnerability_ids[0])\n        self.assertEqual('CVE-2021-25900', finding.unsaved_vulnerability_ids[1])\n    with self.subTest(i=3):\n        finding = findings[3]\n        self.assertEqual('[smallvec 1.5.0] Buffer overflow in SmallVec::insert_many', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(['buffer-overflow', 'heap-overflow', 'unsound'], finding.tags)\n        self.assertEqual('smallvec', finding.component_name)\n        self.assertEqual('1.5.0', finding.component_version)\n        self.assertEqual('RUSTSEC-2021-0003', finding.vuln_id_from_tool)\n        self.assertEqual('2021-01-08', finding.publish_date)\n        self.assertEqual(1, finding.nb_occurences)\n        self.assertEqual(2, len(finding.unsaved_vulnerability_ids))\n        self.assertEqual('RUSTSEC-2021-0003', finding.unsaved_vulnerability_ids[0])\n        self.assertEqual('CVE-2021-25900', finding.unsaved_vulnerability_ids[1])",
            "def test_parse_many_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    testfile = open('unittests/scans/cargo_audit/many_findings.json')\n    parser = CargoAuditParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(4, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('[arc-swap 0.4.7] Dangling reference in `access::Map` with Constant', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(['dangling reference'], finding.tags)\n        self.assertEqual('arc-swap', finding.component_name)\n        self.assertEqual('0.4.7', finding.component_version)\n        self.assertEqual('RUSTSEC-2020-0091', finding.vuln_id_from_tool)\n        self.assertEqual('2020-12-10', finding.publish_date)\n        self.assertEqual(1, finding.nb_occurences)\n        self.assertEqual(2, len(finding.unsaved_vulnerability_ids))\n        self.assertEqual('RUSTSEC-2020-0091', finding.unsaved_vulnerability_ids[0])\n        self.assertEqual('CVE-2020-35711', finding.unsaved_vulnerability_ids[1])\n    with self.subTest(i=1):\n        finding = findings[1]\n        self.assertEqual('[hyper 0.13.9] Multiple Transfer-Encoding headers misinterprets request payload', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(['http', 'request-smuggling'], finding.tags)\n        self.assertEqual('hyper', finding.component_name)\n        self.assertEqual('0.13.9', finding.component_version)\n        self.assertEqual('RUSTSEC-2021-0020', finding.vuln_id_from_tool)\n        self.assertEqual('2021-02-05', finding.publish_date)\n        self.assertEqual(1, finding.nb_occurences)\n        self.assertEqual(2, len(finding.unsaved_vulnerability_ids))\n        self.assertEqual('RUSTSEC-2021-0020', finding.unsaved_vulnerability_ids[0])\n        self.assertEqual('CVE-2021-21299', finding.unsaved_vulnerability_ids[1])\n    with self.subTest(i=2):\n        finding = findings[2]\n        self.assertEqual('[smallvec 0.6.13] Buffer overflow in SmallVec::insert_many', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(['buffer-overflow', 'heap-overflow', 'unsound'], finding.tags)\n        self.assertEqual('smallvec', finding.component_name)\n        self.assertEqual('0.6.13', finding.component_version)\n        self.assertEqual('RUSTSEC-2021-0003', finding.vuln_id_from_tool)\n        self.assertEqual('2021-01-08', finding.publish_date)\n        self.assertEqual(1, finding.nb_occurences)\n        self.assertEqual(2, len(finding.unsaved_vulnerability_ids))\n        self.assertEqual('RUSTSEC-2021-0003', finding.unsaved_vulnerability_ids[0])\n        self.assertEqual('CVE-2021-25900', finding.unsaved_vulnerability_ids[1])\n    with self.subTest(i=3):\n        finding = findings[3]\n        self.assertEqual('[smallvec 1.5.0] Buffer overflow in SmallVec::insert_many', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(['buffer-overflow', 'heap-overflow', 'unsound'], finding.tags)\n        self.assertEqual('smallvec', finding.component_name)\n        self.assertEqual('1.5.0', finding.component_version)\n        self.assertEqual('RUSTSEC-2021-0003', finding.vuln_id_from_tool)\n        self.assertEqual('2021-01-08', finding.publish_date)\n        self.assertEqual(1, finding.nb_occurences)\n        self.assertEqual(2, len(finding.unsaved_vulnerability_ids))\n        self.assertEqual('RUSTSEC-2021-0003', finding.unsaved_vulnerability_ids[0])\n        self.assertEqual('CVE-2021-25900', finding.unsaved_vulnerability_ids[1])",
            "def test_parse_many_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    testfile = open('unittests/scans/cargo_audit/many_findings.json')\n    parser = CargoAuditParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(4, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('[arc-swap 0.4.7] Dangling reference in `access::Map` with Constant', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(['dangling reference'], finding.tags)\n        self.assertEqual('arc-swap', finding.component_name)\n        self.assertEqual('0.4.7', finding.component_version)\n        self.assertEqual('RUSTSEC-2020-0091', finding.vuln_id_from_tool)\n        self.assertEqual('2020-12-10', finding.publish_date)\n        self.assertEqual(1, finding.nb_occurences)\n        self.assertEqual(2, len(finding.unsaved_vulnerability_ids))\n        self.assertEqual('RUSTSEC-2020-0091', finding.unsaved_vulnerability_ids[0])\n        self.assertEqual('CVE-2020-35711', finding.unsaved_vulnerability_ids[1])\n    with self.subTest(i=1):\n        finding = findings[1]\n        self.assertEqual('[hyper 0.13.9] Multiple Transfer-Encoding headers misinterprets request payload', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(['http', 'request-smuggling'], finding.tags)\n        self.assertEqual('hyper', finding.component_name)\n        self.assertEqual('0.13.9', finding.component_version)\n        self.assertEqual('RUSTSEC-2021-0020', finding.vuln_id_from_tool)\n        self.assertEqual('2021-02-05', finding.publish_date)\n        self.assertEqual(1, finding.nb_occurences)\n        self.assertEqual(2, len(finding.unsaved_vulnerability_ids))\n        self.assertEqual('RUSTSEC-2021-0020', finding.unsaved_vulnerability_ids[0])\n        self.assertEqual('CVE-2021-21299', finding.unsaved_vulnerability_ids[1])\n    with self.subTest(i=2):\n        finding = findings[2]\n        self.assertEqual('[smallvec 0.6.13] Buffer overflow in SmallVec::insert_many', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(['buffer-overflow', 'heap-overflow', 'unsound'], finding.tags)\n        self.assertEqual('smallvec', finding.component_name)\n        self.assertEqual('0.6.13', finding.component_version)\n        self.assertEqual('RUSTSEC-2021-0003', finding.vuln_id_from_tool)\n        self.assertEqual('2021-01-08', finding.publish_date)\n        self.assertEqual(1, finding.nb_occurences)\n        self.assertEqual(2, len(finding.unsaved_vulnerability_ids))\n        self.assertEqual('RUSTSEC-2021-0003', finding.unsaved_vulnerability_ids[0])\n        self.assertEqual('CVE-2021-25900', finding.unsaved_vulnerability_ids[1])\n    with self.subTest(i=3):\n        finding = findings[3]\n        self.assertEqual('[smallvec 1.5.0] Buffer overflow in SmallVec::insert_many', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(['buffer-overflow', 'heap-overflow', 'unsound'], finding.tags)\n        self.assertEqual('smallvec', finding.component_name)\n        self.assertEqual('1.5.0', finding.component_version)\n        self.assertEqual('RUSTSEC-2021-0003', finding.vuln_id_from_tool)\n        self.assertEqual('2021-01-08', finding.publish_date)\n        self.assertEqual(1, finding.nb_occurences)\n        self.assertEqual(2, len(finding.unsaved_vulnerability_ids))\n        self.assertEqual('RUSTSEC-2021-0003', finding.unsaved_vulnerability_ids[0])\n        self.assertEqual('CVE-2021-25900', finding.unsaved_vulnerability_ids[1])",
            "def test_parse_many_findings(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    testfile = open('unittests/scans/cargo_audit/many_findings.json')\n    parser = CargoAuditParser()\n    findings = parser.get_findings(testfile, Test())\n    self.assertEqual(4, len(findings))\n    with self.subTest(i=0):\n        finding = findings[0]\n        self.assertEqual('[arc-swap 0.4.7] Dangling reference in `access::Map` with Constant', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(['dangling reference'], finding.tags)\n        self.assertEqual('arc-swap', finding.component_name)\n        self.assertEqual('0.4.7', finding.component_version)\n        self.assertEqual('RUSTSEC-2020-0091', finding.vuln_id_from_tool)\n        self.assertEqual('2020-12-10', finding.publish_date)\n        self.assertEqual(1, finding.nb_occurences)\n        self.assertEqual(2, len(finding.unsaved_vulnerability_ids))\n        self.assertEqual('RUSTSEC-2020-0091', finding.unsaved_vulnerability_ids[0])\n        self.assertEqual('CVE-2020-35711', finding.unsaved_vulnerability_ids[1])\n    with self.subTest(i=1):\n        finding = findings[1]\n        self.assertEqual('[hyper 0.13.9] Multiple Transfer-Encoding headers misinterprets request payload', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(['http', 'request-smuggling'], finding.tags)\n        self.assertEqual('hyper', finding.component_name)\n        self.assertEqual('0.13.9', finding.component_version)\n        self.assertEqual('RUSTSEC-2021-0020', finding.vuln_id_from_tool)\n        self.assertEqual('2021-02-05', finding.publish_date)\n        self.assertEqual(1, finding.nb_occurences)\n        self.assertEqual(2, len(finding.unsaved_vulnerability_ids))\n        self.assertEqual('RUSTSEC-2021-0020', finding.unsaved_vulnerability_ids[0])\n        self.assertEqual('CVE-2021-21299', finding.unsaved_vulnerability_ids[1])\n    with self.subTest(i=2):\n        finding = findings[2]\n        self.assertEqual('[smallvec 0.6.13] Buffer overflow in SmallVec::insert_many', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(['buffer-overflow', 'heap-overflow', 'unsound'], finding.tags)\n        self.assertEqual('smallvec', finding.component_name)\n        self.assertEqual('0.6.13', finding.component_version)\n        self.assertEqual('RUSTSEC-2021-0003', finding.vuln_id_from_tool)\n        self.assertEqual('2021-01-08', finding.publish_date)\n        self.assertEqual(1, finding.nb_occurences)\n        self.assertEqual(2, len(finding.unsaved_vulnerability_ids))\n        self.assertEqual('RUSTSEC-2021-0003', finding.unsaved_vulnerability_ids[0])\n        self.assertEqual('CVE-2021-25900', finding.unsaved_vulnerability_ids[1])\n    with self.subTest(i=3):\n        finding = findings[3]\n        self.assertEqual('[smallvec 1.5.0] Buffer overflow in SmallVec::insert_many', finding.title)\n        self.assertEqual('High', finding.severity)\n        self.assertIsNotNone(finding.description)\n        self.assertEqual(['buffer-overflow', 'heap-overflow', 'unsound'], finding.tags)\n        self.assertEqual('smallvec', finding.component_name)\n        self.assertEqual('1.5.0', finding.component_version)\n        self.assertEqual('RUSTSEC-2021-0003', finding.vuln_id_from_tool)\n        self.assertEqual('2021-01-08', finding.publish_date)\n        self.assertEqual(1, finding.nb_occurences)\n        self.assertEqual(2, len(finding.unsaved_vulnerability_ids))\n        self.assertEqual('RUSTSEC-2021-0003', finding.unsaved_vulnerability_ids[0])\n        self.assertEqual('CVE-2021-25900', finding.unsaved_vulnerability_ids[1])"
        ]
    }
]
[
    {
        "func_name": "main",
        "original": "def main() -> None:\n    parser = argparse.ArgumentParser(description='Adds a signature to a JSON object.\\n\\nExample usage:\\n\\n    $ scripts-dev/sign_json.py -N test -k localhost.signing.key \"{}\"\\n    {\"signatures\":{\"test\":{\"ed25519:a_ZnZh\":\"LmPnml6iM0iR...\"}}}\\n', formatter_class=argparse.RawDescriptionHelpFormatter)\n    parser.add_argument('-N', '--server-name', help='Name to give as the local homeserver. If unspecified, will be read from the config file.')\n    parser.add_argument('-k', '--signing-key-path', help='Path to the file containing the private ed25519 key to sign the request with.')\n    parser.add_argument('-K', '--signing-key', help='The private ed25519 key to sign the request with.')\n    parser.add_argument('-c', '--config', default='homeserver.yaml', help='Path to synapse config file, from which the server name and/or signing key path will be read. Ignored if --server-name and --signing-key(-path) are both given.')\n    parser.add_argument('--sign-event-room-version', type=str, help=\"Sign the JSON as an event for the given room version, rather than raw JSON. This means that we will add a 'hashes' object, and redact the event before signing.\")\n    input_args = parser.add_mutually_exclusive_group()\n    input_args.add_argument('input_data', nargs='?', help='Raw JSON to be signed.')\n    input_args.add_argument('-i', '--input', type=argparse.FileType('r'), default=sys.stdin, help='A file from which to read the JSON to be signed. If neither --input nor input_data are given, JSON will be read from stdin.')\n    parser.add_argument('-o', '--output', type=argparse.FileType('w'), default=sys.stdout, help='Where to write the signed JSON. Defaults to stdout.')\n    args = parser.parse_args()\n    if not args.server_name or not (args.signing_key_path or args.signing_key):\n        read_args_from_config(args)\n    if args.signing_key:\n        keys = read_signing_keys([args.signing_key])\n    else:\n        with open(args.signing_key_path) as f:\n            keys = read_signing_keys(f)\n    json_to_sign = args.input_data\n    if json_to_sign is None:\n        json_to_sign = args.input.read()\n    try:\n        obj = json.loads(json_to_sign)\n    except JSONDecodeError as e:\n        print('Unable to parse input as JSON: %s' % e, file=sys.stderr)\n        sys.exit(1)\n    if not isinstance(obj, dict):\n        print('Input json was not an object', file=sys.stderr)\n        sys.exit(1)\n    if args.sign_event_room_version:\n        room_version = KNOWN_ROOM_VERSIONS.get(args.sign_event_room_version)\n        if not room_version:\n            print(f'Unknown room version {args.sign_event_room_version}', file=sys.stderr)\n            sys.exit(1)\n        add_hashes_and_signatures(room_version, obj, args.server_name, keys[0])\n    else:\n        sign_json(obj, args.server_name, keys[0])\n    for c in json_encoder.iterencode(obj):\n        args.output.write(c)\n    args.output.write('\\n')",
        "mutated": [
            "def main() -> None:\n    if False:\n        i = 10\n    parser = argparse.ArgumentParser(description='Adds a signature to a JSON object.\\n\\nExample usage:\\n\\n    $ scripts-dev/sign_json.py -N test -k localhost.signing.key \"{}\"\\n    {\"signatures\":{\"test\":{\"ed25519:a_ZnZh\":\"LmPnml6iM0iR...\"}}}\\n', formatter_class=argparse.RawDescriptionHelpFormatter)\n    parser.add_argument('-N', '--server-name', help='Name to give as the local homeserver. If unspecified, will be read from the config file.')\n    parser.add_argument('-k', '--signing-key-path', help='Path to the file containing the private ed25519 key to sign the request with.')\n    parser.add_argument('-K', '--signing-key', help='The private ed25519 key to sign the request with.')\n    parser.add_argument('-c', '--config', default='homeserver.yaml', help='Path to synapse config file, from which the server name and/or signing key path will be read. Ignored if --server-name and --signing-key(-path) are both given.')\n    parser.add_argument('--sign-event-room-version', type=str, help=\"Sign the JSON as an event for the given room version, rather than raw JSON. This means that we will add a 'hashes' object, and redact the event before signing.\")\n    input_args = parser.add_mutually_exclusive_group()\n    input_args.add_argument('input_data', nargs='?', help='Raw JSON to be signed.')\n    input_args.add_argument('-i', '--input', type=argparse.FileType('r'), default=sys.stdin, help='A file from which to read the JSON to be signed. If neither --input nor input_data are given, JSON will be read from stdin.')\n    parser.add_argument('-o', '--output', type=argparse.FileType('w'), default=sys.stdout, help='Where to write the signed JSON. Defaults to stdout.')\n    args = parser.parse_args()\n    if not args.server_name or not (args.signing_key_path or args.signing_key):\n        read_args_from_config(args)\n    if args.signing_key:\n        keys = read_signing_keys([args.signing_key])\n    else:\n        with open(args.signing_key_path) as f:\n            keys = read_signing_keys(f)\n    json_to_sign = args.input_data\n    if json_to_sign is None:\n        json_to_sign = args.input.read()\n    try:\n        obj = json.loads(json_to_sign)\n    except JSONDecodeError as e:\n        print('Unable to parse input as JSON: %s' % e, file=sys.stderr)\n        sys.exit(1)\n    if not isinstance(obj, dict):\n        print('Input json was not an object', file=sys.stderr)\n        sys.exit(1)\n    if args.sign_event_room_version:\n        room_version = KNOWN_ROOM_VERSIONS.get(args.sign_event_room_version)\n        if not room_version:\n            print(f'Unknown room version {args.sign_event_room_version}', file=sys.stderr)\n            sys.exit(1)\n        add_hashes_and_signatures(room_version, obj, args.server_name, keys[0])\n    else:\n        sign_json(obj, args.server_name, keys[0])\n    for c in json_encoder.iterencode(obj):\n        args.output.write(c)\n    args.output.write('\\n')",
            "def main() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    parser = argparse.ArgumentParser(description='Adds a signature to a JSON object.\\n\\nExample usage:\\n\\n    $ scripts-dev/sign_json.py -N test -k localhost.signing.key \"{}\"\\n    {\"signatures\":{\"test\":{\"ed25519:a_ZnZh\":\"LmPnml6iM0iR...\"}}}\\n', formatter_class=argparse.RawDescriptionHelpFormatter)\n    parser.add_argument('-N', '--server-name', help='Name to give as the local homeserver. If unspecified, will be read from the config file.')\n    parser.add_argument('-k', '--signing-key-path', help='Path to the file containing the private ed25519 key to sign the request with.')\n    parser.add_argument('-K', '--signing-key', help='The private ed25519 key to sign the request with.')\n    parser.add_argument('-c', '--config', default='homeserver.yaml', help='Path to synapse config file, from which the server name and/or signing key path will be read. Ignored if --server-name and --signing-key(-path) are both given.')\n    parser.add_argument('--sign-event-room-version', type=str, help=\"Sign the JSON as an event for the given room version, rather than raw JSON. This means that we will add a 'hashes' object, and redact the event before signing.\")\n    input_args = parser.add_mutually_exclusive_group()\n    input_args.add_argument('input_data', nargs='?', help='Raw JSON to be signed.')\n    input_args.add_argument('-i', '--input', type=argparse.FileType('r'), default=sys.stdin, help='A file from which to read the JSON to be signed. If neither --input nor input_data are given, JSON will be read from stdin.')\n    parser.add_argument('-o', '--output', type=argparse.FileType('w'), default=sys.stdout, help='Where to write the signed JSON. Defaults to stdout.')\n    args = parser.parse_args()\n    if not args.server_name or not (args.signing_key_path or args.signing_key):\n        read_args_from_config(args)\n    if args.signing_key:\n        keys = read_signing_keys([args.signing_key])\n    else:\n        with open(args.signing_key_path) as f:\n            keys = read_signing_keys(f)\n    json_to_sign = args.input_data\n    if json_to_sign is None:\n        json_to_sign = args.input.read()\n    try:\n        obj = json.loads(json_to_sign)\n    except JSONDecodeError as e:\n        print('Unable to parse input as JSON: %s' % e, file=sys.stderr)\n        sys.exit(1)\n    if not isinstance(obj, dict):\n        print('Input json was not an object', file=sys.stderr)\n        sys.exit(1)\n    if args.sign_event_room_version:\n        room_version = KNOWN_ROOM_VERSIONS.get(args.sign_event_room_version)\n        if not room_version:\n            print(f'Unknown room version {args.sign_event_room_version}', file=sys.stderr)\n            sys.exit(1)\n        add_hashes_and_signatures(room_version, obj, args.server_name, keys[0])\n    else:\n        sign_json(obj, args.server_name, keys[0])\n    for c in json_encoder.iterencode(obj):\n        args.output.write(c)\n    args.output.write('\\n')",
            "def main() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    parser = argparse.ArgumentParser(description='Adds a signature to a JSON object.\\n\\nExample usage:\\n\\n    $ scripts-dev/sign_json.py -N test -k localhost.signing.key \"{}\"\\n    {\"signatures\":{\"test\":{\"ed25519:a_ZnZh\":\"LmPnml6iM0iR...\"}}}\\n', formatter_class=argparse.RawDescriptionHelpFormatter)\n    parser.add_argument('-N', '--server-name', help='Name to give as the local homeserver. If unspecified, will be read from the config file.')\n    parser.add_argument('-k', '--signing-key-path', help='Path to the file containing the private ed25519 key to sign the request with.')\n    parser.add_argument('-K', '--signing-key', help='The private ed25519 key to sign the request with.')\n    parser.add_argument('-c', '--config', default='homeserver.yaml', help='Path to synapse config file, from which the server name and/or signing key path will be read. Ignored if --server-name and --signing-key(-path) are both given.')\n    parser.add_argument('--sign-event-room-version', type=str, help=\"Sign the JSON as an event for the given room version, rather than raw JSON. This means that we will add a 'hashes' object, and redact the event before signing.\")\n    input_args = parser.add_mutually_exclusive_group()\n    input_args.add_argument('input_data', nargs='?', help='Raw JSON to be signed.')\n    input_args.add_argument('-i', '--input', type=argparse.FileType('r'), default=sys.stdin, help='A file from which to read the JSON to be signed. If neither --input nor input_data are given, JSON will be read from stdin.')\n    parser.add_argument('-o', '--output', type=argparse.FileType('w'), default=sys.stdout, help='Where to write the signed JSON. Defaults to stdout.')\n    args = parser.parse_args()\n    if not args.server_name or not (args.signing_key_path or args.signing_key):\n        read_args_from_config(args)\n    if args.signing_key:\n        keys = read_signing_keys([args.signing_key])\n    else:\n        with open(args.signing_key_path) as f:\n            keys = read_signing_keys(f)\n    json_to_sign = args.input_data\n    if json_to_sign is None:\n        json_to_sign = args.input.read()\n    try:\n        obj = json.loads(json_to_sign)\n    except JSONDecodeError as e:\n        print('Unable to parse input as JSON: %s' % e, file=sys.stderr)\n        sys.exit(1)\n    if not isinstance(obj, dict):\n        print('Input json was not an object', file=sys.stderr)\n        sys.exit(1)\n    if args.sign_event_room_version:\n        room_version = KNOWN_ROOM_VERSIONS.get(args.sign_event_room_version)\n        if not room_version:\n            print(f'Unknown room version {args.sign_event_room_version}', file=sys.stderr)\n            sys.exit(1)\n        add_hashes_and_signatures(room_version, obj, args.server_name, keys[0])\n    else:\n        sign_json(obj, args.server_name, keys[0])\n    for c in json_encoder.iterencode(obj):\n        args.output.write(c)\n    args.output.write('\\n')",
            "def main() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    parser = argparse.ArgumentParser(description='Adds a signature to a JSON object.\\n\\nExample usage:\\n\\n    $ scripts-dev/sign_json.py -N test -k localhost.signing.key \"{}\"\\n    {\"signatures\":{\"test\":{\"ed25519:a_ZnZh\":\"LmPnml6iM0iR...\"}}}\\n', formatter_class=argparse.RawDescriptionHelpFormatter)\n    parser.add_argument('-N', '--server-name', help='Name to give as the local homeserver. If unspecified, will be read from the config file.')\n    parser.add_argument('-k', '--signing-key-path', help='Path to the file containing the private ed25519 key to sign the request with.')\n    parser.add_argument('-K', '--signing-key', help='The private ed25519 key to sign the request with.')\n    parser.add_argument('-c', '--config', default='homeserver.yaml', help='Path to synapse config file, from which the server name and/or signing key path will be read. Ignored if --server-name and --signing-key(-path) are both given.')\n    parser.add_argument('--sign-event-room-version', type=str, help=\"Sign the JSON as an event for the given room version, rather than raw JSON. This means that we will add a 'hashes' object, and redact the event before signing.\")\n    input_args = parser.add_mutually_exclusive_group()\n    input_args.add_argument('input_data', nargs='?', help='Raw JSON to be signed.')\n    input_args.add_argument('-i', '--input', type=argparse.FileType('r'), default=sys.stdin, help='A file from which to read the JSON to be signed. If neither --input nor input_data are given, JSON will be read from stdin.')\n    parser.add_argument('-o', '--output', type=argparse.FileType('w'), default=sys.stdout, help='Where to write the signed JSON. Defaults to stdout.')\n    args = parser.parse_args()\n    if not args.server_name or not (args.signing_key_path or args.signing_key):\n        read_args_from_config(args)\n    if args.signing_key:\n        keys = read_signing_keys([args.signing_key])\n    else:\n        with open(args.signing_key_path) as f:\n            keys = read_signing_keys(f)\n    json_to_sign = args.input_data\n    if json_to_sign is None:\n        json_to_sign = args.input.read()\n    try:\n        obj = json.loads(json_to_sign)\n    except JSONDecodeError as e:\n        print('Unable to parse input as JSON: %s' % e, file=sys.stderr)\n        sys.exit(1)\n    if not isinstance(obj, dict):\n        print('Input json was not an object', file=sys.stderr)\n        sys.exit(1)\n    if args.sign_event_room_version:\n        room_version = KNOWN_ROOM_VERSIONS.get(args.sign_event_room_version)\n        if not room_version:\n            print(f'Unknown room version {args.sign_event_room_version}', file=sys.stderr)\n            sys.exit(1)\n        add_hashes_and_signatures(room_version, obj, args.server_name, keys[0])\n    else:\n        sign_json(obj, args.server_name, keys[0])\n    for c in json_encoder.iterencode(obj):\n        args.output.write(c)\n    args.output.write('\\n')",
            "def main() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    parser = argparse.ArgumentParser(description='Adds a signature to a JSON object.\\n\\nExample usage:\\n\\n    $ scripts-dev/sign_json.py -N test -k localhost.signing.key \"{}\"\\n    {\"signatures\":{\"test\":{\"ed25519:a_ZnZh\":\"LmPnml6iM0iR...\"}}}\\n', formatter_class=argparse.RawDescriptionHelpFormatter)\n    parser.add_argument('-N', '--server-name', help='Name to give as the local homeserver. If unspecified, will be read from the config file.')\n    parser.add_argument('-k', '--signing-key-path', help='Path to the file containing the private ed25519 key to sign the request with.')\n    parser.add_argument('-K', '--signing-key', help='The private ed25519 key to sign the request with.')\n    parser.add_argument('-c', '--config', default='homeserver.yaml', help='Path to synapse config file, from which the server name and/or signing key path will be read. Ignored if --server-name and --signing-key(-path) are both given.')\n    parser.add_argument('--sign-event-room-version', type=str, help=\"Sign the JSON as an event for the given room version, rather than raw JSON. This means that we will add a 'hashes' object, and redact the event before signing.\")\n    input_args = parser.add_mutually_exclusive_group()\n    input_args.add_argument('input_data', nargs='?', help='Raw JSON to be signed.')\n    input_args.add_argument('-i', '--input', type=argparse.FileType('r'), default=sys.stdin, help='A file from which to read the JSON to be signed. If neither --input nor input_data are given, JSON will be read from stdin.')\n    parser.add_argument('-o', '--output', type=argparse.FileType('w'), default=sys.stdout, help='Where to write the signed JSON. Defaults to stdout.')\n    args = parser.parse_args()\n    if not args.server_name or not (args.signing_key_path or args.signing_key):\n        read_args_from_config(args)\n    if args.signing_key:\n        keys = read_signing_keys([args.signing_key])\n    else:\n        with open(args.signing_key_path) as f:\n            keys = read_signing_keys(f)\n    json_to_sign = args.input_data\n    if json_to_sign is None:\n        json_to_sign = args.input.read()\n    try:\n        obj = json.loads(json_to_sign)\n    except JSONDecodeError as e:\n        print('Unable to parse input as JSON: %s' % e, file=sys.stderr)\n        sys.exit(1)\n    if not isinstance(obj, dict):\n        print('Input json was not an object', file=sys.stderr)\n        sys.exit(1)\n    if args.sign_event_room_version:\n        room_version = KNOWN_ROOM_VERSIONS.get(args.sign_event_room_version)\n        if not room_version:\n            print(f'Unknown room version {args.sign_event_room_version}', file=sys.stderr)\n            sys.exit(1)\n        add_hashes_and_signatures(room_version, obj, args.server_name, keys[0])\n    else:\n        sign_json(obj, args.server_name, keys[0])\n    for c in json_encoder.iterencode(obj):\n        args.output.write(c)\n    args.output.write('\\n')"
        ]
    },
    {
        "func_name": "read_args_from_config",
        "original": "def read_args_from_config(args: argparse.Namespace) -> None:\n    with open(args.config) as fh:\n        config = yaml.safe_load(fh)\n        if not args.server_name:\n            args.server_name = config['server_name']\n        if not args.signing_key_path and (not args.signing_key):\n            if 'signing_key' in config:\n                args.signing_key = config['signing_key']\n            elif 'signing_key_path' in config:\n                args.signing_key_path = config['signing_key_path']\n            else:\n                print('A signing key must be given on the commandline or in the config file.', file=sys.stderr)\n                sys.exit(1)",
        "mutated": [
            "def read_args_from_config(args: argparse.Namespace) -> None:\n    if False:\n        i = 10\n    with open(args.config) as fh:\n        config = yaml.safe_load(fh)\n        if not args.server_name:\n            args.server_name = config['server_name']\n        if not args.signing_key_path and (not args.signing_key):\n            if 'signing_key' in config:\n                args.signing_key = config['signing_key']\n            elif 'signing_key_path' in config:\n                args.signing_key_path = config['signing_key_path']\n            else:\n                print('A signing key must be given on the commandline or in the config file.', file=sys.stderr)\n                sys.exit(1)",
            "def read_args_from_config(args: argparse.Namespace) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    with open(args.config) as fh:\n        config = yaml.safe_load(fh)\n        if not args.server_name:\n            args.server_name = config['server_name']\n        if not args.signing_key_path and (not args.signing_key):\n            if 'signing_key' in config:\n                args.signing_key = config['signing_key']\n            elif 'signing_key_path' in config:\n                args.signing_key_path = config['signing_key_path']\n            else:\n                print('A signing key must be given on the commandline or in the config file.', file=sys.stderr)\n                sys.exit(1)",
            "def read_args_from_config(args: argparse.Namespace) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    with open(args.config) as fh:\n        config = yaml.safe_load(fh)\n        if not args.server_name:\n            args.server_name = config['server_name']\n        if not args.signing_key_path and (not args.signing_key):\n            if 'signing_key' in config:\n                args.signing_key = config['signing_key']\n            elif 'signing_key_path' in config:\n                args.signing_key_path = config['signing_key_path']\n            else:\n                print('A signing key must be given on the commandline or in the config file.', file=sys.stderr)\n                sys.exit(1)",
            "def read_args_from_config(args: argparse.Namespace) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    with open(args.config) as fh:\n        config = yaml.safe_load(fh)\n        if not args.server_name:\n            args.server_name = config['server_name']\n        if not args.signing_key_path and (not args.signing_key):\n            if 'signing_key' in config:\n                args.signing_key = config['signing_key']\n            elif 'signing_key_path' in config:\n                args.signing_key_path = config['signing_key_path']\n            else:\n                print('A signing key must be given on the commandline or in the config file.', file=sys.stderr)\n                sys.exit(1)",
            "def read_args_from_config(args: argparse.Namespace) -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    with open(args.config) as fh:\n        config = yaml.safe_load(fh)\n        if not args.server_name:\n            args.server_name = config['server_name']\n        if not args.signing_key_path and (not args.signing_key):\n            if 'signing_key' in config:\n                args.signing_key = config['signing_key']\n            elif 'signing_key_path' in config:\n                args.signing_key_path = config['signing_key_path']\n            else:\n                print('A signing key must be given on the commandline or in the config file.', file=sys.stderr)\n                sys.exit(1)"
        ]
    }
]
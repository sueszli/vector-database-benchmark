[
    {
        "func_name": "dfs",
        "original": "def dfs(r, c, index, grid):\n    if not (0 <= r < len(grid) and 0 <= c < len(grid[0]) and (grid[r][c] == 1)):\n        return 0\n    result = 1\n    grid[r][c] = index\n    for d in directions:\n        result += dfs(r + d[0], c + d[1], index, grid)\n    return result",
        "mutated": [
            "def dfs(r, c, index, grid):\n    if False:\n        i = 10\n    if not (0 <= r < len(grid) and 0 <= c < len(grid[0]) and (grid[r][c] == 1)):\n        return 0\n    result = 1\n    grid[r][c] = index\n    for d in directions:\n        result += dfs(r + d[0], c + d[1], index, grid)\n    return result",
            "def dfs(r, c, index, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not (0 <= r < len(grid) and 0 <= c < len(grid[0]) and (grid[r][c] == 1)):\n        return 0\n    result = 1\n    grid[r][c] = index\n    for d in directions:\n        result += dfs(r + d[0], c + d[1], index, grid)\n    return result",
            "def dfs(r, c, index, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not (0 <= r < len(grid) and 0 <= c < len(grid[0]) and (grid[r][c] == 1)):\n        return 0\n    result = 1\n    grid[r][c] = index\n    for d in directions:\n        result += dfs(r + d[0], c + d[1], index, grid)\n    return result",
            "def dfs(r, c, index, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not (0 <= r < len(grid) and 0 <= c < len(grid[0]) and (grid[r][c] == 1)):\n        return 0\n    result = 1\n    grid[r][c] = index\n    for d in directions:\n        result += dfs(r + d[0], c + d[1], index, grid)\n    return result",
            "def dfs(r, c, index, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not (0 <= r < len(grid) and 0 <= c < len(grid[0]) and (grid[r][c] == 1)):\n        return 0\n    result = 1\n    grid[r][c] = index\n    for d in directions:\n        result += dfs(r + d[0], c + d[1], index, grid)\n    return result"
        ]
    },
    {
        "func_name": "largestIsland",
        "original": "def largestIsland(self, grid):\n    \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n    directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]\n\n    def dfs(r, c, index, grid):\n        if not (0 <= r < len(grid) and 0 <= c < len(grid[0]) and (grid[r][c] == 1)):\n            return 0\n        result = 1\n        grid[r][c] = index\n        for d in directions:\n            result += dfs(r + d[0], c + d[1], index, grid)\n        return result\n    area = {}\n    index = 2\n    for r in xrange(len(grid)):\n        for c in xrange(len(grid[r])):\n            if grid[r][c] == 1:\n                area[index] = dfs(r, c, index, grid)\n                index += 1\n    result = max(area.values() or [0])\n    for r in xrange(len(grid)):\n        for c in xrange(len(grid[r])):\n            if grid[r][c] == 0:\n                seen = set()\n                for d in directions:\n                    (nr, nc) = (r + d[0], c + d[1])\n                    if not (0 <= nr < len(grid) and 0 <= nc < len(grid[0]) and (grid[nr][nc] > 1)):\n                        continue\n                    seen.add(grid[nr][nc])\n                result = max(result, 1 + sum((area[i] for i in seen)))\n    return result",
        "mutated": [
            "def largestIsland(self, grid):\n    if False:\n        i = 10\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]\n\n    def dfs(r, c, index, grid):\n        if not (0 <= r < len(grid) and 0 <= c < len(grid[0]) and (grid[r][c] == 1)):\n            return 0\n        result = 1\n        grid[r][c] = index\n        for d in directions:\n            result += dfs(r + d[0], c + d[1], index, grid)\n        return result\n    area = {}\n    index = 2\n    for r in xrange(len(grid)):\n        for c in xrange(len(grid[r])):\n            if grid[r][c] == 1:\n                area[index] = dfs(r, c, index, grid)\n                index += 1\n    result = max(area.values() or [0])\n    for r in xrange(len(grid)):\n        for c in xrange(len(grid[r])):\n            if grid[r][c] == 0:\n                seen = set()\n                for d in directions:\n                    (nr, nc) = (r + d[0], c + d[1])\n                    if not (0 <= nr < len(grid) and 0 <= nc < len(grid[0]) and (grid[nr][nc] > 1)):\n                        continue\n                    seen.add(grid[nr][nc])\n                result = max(result, 1 + sum((area[i] for i in seen)))\n    return result",
            "def largestIsland(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]\n\n    def dfs(r, c, index, grid):\n        if not (0 <= r < len(grid) and 0 <= c < len(grid[0]) and (grid[r][c] == 1)):\n            return 0\n        result = 1\n        grid[r][c] = index\n        for d in directions:\n            result += dfs(r + d[0], c + d[1], index, grid)\n        return result\n    area = {}\n    index = 2\n    for r in xrange(len(grid)):\n        for c in xrange(len(grid[r])):\n            if grid[r][c] == 1:\n                area[index] = dfs(r, c, index, grid)\n                index += 1\n    result = max(area.values() or [0])\n    for r in xrange(len(grid)):\n        for c in xrange(len(grid[r])):\n            if grid[r][c] == 0:\n                seen = set()\n                for d in directions:\n                    (nr, nc) = (r + d[0], c + d[1])\n                    if not (0 <= nr < len(grid) and 0 <= nc < len(grid[0]) and (grid[nr][nc] > 1)):\n                        continue\n                    seen.add(grid[nr][nc])\n                result = max(result, 1 + sum((area[i] for i in seen)))\n    return result",
            "def largestIsland(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]\n\n    def dfs(r, c, index, grid):\n        if not (0 <= r < len(grid) and 0 <= c < len(grid[0]) and (grid[r][c] == 1)):\n            return 0\n        result = 1\n        grid[r][c] = index\n        for d in directions:\n            result += dfs(r + d[0], c + d[1], index, grid)\n        return result\n    area = {}\n    index = 2\n    for r in xrange(len(grid)):\n        for c in xrange(len(grid[r])):\n            if grid[r][c] == 1:\n                area[index] = dfs(r, c, index, grid)\n                index += 1\n    result = max(area.values() or [0])\n    for r in xrange(len(grid)):\n        for c in xrange(len(grid[r])):\n            if grid[r][c] == 0:\n                seen = set()\n                for d in directions:\n                    (nr, nc) = (r + d[0], c + d[1])\n                    if not (0 <= nr < len(grid) and 0 <= nc < len(grid[0]) and (grid[nr][nc] > 1)):\n                        continue\n                    seen.add(grid[nr][nc])\n                result = max(result, 1 + sum((area[i] for i in seen)))\n    return result",
            "def largestIsland(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]\n\n    def dfs(r, c, index, grid):\n        if not (0 <= r < len(grid) and 0 <= c < len(grid[0]) and (grid[r][c] == 1)):\n            return 0\n        result = 1\n        grid[r][c] = index\n        for d in directions:\n            result += dfs(r + d[0], c + d[1], index, grid)\n        return result\n    area = {}\n    index = 2\n    for r in xrange(len(grid)):\n        for c in xrange(len(grid[r])):\n            if grid[r][c] == 1:\n                area[index] = dfs(r, c, index, grid)\n                index += 1\n    result = max(area.values() or [0])\n    for r in xrange(len(grid)):\n        for c in xrange(len(grid[r])):\n            if grid[r][c] == 0:\n                seen = set()\n                for d in directions:\n                    (nr, nc) = (r + d[0], c + d[1])\n                    if not (0 <= nr < len(grid) and 0 <= nc < len(grid[0]) and (grid[nr][nc] > 1)):\n                        continue\n                    seen.add(grid[nr][nc])\n                result = max(result, 1 + sum((area[i] for i in seen)))\n    return result",
            "def largestIsland(self, grid):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type grid: List[List[int]]\\n        :rtype: int\\n        '\n    directions = [(0, -1), (0, 1), (-1, 0), (1, 0)]\n\n    def dfs(r, c, index, grid):\n        if not (0 <= r < len(grid) and 0 <= c < len(grid[0]) and (grid[r][c] == 1)):\n            return 0\n        result = 1\n        grid[r][c] = index\n        for d in directions:\n            result += dfs(r + d[0], c + d[1], index, grid)\n        return result\n    area = {}\n    index = 2\n    for r in xrange(len(grid)):\n        for c in xrange(len(grid[r])):\n            if grid[r][c] == 1:\n                area[index] = dfs(r, c, index, grid)\n                index += 1\n    result = max(area.values() or [0])\n    for r in xrange(len(grid)):\n        for c in xrange(len(grid[r])):\n            if grid[r][c] == 0:\n                seen = set()\n                for d in directions:\n                    (nr, nc) = (r + d[0], c + d[1])\n                    if not (0 <= nr < len(grid) and 0 <= nc < len(grid[0]) and (grid[nr][nc] > 1)):\n                        continue\n                    seen.add(grid[nr][nc])\n                result = max(result, 1 + sum((area[i] for i in seen)))\n    return result"
        ]
    }
]
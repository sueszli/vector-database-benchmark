"""
    flyteidl/service/admin.proto

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: version not set
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""
import pprint
import re
import six

class CoreGPUAccelerator(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    '\n    Attributes:\n      swagger_types (dict): The key is attribute name\n                            and the value is attribute type.\n      attribute_map (dict): The key is attribute name\n                            and the value is json key in definition.\n    '
    swagger_types = {'device': 'str', 'unpartitioned': 'bool', 'partition_size': 'str'}
    attribute_map = {'device': 'device', 'unpartitioned': 'unpartitioned', 'partition_size': 'partition_size'}

    def __init__(self, device=None, unpartitioned=None, partition_size=None):
        if False:
            return 10
        'CoreGPUAccelerator - a model defined in Swagger'
        self._device = None
        self._unpartitioned = None
        self._partition_size = None
        self.discriminator = None
        if device is not None:
            self.device = device
        if unpartitioned is not None:
            self.unpartitioned = unpartitioned
        if partition_size is not None:
            self.partition_size = partition_size

    @property
    def device(self):
        if False:
            return 10
        'Gets the device of this CoreGPUAccelerator.  # noqa: E501\n\n        This can be any arbitrary string, and should be informed by the labels or taints associated with the nodes in question. Default cloud provider labels typically use the following values: `nvidia-tesla-t4`, `nvidia-tesla-a100`, etc.  # noqa: E501\n\n        :return: The device of this CoreGPUAccelerator.  # noqa: E501\n        :rtype: str\n        '
        return self._device

    @device.setter
    def device(self, device):
        if False:
            return 10
        'Sets the device of this CoreGPUAccelerator.\n\n        This can be any arbitrary string, and should be informed by the labels or taints associated with the nodes in question. Default cloud provider labels typically use the following values: `nvidia-tesla-t4`, `nvidia-tesla-a100`, etc.  # noqa: E501\n\n        :param device: The device of this CoreGPUAccelerator.  # noqa: E501\n        :type: str\n        '
        self._device = device

    @property
    def unpartitioned(self):
        if False:
            for i in range(10):
                print('nop')
        'Gets the unpartitioned of this CoreGPUAccelerator.  # noqa: E501\n\n\n        :return: The unpartitioned of this CoreGPUAccelerator.  # noqa: E501\n        :rtype: bool\n        '
        return self._unpartitioned

    @unpartitioned.setter
    def unpartitioned(self, unpartitioned):
        if False:
            for i in range(10):
                print('nop')
        'Sets the unpartitioned of this CoreGPUAccelerator.\n\n\n        :param unpartitioned: The unpartitioned of this CoreGPUAccelerator.  # noqa: E501\n        :type: bool\n        '
        self._unpartitioned = unpartitioned

    @property
    def partition_size(self):
        if False:
            i = 10
            return i + 15
        'Gets the partition_size of this CoreGPUAccelerator.  # noqa: E501\n\n        Like `device`, this can be any arbitrary string, and should be informed by the labels or taints associated with the nodes in question. Default cloud provider labels typically use the following values: `1g.5gb`, `2g.10gb`, etc.  # noqa: E501\n\n        :return: The partition_size of this CoreGPUAccelerator.  # noqa: E501\n        :rtype: str\n        '
        return self._partition_size

    @partition_size.setter
    def partition_size(self, partition_size):
        if False:
            print('Hello World!')
        'Sets the partition_size of this CoreGPUAccelerator.\n\n        Like `device`, this can be any arbitrary string, and should be informed by the labels or taints associated with the nodes in question. Default cloud provider labels typically use the following values: `1g.5gb`, `2g.10gb`, etc.  # noqa: E501\n\n        :param partition_size: The partition_size of this CoreGPUAccelerator.  # noqa: E501\n        :type: str\n        '
        self._partition_size = partition_size

    def to_dict(self):
        if False:
            print('Hello World!')
        'Returns the model properties as a dict'
        result = {}
        for (attr, _) in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(lambda x: x.to_dict() if hasattr(x, 'to_dict') else x, value))
            elif hasattr(value, 'to_dict'):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(lambda item: (item[0], item[1].to_dict()) if hasattr(item[1], 'to_dict') else item, value.items()))
            else:
                result[attr] = value
        if issubclass(CoreGPUAccelerator, dict):
            for (key, value) in self.items():
                result[key] = value
        return result

    def to_str(self):
        if False:
            while True:
                i = 10
        'Returns the string representation of the model'
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        if False:
            i = 10
            return i + 15
        'For `print` and `pprint`'
        return self.to_str()

    def __eq__(self, other):
        if False:
            i = 10
            return i + 15
        'Returns true if both objects are equal'
        if not isinstance(other, CoreGPUAccelerator):
            return False
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        if False:
            return 10
        'Returns true if both objects are not equal'
        return not self == other
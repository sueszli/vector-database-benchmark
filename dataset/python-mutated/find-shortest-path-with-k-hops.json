[
    {
        "func_name": "modified_dijkstra",
        "original": "def modified_dijkstra():\n    best = [[float('inf')] * (k + 1) for _ in xrange(len(adj))]\n    best[s][0] = 0\n    min_heap = [(best[s][0], s, 0)]\n    while min_heap:\n        (curr, u, cnt) = heapq.heappop(min_heap)\n        if curr > best[u][cnt]:\n            continue\n        if u == d:\n            return curr\n        for (v, w) in adj[u]:\n            if curr + w < best[v][cnt]:\n                best[v][cnt] = curr + w\n                heapq.heappush(min_heap, (best[v][cnt], v, cnt))\n            if cnt + 1 <= k and curr < best[v][cnt + 1]:\n                best[v][cnt + 1] = curr\n                heapq.heappush(min_heap, (best[v][cnt + 1], v, cnt + 1))\n    return -1",
        "mutated": [
            "def modified_dijkstra():\n    if False:\n        i = 10\n    best = [[float('inf')] * (k + 1) for _ in xrange(len(adj))]\n    best[s][0] = 0\n    min_heap = [(best[s][0], s, 0)]\n    while min_heap:\n        (curr, u, cnt) = heapq.heappop(min_heap)\n        if curr > best[u][cnt]:\n            continue\n        if u == d:\n            return curr\n        for (v, w) in adj[u]:\n            if curr + w < best[v][cnt]:\n                best[v][cnt] = curr + w\n                heapq.heappush(min_heap, (best[v][cnt], v, cnt))\n            if cnt + 1 <= k and curr < best[v][cnt + 1]:\n                best[v][cnt + 1] = curr\n                heapq.heappush(min_heap, (best[v][cnt + 1], v, cnt + 1))\n    return -1",
            "def modified_dijkstra():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    best = [[float('inf')] * (k + 1) for _ in xrange(len(adj))]\n    best[s][0] = 0\n    min_heap = [(best[s][0], s, 0)]\n    while min_heap:\n        (curr, u, cnt) = heapq.heappop(min_heap)\n        if curr > best[u][cnt]:\n            continue\n        if u == d:\n            return curr\n        for (v, w) in adj[u]:\n            if curr + w < best[v][cnt]:\n                best[v][cnt] = curr + w\n                heapq.heappush(min_heap, (best[v][cnt], v, cnt))\n            if cnt + 1 <= k and curr < best[v][cnt + 1]:\n                best[v][cnt + 1] = curr\n                heapq.heappush(min_heap, (best[v][cnt + 1], v, cnt + 1))\n    return -1",
            "def modified_dijkstra():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    best = [[float('inf')] * (k + 1) for _ in xrange(len(adj))]\n    best[s][0] = 0\n    min_heap = [(best[s][0], s, 0)]\n    while min_heap:\n        (curr, u, cnt) = heapq.heappop(min_heap)\n        if curr > best[u][cnt]:\n            continue\n        if u == d:\n            return curr\n        for (v, w) in adj[u]:\n            if curr + w < best[v][cnt]:\n                best[v][cnt] = curr + w\n                heapq.heappush(min_heap, (best[v][cnt], v, cnt))\n            if cnt + 1 <= k and curr < best[v][cnt + 1]:\n                best[v][cnt + 1] = curr\n                heapq.heappush(min_heap, (best[v][cnt + 1], v, cnt + 1))\n    return -1",
            "def modified_dijkstra():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    best = [[float('inf')] * (k + 1) for _ in xrange(len(adj))]\n    best[s][0] = 0\n    min_heap = [(best[s][0], s, 0)]\n    while min_heap:\n        (curr, u, cnt) = heapq.heappop(min_heap)\n        if curr > best[u][cnt]:\n            continue\n        if u == d:\n            return curr\n        for (v, w) in adj[u]:\n            if curr + w < best[v][cnt]:\n                best[v][cnt] = curr + w\n                heapq.heappush(min_heap, (best[v][cnt], v, cnt))\n            if cnt + 1 <= k and curr < best[v][cnt + 1]:\n                best[v][cnt + 1] = curr\n                heapq.heappush(min_heap, (best[v][cnt + 1], v, cnt + 1))\n    return -1",
            "def modified_dijkstra():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    best = [[float('inf')] * (k + 1) for _ in xrange(len(adj))]\n    best[s][0] = 0\n    min_heap = [(best[s][0], s, 0)]\n    while min_heap:\n        (curr, u, cnt) = heapq.heappop(min_heap)\n        if curr > best[u][cnt]:\n            continue\n        if u == d:\n            return curr\n        for (v, w) in adj[u]:\n            if curr + w < best[v][cnt]:\n                best[v][cnt] = curr + w\n                heapq.heappush(min_heap, (best[v][cnt], v, cnt))\n            if cnt + 1 <= k and curr < best[v][cnt + 1]:\n                best[v][cnt + 1] = curr\n                heapq.heappush(min_heap, (best[v][cnt + 1], v, cnt + 1))\n    return -1"
        ]
    },
    {
        "func_name": "shortestPathWithHops",
        "original": "def shortestPathWithHops(self, n, edges, s, d, k):\n    \"\"\"\n        :type n: int\n        :type edges: List[List[int]]\n        :type s: int\n        :type d: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n\n    def modified_dijkstra():\n        best = [[float('inf')] * (k + 1) for _ in xrange(len(adj))]\n        best[s][0] = 0\n        min_heap = [(best[s][0], s, 0)]\n        while min_heap:\n            (curr, u, cnt) = heapq.heappop(min_heap)\n            if curr > best[u][cnt]:\n                continue\n            if u == d:\n                return curr\n            for (v, w) in adj[u]:\n                if curr + w < best[v][cnt]:\n                    best[v][cnt] = curr + w\n                    heapq.heappush(min_heap, (best[v][cnt], v, cnt))\n                if cnt + 1 <= k and curr < best[v][cnt + 1]:\n                    best[v][cnt + 1] = curr\n                    heapq.heappush(min_heap, (best[v][cnt + 1], v, cnt + 1))\n        return -1\n    adj = [[] for _ in xrange(n)]\n    for (u, v, w) in edges:\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n    return modified_dijkstra()",
        "mutated": [
            "def shortestPathWithHops(self, n, edges, s, d, k):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type s: int\\n        :type d: int\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def modified_dijkstra():\n        best = [[float('inf')] * (k + 1) for _ in xrange(len(adj))]\n        best[s][0] = 0\n        min_heap = [(best[s][0], s, 0)]\n        while min_heap:\n            (curr, u, cnt) = heapq.heappop(min_heap)\n            if curr > best[u][cnt]:\n                continue\n            if u == d:\n                return curr\n            for (v, w) in adj[u]:\n                if curr + w < best[v][cnt]:\n                    best[v][cnt] = curr + w\n                    heapq.heappush(min_heap, (best[v][cnt], v, cnt))\n                if cnt + 1 <= k and curr < best[v][cnt + 1]:\n                    best[v][cnt + 1] = curr\n                    heapq.heappush(min_heap, (best[v][cnt + 1], v, cnt + 1))\n        return -1\n    adj = [[] for _ in xrange(n)]\n    for (u, v, w) in edges:\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n    return modified_dijkstra()",
            "def shortestPathWithHops(self, n, edges, s, d, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type s: int\\n        :type d: int\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def modified_dijkstra():\n        best = [[float('inf')] * (k + 1) for _ in xrange(len(adj))]\n        best[s][0] = 0\n        min_heap = [(best[s][0], s, 0)]\n        while min_heap:\n            (curr, u, cnt) = heapq.heappop(min_heap)\n            if curr > best[u][cnt]:\n                continue\n            if u == d:\n                return curr\n            for (v, w) in adj[u]:\n                if curr + w < best[v][cnt]:\n                    best[v][cnt] = curr + w\n                    heapq.heappush(min_heap, (best[v][cnt], v, cnt))\n                if cnt + 1 <= k and curr < best[v][cnt + 1]:\n                    best[v][cnt + 1] = curr\n                    heapq.heappush(min_heap, (best[v][cnt + 1], v, cnt + 1))\n        return -1\n    adj = [[] for _ in xrange(n)]\n    for (u, v, w) in edges:\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n    return modified_dijkstra()",
            "def shortestPathWithHops(self, n, edges, s, d, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type s: int\\n        :type d: int\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def modified_dijkstra():\n        best = [[float('inf')] * (k + 1) for _ in xrange(len(adj))]\n        best[s][0] = 0\n        min_heap = [(best[s][0], s, 0)]\n        while min_heap:\n            (curr, u, cnt) = heapq.heappop(min_heap)\n            if curr > best[u][cnt]:\n                continue\n            if u == d:\n                return curr\n            for (v, w) in adj[u]:\n                if curr + w < best[v][cnt]:\n                    best[v][cnt] = curr + w\n                    heapq.heappush(min_heap, (best[v][cnt], v, cnt))\n                if cnt + 1 <= k and curr < best[v][cnt + 1]:\n                    best[v][cnt + 1] = curr\n                    heapq.heappush(min_heap, (best[v][cnt + 1], v, cnt + 1))\n        return -1\n    adj = [[] for _ in xrange(n)]\n    for (u, v, w) in edges:\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n    return modified_dijkstra()",
            "def shortestPathWithHops(self, n, edges, s, d, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type s: int\\n        :type d: int\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def modified_dijkstra():\n        best = [[float('inf')] * (k + 1) for _ in xrange(len(adj))]\n        best[s][0] = 0\n        min_heap = [(best[s][0], s, 0)]\n        while min_heap:\n            (curr, u, cnt) = heapq.heappop(min_heap)\n            if curr > best[u][cnt]:\n                continue\n            if u == d:\n                return curr\n            for (v, w) in adj[u]:\n                if curr + w < best[v][cnt]:\n                    best[v][cnt] = curr + w\n                    heapq.heappush(min_heap, (best[v][cnt], v, cnt))\n                if cnt + 1 <= k and curr < best[v][cnt + 1]:\n                    best[v][cnt + 1] = curr\n                    heapq.heappush(min_heap, (best[v][cnt + 1], v, cnt + 1))\n        return -1\n    adj = [[] for _ in xrange(n)]\n    for (u, v, w) in edges:\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n    return modified_dijkstra()",
            "def shortestPathWithHops(self, n, edges, s, d, k):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type edges: List[List[int]]\\n        :type s: int\\n        :type d: int\\n        :type k: int\\n        :rtype: int\\n        '\n\n    def modified_dijkstra():\n        best = [[float('inf')] * (k + 1) for _ in xrange(len(adj))]\n        best[s][0] = 0\n        min_heap = [(best[s][0], s, 0)]\n        while min_heap:\n            (curr, u, cnt) = heapq.heappop(min_heap)\n            if curr > best[u][cnt]:\n                continue\n            if u == d:\n                return curr\n            for (v, w) in adj[u]:\n                if curr + w < best[v][cnt]:\n                    best[v][cnt] = curr + w\n                    heapq.heappush(min_heap, (best[v][cnt], v, cnt))\n                if cnt + 1 <= k and curr < best[v][cnt + 1]:\n                    best[v][cnt + 1] = curr\n                    heapq.heappush(min_heap, (best[v][cnt + 1], v, cnt + 1))\n        return -1\n    adj = [[] for _ in xrange(n)]\n    for (u, v, w) in edges:\n        adj[u].append((v, w))\n        adj[v].append((u, w))\n    return modified_dijkstra()"
        ]
    }
]
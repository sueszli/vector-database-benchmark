[
    {
        "func_name": "init_argparse",
        "original": "@classmethod\ndef init_argparse(cls):\n    example = 'Examples:\\n'\n    example += '>> run shares local\\n'\n    example += '>> run shares remote -u john -p password1 -d DOMAIN -t 192.168.0.1\\n'\n    example += \">> run shares remote -u john -H 'aad3b435b51404eeaad3b435b51404ee:da76f2c4c96028b7a6111aef4a50a94d' -t 192.168.0.1\\n\"\n    cls.arg_parser = PupyArgumentParser(prog='shares', description=cls.__doc__, epilog=example)\n    subparsers = cls.arg_parser.add_subparsers(title='Enumerate shared folders')\n    local = subparsers.add_parser('local', help='Retrieve local shared folders')\n    local.set_defaults(local='list_shared_folders')\n    remote = subparsers.add_parser('remote', help='Retrieve remote shared folders and permission')\n    remote.add_argument('-u', metavar='USERNAME', dest='user', default='', help='Username, if omitted null session assumed')\n    remote.add_argument('-p', metavar='PASSWORD', dest='passwd', default='', help='Password')\n    remote.add_argument('-H', metavar='HASH', dest='hash', default='', help='NTLM hash')\n    remote.add_argument('-d', metavar='DOMAIN', dest='domain', default='WORKGROUP', help='Domain name (default WORKGROUP)')\n    remote.add_argument('-P', dest='port', type=int, choices={139, 445}, default=445, help='SMB port (default 445)')\n    remote.add_argument('-t', dest='target', type=str, help='The target range or CIDR identifier')",
        "mutated": [
            "@classmethod\ndef init_argparse(cls):\n    if False:\n        i = 10\n    example = 'Examples:\\n'\n    example += '>> run shares local\\n'\n    example += '>> run shares remote -u john -p password1 -d DOMAIN -t 192.168.0.1\\n'\n    example += \">> run shares remote -u john -H 'aad3b435b51404eeaad3b435b51404ee:da76f2c4c96028b7a6111aef4a50a94d' -t 192.168.0.1\\n\"\n    cls.arg_parser = PupyArgumentParser(prog='shares', description=cls.__doc__, epilog=example)\n    subparsers = cls.arg_parser.add_subparsers(title='Enumerate shared folders')\n    local = subparsers.add_parser('local', help='Retrieve local shared folders')\n    local.set_defaults(local='list_shared_folders')\n    remote = subparsers.add_parser('remote', help='Retrieve remote shared folders and permission')\n    remote.add_argument('-u', metavar='USERNAME', dest='user', default='', help='Username, if omitted null session assumed')\n    remote.add_argument('-p', metavar='PASSWORD', dest='passwd', default='', help='Password')\n    remote.add_argument('-H', metavar='HASH', dest='hash', default='', help='NTLM hash')\n    remote.add_argument('-d', metavar='DOMAIN', dest='domain', default='WORKGROUP', help='Domain name (default WORKGROUP)')\n    remote.add_argument('-P', dest='port', type=int, choices={139, 445}, default=445, help='SMB port (default 445)')\n    remote.add_argument('-t', dest='target', type=str, help='The target range or CIDR identifier')",
            "@classmethod\ndef init_argparse(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    example = 'Examples:\\n'\n    example += '>> run shares local\\n'\n    example += '>> run shares remote -u john -p password1 -d DOMAIN -t 192.168.0.1\\n'\n    example += \">> run shares remote -u john -H 'aad3b435b51404eeaad3b435b51404ee:da76f2c4c96028b7a6111aef4a50a94d' -t 192.168.0.1\\n\"\n    cls.arg_parser = PupyArgumentParser(prog='shares', description=cls.__doc__, epilog=example)\n    subparsers = cls.arg_parser.add_subparsers(title='Enumerate shared folders')\n    local = subparsers.add_parser('local', help='Retrieve local shared folders')\n    local.set_defaults(local='list_shared_folders')\n    remote = subparsers.add_parser('remote', help='Retrieve remote shared folders and permission')\n    remote.add_argument('-u', metavar='USERNAME', dest='user', default='', help='Username, if omitted null session assumed')\n    remote.add_argument('-p', metavar='PASSWORD', dest='passwd', default='', help='Password')\n    remote.add_argument('-H', metavar='HASH', dest='hash', default='', help='NTLM hash')\n    remote.add_argument('-d', metavar='DOMAIN', dest='domain', default='WORKGROUP', help='Domain name (default WORKGROUP)')\n    remote.add_argument('-P', dest='port', type=int, choices={139, 445}, default=445, help='SMB port (default 445)')\n    remote.add_argument('-t', dest='target', type=str, help='The target range or CIDR identifier')",
            "@classmethod\ndef init_argparse(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    example = 'Examples:\\n'\n    example += '>> run shares local\\n'\n    example += '>> run shares remote -u john -p password1 -d DOMAIN -t 192.168.0.1\\n'\n    example += \">> run shares remote -u john -H 'aad3b435b51404eeaad3b435b51404ee:da76f2c4c96028b7a6111aef4a50a94d' -t 192.168.0.1\\n\"\n    cls.arg_parser = PupyArgumentParser(prog='shares', description=cls.__doc__, epilog=example)\n    subparsers = cls.arg_parser.add_subparsers(title='Enumerate shared folders')\n    local = subparsers.add_parser('local', help='Retrieve local shared folders')\n    local.set_defaults(local='list_shared_folders')\n    remote = subparsers.add_parser('remote', help='Retrieve remote shared folders and permission')\n    remote.add_argument('-u', metavar='USERNAME', dest='user', default='', help='Username, if omitted null session assumed')\n    remote.add_argument('-p', metavar='PASSWORD', dest='passwd', default='', help='Password')\n    remote.add_argument('-H', metavar='HASH', dest='hash', default='', help='NTLM hash')\n    remote.add_argument('-d', metavar='DOMAIN', dest='domain', default='WORKGROUP', help='Domain name (default WORKGROUP)')\n    remote.add_argument('-P', dest='port', type=int, choices={139, 445}, default=445, help='SMB port (default 445)')\n    remote.add_argument('-t', dest='target', type=str, help='The target range or CIDR identifier')",
            "@classmethod\ndef init_argparse(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    example = 'Examples:\\n'\n    example += '>> run shares local\\n'\n    example += '>> run shares remote -u john -p password1 -d DOMAIN -t 192.168.0.1\\n'\n    example += \">> run shares remote -u john -H 'aad3b435b51404eeaad3b435b51404ee:da76f2c4c96028b7a6111aef4a50a94d' -t 192.168.0.1\\n\"\n    cls.arg_parser = PupyArgumentParser(prog='shares', description=cls.__doc__, epilog=example)\n    subparsers = cls.arg_parser.add_subparsers(title='Enumerate shared folders')\n    local = subparsers.add_parser('local', help='Retrieve local shared folders')\n    local.set_defaults(local='list_shared_folders')\n    remote = subparsers.add_parser('remote', help='Retrieve remote shared folders and permission')\n    remote.add_argument('-u', metavar='USERNAME', dest='user', default='', help='Username, if omitted null session assumed')\n    remote.add_argument('-p', metavar='PASSWORD', dest='passwd', default='', help='Password')\n    remote.add_argument('-H', metavar='HASH', dest='hash', default='', help='NTLM hash')\n    remote.add_argument('-d', metavar='DOMAIN', dest='domain', default='WORKGROUP', help='Domain name (default WORKGROUP)')\n    remote.add_argument('-P', dest='port', type=int, choices={139, 445}, default=445, help='SMB port (default 445)')\n    remote.add_argument('-t', dest='target', type=str, help='The target range or CIDR identifier')",
            "@classmethod\ndef init_argparse(cls):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    example = 'Examples:\\n'\n    example += '>> run shares local\\n'\n    example += '>> run shares remote -u john -p password1 -d DOMAIN -t 192.168.0.1\\n'\n    example += \">> run shares remote -u john -H 'aad3b435b51404eeaad3b435b51404ee:da76f2c4c96028b7a6111aef4a50a94d' -t 192.168.0.1\\n\"\n    cls.arg_parser = PupyArgumentParser(prog='shares', description=cls.__doc__, epilog=example)\n    subparsers = cls.arg_parser.add_subparsers(title='Enumerate shared folders')\n    local = subparsers.add_parser('local', help='Retrieve local shared folders')\n    local.set_defaults(local='list_shared_folders')\n    remote = subparsers.add_parser('remote', help='Retrieve remote shared folders and permission')\n    remote.add_argument('-u', metavar='USERNAME', dest='user', default='', help='Username, if omitted null session assumed')\n    remote.add_argument('-p', metavar='PASSWORD', dest='passwd', default='', help='Password')\n    remote.add_argument('-H', metavar='HASH', dest='hash', default='', help='NTLM hash')\n    remote.add_argument('-d', metavar='DOMAIN', dest='domain', default='WORKGROUP', help='Domain name (default WORKGROUP)')\n    remote.add_argument('-P', dest='port', type=int, choices={139, 445}, default=445, help='SMB port (default 445)')\n    remote.add_argument('-t', dest='target', type=str, help='The target range or CIDR identifier')"
        ]
    },
    {
        "func_name": "run",
        "original": "def run(self, args):\n    try:\n        if args.local:\n            if self.client.is_windows():\n                shared_folders = self.client.remote('pupwinutils.drives', 'shared_folders')\n                folders = shared_folders()\n                if not folders:\n                    return\n                self.log(Table([{'Name': share_name, 'Path': share_path} for (share_name, share_path) in folders], ['Name', 'Path']))\n            else:\n                self.warning('this module works only for windows. Try using: run shares remote -t 127.0.0.1')\n            return\n    except:\n        pass\n    if not args.target:\n        self.error('target (-t) parameter must be specify')\n        return\n    if '/' in args.target:\n        hosts = IPNetwork(args.target)\n    else:\n        hosts = list()\n        hosts.append(args.target)\n    connect = self.client.remote('pupyutils.share_enum', 'connect')\n    for host in hosts:\n        result = connect(str(host), args.port, args.user, args.passwd, args.hash, args.domain)\n        if 'error' in result:\n            if 'os' in result:\n                self.error('{}:{} OS={} NAME={}: {}'.format(host, args.port, result['os'], result['name'], result['error']))\n            else:\n                self.error('{}:{}: {}'.format(host, args.port, result['error']))\n        else:\n            self.success('{}:{} OS=[{}] NAME=[{}] AUTH={}'.format(host, args.port, result['os'], result['name'], result['auth']))\n            shares = [{'SHARE': x[0], 'ACCESS': x[1]} for x in result['shares']]\n            self.table(shares, ['SHARE', 'ACCESS'])",
        "mutated": [
            "def run(self, args):\n    if False:\n        i = 10\n    try:\n        if args.local:\n            if self.client.is_windows():\n                shared_folders = self.client.remote('pupwinutils.drives', 'shared_folders')\n                folders = shared_folders()\n                if not folders:\n                    return\n                self.log(Table([{'Name': share_name, 'Path': share_path} for (share_name, share_path) in folders], ['Name', 'Path']))\n            else:\n                self.warning('this module works only for windows. Try using: run shares remote -t 127.0.0.1')\n            return\n    except:\n        pass\n    if not args.target:\n        self.error('target (-t) parameter must be specify')\n        return\n    if '/' in args.target:\n        hosts = IPNetwork(args.target)\n    else:\n        hosts = list()\n        hosts.append(args.target)\n    connect = self.client.remote('pupyutils.share_enum', 'connect')\n    for host in hosts:\n        result = connect(str(host), args.port, args.user, args.passwd, args.hash, args.domain)\n        if 'error' in result:\n            if 'os' in result:\n                self.error('{}:{} OS={} NAME={}: {}'.format(host, args.port, result['os'], result['name'], result['error']))\n            else:\n                self.error('{}:{}: {}'.format(host, args.port, result['error']))\n        else:\n            self.success('{}:{} OS=[{}] NAME=[{}] AUTH={}'.format(host, args.port, result['os'], result['name'], result['auth']))\n            shares = [{'SHARE': x[0], 'ACCESS': x[1]} for x in result['shares']]\n            self.table(shares, ['SHARE', 'ACCESS'])",
            "def run(self, args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    try:\n        if args.local:\n            if self.client.is_windows():\n                shared_folders = self.client.remote('pupwinutils.drives', 'shared_folders')\n                folders = shared_folders()\n                if not folders:\n                    return\n                self.log(Table([{'Name': share_name, 'Path': share_path} for (share_name, share_path) in folders], ['Name', 'Path']))\n            else:\n                self.warning('this module works only for windows. Try using: run shares remote -t 127.0.0.1')\n            return\n    except:\n        pass\n    if not args.target:\n        self.error('target (-t) parameter must be specify')\n        return\n    if '/' in args.target:\n        hosts = IPNetwork(args.target)\n    else:\n        hosts = list()\n        hosts.append(args.target)\n    connect = self.client.remote('pupyutils.share_enum', 'connect')\n    for host in hosts:\n        result = connect(str(host), args.port, args.user, args.passwd, args.hash, args.domain)\n        if 'error' in result:\n            if 'os' in result:\n                self.error('{}:{} OS={} NAME={}: {}'.format(host, args.port, result['os'], result['name'], result['error']))\n            else:\n                self.error('{}:{}: {}'.format(host, args.port, result['error']))\n        else:\n            self.success('{}:{} OS=[{}] NAME=[{}] AUTH={}'.format(host, args.port, result['os'], result['name'], result['auth']))\n            shares = [{'SHARE': x[0], 'ACCESS': x[1]} for x in result['shares']]\n            self.table(shares, ['SHARE', 'ACCESS'])",
            "def run(self, args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    try:\n        if args.local:\n            if self.client.is_windows():\n                shared_folders = self.client.remote('pupwinutils.drives', 'shared_folders')\n                folders = shared_folders()\n                if not folders:\n                    return\n                self.log(Table([{'Name': share_name, 'Path': share_path} for (share_name, share_path) in folders], ['Name', 'Path']))\n            else:\n                self.warning('this module works only for windows. Try using: run shares remote -t 127.0.0.1')\n            return\n    except:\n        pass\n    if not args.target:\n        self.error('target (-t) parameter must be specify')\n        return\n    if '/' in args.target:\n        hosts = IPNetwork(args.target)\n    else:\n        hosts = list()\n        hosts.append(args.target)\n    connect = self.client.remote('pupyutils.share_enum', 'connect')\n    for host in hosts:\n        result = connect(str(host), args.port, args.user, args.passwd, args.hash, args.domain)\n        if 'error' in result:\n            if 'os' in result:\n                self.error('{}:{} OS={} NAME={}: {}'.format(host, args.port, result['os'], result['name'], result['error']))\n            else:\n                self.error('{}:{}: {}'.format(host, args.port, result['error']))\n        else:\n            self.success('{}:{} OS=[{}] NAME=[{}] AUTH={}'.format(host, args.port, result['os'], result['name'], result['auth']))\n            shares = [{'SHARE': x[0], 'ACCESS': x[1]} for x in result['shares']]\n            self.table(shares, ['SHARE', 'ACCESS'])",
            "def run(self, args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    try:\n        if args.local:\n            if self.client.is_windows():\n                shared_folders = self.client.remote('pupwinutils.drives', 'shared_folders')\n                folders = shared_folders()\n                if not folders:\n                    return\n                self.log(Table([{'Name': share_name, 'Path': share_path} for (share_name, share_path) in folders], ['Name', 'Path']))\n            else:\n                self.warning('this module works only for windows. Try using: run shares remote -t 127.0.0.1')\n            return\n    except:\n        pass\n    if not args.target:\n        self.error('target (-t) parameter must be specify')\n        return\n    if '/' in args.target:\n        hosts = IPNetwork(args.target)\n    else:\n        hosts = list()\n        hosts.append(args.target)\n    connect = self.client.remote('pupyutils.share_enum', 'connect')\n    for host in hosts:\n        result = connect(str(host), args.port, args.user, args.passwd, args.hash, args.domain)\n        if 'error' in result:\n            if 'os' in result:\n                self.error('{}:{} OS={} NAME={}: {}'.format(host, args.port, result['os'], result['name'], result['error']))\n            else:\n                self.error('{}:{}: {}'.format(host, args.port, result['error']))\n        else:\n            self.success('{}:{} OS=[{}] NAME=[{}] AUTH={}'.format(host, args.port, result['os'], result['name'], result['auth']))\n            shares = [{'SHARE': x[0], 'ACCESS': x[1]} for x in result['shares']]\n            self.table(shares, ['SHARE', 'ACCESS'])",
            "def run(self, args):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    try:\n        if args.local:\n            if self.client.is_windows():\n                shared_folders = self.client.remote('pupwinutils.drives', 'shared_folders')\n                folders = shared_folders()\n                if not folders:\n                    return\n                self.log(Table([{'Name': share_name, 'Path': share_path} for (share_name, share_path) in folders], ['Name', 'Path']))\n            else:\n                self.warning('this module works only for windows. Try using: run shares remote -t 127.0.0.1')\n            return\n    except:\n        pass\n    if not args.target:\n        self.error('target (-t) parameter must be specify')\n        return\n    if '/' in args.target:\n        hosts = IPNetwork(args.target)\n    else:\n        hosts = list()\n        hosts.append(args.target)\n    connect = self.client.remote('pupyutils.share_enum', 'connect')\n    for host in hosts:\n        result = connect(str(host), args.port, args.user, args.passwd, args.hash, args.domain)\n        if 'error' in result:\n            if 'os' in result:\n                self.error('{}:{} OS={} NAME={}: {}'.format(host, args.port, result['os'], result['name'], result['error']))\n            else:\n                self.error('{}:{}: {}'.format(host, args.port, result['error']))\n        else:\n            self.success('{}:{} OS=[{}] NAME=[{}] AUTH={}'.format(host, args.port, result['os'], result['name'], result['auth']))\n            shares = [{'SHARE': x[0], 'ACCESS': x[1]} for x in result['shares']]\n            self.table(shares, ['SHARE', 'ACCESS'])"
        ]
    }
]
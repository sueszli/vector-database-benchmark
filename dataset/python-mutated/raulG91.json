[
    {
        "func_name": "find_triples",
        "original": "def find_triples(max_number):\n    triples = []\n    for value in range(1, max_number + 1):\n        for value2 in range(value + 1, max_number + 1):\n            sum = value ** 2 + value2 ** 2\n            square_root = sum ** 0.5\n            if square_root.is_integer() and square_root <= max_number:\n                tuple = (value, value2, int(square_root))\n                triples.append(tuple)\n    return triples",
        "mutated": [
            "def find_triples(max_number):\n    if False:\n        i = 10\n    triples = []\n    for value in range(1, max_number + 1):\n        for value2 in range(value + 1, max_number + 1):\n            sum = value ** 2 + value2 ** 2\n            square_root = sum ** 0.5\n            if square_root.is_integer() and square_root <= max_number:\n                tuple = (value, value2, int(square_root))\n                triples.append(tuple)\n    return triples",
            "def find_triples(max_number):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    triples = []\n    for value in range(1, max_number + 1):\n        for value2 in range(value + 1, max_number + 1):\n            sum = value ** 2 + value2 ** 2\n            square_root = sum ** 0.5\n            if square_root.is_integer() and square_root <= max_number:\n                tuple = (value, value2, int(square_root))\n                triples.append(tuple)\n    return triples",
            "def find_triples(max_number):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    triples = []\n    for value in range(1, max_number + 1):\n        for value2 in range(value + 1, max_number + 1):\n            sum = value ** 2 + value2 ** 2\n            square_root = sum ** 0.5\n            if square_root.is_integer() and square_root <= max_number:\n                tuple = (value, value2, int(square_root))\n                triples.append(tuple)\n    return triples",
            "def find_triples(max_number):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    triples = []\n    for value in range(1, max_number + 1):\n        for value2 in range(value + 1, max_number + 1):\n            sum = value ** 2 + value2 ** 2\n            square_root = sum ** 0.5\n            if square_root.is_integer() and square_root <= max_number:\n                tuple = (value, value2, int(square_root))\n                triples.append(tuple)\n    return triples",
            "def find_triples(max_number):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    triples = []\n    for value in range(1, max_number + 1):\n        for value2 in range(value + 1, max_number + 1):\n            sum = value ** 2 + value2 ** 2\n            square_root = sum ** 0.5\n            if square_root.is_integer() and square_root <= max_number:\n                tuple = (value, value2, int(square_root))\n                triples.append(tuple)\n    return triples"
        ]
    }
]
[
    {
        "func_name": "setup",
        "original": "def setup(self, sfc, userOpts=dict()):\n    self.sf = sfc\n    self.results = self.tempStorage()\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
        "mutated": [
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n    self.sf = sfc\n    self.results = self.tempStorage()\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.sf = sfc\n    self.results = self.tempStorage()\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.sf = sfc\n    self.results = self.tempStorage()\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.sf = sfc\n    self.results = self.tempStorage()\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]",
            "def setup(self, sfc, userOpts=dict()):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.sf = sfc\n    self.results = self.tempStorage()\n    for opt in list(userOpts.keys()):\n        self.opts[opt] = userOpts[opt]"
        ]
    },
    {
        "func_name": "watchedEvents",
        "original": "def watchedEvents(self):\n    return ['DOMAIN_NAME', 'USERNAME', 'SOCIAL_MEDIA']",
        "mutated": [
            "def watchedEvents(self):\n    if False:\n        i = 10\n    return ['DOMAIN_NAME', 'USERNAME', 'SOCIAL_MEDIA']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return ['DOMAIN_NAME', 'USERNAME', 'SOCIAL_MEDIA']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return ['DOMAIN_NAME', 'USERNAME', 'SOCIAL_MEDIA']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return ['DOMAIN_NAME', 'USERNAME', 'SOCIAL_MEDIA']",
            "def watchedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return ['DOMAIN_NAME', 'USERNAME', 'SOCIAL_MEDIA']"
        ]
    },
    {
        "func_name": "producedEvents",
        "original": "def producedEvents(self):\n    return ['RAW_RIR_DATA', 'GEOINFO', 'PUBLIC_CODE_REPO']",
        "mutated": [
            "def producedEvents(self):\n    if False:\n        i = 10\n    return ['RAW_RIR_DATA', 'GEOINFO', 'PUBLIC_CODE_REPO']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return ['RAW_RIR_DATA', 'GEOINFO', 'PUBLIC_CODE_REPO']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return ['RAW_RIR_DATA', 'GEOINFO', 'PUBLIC_CODE_REPO']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return ['RAW_RIR_DATA', 'GEOINFO', 'PUBLIC_CODE_REPO']",
            "def producedEvents(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return ['RAW_RIR_DATA', 'GEOINFO', 'PUBLIC_CODE_REPO']"
        ]
    },
    {
        "func_name": "buildRepoInfo",
        "original": "def buildRepoInfo(self, item):\n    name = item.get('name')\n    if name is None:\n        self.debug('Incomplete Github information found (name).')\n        return None\n    html_url = item.get('html_url')\n    if html_url is None:\n        self.debug('Incomplete Github information found (url).')\n        return None\n    description = item.get('description')\n    if description is None:\n        self.debug('Incomplete Github information found (description).')\n        return None\n    return '\\n'.join([f'Name: {name}', f'URL: {html_url}', f'Description: {description}'])",
        "mutated": [
            "def buildRepoInfo(self, item):\n    if False:\n        i = 10\n    name = item.get('name')\n    if name is None:\n        self.debug('Incomplete Github information found (name).')\n        return None\n    html_url = item.get('html_url')\n    if html_url is None:\n        self.debug('Incomplete Github information found (url).')\n        return None\n    description = item.get('description')\n    if description is None:\n        self.debug('Incomplete Github information found (description).')\n        return None\n    return '\\n'.join([f'Name: {name}', f'URL: {html_url}', f'Description: {description}'])",
            "def buildRepoInfo(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    name = item.get('name')\n    if name is None:\n        self.debug('Incomplete Github information found (name).')\n        return None\n    html_url = item.get('html_url')\n    if html_url is None:\n        self.debug('Incomplete Github information found (url).')\n        return None\n    description = item.get('description')\n    if description is None:\n        self.debug('Incomplete Github information found (description).')\n        return None\n    return '\\n'.join([f'Name: {name}', f'URL: {html_url}', f'Description: {description}'])",
            "def buildRepoInfo(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    name = item.get('name')\n    if name is None:\n        self.debug('Incomplete Github information found (name).')\n        return None\n    html_url = item.get('html_url')\n    if html_url is None:\n        self.debug('Incomplete Github information found (url).')\n        return None\n    description = item.get('description')\n    if description is None:\n        self.debug('Incomplete Github information found (description).')\n        return None\n    return '\\n'.join([f'Name: {name}', f'URL: {html_url}', f'Description: {description}'])",
            "def buildRepoInfo(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    name = item.get('name')\n    if name is None:\n        self.debug('Incomplete Github information found (name).')\n        return None\n    html_url = item.get('html_url')\n    if html_url is None:\n        self.debug('Incomplete Github information found (url).')\n        return None\n    description = item.get('description')\n    if description is None:\n        self.debug('Incomplete Github information found (description).')\n        return None\n    return '\\n'.join([f'Name: {name}', f'URL: {html_url}', f'Description: {description}'])",
            "def buildRepoInfo(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    name = item.get('name')\n    if name is None:\n        self.debug('Incomplete Github information found (name).')\n        return None\n    html_url = item.get('html_url')\n    if html_url is None:\n        self.debug('Incomplete Github information found (url).')\n        return None\n    description = item.get('description')\n    if description is None:\n        self.debug('Incomplete Github information found (description).')\n        return None\n    return '\\n'.join([f'Name: {name}', f'URL: {html_url}', f'Description: {description}'])"
        ]
    },
    {
        "func_name": "handleEvent",
        "original": "def handleEvent(self, event):\n    eventName = event.eventType\n    eventData = event.data\n    srcModuleName = event.module\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if eventData in self.results:\n        self.debug(f'Already did a search for {eventData}, skipping.')\n        return\n    self.results[eventData] = True\n    if eventName == 'SOCIAL_MEDIA':\n        try:\n            network = eventData.split(': ')[0]\n            url = eventData.split(': ')[1].replace('<SFURL>', '').replace('</SFURL>', '')\n        except Exception as e:\n            self.debug(f'Unable to parse SOCIAL_MEDIA: {eventData} ({e})')\n            return\n        if network != 'Github':\n            self.debug(f'Skipping social network profile, {url}, as not a GitHub profile')\n            return\n        try:\n            urlParts = url.split('/')\n            username = urlParts[len(urlParts) - 1]\n        except Exception:\n            self.debug(f\"Couldn't get a username out of {url}\")\n            return\n        res = self.sf.fetchUrl(f'https://api.github.com/users/{username}', timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'])\n        if res['content'] is None:\n            return\n        try:\n            json_data = json.loads(res['content'])\n        except Exception as e:\n            self.debug(f'Error processing JSON response: {e}')\n            return\n        if not json_data.get('login'):\n            self.debug(f'{username} is not a valid GitHub profile')\n            return\n        full_name = json_data.get('name')\n        if not full_name:\n            self.debug(f'{username} is not a valid GitHub profile')\n            return\n        e = SpiderFootEvent('RAW_RIR_DATA', f'Possible full name: {full_name}', self.__name__, event)\n        self.notifyListeners(e)\n        location = json_data.get('location')\n        if location is None:\n            return\n        if len(location) < 3 or len(location) > 100:\n            self.debug(f'Skipping likely invalid location: {location}')\n            return\n        e = SpiderFootEvent('GEOINFO', location, self.__name__, event)\n        self.notifyListeners(e)\n        return\n    if eventName == 'DOMAIN_NAME':\n        username = self.sf.domainKeyword(eventData, self.opts['_internettlds'])\n        if not username:\n            return\n    if eventName == 'USERNAME':\n        username = eventData\n    self.debug(f'Looking at {username}')\n    failed = False\n    url = f'https://api.github.com/search/repositories?q={username}'\n    res = self.sf.fetchUrl(url, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'])\n    if res['content'] is None:\n        self.error(f'Unable to fetch {url}')\n        failed = True\n    if not failed:\n        try:\n            ret = json.loads(res['content'])\n        except Exception as e:\n            self.debug(f'Error processing JSON response from GitHub: {e}')\n            ret = None\n        if ret is None:\n            self.error(f'Unable to process empty response from Github for: {username}')\n            failed = True\n    if not failed:\n        if ret.get('total_count', '0') == '0' or len(ret['items']) == 0:\n            self.debug(f'No Github information for {username}')\n            failed = True\n    if not failed:\n        for item in ret['items']:\n            repo_info = self.buildRepoInfo(item)\n            if repo_info is not None:\n                if self.opts['namesonly'] and username != item['name']:\n                    continue\n                evt = SpiderFootEvent('PUBLIC_CODE_REPO', repo_info, self.__name__, event)\n                self.notifyListeners(evt)\n    failed = False\n    url = f'https://api.github.com/search/users?q={username}'\n    res = self.sf.fetchUrl(url, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'])\n    if res['content'] is None:\n        self.error(f'Unable to fetch {url}')\n        failed = True\n    if not failed:\n        try:\n            ret = json.loads(res['content'])\n            if ret is None:\n                self.error(f'Unable to process empty response from Github for: {username}')\n                failed = True\n        except Exception:\n            self.error(f'Unable to process invalid response from Github for: {username}')\n            failed = True\n    if not failed:\n        if ret.get('total_count', '0') == '0' or len(ret['items']) == 0:\n            self.debug('No Github information for ' + username)\n            failed = True\n    if not failed:\n        for item in ret['items']:\n            if item.get('repos_url') is None:\n                self.debug('Incomplete Github information found (repos_url).')\n                continue\n            url = item['repos_url']\n            res = self.sf.fetchUrl(url, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'])\n            if res['content'] is None:\n                self.error(f'Unable to fetch {url}')\n                continue\n            try:\n                repret = json.loads(res['content'])\n            except Exception as e:\n                self.error(f'Invalid JSON returned from Github: {e}')\n                continue\n            if repret is None:\n                self.error(f'Unable to process empty response from Github for: {username}')\n                continue\n            for item in repret:\n                if type(item) != dict:\n                    self.debug('Encountered an unexpected or empty response from Github.')\n                    continue\n                repo_info = self.buildRepoInfo(item)\n                if repo_info is not None:\n                    if self.opts['namesonly'] and item['name'] != username:\n                        continue\n                    if eventName == 'USERNAME' and '/' + username + '/' not in item.get('html_url', ''):\n                        continue\n                    evt = SpiderFootEvent('PUBLIC_CODE_REPO', repo_info, self.__name__, event)\n                    self.notifyListeners(evt)",
        "mutated": [
            "def handleEvent(self, event):\n    if False:\n        i = 10\n    eventName = event.eventType\n    eventData = event.data\n    srcModuleName = event.module\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if eventData in self.results:\n        self.debug(f'Already did a search for {eventData}, skipping.')\n        return\n    self.results[eventData] = True\n    if eventName == 'SOCIAL_MEDIA':\n        try:\n            network = eventData.split(': ')[0]\n            url = eventData.split(': ')[1].replace('<SFURL>', '').replace('</SFURL>', '')\n        except Exception as e:\n            self.debug(f'Unable to parse SOCIAL_MEDIA: {eventData} ({e})')\n            return\n        if network != 'Github':\n            self.debug(f'Skipping social network profile, {url}, as not a GitHub profile')\n            return\n        try:\n            urlParts = url.split('/')\n            username = urlParts[len(urlParts) - 1]\n        except Exception:\n            self.debug(f\"Couldn't get a username out of {url}\")\n            return\n        res = self.sf.fetchUrl(f'https://api.github.com/users/{username}', timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'])\n        if res['content'] is None:\n            return\n        try:\n            json_data = json.loads(res['content'])\n        except Exception as e:\n            self.debug(f'Error processing JSON response: {e}')\n            return\n        if not json_data.get('login'):\n            self.debug(f'{username} is not a valid GitHub profile')\n            return\n        full_name = json_data.get('name')\n        if not full_name:\n            self.debug(f'{username} is not a valid GitHub profile')\n            return\n        e = SpiderFootEvent('RAW_RIR_DATA', f'Possible full name: {full_name}', self.__name__, event)\n        self.notifyListeners(e)\n        location = json_data.get('location')\n        if location is None:\n            return\n        if len(location) < 3 or len(location) > 100:\n            self.debug(f'Skipping likely invalid location: {location}')\n            return\n        e = SpiderFootEvent('GEOINFO', location, self.__name__, event)\n        self.notifyListeners(e)\n        return\n    if eventName == 'DOMAIN_NAME':\n        username = self.sf.domainKeyword(eventData, self.opts['_internettlds'])\n        if not username:\n            return\n    if eventName == 'USERNAME':\n        username = eventData\n    self.debug(f'Looking at {username}')\n    failed = False\n    url = f'https://api.github.com/search/repositories?q={username}'\n    res = self.sf.fetchUrl(url, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'])\n    if res['content'] is None:\n        self.error(f'Unable to fetch {url}')\n        failed = True\n    if not failed:\n        try:\n            ret = json.loads(res['content'])\n        except Exception as e:\n            self.debug(f'Error processing JSON response from GitHub: {e}')\n            ret = None\n        if ret is None:\n            self.error(f'Unable to process empty response from Github for: {username}')\n            failed = True\n    if not failed:\n        if ret.get('total_count', '0') == '0' or len(ret['items']) == 0:\n            self.debug(f'No Github information for {username}')\n            failed = True\n    if not failed:\n        for item in ret['items']:\n            repo_info = self.buildRepoInfo(item)\n            if repo_info is not None:\n                if self.opts['namesonly'] and username != item['name']:\n                    continue\n                evt = SpiderFootEvent('PUBLIC_CODE_REPO', repo_info, self.__name__, event)\n                self.notifyListeners(evt)\n    failed = False\n    url = f'https://api.github.com/search/users?q={username}'\n    res = self.sf.fetchUrl(url, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'])\n    if res['content'] is None:\n        self.error(f'Unable to fetch {url}')\n        failed = True\n    if not failed:\n        try:\n            ret = json.loads(res['content'])\n            if ret is None:\n                self.error(f'Unable to process empty response from Github for: {username}')\n                failed = True\n        except Exception:\n            self.error(f'Unable to process invalid response from Github for: {username}')\n            failed = True\n    if not failed:\n        if ret.get('total_count', '0') == '0' or len(ret['items']) == 0:\n            self.debug('No Github information for ' + username)\n            failed = True\n    if not failed:\n        for item in ret['items']:\n            if item.get('repos_url') is None:\n                self.debug('Incomplete Github information found (repos_url).')\n                continue\n            url = item['repos_url']\n            res = self.sf.fetchUrl(url, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'])\n            if res['content'] is None:\n                self.error(f'Unable to fetch {url}')\n                continue\n            try:\n                repret = json.loads(res['content'])\n            except Exception as e:\n                self.error(f'Invalid JSON returned from Github: {e}')\n                continue\n            if repret is None:\n                self.error(f'Unable to process empty response from Github for: {username}')\n                continue\n            for item in repret:\n                if type(item) != dict:\n                    self.debug('Encountered an unexpected or empty response from Github.')\n                    continue\n                repo_info = self.buildRepoInfo(item)\n                if repo_info is not None:\n                    if self.opts['namesonly'] and item['name'] != username:\n                        continue\n                    if eventName == 'USERNAME' and '/' + username + '/' not in item.get('html_url', ''):\n                        continue\n                    evt = SpiderFootEvent('PUBLIC_CODE_REPO', repo_info, self.__name__, event)\n                    self.notifyListeners(evt)",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    eventName = event.eventType\n    eventData = event.data\n    srcModuleName = event.module\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if eventData in self.results:\n        self.debug(f'Already did a search for {eventData}, skipping.')\n        return\n    self.results[eventData] = True\n    if eventName == 'SOCIAL_MEDIA':\n        try:\n            network = eventData.split(': ')[0]\n            url = eventData.split(': ')[1].replace('<SFURL>', '').replace('</SFURL>', '')\n        except Exception as e:\n            self.debug(f'Unable to parse SOCIAL_MEDIA: {eventData} ({e})')\n            return\n        if network != 'Github':\n            self.debug(f'Skipping social network profile, {url}, as not a GitHub profile')\n            return\n        try:\n            urlParts = url.split('/')\n            username = urlParts[len(urlParts) - 1]\n        except Exception:\n            self.debug(f\"Couldn't get a username out of {url}\")\n            return\n        res = self.sf.fetchUrl(f'https://api.github.com/users/{username}', timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'])\n        if res['content'] is None:\n            return\n        try:\n            json_data = json.loads(res['content'])\n        except Exception as e:\n            self.debug(f'Error processing JSON response: {e}')\n            return\n        if not json_data.get('login'):\n            self.debug(f'{username} is not a valid GitHub profile')\n            return\n        full_name = json_data.get('name')\n        if not full_name:\n            self.debug(f'{username} is not a valid GitHub profile')\n            return\n        e = SpiderFootEvent('RAW_RIR_DATA', f'Possible full name: {full_name}', self.__name__, event)\n        self.notifyListeners(e)\n        location = json_data.get('location')\n        if location is None:\n            return\n        if len(location) < 3 or len(location) > 100:\n            self.debug(f'Skipping likely invalid location: {location}')\n            return\n        e = SpiderFootEvent('GEOINFO', location, self.__name__, event)\n        self.notifyListeners(e)\n        return\n    if eventName == 'DOMAIN_NAME':\n        username = self.sf.domainKeyword(eventData, self.opts['_internettlds'])\n        if not username:\n            return\n    if eventName == 'USERNAME':\n        username = eventData\n    self.debug(f'Looking at {username}')\n    failed = False\n    url = f'https://api.github.com/search/repositories?q={username}'\n    res = self.sf.fetchUrl(url, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'])\n    if res['content'] is None:\n        self.error(f'Unable to fetch {url}')\n        failed = True\n    if not failed:\n        try:\n            ret = json.loads(res['content'])\n        except Exception as e:\n            self.debug(f'Error processing JSON response from GitHub: {e}')\n            ret = None\n        if ret is None:\n            self.error(f'Unable to process empty response from Github for: {username}')\n            failed = True\n    if not failed:\n        if ret.get('total_count', '0') == '0' or len(ret['items']) == 0:\n            self.debug(f'No Github information for {username}')\n            failed = True\n    if not failed:\n        for item in ret['items']:\n            repo_info = self.buildRepoInfo(item)\n            if repo_info is not None:\n                if self.opts['namesonly'] and username != item['name']:\n                    continue\n                evt = SpiderFootEvent('PUBLIC_CODE_REPO', repo_info, self.__name__, event)\n                self.notifyListeners(evt)\n    failed = False\n    url = f'https://api.github.com/search/users?q={username}'\n    res = self.sf.fetchUrl(url, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'])\n    if res['content'] is None:\n        self.error(f'Unable to fetch {url}')\n        failed = True\n    if not failed:\n        try:\n            ret = json.loads(res['content'])\n            if ret is None:\n                self.error(f'Unable to process empty response from Github for: {username}')\n                failed = True\n        except Exception:\n            self.error(f'Unable to process invalid response from Github for: {username}')\n            failed = True\n    if not failed:\n        if ret.get('total_count', '0') == '0' or len(ret['items']) == 0:\n            self.debug('No Github information for ' + username)\n            failed = True\n    if not failed:\n        for item in ret['items']:\n            if item.get('repos_url') is None:\n                self.debug('Incomplete Github information found (repos_url).')\n                continue\n            url = item['repos_url']\n            res = self.sf.fetchUrl(url, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'])\n            if res['content'] is None:\n                self.error(f'Unable to fetch {url}')\n                continue\n            try:\n                repret = json.loads(res['content'])\n            except Exception as e:\n                self.error(f'Invalid JSON returned from Github: {e}')\n                continue\n            if repret is None:\n                self.error(f'Unable to process empty response from Github for: {username}')\n                continue\n            for item in repret:\n                if type(item) != dict:\n                    self.debug('Encountered an unexpected or empty response from Github.')\n                    continue\n                repo_info = self.buildRepoInfo(item)\n                if repo_info is not None:\n                    if self.opts['namesonly'] and item['name'] != username:\n                        continue\n                    if eventName == 'USERNAME' and '/' + username + '/' not in item.get('html_url', ''):\n                        continue\n                    evt = SpiderFootEvent('PUBLIC_CODE_REPO', repo_info, self.__name__, event)\n                    self.notifyListeners(evt)",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    eventName = event.eventType\n    eventData = event.data\n    srcModuleName = event.module\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if eventData in self.results:\n        self.debug(f'Already did a search for {eventData}, skipping.')\n        return\n    self.results[eventData] = True\n    if eventName == 'SOCIAL_MEDIA':\n        try:\n            network = eventData.split(': ')[0]\n            url = eventData.split(': ')[1].replace('<SFURL>', '').replace('</SFURL>', '')\n        except Exception as e:\n            self.debug(f'Unable to parse SOCIAL_MEDIA: {eventData} ({e})')\n            return\n        if network != 'Github':\n            self.debug(f'Skipping social network profile, {url}, as not a GitHub profile')\n            return\n        try:\n            urlParts = url.split('/')\n            username = urlParts[len(urlParts) - 1]\n        except Exception:\n            self.debug(f\"Couldn't get a username out of {url}\")\n            return\n        res = self.sf.fetchUrl(f'https://api.github.com/users/{username}', timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'])\n        if res['content'] is None:\n            return\n        try:\n            json_data = json.loads(res['content'])\n        except Exception as e:\n            self.debug(f'Error processing JSON response: {e}')\n            return\n        if not json_data.get('login'):\n            self.debug(f'{username} is not a valid GitHub profile')\n            return\n        full_name = json_data.get('name')\n        if not full_name:\n            self.debug(f'{username} is not a valid GitHub profile')\n            return\n        e = SpiderFootEvent('RAW_RIR_DATA', f'Possible full name: {full_name}', self.__name__, event)\n        self.notifyListeners(e)\n        location = json_data.get('location')\n        if location is None:\n            return\n        if len(location) < 3 or len(location) > 100:\n            self.debug(f'Skipping likely invalid location: {location}')\n            return\n        e = SpiderFootEvent('GEOINFO', location, self.__name__, event)\n        self.notifyListeners(e)\n        return\n    if eventName == 'DOMAIN_NAME':\n        username = self.sf.domainKeyword(eventData, self.opts['_internettlds'])\n        if not username:\n            return\n    if eventName == 'USERNAME':\n        username = eventData\n    self.debug(f'Looking at {username}')\n    failed = False\n    url = f'https://api.github.com/search/repositories?q={username}'\n    res = self.sf.fetchUrl(url, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'])\n    if res['content'] is None:\n        self.error(f'Unable to fetch {url}')\n        failed = True\n    if not failed:\n        try:\n            ret = json.loads(res['content'])\n        except Exception as e:\n            self.debug(f'Error processing JSON response from GitHub: {e}')\n            ret = None\n        if ret is None:\n            self.error(f'Unable to process empty response from Github for: {username}')\n            failed = True\n    if not failed:\n        if ret.get('total_count', '0') == '0' or len(ret['items']) == 0:\n            self.debug(f'No Github information for {username}')\n            failed = True\n    if not failed:\n        for item in ret['items']:\n            repo_info = self.buildRepoInfo(item)\n            if repo_info is not None:\n                if self.opts['namesonly'] and username != item['name']:\n                    continue\n                evt = SpiderFootEvent('PUBLIC_CODE_REPO', repo_info, self.__name__, event)\n                self.notifyListeners(evt)\n    failed = False\n    url = f'https://api.github.com/search/users?q={username}'\n    res = self.sf.fetchUrl(url, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'])\n    if res['content'] is None:\n        self.error(f'Unable to fetch {url}')\n        failed = True\n    if not failed:\n        try:\n            ret = json.loads(res['content'])\n            if ret is None:\n                self.error(f'Unable to process empty response from Github for: {username}')\n                failed = True\n        except Exception:\n            self.error(f'Unable to process invalid response from Github for: {username}')\n            failed = True\n    if not failed:\n        if ret.get('total_count', '0') == '0' or len(ret['items']) == 0:\n            self.debug('No Github information for ' + username)\n            failed = True\n    if not failed:\n        for item in ret['items']:\n            if item.get('repos_url') is None:\n                self.debug('Incomplete Github information found (repos_url).')\n                continue\n            url = item['repos_url']\n            res = self.sf.fetchUrl(url, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'])\n            if res['content'] is None:\n                self.error(f'Unable to fetch {url}')\n                continue\n            try:\n                repret = json.loads(res['content'])\n            except Exception as e:\n                self.error(f'Invalid JSON returned from Github: {e}')\n                continue\n            if repret is None:\n                self.error(f'Unable to process empty response from Github for: {username}')\n                continue\n            for item in repret:\n                if type(item) != dict:\n                    self.debug('Encountered an unexpected or empty response from Github.')\n                    continue\n                repo_info = self.buildRepoInfo(item)\n                if repo_info is not None:\n                    if self.opts['namesonly'] and item['name'] != username:\n                        continue\n                    if eventName == 'USERNAME' and '/' + username + '/' not in item.get('html_url', ''):\n                        continue\n                    evt = SpiderFootEvent('PUBLIC_CODE_REPO', repo_info, self.__name__, event)\n                    self.notifyListeners(evt)",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    eventName = event.eventType\n    eventData = event.data\n    srcModuleName = event.module\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if eventData in self.results:\n        self.debug(f'Already did a search for {eventData}, skipping.')\n        return\n    self.results[eventData] = True\n    if eventName == 'SOCIAL_MEDIA':\n        try:\n            network = eventData.split(': ')[0]\n            url = eventData.split(': ')[1].replace('<SFURL>', '').replace('</SFURL>', '')\n        except Exception as e:\n            self.debug(f'Unable to parse SOCIAL_MEDIA: {eventData} ({e})')\n            return\n        if network != 'Github':\n            self.debug(f'Skipping social network profile, {url}, as not a GitHub profile')\n            return\n        try:\n            urlParts = url.split('/')\n            username = urlParts[len(urlParts) - 1]\n        except Exception:\n            self.debug(f\"Couldn't get a username out of {url}\")\n            return\n        res = self.sf.fetchUrl(f'https://api.github.com/users/{username}', timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'])\n        if res['content'] is None:\n            return\n        try:\n            json_data = json.loads(res['content'])\n        except Exception as e:\n            self.debug(f'Error processing JSON response: {e}')\n            return\n        if not json_data.get('login'):\n            self.debug(f'{username} is not a valid GitHub profile')\n            return\n        full_name = json_data.get('name')\n        if not full_name:\n            self.debug(f'{username} is not a valid GitHub profile')\n            return\n        e = SpiderFootEvent('RAW_RIR_DATA', f'Possible full name: {full_name}', self.__name__, event)\n        self.notifyListeners(e)\n        location = json_data.get('location')\n        if location is None:\n            return\n        if len(location) < 3 or len(location) > 100:\n            self.debug(f'Skipping likely invalid location: {location}')\n            return\n        e = SpiderFootEvent('GEOINFO', location, self.__name__, event)\n        self.notifyListeners(e)\n        return\n    if eventName == 'DOMAIN_NAME':\n        username = self.sf.domainKeyword(eventData, self.opts['_internettlds'])\n        if not username:\n            return\n    if eventName == 'USERNAME':\n        username = eventData\n    self.debug(f'Looking at {username}')\n    failed = False\n    url = f'https://api.github.com/search/repositories?q={username}'\n    res = self.sf.fetchUrl(url, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'])\n    if res['content'] is None:\n        self.error(f'Unable to fetch {url}')\n        failed = True\n    if not failed:\n        try:\n            ret = json.loads(res['content'])\n        except Exception as e:\n            self.debug(f'Error processing JSON response from GitHub: {e}')\n            ret = None\n        if ret is None:\n            self.error(f'Unable to process empty response from Github for: {username}')\n            failed = True\n    if not failed:\n        if ret.get('total_count', '0') == '0' or len(ret['items']) == 0:\n            self.debug(f'No Github information for {username}')\n            failed = True\n    if not failed:\n        for item in ret['items']:\n            repo_info = self.buildRepoInfo(item)\n            if repo_info is not None:\n                if self.opts['namesonly'] and username != item['name']:\n                    continue\n                evt = SpiderFootEvent('PUBLIC_CODE_REPO', repo_info, self.__name__, event)\n                self.notifyListeners(evt)\n    failed = False\n    url = f'https://api.github.com/search/users?q={username}'\n    res = self.sf.fetchUrl(url, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'])\n    if res['content'] is None:\n        self.error(f'Unable to fetch {url}')\n        failed = True\n    if not failed:\n        try:\n            ret = json.loads(res['content'])\n            if ret is None:\n                self.error(f'Unable to process empty response from Github for: {username}')\n                failed = True\n        except Exception:\n            self.error(f'Unable to process invalid response from Github for: {username}')\n            failed = True\n    if not failed:\n        if ret.get('total_count', '0') == '0' or len(ret['items']) == 0:\n            self.debug('No Github information for ' + username)\n            failed = True\n    if not failed:\n        for item in ret['items']:\n            if item.get('repos_url') is None:\n                self.debug('Incomplete Github information found (repos_url).')\n                continue\n            url = item['repos_url']\n            res = self.sf.fetchUrl(url, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'])\n            if res['content'] is None:\n                self.error(f'Unable to fetch {url}')\n                continue\n            try:\n                repret = json.loads(res['content'])\n            except Exception as e:\n                self.error(f'Invalid JSON returned from Github: {e}')\n                continue\n            if repret is None:\n                self.error(f'Unable to process empty response from Github for: {username}')\n                continue\n            for item in repret:\n                if type(item) != dict:\n                    self.debug('Encountered an unexpected or empty response from Github.')\n                    continue\n                repo_info = self.buildRepoInfo(item)\n                if repo_info is not None:\n                    if self.opts['namesonly'] and item['name'] != username:\n                        continue\n                    if eventName == 'USERNAME' and '/' + username + '/' not in item.get('html_url', ''):\n                        continue\n                    evt = SpiderFootEvent('PUBLIC_CODE_REPO', repo_info, self.__name__, event)\n                    self.notifyListeners(evt)",
            "def handleEvent(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    eventName = event.eventType\n    eventData = event.data\n    srcModuleName = event.module\n    self.debug(f'Received event, {eventName}, from {srcModuleName}')\n    if eventData in self.results:\n        self.debug(f'Already did a search for {eventData}, skipping.')\n        return\n    self.results[eventData] = True\n    if eventName == 'SOCIAL_MEDIA':\n        try:\n            network = eventData.split(': ')[0]\n            url = eventData.split(': ')[1].replace('<SFURL>', '').replace('</SFURL>', '')\n        except Exception as e:\n            self.debug(f'Unable to parse SOCIAL_MEDIA: {eventData} ({e})')\n            return\n        if network != 'Github':\n            self.debug(f'Skipping social network profile, {url}, as not a GitHub profile')\n            return\n        try:\n            urlParts = url.split('/')\n            username = urlParts[len(urlParts) - 1]\n        except Exception:\n            self.debug(f\"Couldn't get a username out of {url}\")\n            return\n        res = self.sf.fetchUrl(f'https://api.github.com/users/{username}', timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'])\n        if res['content'] is None:\n            return\n        try:\n            json_data = json.loads(res['content'])\n        except Exception as e:\n            self.debug(f'Error processing JSON response: {e}')\n            return\n        if not json_data.get('login'):\n            self.debug(f'{username} is not a valid GitHub profile')\n            return\n        full_name = json_data.get('name')\n        if not full_name:\n            self.debug(f'{username} is not a valid GitHub profile')\n            return\n        e = SpiderFootEvent('RAW_RIR_DATA', f'Possible full name: {full_name}', self.__name__, event)\n        self.notifyListeners(e)\n        location = json_data.get('location')\n        if location is None:\n            return\n        if len(location) < 3 or len(location) > 100:\n            self.debug(f'Skipping likely invalid location: {location}')\n            return\n        e = SpiderFootEvent('GEOINFO', location, self.__name__, event)\n        self.notifyListeners(e)\n        return\n    if eventName == 'DOMAIN_NAME':\n        username = self.sf.domainKeyword(eventData, self.opts['_internettlds'])\n        if not username:\n            return\n    if eventName == 'USERNAME':\n        username = eventData\n    self.debug(f'Looking at {username}')\n    failed = False\n    url = f'https://api.github.com/search/repositories?q={username}'\n    res = self.sf.fetchUrl(url, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'])\n    if res['content'] is None:\n        self.error(f'Unable to fetch {url}')\n        failed = True\n    if not failed:\n        try:\n            ret = json.loads(res['content'])\n        except Exception as e:\n            self.debug(f'Error processing JSON response from GitHub: {e}')\n            ret = None\n        if ret is None:\n            self.error(f'Unable to process empty response from Github for: {username}')\n            failed = True\n    if not failed:\n        if ret.get('total_count', '0') == '0' or len(ret['items']) == 0:\n            self.debug(f'No Github information for {username}')\n            failed = True\n    if not failed:\n        for item in ret['items']:\n            repo_info = self.buildRepoInfo(item)\n            if repo_info is not None:\n                if self.opts['namesonly'] and username != item['name']:\n                    continue\n                evt = SpiderFootEvent('PUBLIC_CODE_REPO', repo_info, self.__name__, event)\n                self.notifyListeners(evt)\n    failed = False\n    url = f'https://api.github.com/search/users?q={username}'\n    res = self.sf.fetchUrl(url, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'])\n    if res['content'] is None:\n        self.error(f'Unable to fetch {url}')\n        failed = True\n    if not failed:\n        try:\n            ret = json.loads(res['content'])\n            if ret is None:\n                self.error(f'Unable to process empty response from Github for: {username}')\n                failed = True\n        except Exception:\n            self.error(f'Unable to process invalid response from Github for: {username}')\n            failed = True\n    if not failed:\n        if ret.get('total_count', '0') == '0' or len(ret['items']) == 0:\n            self.debug('No Github information for ' + username)\n            failed = True\n    if not failed:\n        for item in ret['items']:\n            if item.get('repos_url') is None:\n                self.debug('Incomplete Github information found (repos_url).')\n                continue\n            url = item['repos_url']\n            res = self.sf.fetchUrl(url, timeout=self.opts['_fetchtimeout'], useragent=self.opts['_useragent'])\n            if res['content'] is None:\n                self.error(f'Unable to fetch {url}')\n                continue\n            try:\n                repret = json.loads(res['content'])\n            except Exception as e:\n                self.error(f'Invalid JSON returned from Github: {e}')\n                continue\n            if repret is None:\n                self.error(f'Unable to process empty response from Github for: {username}')\n                continue\n            for item in repret:\n                if type(item) != dict:\n                    self.debug('Encountered an unexpected or empty response from Github.')\n                    continue\n                repo_info = self.buildRepoInfo(item)\n                if repo_info is not None:\n                    if self.opts['namesonly'] and item['name'] != username:\n                        continue\n                    if eventName == 'USERNAME' and '/' + username + '/' not in item.get('html_url', ''):\n                        continue\n                    evt = SpiderFootEvent('PUBLIC_CODE_REPO', repo_info, self.__name__, event)\n                    self.notifyListeners(evt)"
        ]
    }
]
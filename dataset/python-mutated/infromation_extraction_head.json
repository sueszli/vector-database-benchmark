[
    {
        "func_name": "__init__",
        "original": "def __init__(self, hidden_size=768, labels=None, **kwargs):\n    super().__init__(hidden_size=hidden_size, labels=labels)\n    assert labels is not None\n    self.labels = labels\n    self.s_layer = nn.Linear(hidden_size, 2)\n    self.o_layer = nn.Linear(2 * hidden_size, 2)\n    self.p_layer = nn.Linear(hidden_size, len(self.labels))\n    self.mha = nn.MultiheadAttention(hidden_size, 4)",
        "mutated": [
            "def __init__(self, hidden_size=768, labels=None, **kwargs):\n    if False:\n        i = 10\n    super().__init__(hidden_size=hidden_size, labels=labels)\n    assert labels is not None\n    self.labels = labels\n    self.s_layer = nn.Linear(hidden_size, 2)\n    self.o_layer = nn.Linear(2 * hidden_size, 2)\n    self.p_layer = nn.Linear(hidden_size, len(self.labels))\n    self.mha = nn.MultiheadAttention(hidden_size, 4)",
            "def __init__(self, hidden_size=768, labels=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    super().__init__(hidden_size=hidden_size, labels=labels)\n    assert labels is not None\n    self.labels = labels\n    self.s_layer = nn.Linear(hidden_size, 2)\n    self.o_layer = nn.Linear(2 * hidden_size, 2)\n    self.p_layer = nn.Linear(hidden_size, len(self.labels))\n    self.mha = nn.MultiheadAttention(hidden_size, 4)",
            "def __init__(self, hidden_size=768, labels=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    super().__init__(hidden_size=hidden_size, labels=labels)\n    assert labels is not None\n    self.labels = labels\n    self.s_layer = nn.Linear(hidden_size, 2)\n    self.o_layer = nn.Linear(2 * hidden_size, 2)\n    self.p_layer = nn.Linear(hidden_size, len(self.labels))\n    self.mha = nn.MultiheadAttention(hidden_size, 4)",
            "def __init__(self, hidden_size=768, labels=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    super().__init__(hidden_size=hidden_size, labels=labels)\n    assert labels is not None\n    self.labels = labels\n    self.s_layer = nn.Linear(hidden_size, 2)\n    self.o_layer = nn.Linear(2 * hidden_size, 2)\n    self.p_layer = nn.Linear(hidden_size, len(self.labels))\n    self.mha = nn.MultiheadAttention(hidden_size, 4)",
            "def __init__(self, hidden_size=768, labels=None, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    super().__init__(hidden_size=hidden_size, labels=labels)\n    assert labels is not None\n    self.labels = labels\n    self.s_layer = nn.Linear(hidden_size, 2)\n    self.o_layer = nn.Linear(2 * hidden_size, 2)\n    self.p_layer = nn.Linear(hidden_size, len(self.labels))\n    self.mha = nn.MultiheadAttention(hidden_size, 4)"
        ]
    },
    {
        "func_name": "forward",
        "original": "def forward(self, inputs: ModelOutputBase, attention_mask=None, labels=None, text=None, offsets=None, threshold=0.5, **kwargs) -> InformationExtractionOutput:\n    assert text is not None\n    assert offsets is not None\n    sequence_output = inputs.last_hidden_state\n    spos = []\n    (s_head_logits, s_tail_logits) = self.s_layer(sequence_output).split(1, dim=-1)\n    s_head_logits = s_head_logits[0, :, 0].sigmoid()\n    s_tail_logits = s_tail_logits[0, :, 0].sigmoid()\n    (s_masks, subjects) = self._get_masks_and_mentions(text, offsets, s_head_logits, s_tail_logits, None, threshold)\n    for (s_mask, subject) in zip(s_masks, subjects):\n        masked_sequence_output = sequence_output * s_mask.unsqueeze(0).unsqueeze(-1)\n        subjected_sequence_output = self.mha(sequence_output.permute(1, 0, 2), masked_sequence_output.permute(1, 0, 2), masked_sequence_output.permute(1, 0, 2))[0].permute(1, 0, 2)\n        cat_sequence_output = torch.cat((sequence_output, subjected_sequence_output), dim=-1)\n        (o_head_logits, o_tail_logits) = self.o_layer(cat_sequence_output).split(1, dim=-1)\n        o_head_logits = o_head_logits[0, :, 0].sigmoid()\n        o_tail_logits = o_tail_logits[0, :, 0].sigmoid()\n        (so_masks, objects) = self._get_masks_and_mentions(text, offsets, o_head_logits, o_tail_logits, s_mask, threshold)\n        for (so_mask, object) in zip(so_masks, objects):\n            masked_sequence_output = (sequence_output * so_mask.unsqueeze(0).unsqueeze(-1)).sum(1)\n            lengths = so_mask.unsqueeze(0).sum(-1, keepdim=True)\n            pooled_subject_object = masked_sequence_output / lengths\n            label = self.p_layer(pooled_subject_object).sigmoid().squeeze(0)\n            for i in range(label.size(-1)):\n                if label[i] > threshold:\n                    predicate = self.labels[i]\n                    spos.append((subject, predicate, object))\n    return InformationExtractionOutput(spo_list=spos)",
        "mutated": [
            "def forward(self, inputs: ModelOutputBase, attention_mask=None, labels=None, text=None, offsets=None, threshold=0.5, **kwargs) -> InformationExtractionOutput:\n    if False:\n        i = 10\n    assert text is not None\n    assert offsets is not None\n    sequence_output = inputs.last_hidden_state\n    spos = []\n    (s_head_logits, s_tail_logits) = self.s_layer(sequence_output).split(1, dim=-1)\n    s_head_logits = s_head_logits[0, :, 0].sigmoid()\n    s_tail_logits = s_tail_logits[0, :, 0].sigmoid()\n    (s_masks, subjects) = self._get_masks_and_mentions(text, offsets, s_head_logits, s_tail_logits, None, threshold)\n    for (s_mask, subject) in zip(s_masks, subjects):\n        masked_sequence_output = sequence_output * s_mask.unsqueeze(0).unsqueeze(-1)\n        subjected_sequence_output = self.mha(sequence_output.permute(1, 0, 2), masked_sequence_output.permute(1, 0, 2), masked_sequence_output.permute(1, 0, 2))[0].permute(1, 0, 2)\n        cat_sequence_output = torch.cat((sequence_output, subjected_sequence_output), dim=-1)\n        (o_head_logits, o_tail_logits) = self.o_layer(cat_sequence_output).split(1, dim=-1)\n        o_head_logits = o_head_logits[0, :, 0].sigmoid()\n        o_tail_logits = o_tail_logits[0, :, 0].sigmoid()\n        (so_masks, objects) = self._get_masks_and_mentions(text, offsets, o_head_logits, o_tail_logits, s_mask, threshold)\n        for (so_mask, object) in zip(so_masks, objects):\n            masked_sequence_output = (sequence_output * so_mask.unsqueeze(0).unsqueeze(-1)).sum(1)\n            lengths = so_mask.unsqueeze(0).sum(-1, keepdim=True)\n            pooled_subject_object = masked_sequence_output / lengths\n            label = self.p_layer(pooled_subject_object).sigmoid().squeeze(0)\n            for i in range(label.size(-1)):\n                if label[i] > threshold:\n                    predicate = self.labels[i]\n                    spos.append((subject, predicate, object))\n    return InformationExtractionOutput(spo_list=spos)",
            "def forward(self, inputs: ModelOutputBase, attention_mask=None, labels=None, text=None, offsets=None, threshold=0.5, **kwargs) -> InformationExtractionOutput:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    assert text is not None\n    assert offsets is not None\n    sequence_output = inputs.last_hidden_state\n    spos = []\n    (s_head_logits, s_tail_logits) = self.s_layer(sequence_output).split(1, dim=-1)\n    s_head_logits = s_head_logits[0, :, 0].sigmoid()\n    s_tail_logits = s_tail_logits[0, :, 0].sigmoid()\n    (s_masks, subjects) = self._get_masks_and_mentions(text, offsets, s_head_logits, s_tail_logits, None, threshold)\n    for (s_mask, subject) in zip(s_masks, subjects):\n        masked_sequence_output = sequence_output * s_mask.unsqueeze(0).unsqueeze(-1)\n        subjected_sequence_output = self.mha(sequence_output.permute(1, 0, 2), masked_sequence_output.permute(1, 0, 2), masked_sequence_output.permute(1, 0, 2))[0].permute(1, 0, 2)\n        cat_sequence_output = torch.cat((sequence_output, subjected_sequence_output), dim=-1)\n        (o_head_logits, o_tail_logits) = self.o_layer(cat_sequence_output).split(1, dim=-1)\n        o_head_logits = o_head_logits[0, :, 0].sigmoid()\n        o_tail_logits = o_tail_logits[0, :, 0].sigmoid()\n        (so_masks, objects) = self._get_masks_and_mentions(text, offsets, o_head_logits, o_tail_logits, s_mask, threshold)\n        for (so_mask, object) in zip(so_masks, objects):\n            masked_sequence_output = (sequence_output * so_mask.unsqueeze(0).unsqueeze(-1)).sum(1)\n            lengths = so_mask.unsqueeze(0).sum(-1, keepdim=True)\n            pooled_subject_object = masked_sequence_output / lengths\n            label = self.p_layer(pooled_subject_object).sigmoid().squeeze(0)\n            for i in range(label.size(-1)):\n                if label[i] > threshold:\n                    predicate = self.labels[i]\n                    spos.append((subject, predicate, object))\n    return InformationExtractionOutput(spo_list=spos)",
            "def forward(self, inputs: ModelOutputBase, attention_mask=None, labels=None, text=None, offsets=None, threshold=0.5, **kwargs) -> InformationExtractionOutput:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    assert text is not None\n    assert offsets is not None\n    sequence_output = inputs.last_hidden_state\n    spos = []\n    (s_head_logits, s_tail_logits) = self.s_layer(sequence_output).split(1, dim=-1)\n    s_head_logits = s_head_logits[0, :, 0].sigmoid()\n    s_tail_logits = s_tail_logits[0, :, 0].sigmoid()\n    (s_masks, subjects) = self._get_masks_and_mentions(text, offsets, s_head_logits, s_tail_logits, None, threshold)\n    for (s_mask, subject) in zip(s_masks, subjects):\n        masked_sequence_output = sequence_output * s_mask.unsqueeze(0).unsqueeze(-1)\n        subjected_sequence_output = self.mha(sequence_output.permute(1, 0, 2), masked_sequence_output.permute(1, 0, 2), masked_sequence_output.permute(1, 0, 2))[0].permute(1, 0, 2)\n        cat_sequence_output = torch.cat((sequence_output, subjected_sequence_output), dim=-1)\n        (o_head_logits, o_tail_logits) = self.o_layer(cat_sequence_output).split(1, dim=-1)\n        o_head_logits = o_head_logits[0, :, 0].sigmoid()\n        o_tail_logits = o_tail_logits[0, :, 0].sigmoid()\n        (so_masks, objects) = self._get_masks_and_mentions(text, offsets, o_head_logits, o_tail_logits, s_mask, threshold)\n        for (so_mask, object) in zip(so_masks, objects):\n            masked_sequence_output = (sequence_output * so_mask.unsqueeze(0).unsqueeze(-1)).sum(1)\n            lengths = so_mask.unsqueeze(0).sum(-1, keepdim=True)\n            pooled_subject_object = masked_sequence_output / lengths\n            label = self.p_layer(pooled_subject_object).sigmoid().squeeze(0)\n            for i in range(label.size(-1)):\n                if label[i] > threshold:\n                    predicate = self.labels[i]\n                    spos.append((subject, predicate, object))\n    return InformationExtractionOutput(spo_list=spos)",
            "def forward(self, inputs: ModelOutputBase, attention_mask=None, labels=None, text=None, offsets=None, threshold=0.5, **kwargs) -> InformationExtractionOutput:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    assert text is not None\n    assert offsets is not None\n    sequence_output = inputs.last_hidden_state\n    spos = []\n    (s_head_logits, s_tail_logits) = self.s_layer(sequence_output).split(1, dim=-1)\n    s_head_logits = s_head_logits[0, :, 0].sigmoid()\n    s_tail_logits = s_tail_logits[0, :, 0].sigmoid()\n    (s_masks, subjects) = self._get_masks_and_mentions(text, offsets, s_head_logits, s_tail_logits, None, threshold)\n    for (s_mask, subject) in zip(s_masks, subjects):\n        masked_sequence_output = sequence_output * s_mask.unsqueeze(0).unsqueeze(-1)\n        subjected_sequence_output = self.mha(sequence_output.permute(1, 0, 2), masked_sequence_output.permute(1, 0, 2), masked_sequence_output.permute(1, 0, 2))[0].permute(1, 0, 2)\n        cat_sequence_output = torch.cat((sequence_output, subjected_sequence_output), dim=-1)\n        (o_head_logits, o_tail_logits) = self.o_layer(cat_sequence_output).split(1, dim=-1)\n        o_head_logits = o_head_logits[0, :, 0].sigmoid()\n        o_tail_logits = o_tail_logits[0, :, 0].sigmoid()\n        (so_masks, objects) = self._get_masks_and_mentions(text, offsets, o_head_logits, o_tail_logits, s_mask, threshold)\n        for (so_mask, object) in zip(so_masks, objects):\n            masked_sequence_output = (sequence_output * so_mask.unsqueeze(0).unsqueeze(-1)).sum(1)\n            lengths = so_mask.unsqueeze(0).sum(-1, keepdim=True)\n            pooled_subject_object = masked_sequence_output / lengths\n            label = self.p_layer(pooled_subject_object).sigmoid().squeeze(0)\n            for i in range(label.size(-1)):\n                if label[i] > threshold:\n                    predicate = self.labels[i]\n                    spos.append((subject, predicate, object))\n    return InformationExtractionOutput(spo_list=spos)",
            "def forward(self, inputs: ModelOutputBase, attention_mask=None, labels=None, text=None, offsets=None, threshold=0.5, **kwargs) -> InformationExtractionOutput:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    assert text is not None\n    assert offsets is not None\n    sequence_output = inputs.last_hidden_state\n    spos = []\n    (s_head_logits, s_tail_logits) = self.s_layer(sequence_output).split(1, dim=-1)\n    s_head_logits = s_head_logits[0, :, 0].sigmoid()\n    s_tail_logits = s_tail_logits[0, :, 0].sigmoid()\n    (s_masks, subjects) = self._get_masks_and_mentions(text, offsets, s_head_logits, s_tail_logits, None, threshold)\n    for (s_mask, subject) in zip(s_masks, subjects):\n        masked_sequence_output = sequence_output * s_mask.unsqueeze(0).unsqueeze(-1)\n        subjected_sequence_output = self.mha(sequence_output.permute(1, 0, 2), masked_sequence_output.permute(1, 0, 2), masked_sequence_output.permute(1, 0, 2))[0].permute(1, 0, 2)\n        cat_sequence_output = torch.cat((sequence_output, subjected_sequence_output), dim=-1)\n        (o_head_logits, o_tail_logits) = self.o_layer(cat_sequence_output).split(1, dim=-1)\n        o_head_logits = o_head_logits[0, :, 0].sigmoid()\n        o_tail_logits = o_tail_logits[0, :, 0].sigmoid()\n        (so_masks, objects) = self._get_masks_and_mentions(text, offsets, o_head_logits, o_tail_logits, s_mask, threshold)\n        for (so_mask, object) in zip(so_masks, objects):\n            masked_sequence_output = (sequence_output * so_mask.unsqueeze(0).unsqueeze(-1)).sum(1)\n            lengths = so_mask.unsqueeze(0).sum(-1, keepdim=True)\n            pooled_subject_object = masked_sequence_output / lengths\n            label = self.p_layer(pooled_subject_object).sigmoid().squeeze(0)\n            for i in range(label.size(-1)):\n                if label[i] > threshold:\n                    predicate = self.labels[i]\n                    spos.append((subject, predicate, object))\n    return InformationExtractionOutput(spo_list=spos)"
        ]
    },
    {
        "func_name": "_get_masks_and_mentions",
        "original": "def _get_masks_and_mentions(self, text, offsets, heads, tails, init_mask=None, threshold=0.5):\n    \"\"\"\n        text: str\n        heads: tensor (len(heads))\n        tails: tensor (len(tails))\n        \"\"\"\n    seq_len = heads.size(-1)\n    potential_heads = []\n    for i in range(seq_len - 1):\n        if heads[i] > threshold:\n            potential_heads.append(i)\n    potential_heads.append(seq_len - 1)\n    masks = []\n    mentions = []\n    for i in range(len(potential_heads) - 1):\n        head_index = potential_heads[i]\n        (tail_index, max_val) = (None, 0)\n        for j in range(head_index, potential_heads[i + 1]):\n            if tails[j] > max_val and tails[j] > threshold:\n                tail_index = j\n                max_val = tails[j]\n        if tail_index is not None:\n            mask = torch.zeros_like(heads) if init_mask is None else init_mask.clone()\n            mask[head_index:tail_index + 1] = 1\n            masks.append(mask)\n            char_head = offsets[head_index][0]\n            char_tail = offsets[tail_index][1]\n            mention = text[char_head:char_tail]\n            mentions.append(mention)\n    return (masks, mentions)",
        "mutated": [
            "def _get_masks_and_mentions(self, text, offsets, heads, tails, init_mask=None, threshold=0.5):\n    if False:\n        i = 10\n    '\\n        text: str\\n        heads: tensor (len(heads))\\n        tails: tensor (len(tails))\\n        '\n    seq_len = heads.size(-1)\n    potential_heads = []\n    for i in range(seq_len - 1):\n        if heads[i] > threshold:\n            potential_heads.append(i)\n    potential_heads.append(seq_len - 1)\n    masks = []\n    mentions = []\n    for i in range(len(potential_heads) - 1):\n        head_index = potential_heads[i]\n        (tail_index, max_val) = (None, 0)\n        for j in range(head_index, potential_heads[i + 1]):\n            if tails[j] > max_val and tails[j] > threshold:\n                tail_index = j\n                max_val = tails[j]\n        if tail_index is not None:\n            mask = torch.zeros_like(heads) if init_mask is None else init_mask.clone()\n            mask[head_index:tail_index + 1] = 1\n            masks.append(mask)\n            char_head = offsets[head_index][0]\n            char_tail = offsets[tail_index][1]\n            mention = text[char_head:char_tail]\n            mentions.append(mention)\n    return (masks, mentions)",
            "def _get_masks_and_mentions(self, text, offsets, heads, tails, init_mask=None, threshold=0.5):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        text: str\\n        heads: tensor (len(heads))\\n        tails: tensor (len(tails))\\n        '\n    seq_len = heads.size(-1)\n    potential_heads = []\n    for i in range(seq_len - 1):\n        if heads[i] > threshold:\n            potential_heads.append(i)\n    potential_heads.append(seq_len - 1)\n    masks = []\n    mentions = []\n    for i in range(len(potential_heads) - 1):\n        head_index = potential_heads[i]\n        (tail_index, max_val) = (None, 0)\n        for j in range(head_index, potential_heads[i + 1]):\n            if tails[j] > max_val and tails[j] > threshold:\n                tail_index = j\n                max_val = tails[j]\n        if tail_index is not None:\n            mask = torch.zeros_like(heads) if init_mask is None else init_mask.clone()\n            mask[head_index:tail_index + 1] = 1\n            masks.append(mask)\n            char_head = offsets[head_index][0]\n            char_tail = offsets[tail_index][1]\n            mention = text[char_head:char_tail]\n            mentions.append(mention)\n    return (masks, mentions)",
            "def _get_masks_and_mentions(self, text, offsets, heads, tails, init_mask=None, threshold=0.5):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        text: str\\n        heads: tensor (len(heads))\\n        tails: tensor (len(tails))\\n        '\n    seq_len = heads.size(-1)\n    potential_heads = []\n    for i in range(seq_len - 1):\n        if heads[i] > threshold:\n            potential_heads.append(i)\n    potential_heads.append(seq_len - 1)\n    masks = []\n    mentions = []\n    for i in range(len(potential_heads) - 1):\n        head_index = potential_heads[i]\n        (tail_index, max_val) = (None, 0)\n        for j in range(head_index, potential_heads[i + 1]):\n            if tails[j] > max_val and tails[j] > threshold:\n                tail_index = j\n                max_val = tails[j]\n        if tail_index is not None:\n            mask = torch.zeros_like(heads) if init_mask is None else init_mask.clone()\n            mask[head_index:tail_index + 1] = 1\n            masks.append(mask)\n            char_head = offsets[head_index][0]\n            char_tail = offsets[tail_index][1]\n            mention = text[char_head:char_tail]\n            mentions.append(mention)\n    return (masks, mentions)",
            "def _get_masks_and_mentions(self, text, offsets, heads, tails, init_mask=None, threshold=0.5):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        text: str\\n        heads: tensor (len(heads))\\n        tails: tensor (len(tails))\\n        '\n    seq_len = heads.size(-1)\n    potential_heads = []\n    for i in range(seq_len - 1):\n        if heads[i] > threshold:\n            potential_heads.append(i)\n    potential_heads.append(seq_len - 1)\n    masks = []\n    mentions = []\n    for i in range(len(potential_heads) - 1):\n        head_index = potential_heads[i]\n        (tail_index, max_val) = (None, 0)\n        for j in range(head_index, potential_heads[i + 1]):\n            if tails[j] > max_val and tails[j] > threshold:\n                tail_index = j\n                max_val = tails[j]\n        if tail_index is not None:\n            mask = torch.zeros_like(heads) if init_mask is None else init_mask.clone()\n            mask[head_index:tail_index + 1] = 1\n            masks.append(mask)\n            char_head = offsets[head_index][0]\n            char_tail = offsets[tail_index][1]\n            mention = text[char_head:char_tail]\n            mentions.append(mention)\n    return (masks, mentions)",
            "def _get_masks_and_mentions(self, text, offsets, heads, tails, init_mask=None, threshold=0.5):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        text: str\\n        heads: tensor (len(heads))\\n        tails: tensor (len(tails))\\n        '\n    seq_len = heads.size(-1)\n    potential_heads = []\n    for i in range(seq_len - 1):\n        if heads[i] > threshold:\n            potential_heads.append(i)\n    potential_heads.append(seq_len - 1)\n    masks = []\n    mentions = []\n    for i in range(len(potential_heads) - 1):\n        head_index = potential_heads[i]\n        (tail_index, max_val) = (None, 0)\n        for j in range(head_index, potential_heads[i + 1]):\n            if tails[j] > max_val and tails[j] > threshold:\n                tail_index = j\n                max_val = tails[j]\n        if tail_index is not None:\n            mask = torch.zeros_like(heads) if init_mask is None else init_mask.clone()\n            mask[head_index:tail_index + 1] = 1\n            masks.append(mask)\n            char_head = offsets[head_index][0]\n            char_tail = offsets[tail_index][1]\n            mention = text[char_head:char_tail]\n            mentions.append(mention)\n    return (masks, mentions)"
        ]
    }
]
[
    {
        "func_name": "combinationSum2",
        "original": "def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:\n    candidates.sort()\n    table = [None] + [set() for i in range(target)]\n    for i in candidates:\n        if i > target:\n            break\n        for j in range(target - i, 0, -1):\n            table[i + j] |= {elt + (i,) for elt in table[j]}\n        table[i].add((i,))\n    return map(list, table[target])",
        "mutated": [
            "def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:\n    if False:\n        i = 10\n    candidates.sort()\n    table = [None] + [set() for i in range(target)]\n    for i in candidates:\n        if i > target:\n            break\n        for j in range(target - i, 0, -1):\n            table[i + j] |= {elt + (i,) for elt in table[j]}\n        table[i].add((i,))\n    return map(list, table[target])",
            "def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    candidates.sort()\n    table = [None] + [set() for i in range(target)]\n    for i in candidates:\n        if i > target:\n            break\n        for j in range(target - i, 0, -1):\n            table[i + j] |= {elt + (i,) for elt in table[j]}\n        table[i].add((i,))\n    return map(list, table[target])",
            "def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    candidates.sort()\n    table = [None] + [set() for i in range(target)]\n    for i in candidates:\n        if i > target:\n            break\n        for j in range(target - i, 0, -1):\n            table[i + j] |= {elt + (i,) for elt in table[j]}\n        table[i].add((i,))\n    return map(list, table[target])",
            "def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    candidates.sort()\n    table = [None] + [set() for i in range(target)]\n    for i in candidates:\n        if i > target:\n            break\n        for j in range(target - i, 0, -1):\n            table[i + j] |= {elt + (i,) for elt in table[j]}\n        table[i].add((i,))\n    return map(list, table[target])",
            "def combinationSum2(self, candidates: List[int], target: int) -> List[List[int]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    candidates.sort()\n    table = [None] + [set() for i in range(target)]\n    for i in candidates:\n        if i > target:\n            break\n        for j in range(target - i, 0, -1):\n            table[i + j] |= {elt + (i,) for elt in table[j]}\n        table[i].add((i,))\n    return map(list, table[target])"
        ]
    }
]
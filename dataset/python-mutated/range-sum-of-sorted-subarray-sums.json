[
    {
        "func_name": "countUntil",
        "original": "def countUntil(nums, target):\n    (result, curr, left) = (0, 0, 0)\n    for right in xrange(len(nums)):\n        curr += nums[right]\n        while curr > target:\n            curr -= nums[left]\n            left += 1\n        result += right - left + 1\n    return result",
        "mutated": [
            "def countUntil(nums, target):\n    if False:\n        i = 10\n    (result, curr, left) = (0, 0, 0)\n    for right in xrange(len(nums)):\n        curr += nums[right]\n        while curr > target:\n            curr -= nums[left]\n            left += 1\n        result += right - left + 1\n    return result",
            "def countUntil(nums, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (result, curr, left) = (0, 0, 0)\n    for right in xrange(len(nums)):\n        curr += nums[right]\n        while curr > target:\n            curr -= nums[left]\n            left += 1\n        result += right - left + 1\n    return result",
            "def countUntil(nums, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (result, curr, left) = (0, 0, 0)\n    for right in xrange(len(nums)):\n        curr += nums[right]\n        while curr > target:\n            curr -= nums[left]\n            left += 1\n        result += right - left + 1\n    return result",
            "def countUntil(nums, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (result, curr, left) = (0, 0, 0)\n    for right in xrange(len(nums)):\n        curr += nums[right]\n        while curr > target:\n            curr -= nums[left]\n            left += 1\n        result += right - left + 1\n    return result",
            "def countUntil(nums, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (result, curr, left) = (0, 0, 0)\n    for right in xrange(len(nums)):\n        curr += nums[right]\n        while curr > target:\n            curr -= nums[left]\n            left += 1\n        result += right - left + 1\n    return result"
        ]
    },
    {
        "func_name": "sumUntil",
        "original": "def sumUntil(nums, prefix, target):\n    (result, curr, total, left) = (0, 0, 0, 0)\n    for right in xrange(len(nums)):\n        curr += nums[right]\n        total += nums[right] * (right - left + 1)\n        while curr > target:\n            curr -= nums[left]\n            total -= prefix[right + 1] - prefix[left - 1 + 1]\n            left += 1\n        result += total\n    return result",
        "mutated": [
            "def sumUntil(nums, prefix, target):\n    if False:\n        i = 10\n    (result, curr, total, left) = (0, 0, 0, 0)\n    for right in xrange(len(nums)):\n        curr += nums[right]\n        total += nums[right] * (right - left + 1)\n        while curr > target:\n            curr -= nums[left]\n            total -= prefix[right + 1] - prefix[left - 1 + 1]\n            left += 1\n        result += total\n    return result",
            "def sumUntil(nums, prefix, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (result, curr, total, left) = (0, 0, 0, 0)\n    for right in xrange(len(nums)):\n        curr += nums[right]\n        total += nums[right] * (right - left + 1)\n        while curr > target:\n            curr -= nums[left]\n            total -= prefix[right + 1] - prefix[left - 1 + 1]\n            left += 1\n        result += total\n    return result",
            "def sumUntil(nums, prefix, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (result, curr, total, left) = (0, 0, 0, 0)\n    for right in xrange(len(nums)):\n        curr += nums[right]\n        total += nums[right] * (right - left + 1)\n        while curr > target:\n            curr -= nums[left]\n            total -= prefix[right + 1] - prefix[left - 1 + 1]\n            left += 1\n        result += total\n    return result",
            "def sumUntil(nums, prefix, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (result, curr, total, left) = (0, 0, 0, 0)\n    for right in xrange(len(nums)):\n        curr += nums[right]\n        total += nums[right] * (right - left + 1)\n        while curr > target:\n            curr -= nums[left]\n            total -= prefix[right + 1] - prefix[left - 1 + 1]\n            left += 1\n        result += total\n    return result",
            "def sumUntil(nums, prefix, target):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (result, curr, total, left) = (0, 0, 0, 0)\n    for right in xrange(len(nums)):\n        curr += nums[right]\n        total += nums[right] * (right - left + 1)\n        while curr > target:\n            curr -= nums[left]\n            total -= prefix[right + 1] - prefix[left - 1 + 1]\n            left += 1\n        result += total\n    return result"
        ]
    },
    {
        "func_name": "sumLessOrEqualTo",
        "original": "def sumLessOrEqualTo(prefix, nums, left, right, count):\n    while left <= right:\n        mid = left + (right - left) // 2\n        if countUntil(nums, mid) - count >= 0:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return sumUntil(nums, prefix, left) - left * (countUntil(nums, left) - count)",
        "mutated": [
            "def sumLessOrEqualTo(prefix, nums, left, right, count):\n    if False:\n        i = 10\n    while left <= right:\n        mid = left + (right - left) // 2\n        if countUntil(nums, mid) - count >= 0:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return sumUntil(nums, prefix, left) - left * (countUntil(nums, left) - count)",
            "def sumLessOrEqualTo(prefix, nums, left, right, count):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    while left <= right:\n        mid = left + (right - left) // 2\n        if countUntil(nums, mid) - count >= 0:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return sumUntil(nums, prefix, left) - left * (countUntil(nums, left) - count)",
            "def sumLessOrEqualTo(prefix, nums, left, right, count):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    while left <= right:\n        mid = left + (right - left) // 2\n        if countUntil(nums, mid) - count >= 0:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return sumUntil(nums, prefix, left) - left * (countUntil(nums, left) - count)",
            "def sumLessOrEqualTo(prefix, nums, left, right, count):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    while left <= right:\n        mid = left + (right - left) // 2\n        if countUntil(nums, mid) - count >= 0:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return sumUntil(nums, prefix, left) - left * (countUntil(nums, left) - count)",
            "def sumLessOrEqualTo(prefix, nums, left, right, count):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    while left <= right:\n        mid = left + (right - left) // 2\n        if countUntil(nums, mid) - count >= 0:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return sumUntil(nums, prefix, left) - left * (countUntil(nums, left) - count)"
        ]
    },
    {
        "func_name": "rangeSum",
        "original": "def rangeSum(self, nums, n, left, right):\n    \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :type left: int\n        :type right: int\n        :rtype: int\n        \"\"\"\n\n    def countUntil(nums, target):\n        (result, curr, left) = (0, 0, 0)\n        for right in xrange(len(nums)):\n            curr += nums[right]\n            while curr > target:\n                curr -= nums[left]\n                left += 1\n            result += right - left + 1\n        return result\n\n    def sumUntil(nums, prefix, target):\n        (result, curr, total, left) = (0, 0, 0, 0)\n        for right in xrange(len(nums)):\n            curr += nums[right]\n            total += nums[right] * (right - left + 1)\n            while curr > target:\n                curr -= nums[left]\n                total -= prefix[right + 1] - prefix[left - 1 + 1]\n                left += 1\n            result += total\n        return result\n\n    def sumLessOrEqualTo(prefix, nums, left, right, count):\n        while left <= right:\n            mid = left + (right - left) // 2\n            if countUntil(nums, mid) - count >= 0:\n                right = mid - 1\n            else:\n                left = mid + 1\n        return sumUntil(nums, prefix, left) - left * (countUntil(nums, left) - count)\n    MOD = 10 ** 9 + 7\n    prefix = [0] * (len(nums) + 1)\n    for i in xrange(len(nums)):\n        prefix[i + 1] = prefix[i] + nums[i]\n    (m, M) = (min(nums), sum(nums))\n    return (sumLessOrEqualTo(prefix, nums, m, M, right) - sumLessOrEqualTo(prefix, nums, m, M, left - 1)) % MOD",
        "mutated": [
            "def rangeSum(self, nums, n, left, right):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :type n: int\\n        :type left: int\\n        :type right: int\\n        :rtype: int\\n        '\n\n    def countUntil(nums, target):\n        (result, curr, left) = (0, 0, 0)\n        for right in xrange(len(nums)):\n            curr += nums[right]\n            while curr > target:\n                curr -= nums[left]\n                left += 1\n            result += right - left + 1\n        return result\n\n    def sumUntil(nums, prefix, target):\n        (result, curr, total, left) = (0, 0, 0, 0)\n        for right in xrange(len(nums)):\n            curr += nums[right]\n            total += nums[right] * (right - left + 1)\n            while curr > target:\n                curr -= nums[left]\n                total -= prefix[right + 1] - prefix[left - 1 + 1]\n                left += 1\n            result += total\n        return result\n\n    def sumLessOrEqualTo(prefix, nums, left, right, count):\n        while left <= right:\n            mid = left + (right - left) // 2\n            if countUntil(nums, mid) - count >= 0:\n                right = mid - 1\n            else:\n                left = mid + 1\n        return sumUntil(nums, prefix, left) - left * (countUntil(nums, left) - count)\n    MOD = 10 ** 9 + 7\n    prefix = [0] * (len(nums) + 1)\n    for i in xrange(len(nums)):\n        prefix[i + 1] = prefix[i] + nums[i]\n    (m, M) = (min(nums), sum(nums))\n    return (sumLessOrEqualTo(prefix, nums, m, M, right) - sumLessOrEqualTo(prefix, nums, m, M, left - 1)) % MOD",
            "def rangeSum(self, nums, n, left, right):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :type n: int\\n        :type left: int\\n        :type right: int\\n        :rtype: int\\n        '\n\n    def countUntil(nums, target):\n        (result, curr, left) = (0, 0, 0)\n        for right in xrange(len(nums)):\n            curr += nums[right]\n            while curr > target:\n                curr -= nums[left]\n                left += 1\n            result += right - left + 1\n        return result\n\n    def sumUntil(nums, prefix, target):\n        (result, curr, total, left) = (0, 0, 0, 0)\n        for right in xrange(len(nums)):\n            curr += nums[right]\n            total += nums[right] * (right - left + 1)\n            while curr > target:\n                curr -= nums[left]\n                total -= prefix[right + 1] - prefix[left - 1 + 1]\n                left += 1\n            result += total\n        return result\n\n    def sumLessOrEqualTo(prefix, nums, left, right, count):\n        while left <= right:\n            mid = left + (right - left) // 2\n            if countUntil(nums, mid) - count >= 0:\n                right = mid - 1\n            else:\n                left = mid + 1\n        return sumUntil(nums, prefix, left) - left * (countUntil(nums, left) - count)\n    MOD = 10 ** 9 + 7\n    prefix = [0] * (len(nums) + 1)\n    for i in xrange(len(nums)):\n        prefix[i + 1] = prefix[i] + nums[i]\n    (m, M) = (min(nums), sum(nums))\n    return (sumLessOrEqualTo(prefix, nums, m, M, right) - sumLessOrEqualTo(prefix, nums, m, M, left - 1)) % MOD",
            "def rangeSum(self, nums, n, left, right):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :type n: int\\n        :type left: int\\n        :type right: int\\n        :rtype: int\\n        '\n\n    def countUntil(nums, target):\n        (result, curr, left) = (0, 0, 0)\n        for right in xrange(len(nums)):\n            curr += nums[right]\n            while curr > target:\n                curr -= nums[left]\n                left += 1\n            result += right - left + 1\n        return result\n\n    def sumUntil(nums, prefix, target):\n        (result, curr, total, left) = (0, 0, 0, 0)\n        for right in xrange(len(nums)):\n            curr += nums[right]\n            total += nums[right] * (right - left + 1)\n            while curr > target:\n                curr -= nums[left]\n                total -= prefix[right + 1] - prefix[left - 1 + 1]\n                left += 1\n            result += total\n        return result\n\n    def sumLessOrEqualTo(prefix, nums, left, right, count):\n        while left <= right:\n            mid = left + (right - left) // 2\n            if countUntil(nums, mid) - count >= 0:\n                right = mid - 1\n            else:\n                left = mid + 1\n        return sumUntil(nums, prefix, left) - left * (countUntil(nums, left) - count)\n    MOD = 10 ** 9 + 7\n    prefix = [0] * (len(nums) + 1)\n    for i in xrange(len(nums)):\n        prefix[i + 1] = prefix[i] + nums[i]\n    (m, M) = (min(nums), sum(nums))\n    return (sumLessOrEqualTo(prefix, nums, m, M, right) - sumLessOrEqualTo(prefix, nums, m, M, left - 1)) % MOD",
            "def rangeSum(self, nums, n, left, right):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :type n: int\\n        :type left: int\\n        :type right: int\\n        :rtype: int\\n        '\n\n    def countUntil(nums, target):\n        (result, curr, left) = (0, 0, 0)\n        for right in xrange(len(nums)):\n            curr += nums[right]\n            while curr > target:\n                curr -= nums[left]\n                left += 1\n            result += right - left + 1\n        return result\n\n    def sumUntil(nums, prefix, target):\n        (result, curr, total, left) = (0, 0, 0, 0)\n        for right in xrange(len(nums)):\n            curr += nums[right]\n            total += nums[right] * (right - left + 1)\n            while curr > target:\n                curr -= nums[left]\n                total -= prefix[right + 1] - prefix[left - 1 + 1]\n                left += 1\n            result += total\n        return result\n\n    def sumLessOrEqualTo(prefix, nums, left, right, count):\n        while left <= right:\n            mid = left + (right - left) // 2\n            if countUntil(nums, mid) - count >= 0:\n                right = mid - 1\n            else:\n                left = mid + 1\n        return sumUntil(nums, prefix, left) - left * (countUntil(nums, left) - count)\n    MOD = 10 ** 9 + 7\n    prefix = [0] * (len(nums) + 1)\n    for i in xrange(len(nums)):\n        prefix[i + 1] = prefix[i] + nums[i]\n    (m, M) = (min(nums), sum(nums))\n    return (sumLessOrEqualTo(prefix, nums, m, M, right) - sumLessOrEqualTo(prefix, nums, m, M, left - 1)) % MOD",
            "def rangeSum(self, nums, n, left, right):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :type n: int\\n        :type left: int\\n        :type right: int\\n        :rtype: int\\n        '\n\n    def countUntil(nums, target):\n        (result, curr, left) = (0, 0, 0)\n        for right in xrange(len(nums)):\n            curr += nums[right]\n            while curr > target:\n                curr -= nums[left]\n                left += 1\n            result += right - left + 1\n        return result\n\n    def sumUntil(nums, prefix, target):\n        (result, curr, total, left) = (0, 0, 0, 0)\n        for right in xrange(len(nums)):\n            curr += nums[right]\n            total += nums[right] * (right - left + 1)\n            while curr > target:\n                curr -= nums[left]\n                total -= prefix[right + 1] - prefix[left - 1 + 1]\n                left += 1\n            result += total\n        return result\n\n    def sumLessOrEqualTo(prefix, nums, left, right, count):\n        while left <= right:\n            mid = left + (right - left) // 2\n            if countUntil(nums, mid) - count >= 0:\n                right = mid - 1\n            else:\n                left = mid + 1\n        return sumUntil(nums, prefix, left) - left * (countUntil(nums, left) - count)\n    MOD = 10 ** 9 + 7\n    prefix = [0] * (len(nums) + 1)\n    for i in xrange(len(nums)):\n        prefix[i + 1] = prefix[i] + nums[i]\n    (m, M) = (min(nums), sum(nums))\n    return (sumLessOrEqualTo(prefix, nums, m, M, right) - sumLessOrEqualTo(prefix, nums, m, M, left - 1)) % MOD"
        ]
    },
    {
        "func_name": "rangeSum",
        "original": "def rangeSum(self, nums, n, left, right):\n    \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :type left: int\n        :type right: int\n        :rtype: int\n        \"\"\"\n    MOD = 10 ** 9 + 7\n    min_heap = []\n    for (i, num) in enumerate(nums, 1):\n        heapq.heappush(min_heap, (num, i))\n    result = 0\n    for i in xrange(1, right + 1):\n        (total, j) = heapq.heappop(min_heap)\n        if i >= left:\n            result = (result + total) % MOD\n        if j + 1 <= n:\n            heapq.heappush(min_heap, (total + nums[j], j + 1))\n    return result",
        "mutated": [
            "def rangeSum(self, nums, n, left, right):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :type n: int\\n        :type left: int\\n        :type right: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    min_heap = []\n    for (i, num) in enumerate(nums, 1):\n        heapq.heappush(min_heap, (num, i))\n    result = 0\n    for i in xrange(1, right + 1):\n        (total, j) = heapq.heappop(min_heap)\n        if i >= left:\n            result = (result + total) % MOD\n        if j + 1 <= n:\n            heapq.heappush(min_heap, (total + nums[j], j + 1))\n    return result",
            "def rangeSum(self, nums, n, left, right):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :type n: int\\n        :type left: int\\n        :type right: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    min_heap = []\n    for (i, num) in enumerate(nums, 1):\n        heapq.heappush(min_heap, (num, i))\n    result = 0\n    for i in xrange(1, right + 1):\n        (total, j) = heapq.heappop(min_heap)\n        if i >= left:\n            result = (result + total) % MOD\n        if j + 1 <= n:\n            heapq.heappush(min_heap, (total + nums[j], j + 1))\n    return result",
            "def rangeSum(self, nums, n, left, right):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :type n: int\\n        :type left: int\\n        :type right: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    min_heap = []\n    for (i, num) in enumerate(nums, 1):\n        heapq.heappush(min_heap, (num, i))\n    result = 0\n    for i in xrange(1, right + 1):\n        (total, j) = heapq.heappop(min_heap)\n        if i >= left:\n            result = (result + total) % MOD\n        if j + 1 <= n:\n            heapq.heappush(min_heap, (total + nums[j], j + 1))\n    return result",
            "def rangeSum(self, nums, n, left, right):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :type n: int\\n        :type left: int\\n        :type right: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    min_heap = []\n    for (i, num) in enumerate(nums, 1):\n        heapq.heappush(min_heap, (num, i))\n    result = 0\n    for i in xrange(1, right + 1):\n        (total, j) = heapq.heappop(min_heap)\n        if i >= left:\n            result = (result + total) % MOD\n        if j + 1 <= n:\n            heapq.heappush(min_heap, (total + nums[j], j + 1))\n    return result",
            "def rangeSum(self, nums, n, left, right):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :type n: int\\n        :type left: int\\n        :type right: int\\n        :rtype: int\\n        '\n    MOD = 10 ** 9 + 7\n    min_heap = []\n    for (i, num) in enumerate(nums, 1):\n        heapq.heappush(min_heap, (num, i))\n    result = 0\n    for i in xrange(1, right + 1):\n        (total, j) = heapq.heappop(min_heap)\n        if i >= left:\n            result = (result + total) % MOD\n        if j + 1 <= n:\n            heapq.heappush(min_heap, (total + nums[j], j + 1))\n    return result"
        ]
    }
]
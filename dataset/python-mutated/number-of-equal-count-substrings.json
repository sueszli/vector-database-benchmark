[
    {
        "func_name": "equalCountSubstrings",
        "original": "def equalCountSubstrings(self, s, count):\n    \"\"\"\n        :type s: str\n        :type count: int\n        :rtype: int\n        \"\"\"\n    result = 0\n    for l in xrange(1, min(len(set(s)), len(s) // count) + 1):\n        (cnt, equal_cnt) = (collections.Counter(), 0)\n        for (i, c) in enumerate(s):\n            cnt[c] += 1\n            equal_cnt += cnt[c] == count\n            if i >= count * l:\n                equal_cnt -= cnt[s[i - count * l]] == count\n                cnt[s[i - count * l]] -= 1\n            result += equal_cnt == l\n    return result",
        "mutated": [
            "def equalCountSubstrings(self, s, count):\n    if False:\n        i = 10\n    '\\n        :type s: str\\n        :type count: int\\n        :rtype: int\\n        '\n    result = 0\n    for l in xrange(1, min(len(set(s)), len(s) // count) + 1):\n        (cnt, equal_cnt) = (collections.Counter(), 0)\n        for (i, c) in enumerate(s):\n            cnt[c] += 1\n            equal_cnt += cnt[c] == count\n            if i >= count * l:\n                equal_cnt -= cnt[s[i - count * l]] == count\n                cnt[s[i - count * l]] -= 1\n            result += equal_cnt == l\n    return result",
            "def equalCountSubstrings(self, s, count):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type s: str\\n        :type count: int\\n        :rtype: int\\n        '\n    result = 0\n    for l in xrange(1, min(len(set(s)), len(s) // count) + 1):\n        (cnt, equal_cnt) = (collections.Counter(), 0)\n        for (i, c) in enumerate(s):\n            cnt[c] += 1\n            equal_cnt += cnt[c] == count\n            if i >= count * l:\n                equal_cnt -= cnt[s[i - count * l]] == count\n                cnt[s[i - count * l]] -= 1\n            result += equal_cnt == l\n    return result",
            "def equalCountSubstrings(self, s, count):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type s: str\\n        :type count: int\\n        :rtype: int\\n        '\n    result = 0\n    for l in xrange(1, min(len(set(s)), len(s) // count) + 1):\n        (cnt, equal_cnt) = (collections.Counter(), 0)\n        for (i, c) in enumerate(s):\n            cnt[c] += 1\n            equal_cnt += cnt[c] == count\n            if i >= count * l:\n                equal_cnt -= cnt[s[i - count * l]] == count\n                cnt[s[i - count * l]] -= 1\n            result += equal_cnt == l\n    return result",
            "def equalCountSubstrings(self, s, count):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type s: str\\n        :type count: int\\n        :rtype: int\\n        '\n    result = 0\n    for l in xrange(1, min(len(set(s)), len(s) // count) + 1):\n        (cnt, equal_cnt) = (collections.Counter(), 0)\n        for (i, c) in enumerate(s):\n            cnt[c] += 1\n            equal_cnt += cnt[c] == count\n            if i >= count * l:\n                equal_cnt -= cnt[s[i - count * l]] == count\n                cnt[s[i - count * l]] -= 1\n            result += equal_cnt == l\n    return result",
            "def equalCountSubstrings(self, s, count):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type s: str\\n        :type count: int\\n        :rtype: int\\n        '\n    result = 0\n    for l in xrange(1, min(len(set(s)), len(s) // count) + 1):\n        (cnt, equal_cnt) = (collections.Counter(), 0)\n        for (i, c) in enumerate(s):\n            cnt[c] += 1\n            equal_cnt += cnt[c] == count\n            if i >= count * l:\n                equal_cnt -= cnt[s[i - count * l]] == count\n                cnt[s[i - count * l]] -= 1\n            result += equal_cnt == l\n    return result"
        ]
    }
]
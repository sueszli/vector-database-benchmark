[
    {
        "func_name": "is_pitagoric_triple",
        "original": "def is_pitagoric_triple(triple):\n    return triple[0] ** 2 + triple[1] ** 2 == triple[2] ** 2",
        "mutated": [
            "def is_pitagoric_triple(triple):\n    if False:\n        i = 10\n    return triple[0] ** 2 + triple[1] ** 2 == triple[2] ** 2",
            "def is_pitagoric_triple(triple):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return triple[0] ** 2 + triple[1] ** 2 == triple[2] ** 2",
            "def is_pitagoric_triple(triple):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return triple[0] ** 2 + triple[1] ** 2 == triple[2] ** 2",
            "def is_pitagoric_triple(triple):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return triple[0] ** 2 + triple[1] ** 2 == triple[2] ** 2",
            "def is_pitagoric_triple(triple):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return triple[0] ** 2 + triple[1] ** 2 == triple[2] ** 2"
        ]
    },
    {
        "func_name": "calculate_pitagoric_triple",
        "original": "def calculate_pitagoric_triple(max):\n    triples = []\n    for i in range(1, max + 1):\n        for j in range(i + 1, max + 1):\n            k = int((i ** 2 + j ** 2) ** 0.5)\n            if k > max:\n                break\n            t = [i, j, k]\n            t = sorted(t)\n            if is_pitagoric_triple(t) and t not in triples:\n                triples.append(t)\n    return triples",
        "mutated": [
            "def calculate_pitagoric_triple(max):\n    if False:\n        i = 10\n    triples = []\n    for i in range(1, max + 1):\n        for j in range(i + 1, max + 1):\n            k = int((i ** 2 + j ** 2) ** 0.5)\n            if k > max:\n                break\n            t = [i, j, k]\n            t = sorted(t)\n            if is_pitagoric_triple(t) and t not in triples:\n                triples.append(t)\n    return triples",
            "def calculate_pitagoric_triple(max):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    triples = []\n    for i in range(1, max + 1):\n        for j in range(i + 1, max + 1):\n            k = int((i ** 2 + j ** 2) ** 0.5)\n            if k > max:\n                break\n            t = [i, j, k]\n            t = sorted(t)\n            if is_pitagoric_triple(t) and t not in triples:\n                triples.append(t)\n    return triples",
            "def calculate_pitagoric_triple(max):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    triples = []\n    for i in range(1, max + 1):\n        for j in range(i + 1, max + 1):\n            k = int((i ** 2 + j ** 2) ** 0.5)\n            if k > max:\n                break\n            t = [i, j, k]\n            t = sorted(t)\n            if is_pitagoric_triple(t) and t not in triples:\n                triples.append(t)\n    return triples",
            "def calculate_pitagoric_triple(max):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    triples = []\n    for i in range(1, max + 1):\n        for j in range(i + 1, max + 1):\n            k = int((i ** 2 + j ** 2) ** 0.5)\n            if k > max:\n                break\n            t = [i, j, k]\n            t = sorted(t)\n            if is_pitagoric_triple(t) and t not in triples:\n                triples.append(t)\n    return triples",
            "def calculate_pitagoric_triple(max):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    triples = []\n    for i in range(1, max + 1):\n        for j in range(i + 1, max + 1):\n            k = int((i ** 2 + j ** 2) ** 0.5)\n            if k > max:\n                break\n            t = [i, j, k]\n            t = sorted(t)\n            if is_pitagoric_triple(t) and t not in triples:\n                triples.append(t)\n    return triples"
        ]
    }
]
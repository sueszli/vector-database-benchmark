[
    {
        "func_name": "__init__",
        "original": "def __init__(self, in_channels, init_cfg=dict(type='Normal', layer='Conv2d', std=0.01), num_convs=1, **kwargs):\n    self.num_convs = num_convs\n    super(RPNNHead, self).__init__(1, in_channels, init_cfg=init_cfg, **kwargs)",
        "mutated": [
            "def __init__(self, in_channels, init_cfg=dict(type='Normal', layer='Conv2d', std=0.01), num_convs=1, **kwargs):\n    if False:\n        i = 10\n    self.num_convs = num_convs\n    super(RPNNHead, self).__init__(1, in_channels, init_cfg=init_cfg, **kwargs)",
            "def __init__(self, in_channels, init_cfg=dict(type='Normal', layer='Conv2d', std=0.01), num_convs=1, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.num_convs = num_convs\n    super(RPNNHead, self).__init__(1, in_channels, init_cfg=init_cfg, **kwargs)",
            "def __init__(self, in_channels, init_cfg=dict(type='Normal', layer='Conv2d', std=0.01), num_convs=1, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.num_convs = num_convs\n    super(RPNNHead, self).__init__(1, in_channels, init_cfg=init_cfg, **kwargs)",
            "def __init__(self, in_channels, init_cfg=dict(type='Normal', layer='Conv2d', std=0.01), num_convs=1, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.num_convs = num_convs\n    super(RPNNHead, self).__init__(1, in_channels, init_cfg=init_cfg, **kwargs)",
            "def __init__(self, in_channels, init_cfg=dict(type='Normal', layer='Conv2d', std=0.01), num_convs=1, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.num_convs = num_convs\n    super(RPNNHead, self).__init__(1, in_channels, init_cfg=init_cfg, **kwargs)"
        ]
    },
    {
        "func_name": "_init_layers",
        "original": "def _init_layers(self):\n    \"\"\"Initialize layers of the head.\"\"\"\n    if self.num_convs > 1:\n        rpn_convs = []\n        for i in range(self.num_convs):\n            if i == 0:\n                in_channels = self.in_channels\n            else:\n                in_channels = self.feat_channels\n            rpn_convs.append(ConvModule_Norm(in_channels, self.feat_channels, 3, padding=1, norm_cfg=self.norm_cfg, inplace=False))\n        self.rpn_conv = nn.Sequential(*rpn_convs)\n    else:\n        self.rpn_conv = nn.Conv2d(self.in_channels, self.feat_channels, 3, padding=1)\n    self.rpn_cls = nn.Conv2d(self.feat_channels, self.num_base_priors * self.cls_out_channels, 1)\n    self.rpn_reg = nn.Conv2d(self.feat_channels, self.num_base_priors * 4, 1)",
        "mutated": [
            "def _init_layers(self):\n    if False:\n        i = 10\n    'Initialize layers of the head.'\n    if self.num_convs > 1:\n        rpn_convs = []\n        for i in range(self.num_convs):\n            if i == 0:\n                in_channels = self.in_channels\n            else:\n                in_channels = self.feat_channels\n            rpn_convs.append(ConvModule_Norm(in_channels, self.feat_channels, 3, padding=1, norm_cfg=self.norm_cfg, inplace=False))\n        self.rpn_conv = nn.Sequential(*rpn_convs)\n    else:\n        self.rpn_conv = nn.Conv2d(self.in_channels, self.feat_channels, 3, padding=1)\n    self.rpn_cls = nn.Conv2d(self.feat_channels, self.num_base_priors * self.cls_out_channels, 1)\n    self.rpn_reg = nn.Conv2d(self.feat_channels, self.num_base_priors * 4, 1)",
            "def _init_layers(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Initialize layers of the head.'\n    if self.num_convs > 1:\n        rpn_convs = []\n        for i in range(self.num_convs):\n            if i == 0:\n                in_channels = self.in_channels\n            else:\n                in_channels = self.feat_channels\n            rpn_convs.append(ConvModule_Norm(in_channels, self.feat_channels, 3, padding=1, norm_cfg=self.norm_cfg, inplace=False))\n        self.rpn_conv = nn.Sequential(*rpn_convs)\n    else:\n        self.rpn_conv = nn.Conv2d(self.in_channels, self.feat_channels, 3, padding=1)\n    self.rpn_cls = nn.Conv2d(self.feat_channels, self.num_base_priors * self.cls_out_channels, 1)\n    self.rpn_reg = nn.Conv2d(self.feat_channels, self.num_base_priors * 4, 1)",
            "def _init_layers(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Initialize layers of the head.'\n    if self.num_convs > 1:\n        rpn_convs = []\n        for i in range(self.num_convs):\n            if i == 0:\n                in_channels = self.in_channels\n            else:\n                in_channels = self.feat_channels\n            rpn_convs.append(ConvModule_Norm(in_channels, self.feat_channels, 3, padding=1, norm_cfg=self.norm_cfg, inplace=False))\n        self.rpn_conv = nn.Sequential(*rpn_convs)\n    else:\n        self.rpn_conv = nn.Conv2d(self.in_channels, self.feat_channels, 3, padding=1)\n    self.rpn_cls = nn.Conv2d(self.feat_channels, self.num_base_priors * self.cls_out_channels, 1)\n    self.rpn_reg = nn.Conv2d(self.feat_channels, self.num_base_priors * 4, 1)",
            "def _init_layers(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Initialize layers of the head.'\n    if self.num_convs > 1:\n        rpn_convs = []\n        for i in range(self.num_convs):\n            if i == 0:\n                in_channels = self.in_channels\n            else:\n                in_channels = self.feat_channels\n            rpn_convs.append(ConvModule_Norm(in_channels, self.feat_channels, 3, padding=1, norm_cfg=self.norm_cfg, inplace=False))\n        self.rpn_conv = nn.Sequential(*rpn_convs)\n    else:\n        self.rpn_conv = nn.Conv2d(self.in_channels, self.feat_channels, 3, padding=1)\n    self.rpn_cls = nn.Conv2d(self.feat_channels, self.num_base_priors * self.cls_out_channels, 1)\n    self.rpn_reg = nn.Conv2d(self.feat_channels, self.num_base_priors * 4, 1)",
            "def _init_layers(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Initialize layers of the head.'\n    if self.num_convs > 1:\n        rpn_convs = []\n        for i in range(self.num_convs):\n            if i == 0:\n                in_channels = self.in_channels\n            else:\n                in_channels = self.feat_channels\n            rpn_convs.append(ConvModule_Norm(in_channels, self.feat_channels, 3, padding=1, norm_cfg=self.norm_cfg, inplace=False))\n        self.rpn_conv = nn.Sequential(*rpn_convs)\n    else:\n        self.rpn_conv = nn.Conv2d(self.in_channels, self.feat_channels, 3, padding=1)\n    self.rpn_cls = nn.Conv2d(self.feat_channels, self.num_base_priors * self.cls_out_channels, 1)\n    self.rpn_reg = nn.Conv2d(self.feat_channels, self.num_base_priors * 4, 1)"
        ]
    },
    {
        "func_name": "forward_single",
        "original": "def forward_single(self, x):\n    \"\"\"Forward feature map of a single scale level.\"\"\"\n    x = self.rpn_conv(x)\n    x = F.relu(x, inplace=True)\n    rpn_cls_score = self.rpn_cls(x)\n    rpn_bbox_pred = self.rpn_reg(x)\n    return (rpn_cls_score, rpn_bbox_pred)",
        "mutated": [
            "def forward_single(self, x):\n    if False:\n        i = 10\n    'Forward feature map of a single scale level.'\n    x = self.rpn_conv(x)\n    x = F.relu(x, inplace=True)\n    rpn_cls_score = self.rpn_cls(x)\n    rpn_bbox_pred = self.rpn_reg(x)\n    return (rpn_cls_score, rpn_bbox_pred)",
            "def forward_single(self, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Forward feature map of a single scale level.'\n    x = self.rpn_conv(x)\n    x = F.relu(x, inplace=True)\n    rpn_cls_score = self.rpn_cls(x)\n    rpn_bbox_pred = self.rpn_reg(x)\n    return (rpn_cls_score, rpn_bbox_pred)",
            "def forward_single(self, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Forward feature map of a single scale level.'\n    x = self.rpn_conv(x)\n    x = F.relu(x, inplace=True)\n    rpn_cls_score = self.rpn_cls(x)\n    rpn_bbox_pred = self.rpn_reg(x)\n    return (rpn_cls_score, rpn_bbox_pred)",
            "def forward_single(self, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Forward feature map of a single scale level.'\n    x = self.rpn_conv(x)\n    x = F.relu(x, inplace=True)\n    rpn_cls_score = self.rpn_cls(x)\n    rpn_bbox_pred = self.rpn_reg(x)\n    return (rpn_cls_score, rpn_bbox_pred)",
            "def forward_single(self, x):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Forward feature map of a single scale level.'\n    x = self.rpn_conv(x)\n    x = F.relu(x, inplace=True)\n    rpn_cls_score = self.rpn_cls(x)\n    rpn_bbox_pred = self.rpn_reg(x)\n    return (rpn_cls_score, rpn_bbox_pred)"
        ]
    },
    {
        "func_name": "loss",
        "original": "def loss(self, cls_scores, bbox_preds, gt_bboxes, img_metas, gt_bboxes_ignore=None):\n    \"\"\"Compute losses of the head.\n\n        Args:\n            cls_scores (list[Tensor]): Box scores for each scale level\n                Has shape (N, num_anchors * num_classes, H, W)\n            bbox_preds (list[Tensor]): Box energies / deltas for each scale\n                level with shape (N, num_anchors * 4, H, W)\n            gt_bboxes (list[Tensor]): Ground truth bboxes for each image with\n                shape (num_gts, 4) in [tl_x, tl_y, br_x, br_y] format.\n            img_metas (list[dict]): Meta information of each image, e.g.,\n                image size, scaling factor, etc.\n            gt_bboxes_ignore (None | list[Tensor]): specify which bounding\n                boxes can be ignored when computing the loss.\n\n        Returns:\n            dict[str, Tensor]: A dictionary of loss components.\n        \"\"\"\n    losses = super(RPNNHead, self).loss(cls_scores, bbox_preds, gt_bboxes, None, img_metas, gt_bboxes_ignore=gt_bboxes_ignore)\n    return dict(loss_rpn_cls=losses['loss_cls'], loss_rpn_bbox=losses['loss_bbox'])",
        "mutated": [
            "def loss(self, cls_scores, bbox_preds, gt_bboxes, img_metas, gt_bboxes_ignore=None):\n    if False:\n        i = 10\n    'Compute losses of the head.\\n\\n        Args:\\n            cls_scores (list[Tensor]): Box scores for each scale level\\n                Has shape (N, num_anchors * num_classes, H, W)\\n            bbox_preds (list[Tensor]): Box energies / deltas for each scale\\n                level with shape (N, num_anchors * 4, H, W)\\n            gt_bboxes (list[Tensor]): Ground truth bboxes for each image with\\n                shape (num_gts, 4) in [tl_x, tl_y, br_x, br_y] format.\\n            img_metas (list[dict]): Meta information of each image, e.g.,\\n                image size, scaling factor, etc.\\n            gt_bboxes_ignore (None | list[Tensor]): specify which bounding\\n                boxes can be ignored when computing the loss.\\n\\n        Returns:\\n            dict[str, Tensor]: A dictionary of loss components.\\n        '\n    losses = super(RPNNHead, self).loss(cls_scores, bbox_preds, gt_bboxes, None, img_metas, gt_bboxes_ignore=gt_bboxes_ignore)\n    return dict(loss_rpn_cls=losses['loss_cls'], loss_rpn_bbox=losses['loss_bbox'])",
            "def loss(self, cls_scores, bbox_preds, gt_bboxes, img_metas, gt_bboxes_ignore=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Compute losses of the head.\\n\\n        Args:\\n            cls_scores (list[Tensor]): Box scores for each scale level\\n                Has shape (N, num_anchors * num_classes, H, W)\\n            bbox_preds (list[Tensor]): Box energies / deltas for each scale\\n                level with shape (N, num_anchors * 4, H, W)\\n            gt_bboxes (list[Tensor]): Ground truth bboxes for each image with\\n                shape (num_gts, 4) in [tl_x, tl_y, br_x, br_y] format.\\n            img_metas (list[dict]): Meta information of each image, e.g.,\\n                image size, scaling factor, etc.\\n            gt_bboxes_ignore (None | list[Tensor]): specify which bounding\\n                boxes can be ignored when computing the loss.\\n\\n        Returns:\\n            dict[str, Tensor]: A dictionary of loss components.\\n        '\n    losses = super(RPNNHead, self).loss(cls_scores, bbox_preds, gt_bboxes, None, img_metas, gt_bboxes_ignore=gt_bboxes_ignore)\n    return dict(loss_rpn_cls=losses['loss_cls'], loss_rpn_bbox=losses['loss_bbox'])",
            "def loss(self, cls_scores, bbox_preds, gt_bboxes, img_metas, gt_bboxes_ignore=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Compute losses of the head.\\n\\n        Args:\\n            cls_scores (list[Tensor]): Box scores for each scale level\\n                Has shape (N, num_anchors * num_classes, H, W)\\n            bbox_preds (list[Tensor]): Box energies / deltas for each scale\\n                level with shape (N, num_anchors * 4, H, W)\\n            gt_bboxes (list[Tensor]): Ground truth bboxes for each image with\\n                shape (num_gts, 4) in [tl_x, tl_y, br_x, br_y] format.\\n            img_metas (list[dict]): Meta information of each image, e.g.,\\n                image size, scaling factor, etc.\\n            gt_bboxes_ignore (None | list[Tensor]): specify which bounding\\n                boxes can be ignored when computing the loss.\\n\\n        Returns:\\n            dict[str, Tensor]: A dictionary of loss components.\\n        '\n    losses = super(RPNNHead, self).loss(cls_scores, bbox_preds, gt_bboxes, None, img_metas, gt_bboxes_ignore=gt_bboxes_ignore)\n    return dict(loss_rpn_cls=losses['loss_cls'], loss_rpn_bbox=losses['loss_bbox'])",
            "def loss(self, cls_scores, bbox_preds, gt_bboxes, img_metas, gt_bboxes_ignore=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Compute losses of the head.\\n\\n        Args:\\n            cls_scores (list[Tensor]): Box scores for each scale level\\n                Has shape (N, num_anchors * num_classes, H, W)\\n            bbox_preds (list[Tensor]): Box energies / deltas for each scale\\n                level with shape (N, num_anchors * 4, H, W)\\n            gt_bboxes (list[Tensor]): Ground truth bboxes for each image with\\n                shape (num_gts, 4) in [tl_x, tl_y, br_x, br_y] format.\\n            img_metas (list[dict]): Meta information of each image, e.g.,\\n                image size, scaling factor, etc.\\n            gt_bboxes_ignore (None | list[Tensor]): specify which bounding\\n                boxes can be ignored when computing the loss.\\n\\n        Returns:\\n            dict[str, Tensor]: A dictionary of loss components.\\n        '\n    losses = super(RPNNHead, self).loss(cls_scores, bbox_preds, gt_bboxes, None, img_metas, gt_bboxes_ignore=gt_bboxes_ignore)\n    return dict(loss_rpn_cls=losses['loss_cls'], loss_rpn_bbox=losses['loss_bbox'])",
            "def loss(self, cls_scores, bbox_preds, gt_bboxes, img_metas, gt_bboxes_ignore=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Compute losses of the head.\\n\\n        Args:\\n            cls_scores (list[Tensor]): Box scores for each scale level\\n                Has shape (N, num_anchors * num_classes, H, W)\\n            bbox_preds (list[Tensor]): Box energies / deltas for each scale\\n                level with shape (N, num_anchors * 4, H, W)\\n            gt_bboxes (list[Tensor]): Ground truth bboxes for each image with\\n                shape (num_gts, 4) in [tl_x, tl_y, br_x, br_y] format.\\n            img_metas (list[dict]): Meta information of each image, e.g.,\\n                image size, scaling factor, etc.\\n            gt_bboxes_ignore (None | list[Tensor]): specify which bounding\\n                boxes can be ignored when computing the loss.\\n\\n        Returns:\\n            dict[str, Tensor]: A dictionary of loss components.\\n        '\n    losses = super(RPNNHead, self).loss(cls_scores, bbox_preds, gt_bboxes, None, img_metas, gt_bboxes_ignore=gt_bboxes_ignore)\n    return dict(loss_rpn_cls=losses['loss_cls'], loss_rpn_bbox=losses['loss_bbox'])"
        ]
    },
    {
        "func_name": "_get_bboxes_single",
        "original": "def _get_bboxes_single(self, cls_score_list, bbox_pred_list, score_factor_list, mlvl_anchors, img_meta, cfg, rescale=False, with_nms=True, **kwargs):\n    \"\"\"Transform outputs of a single image into bbox predictions.\n\n        Args:\n            cls_score_list (list[Tensor]): Box scores from all scale\n                levels of a single image, each item has shape\n                (num_anchors * num_classes, H, W).\n            bbox_pred_list (list[Tensor]): Box energies / deltas from\n                all scale levels of a single image, each item has\n                shape (num_anchors * 4, H, W).\n            score_factor_list (list[Tensor]): Score factor from all scale\n                levels of a single image. RPN head does not need this value.\n            mlvl_anchors (list[Tensor]): Anchors of all scale level\n                each item has shape (num_anchors, 4).\n            img_meta (dict): Image meta info.\n            cfg (mmcv.Config): Test / postprocessing configuration,\n                if None, test_cfg would be used.\n            rescale (bool): If True, return boxes in original image space.\n                Default: False.\n            with_nms (bool): If True, do nms before return boxes.\n                Default: True.\n\n        Returns:\n            Tensor: Labeled boxes in shape (n, 5), where the first 4 columns\n                are bounding box positions (tl_x, tl_y, br_x, br_y) and the\n                5-th column is a score between 0 and 1.\n        \"\"\"\n    cfg = self.test_cfg if cfg is None else cfg\n    cfg = copy.deepcopy(cfg)\n    img_shape = img_meta['img_shape']\n    level_ids = []\n    mlvl_scores = []\n    mlvl_bbox_preds = []\n    mlvl_valid_anchors = []\n    nms_pre = cfg.get('nms_pre', -1)\n    for level_idx in range(len(cls_score_list)):\n        rpn_cls_score = cls_score_list[level_idx]\n        rpn_bbox_pred = bbox_pred_list[level_idx]\n        assert rpn_cls_score.size()[-2:] == rpn_bbox_pred.size()[-2:]\n        rpn_cls_score = rpn_cls_score.permute(1, 2, 0)\n        if self.use_sigmoid_cls:\n            rpn_cls_score = rpn_cls_score.reshape(-1)\n            scores = rpn_cls_score.sigmoid()\n        else:\n            rpn_cls_score = rpn_cls_score.reshape(-1, 2)\n            scores = rpn_cls_score.softmax(dim=1)[:, 0]\n        rpn_bbox_pred = rpn_bbox_pred.permute(1, 2, 0).reshape(-1, 4)\n        anchors = mlvl_anchors[level_idx]\n        if 0 < nms_pre < scores.shape[0]:\n            (ranked_scores, rank_inds) = scores.sort(descending=True)\n            topk_inds = rank_inds[:nms_pre]\n            scores = ranked_scores[:nms_pre]\n            rpn_bbox_pred = rpn_bbox_pred[topk_inds, :]\n            anchors = anchors[topk_inds, :]\n        mlvl_scores.append(scores)\n        mlvl_bbox_preds.append(rpn_bbox_pred)\n        mlvl_valid_anchors.append(anchors)\n        level_ids.append(scores.new_full((scores.size(0),), level_idx, dtype=torch.long))\n    return self._bbox_post_process(mlvl_scores, mlvl_bbox_preds, mlvl_valid_anchors, level_ids, cfg, img_shape)",
        "mutated": [
            "def _get_bboxes_single(self, cls_score_list, bbox_pred_list, score_factor_list, mlvl_anchors, img_meta, cfg, rescale=False, with_nms=True, **kwargs):\n    if False:\n        i = 10\n    'Transform outputs of a single image into bbox predictions.\\n\\n        Args:\\n            cls_score_list (list[Tensor]): Box scores from all scale\\n                levels of a single image, each item has shape\\n                (num_anchors * num_classes, H, W).\\n            bbox_pred_list (list[Tensor]): Box energies / deltas from\\n                all scale levels of a single image, each item has\\n                shape (num_anchors * 4, H, W).\\n            score_factor_list (list[Tensor]): Score factor from all scale\\n                levels of a single image. RPN head does not need this value.\\n            mlvl_anchors (list[Tensor]): Anchors of all scale level\\n                each item has shape (num_anchors, 4).\\n            img_meta (dict): Image meta info.\\n            cfg (mmcv.Config): Test / postprocessing configuration,\\n                if None, test_cfg would be used.\\n            rescale (bool): If True, return boxes in original image space.\\n                Default: False.\\n            with_nms (bool): If True, do nms before return boxes.\\n                Default: True.\\n\\n        Returns:\\n            Tensor: Labeled boxes in shape (n, 5), where the first 4 columns\\n                are bounding box positions (tl_x, tl_y, br_x, br_y) and the\\n                5-th column is a score between 0 and 1.\\n        '\n    cfg = self.test_cfg if cfg is None else cfg\n    cfg = copy.deepcopy(cfg)\n    img_shape = img_meta['img_shape']\n    level_ids = []\n    mlvl_scores = []\n    mlvl_bbox_preds = []\n    mlvl_valid_anchors = []\n    nms_pre = cfg.get('nms_pre', -1)\n    for level_idx in range(len(cls_score_list)):\n        rpn_cls_score = cls_score_list[level_idx]\n        rpn_bbox_pred = bbox_pred_list[level_idx]\n        assert rpn_cls_score.size()[-2:] == rpn_bbox_pred.size()[-2:]\n        rpn_cls_score = rpn_cls_score.permute(1, 2, 0)\n        if self.use_sigmoid_cls:\n            rpn_cls_score = rpn_cls_score.reshape(-1)\n            scores = rpn_cls_score.sigmoid()\n        else:\n            rpn_cls_score = rpn_cls_score.reshape(-1, 2)\n            scores = rpn_cls_score.softmax(dim=1)[:, 0]\n        rpn_bbox_pred = rpn_bbox_pred.permute(1, 2, 0).reshape(-1, 4)\n        anchors = mlvl_anchors[level_idx]\n        if 0 < nms_pre < scores.shape[0]:\n            (ranked_scores, rank_inds) = scores.sort(descending=True)\n            topk_inds = rank_inds[:nms_pre]\n            scores = ranked_scores[:nms_pre]\n            rpn_bbox_pred = rpn_bbox_pred[topk_inds, :]\n            anchors = anchors[topk_inds, :]\n        mlvl_scores.append(scores)\n        mlvl_bbox_preds.append(rpn_bbox_pred)\n        mlvl_valid_anchors.append(anchors)\n        level_ids.append(scores.new_full((scores.size(0),), level_idx, dtype=torch.long))\n    return self._bbox_post_process(mlvl_scores, mlvl_bbox_preds, mlvl_valid_anchors, level_ids, cfg, img_shape)",
            "def _get_bboxes_single(self, cls_score_list, bbox_pred_list, score_factor_list, mlvl_anchors, img_meta, cfg, rescale=False, with_nms=True, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Transform outputs of a single image into bbox predictions.\\n\\n        Args:\\n            cls_score_list (list[Tensor]): Box scores from all scale\\n                levels of a single image, each item has shape\\n                (num_anchors * num_classes, H, W).\\n            bbox_pred_list (list[Tensor]): Box energies / deltas from\\n                all scale levels of a single image, each item has\\n                shape (num_anchors * 4, H, W).\\n            score_factor_list (list[Tensor]): Score factor from all scale\\n                levels of a single image. RPN head does not need this value.\\n            mlvl_anchors (list[Tensor]): Anchors of all scale level\\n                each item has shape (num_anchors, 4).\\n            img_meta (dict): Image meta info.\\n            cfg (mmcv.Config): Test / postprocessing configuration,\\n                if None, test_cfg would be used.\\n            rescale (bool): If True, return boxes in original image space.\\n                Default: False.\\n            with_nms (bool): If True, do nms before return boxes.\\n                Default: True.\\n\\n        Returns:\\n            Tensor: Labeled boxes in shape (n, 5), where the first 4 columns\\n                are bounding box positions (tl_x, tl_y, br_x, br_y) and the\\n                5-th column is a score between 0 and 1.\\n        '\n    cfg = self.test_cfg if cfg is None else cfg\n    cfg = copy.deepcopy(cfg)\n    img_shape = img_meta['img_shape']\n    level_ids = []\n    mlvl_scores = []\n    mlvl_bbox_preds = []\n    mlvl_valid_anchors = []\n    nms_pre = cfg.get('nms_pre', -1)\n    for level_idx in range(len(cls_score_list)):\n        rpn_cls_score = cls_score_list[level_idx]\n        rpn_bbox_pred = bbox_pred_list[level_idx]\n        assert rpn_cls_score.size()[-2:] == rpn_bbox_pred.size()[-2:]\n        rpn_cls_score = rpn_cls_score.permute(1, 2, 0)\n        if self.use_sigmoid_cls:\n            rpn_cls_score = rpn_cls_score.reshape(-1)\n            scores = rpn_cls_score.sigmoid()\n        else:\n            rpn_cls_score = rpn_cls_score.reshape(-1, 2)\n            scores = rpn_cls_score.softmax(dim=1)[:, 0]\n        rpn_bbox_pred = rpn_bbox_pred.permute(1, 2, 0).reshape(-1, 4)\n        anchors = mlvl_anchors[level_idx]\n        if 0 < nms_pre < scores.shape[0]:\n            (ranked_scores, rank_inds) = scores.sort(descending=True)\n            topk_inds = rank_inds[:nms_pre]\n            scores = ranked_scores[:nms_pre]\n            rpn_bbox_pred = rpn_bbox_pred[topk_inds, :]\n            anchors = anchors[topk_inds, :]\n        mlvl_scores.append(scores)\n        mlvl_bbox_preds.append(rpn_bbox_pred)\n        mlvl_valid_anchors.append(anchors)\n        level_ids.append(scores.new_full((scores.size(0),), level_idx, dtype=torch.long))\n    return self._bbox_post_process(mlvl_scores, mlvl_bbox_preds, mlvl_valid_anchors, level_ids, cfg, img_shape)",
            "def _get_bboxes_single(self, cls_score_list, bbox_pred_list, score_factor_list, mlvl_anchors, img_meta, cfg, rescale=False, with_nms=True, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Transform outputs of a single image into bbox predictions.\\n\\n        Args:\\n            cls_score_list (list[Tensor]): Box scores from all scale\\n                levels of a single image, each item has shape\\n                (num_anchors * num_classes, H, W).\\n            bbox_pred_list (list[Tensor]): Box energies / deltas from\\n                all scale levels of a single image, each item has\\n                shape (num_anchors * 4, H, W).\\n            score_factor_list (list[Tensor]): Score factor from all scale\\n                levels of a single image. RPN head does not need this value.\\n            mlvl_anchors (list[Tensor]): Anchors of all scale level\\n                each item has shape (num_anchors, 4).\\n            img_meta (dict): Image meta info.\\n            cfg (mmcv.Config): Test / postprocessing configuration,\\n                if None, test_cfg would be used.\\n            rescale (bool): If True, return boxes in original image space.\\n                Default: False.\\n            with_nms (bool): If True, do nms before return boxes.\\n                Default: True.\\n\\n        Returns:\\n            Tensor: Labeled boxes in shape (n, 5), where the first 4 columns\\n                are bounding box positions (tl_x, tl_y, br_x, br_y) and the\\n                5-th column is a score between 0 and 1.\\n        '\n    cfg = self.test_cfg if cfg is None else cfg\n    cfg = copy.deepcopy(cfg)\n    img_shape = img_meta['img_shape']\n    level_ids = []\n    mlvl_scores = []\n    mlvl_bbox_preds = []\n    mlvl_valid_anchors = []\n    nms_pre = cfg.get('nms_pre', -1)\n    for level_idx in range(len(cls_score_list)):\n        rpn_cls_score = cls_score_list[level_idx]\n        rpn_bbox_pred = bbox_pred_list[level_idx]\n        assert rpn_cls_score.size()[-2:] == rpn_bbox_pred.size()[-2:]\n        rpn_cls_score = rpn_cls_score.permute(1, 2, 0)\n        if self.use_sigmoid_cls:\n            rpn_cls_score = rpn_cls_score.reshape(-1)\n            scores = rpn_cls_score.sigmoid()\n        else:\n            rpn_cls_score = rpn_cls_score.reshape(-1, 2)\n            scores = rpn_cls_score.softmax(dim=1)[:, 0]\n        rpn_bbox_pred = rpn_bbox_pred.permute(1, 2, 0).reshape(-1, 4)\n        anchors = mlvl_anchors[level_idx]\n        if 0 < nms_pre < scores.shape[0]:\n            (ranked_scores, rank_inds) = scores.sort(descending=True)\n            topk_inds = rank_inds[:nms_pre]\n            scores = ranked_scores[:nms_pre]\n            rpn_bbox_pred = rpn_bbox_pred[topk_inds, :]\n            anchors = anchors[topk_inds, :]\n        mlvl_scores.append(scores)\n        mlvl_bbox_preds.append(rpn_bbox_pred)\n        mlvl_valid_anchors.append(anchors)\n        level_ids.append(scores.new_full((scores.size(0),), level_idx, dtype=torch.long))\n    return self._bbox_post_process(mlvl_scores, mlvl_bbox_preds, mlvl_valid_anchors, level_ids, cfg, img_shape)",
            "def _get_bboxes_single(self, cls_score_list, bbox_pred_list, score_factor_list, mlvl_anchors, img_meta, cfg, rescale=False, with_nms=True, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Transform outputs of a single image into bbox predictions.\\n\\n        Args:\\n            cls_score_list (list[Tensor]): Box scores from all scale\\n                levels of a single image, each item has shape\\n                (num_anchors * num_classes, H, W).\\n            bbox_pred_list (list[Tensor]): Box energies / deltas from\\n                all scale levels of a single image, each item has\\n                shape (num_anchors * 4, H, W).\\n            score_factor_list (list[Tensor]): Score factor from all scale\\n                levels of a single image. RPN head does not need this value.\\n            mlvl_anchors (list[Tensor]): Anchors of all scale level\\n                each item has shape (num_anchors, 4).\\n            img_meta (dict): Image meta info.\\n            cfg (mmcv.Config): Test / postprocessing configuration,\\n                if None, test_cfg would be used.\\n            rescale (bool): If True, return boxes in original image space.\\n                Default: False.\\n            with_nms (bool): If True, do nms before return boxes.\\n                Default: True.\\n\\n        Returns:\\n            Tensor: Labeled boxes in shape (n, 5), where the first 4 columns\\n                are bounding box positions (tl_x, tl_y, br_x, br_y) and the\\n                5-th column is a score between 0 and 1.\\n        '\n    cfg = self.test_cfg if cfg is None else cfg\n    cfg = copy.deepcopy(cfg)\n    img_shape = img_meta['img_shape']\n    level_ids = []\n    mlvl_scores = []\n    mlvl_bbox_preds = []\n    mlvl_valid_anchors = []\n    nms_pre = cfg.get('nms_pre', -1)\n    for level_idx in range(len(cls_score_list)):\n        rpn_cls_score = cls_score_list[level_idx]\n        rpn_bbox_pred = bbox_pred_list[level_idx]\n        assert rpn_cls_score.size()[-2:] == rpn_bbox_pred.size()[-2:]\n        rpn_cls_score = rpn_cls_score.permute(1, 2, 0)\n        if self.use_sigmoid_cls:\n            rpn_cls_score = rpn_cls_score.reshape(-1)\n            scores = rpn_cls_score.sigmoid()\n        else:\n            rpn_cls_score = rpn_cls_score.reshape(-1, 2)\n            scores = rpn_cls_score.softmax(dim=1)[:, 0]\n        rpn_bbox_pred = rpn_bbox_pred.permute(1, 2, 0).reshape(-1, 4)\n        anchors = mlvl_anchors[level_idx]\n        if 0 < nms_pre < scores.shape[0]:\n            (ranked_scores, rank_inds) = scores.sort(descending=True)\n            topk_inds = rank_inds[:nms_pre]\n            scores = ranked_scores[:nms_pre]\n            rpn_bbox_pred = rpn_bbox_pred[topk_inds, :]\n            anchors = anchors[topk_inds, :]\n        mlvl_scores.append(scores)\n        mlvl_bbox_preds.append(rpn_bbox_pred)\n        mlvl_valid_anchors.append(anchors)\n        level_ids.append(scores.new_full((scores.size(0),), level_idx, dtype=torch.long))\n    return self._bbox_post_process(mlvl_scores, mlvl_bbox_preds, mlvl_valid_anchors, level_ids, cfg, img_shape)",
            "def _get_bboxes_single(self, cls_score_list, bbox_pred_list, score_factor_list, mlvl_anchors, img_meta, cfg, rescale=False, with_nms=True, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Transform outputs of a single image into bbox predictions.\\n\\n        Args:\\n            cls_score_list (list[Tensor]): Box scores from all scale\\n                levels of a single image, each item has shape\\n                (num_anchors * num_classes, H, W).\\n            bbox_pred_list (list[Tensor]): Box energies / deltas from\\n                all scale levels of a single image, each item has\\n                shape (num_anchors * 4, H, W).\\n            score_factor_list (list[Tensor]): Score factor from all scale\\n                levels of a single image. RPN head does not need this value.\\n            mlvl_anchors (list[Tensor]): Anchors of all scale level\\n                each item has shape (num_anchors, 4).\\n            img_meta (dict): Image meta info.\\n            cfg (mmcv.Config): Test / postprocessing configuration,\\n                if None, test_cfg would be used.\\n            rescale (bool): If True, return boxes in original image space.\\n                Default: False.\\n            with_nms (bool): If True, do nms before return boxes.\\n                Default: True.\\n\\n        Returns:\\n            Tensor: Labeled boxes in shape (n, 5), where the first 4 columns\\n                are bounding box positions (tl_x, tl_y, br_x, br_y) and the\\n                5-th column is a score between 0 and 1.\\n        '\n    cfg = self.test_cfg if cfg is None else cfg\n    cfg = copy.deepcopy(cfg)\n    img_shape = img_meta['img_shape']\n    level_ids = []\n    mlvl_scores = []\n    mlvl_bbox_preds = []\n    mlvl_valid_anchors = []\n    nms_pre = cfg.get('nms_pre', -1)\n    for level_idx in range(len(cls_score_list)):\n        rpn_cls_score = cls_score_list[level_idx]\n        rpn_bbox_pred = bbox_pred_list[level_idx]\n        assert rpn_cls_score.size()[-2:] == rpn_bbox_pred.size()[-2:]\n        rpn_cls_score = rpn_cls_score.permute(1, 2, 0)\n        if self.use_sigmoid_cls:\n            rpn_cls_score = rpn_cls_score.reshape(-1)\n            scores = rpn_cls_score.sigmoid()\n        else:\n            rpn_cls_score = rpn_cls_score.reshape(-1, 2)\n            scores = rpn_cls_score.softmax(dim=1)[:, 0]\n        rpn_bbox_pred = rpn_bbox_pred.permute(1, 2, 0).reshape(-1, 4)\n        anchors = mlvl_anchors[level_idx]\n        if 0 < nms_pre < scores.shape[0]:\n            (ranked_scores, rank_inds) = scores.sort(descending=True)\n            topk_inds = rank_inds[:nms_pre]\n            scores = ranked_scores[:nms_pre]\n            rpn_bbox_pred = rpn_bbox_pred[topk_inds, :]\n            anchors = anchors[topk_inds, :]\n        mlvl_scores.append(scores)\n        mlvl_bbox_preds.append(rpn_bbox_pred)\n        mlvl_valid_anchors.append(anchors)\n        level_ids.append(scores.new_full((scores.size(0),), level_idx, dtype=torch.long))\n    return self._bbox_post_process(mlvl_scores, mlvl_bbox_preds, mlvl_valid_anchors, level_ids, cfg, img_shape)"
        ]
    },
    {
        "func_name": "_bbox_post_process",
        "original": "def _bbox_post_process(self, mlvl_scores, mlvl_bboxes, mlvl_valid_anchors, level_ids, cfg, img_shape, **kwargs):\n    \"\"\"bbox post-processing method.\n\n        The boxes would be rescaled to the original image scale and do\n        the nms operation. Usually with_nms is False is used for aug test.\n\n        Args:\n            mlvl_scores (list[Tensor]): Box scores from all scale\n                levels of a single image, each item has shape\n                (num_bboxes, num_class).\n            mlvl_bboxes (list[Tensor]): Decoded bboxes from all scale\n                levels of a single image, each item has shape (num_bboxes, 4).\n            mlvl_valid_anchors (list[Tensor]): Anchors of all scale level\n                each item has shape (num_bboxes, 4).\n            level_ids (list[Tensor]): Indexes from all scale levels of a\n                single image, each item has shape (num_bboxes, ).\n            cfg (mmcv.Config): Test / postprocessing configuration,\n                if None, test_cfg would be used.\n            img_shape (tuple(int)): Shape of current image.\n\n        Returns:\n            Tensor: Labeled boxes in shape (n, 5), where the first 4 columns\n                are bounding box positions (tl_x, tl_y, br_x, br_y) and the\n                5-th column is a score between 0 and 1.\n        \"\"\"\n    scores = torch.cat(mlvl_scores)\n    anchors = torch.cat(mlvl_valid_anchors)\n    rpn_bbox_pred = torch.cat(mlvl_bboxes)\n    proposals = self.bbox_coder.decode(anchors, rpn_bbox_pred, max_shape=img_shape)\n    ids = torch.cat(level_ids)\n    if cfg.min_bbox_size >= 0:\n        w = proposals[:, 2] - proposals[:, 0]\n        h = proposals[:, 3] - proposals[:, 1]\n        valid_mask = (w > cfg.min_bbox_size) & (h > cfg.min_bbox_size)\n        if not valid_mask.all():\n            proposals = proposals[valid_mask]\n            scores = scores[valid_mask]\n            ids = ids[valid_mask]\n    if proposals.numel() > 0:\n        (dets, _) = batched_nms(proposals, scores, ids, cfg.nms)\n    else:\n        return proposals.new_zeros(0, 5)\n    return dets[:cfg.max_per_img]",
        "mutated": [
            "def _bbox_post_process(self, mlvl_scores, mlvl_bboxes, mlvl_valid_anchors, level_ids, cfg, img_shape, **kwargs):\n    if False:\n        i = 10\n    'bbox post-processing method.\\n\\n        The boxes would be rescaled to the original image scale and do\\n        the nms operation. Usually with_nms is False is used for aug test.\\n\\n        Args:\\n            mlvl_scores (list[Tensor]): Box scores from all scale\\n                levels of a single image, each item has shape\\n                (num_bboxes, num_class).\\n            mlvl_bboxes (list[Tensor]): Decoded bboxes from all scale\\n                levels of a single image, each item has shape (num_bboxes, 4).\\n            mlvl_valid_anchors (list[Tensor]): Anchors of all scale level\\n                each item has shape (num_bboxes, 4).\\n            level_ids (list[Tensor]): Indexes from all scale levels of a\\n                single image, each item has shape (num_bboxes, ).\\n            cfg (mmcv.Config): Test / postprocessing configuration,\\n                if None, test_cfg would be used.\\n            img_shape (tuple(int)): Shape of current image.\\n\\n        Returns:\\n            Tensor: Labeled boxes in shape (n, 5), where the first 4 columns\\n                are bounding box positions (tl_x, tl_y, br_x, br_y) and the\\n                5-th column is a score between 0 and 1.\\n        '\n    scores = torch.cat(mlvl_scores)\n    anchors = torch.cat(mlvl_valid_anchors)\n    rpn_bbox_pred = torch.cat(mlvl_bboxes)\n    proposals = self.bbox_coder.decode(anchors, rpn_bbox_pred, max_shape=img_shape)\n    ids = torch.cat(level_ids)\n    if cfg.min_bbox_size >= 0:\n        w = proposals[:, 2] - proposals[:, 0]\n        h = proposals[:, 3] - proposals[:, 1]\n        valid_mask = (w > cfg.min_bbox_size) & (h > cfg.min_bbox_size)\n        if not valid_mask.all():\n            proposals = proposals[valid_mask]\n            scores = scores[valid_mask]\n            ids = ids[valid_mask]\n    if proposals.numel() > 0:\n        (dets, _) = batched_nms(proposals, scores, ids, cfg.nms)\n    else:\n        return proposals.new_zeros(0, 5)\n    return dets[:cfg.max_per_img]",
            "def _bbox_post_process(self, mlvl_scores, mlvl_bboxes, mlvl_valid_anchors, level_ids, cfg, img_shape, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'bbox post-processing method.\\n\\n        The boxes would be rescaled to the original image scale and do\\n        the nms operation. Usually with_nms is False is used for aug test.\\n\\n        Args:\\n            mlvl_scores (list[Tensor]): Box scores from all scale\\n                levels of a single image, each item has shape\\n                (num_bboxes, num_class).\\n            mlvl_bboxes (list[Tensor]): Decoded bboxes from all scale\\n                levels of a single image, each item has shape (num_bboxes, 4).\\n            mlvl_valid_anchors (list[Tensor]): Anchors of all scale level\\n                each item has shape (num_bboxes, 4).\\n            level_ids (list[Tensor]): Indexes from all scale levels of a\\n                single image, each item has shape (num_bboxes, ).\\n            cfg (mmcv.Config): Test / postprocessing configuration,\\n                if None, test_cfg would be used.\\n            img_shape (tuple(int)): Shape of current image.\\n\\n        Returns:\\n            Tensor: Labeled boxes in shape (n, 5), where the first 4 columns\\n                are bounding box positions (tl_x, tl_y, br_x, br_y) and the\\n                5-th column is a score between 0 and 1.\\n        '\n    scores = torch.cat(mlvl_scores)\n    anchors = torch.cat(mlvl_valid_anchors)\n    rpn_bbox_pred = torch.cat(mlvl_bboxes)\n    proposals = self.bbox_coder.decode(anchors, rpn_bbox_pred, max_shape=img_shape)\n    ids = torch.cat(level_ids)\n    if cfg.min_bbox_size >= 0:\n        w = proposals[:, 2] - proposals[:, 0]\n        h = proposals[:, 3] - proposals[:, 1]\n        valid_mask = (w > cfg.min_bbox_size) & (h > cfg.min_bbox_size)\n        if not valid_mask.all():\n            proposals = proposals[valid_mask]\n            scores = scores[valid_mask]\n            ids = ids[valid_mask]\n    if proposals.numel() > 0:\n        (dets, _) = batched_nms(proposals, scores, ids, cfg.nms)\n    else:\n        return proposals.new_zeros(0, 5)\n    return dets[:cfg.max_per_img]",
            "def _bbox_post_process(self, mlvl_scores, mlvl_bboxes, mlvl_valid_anchors, level_ids, cfg, img_shape, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'bbox post-processing method.\\n\\n        The boxes would be rescaled to the original image scale and do\\n        the nms operation. Usually with_nms is False is used for aug test.\\n\\n        Args:\\n            mlvl_scores (list[Tensor]): Box scores from all scale\\n                levels of a single image, each item has shape\\n                (num_bboxes, num_class).\\n            mlvl_bboxes (list[Tensor]): Decoded bboxes from all scale\\n                levels of a single image, each item has shape (num_bboxes, 4).\\n            mlvl_valid_anchors (list[Tensor]): Anchors of all scale level\\n                each item has shape (num_bboxes, 4).\\n            level_ids (list[Tensor]): Indexes from all scale levels of a\\n                single image, each item has shape (num_bboxes, ).\\n            cfg (mmcv.Config): Test / postprocessing configuration,\\n                if None, test_cfg would be used.\\n            img_shape (tuple(int)): Shape of current image.\\n\\n        Returns:\\n            Tensor: Labeled boxes in shape (n, 5), where the first 4 columns\\n                are bounding box positions (tl_x, tl_y, br_x, br_y) and the\\n                5-th column is a score between 0 and 1.\\n        '\n    scores = torch.cat(mlvl_scores)\n    anchors = torch.cat(mlvl_valid_anchors)\n    rpn_bbox_pred = torch.cat(mlvl_bboxes)\n    proposals = self.bbox_coder.decode(anchors, rpn_bbox_pred, max_shape=img_shape)\n    ids = torch.cat(level_ids)\n    if cfg.min_bbox_size >= 0:\n        w = proposals[:, 2] - proposals[:, 0]\n        h = proposals[:, 3] - proposals[:, 1]\n        valid_mask = (w > cfg.min_bbox_size) & (h > cfg.min_bbox_size)\n        if not valid_mask.all():\n            proposals = proposals[valid_mask]\n            scores = scores[valid_mask]\n            ids = ids[valid_mask]\n    if proposals.numel() > 0:\n        (dets, _) = batched_nms(proposals, scores, ids, cfg.nms)\n    else:\n        return proposals.new_zeros(0, 5)\n    return dets[:cfg.max_per_img]",
            "def _bbox_post_process(self, mlvl_scores, mlvl_bboxes, mlvl_valid_anchors, level_ids, cfg, img_shape, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'bbox post-processing method.\\n\\n        The boxes would be rescaled to the original image scale and do\\n        the nms operation. Usually with_nms is False is used for aug test.\\n\\n        Args:\\n            mlvl_scores (list[Tensor]): Box scores from all scale\\n                levels of a single image, each item has shape\\n                (num_bboxes, num_class).\\n            mlvl_bboxes (list[Tensor]): Decoded bboxes from all scale\\n                levels of a single image, each item has shape (num_bboxes, 4).\\n            mlvl_valid_anchors (list[Tensor]): Anchors of all scale level\\n                each item has shape (num_bboxes, 4).\\n            level_ids (list[Tensor]): Indexes from all scale levels of a\\n                single image, each item has shape (num_bboxes, ).\\n            cfg (mmcv.Config): Test / postprocessing configuration,\\n                if None, test_cfg would be used.\\n            img_shape (tuple(int)): Shape of current image.\\n\\n        Returns:\\n            Tensor: Labeled boxes in shape (n, 5), where the first 4 columns\\n                are bounding box positions (tl_x, tl_y, br_x, br_y) and the\\n                5-th column is a score between 0 and 1.\\n        '\n    scores = torch.cat(mlvl_scores)\n    anchors = torch.cat(mlvl_valid_anchors)\n    rpn_bbox_pred = torch.cat(mlvl_bboxes)\n    proposals = self.bbox_coder.decode(anchors, rpn_bbox_pred, max_shape=img_shape)\n    ids = torch.cat(level_ids)\n    if cfg.min_bbox_size >= 0:\n        w = proposals[:, 2] - proposals[:, 0]\n        h = proposals[:, 3] - proposals[:, 1]\n        valid_mask = (w > cfg.min_bbox_size) & (h > cfg.min_bbox_size)\n        if not valid_mask.all():\n            proposals = proposals[valid_mask]\n            scores = scores[valid_mask]\n            ids = ids[valid_mask]\n    if proposals.numel() > 0:\n        (dets, _) = batched_nms(proposals, scores, ids, cfg.nms)\n    else:\n        return proposals.new_zeros(0, 5)\n    return dets[:cfg.max_per_img]",
            "def _bbox_post_process(self, mlvl_scores, mlvl_bboxes, mlvl_valid_anchors, level_ids, cfg, img_shape, **kwargs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'bbox post-processing method.\\n\\n        The boxes would be rescaled to the original image scale and do\\n        the nms operation. Usually with_nms is False is used for aug test.\\n\\n        Args:\\n            mlvl_scores (list[Tensor]): Box scores from all scale\\n                levels of a single image, each item has shape\\n                (num_bboxes, num_class).\\n            mlvl_bboxes (list[Tensor]): Decoded bboxes from all scale\\n                levels of a single image, each item has shape (num_bboxes, 4).\\n            mlvl_valid_anchors (list[Tensor]): Anchors of all scale level\\n                each item has shape (num_bboxes, 4).\\n            level_ids (list[Tensor]): Indexes from all scale levels of a\\n                single image, each item has shape (num_bboxes, ).\\n            cfg (mmcv.Config): Test / postprocessing configuration,\\n                if None, test_cfg would be used.\\n            img_shape (tuple(int)): Shape of current image.\\n\\n        Returns:\\n            Tensor: Labeled boxes in shape (n, 5), where the first 4 columns\\n                are bounding box positions (tl_x, tl_y, br_x, br_y) and the\\n                5-th column is a score between 0 and 1.\\n        '\n    scores = torch.cat(mlvl_scores)\n    anchors = torch.cat(mlvl_valid_anchors)\n    rpn_bbox_pred = torch.cat(mlvl_bboxes)\n    proposals = self.bbox_coder.decode(anchors, rpn_bbox_pred, max_shape=img_shape)\n    ids = torch.cat(level_ids)\n    if cfg.min_bbox_size >= 0:\n        w = proposals[:, 2] - proposals[:, 0]\n        h = proposals[:, 3] - proposals[:, 1]\n        valid_mask = (w > cfg.min_bbox_size) & (h > cfg.min_bbox_size)\n        if not valid_mask.all():\n            proposals = proposals[valid_mask]\n            scores = scores[valid_mask]\n            ids = ids[valid_mask]\n    if proposals.numel() > 0:\n        (dets, _) = batched_nms(proposals, scores, ids, cfg.nms)\n    else:\n        return proposals.new_zeros(0, 5)\n    return dets[:cfg.max_per_img]"
        ]
    },
    {
        "func_name": "onnx_export",
        "original": "def onnx_export(self, x, img_metas):\n    \"\"\"Test without augmentation.\n\n        Args:\n            x (tuple[Tensor]): Features from the upstream network, each is\n                a 4D-tensor.\n            img_metas (list[dict]): Meta info of each image.\n        Returns:\n            Tensor: dets of shape [N, num_det, 5].\n        \"\"\"\n    (cls_scores, bbox_preds) = self(x)\n    assert len(cls_scores) == len(bbox_preds)\n    (batch_bboxes, batch_scores) = super(RPNNHead, self).onnx_export(cls_scores, bbox_preds, img_metas=img_metas, with_nms=False)\n    from mmdet.core.export import add_dummy_nms_for_onnx\n    cfg = copy.deepcopy(self.test_cfg)\n    score_threshold = cfg.nms.get('score_thr', 0.0)\n    nms_pre = cfg.get('deploy_nms_pre', -1)\n    (dets, _) = add_dummy_nms_for_onnx(batch_bboxes, batch_scores, cfg.max_per_img, cfg.nms.iou_threshold, score_threshold, nms_pre, cfg.max_per_img)\n    return dets",
        "mutated": [
            "def onnx_export(self, x, img_metas):\n    if False:\n        i = 10\n    'Test without augmentation.\\n\\n        Args:\\n            x (tuple[Tensor]): Features from the upstream network, each is\\n                a 4D-tensor.\\n            img_metas (list[dict]): Meta info of each image.\\n        Returns:\\n            Tensor: dets of shape [N, num_det, 5].\\n        '\n    (cls_scores, bbox_preds) = self(x)\n    assert len(cls_scores) == len(bbox_preds)\n    (batch_bboxes, batch_scores) = super(RPNNHead, self).onnx_export(cls_scores, bbox_preds, img_metas=img_metas, with_nms=False)\n    from mmdet.core.export import add_dummy_nms_for_onnx\n    cfg = copy.deepcopy(self.test_cfg)\n    score_threshold = cfg.nms.get('score_thr', 0.0)\n    nms_pre = cfg.get('deploy_nms_pre', -1)\n    (dets, _) = add_dummy_nms_for_onnx(batch_bboxes, batch_scores, cfg.max_per_img, cfg.nms.iou_threshold, score_threshold, nms_pre, cfg.max_per_img)\n    return dets",
            "def onnx_export(self, x, img_metas):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Test without augmentation.\\n\\n        Args:\\n            x (tuple[Tensor]): Features from the upstream network, each is\\n                a 4D-tensor.\\n            img_metas (list[dict]): Meta info of each image.\\n        Returns:\\n            Tensor: dets of shape [N, num_det, 5].\\n        '\n    (cls_scores, bbox_preds) = self(x)\n    assert len(cls_scores) == len(bbox_preds)\n    (batch_bboxes, batch_scores) = super(RPNNHead, self).onnx_export(cls_scores, bbox_preds, img_metas=img_metas, with_nms=False)\n    from mmdet.core.export import add_dummy_nms_for_onnx\n    cfg = copy.deepcopy(self.test_cfg)\n    score_threshold = cfg.nms.get('score_thr', 0.0)\n    nms_pre = cfg.get('deploy_nms_pre', -1)\n    (dets, _) = add_dummy_nms_for_onnx(batch_bboxes, batch_scores, cfg.max_per_img, cfg.nms.iou_threshold, score_threshold, nms_pre, cfg.max_per_img)\n    return dets",
            "def onnx_export(self, x, img_metas):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Test without augmentation.\\n\\n        Args:\\n            x (tuple[Tensor]): Features from the upstream network, each is\\n                a 4D-tensor.\\n            img_metas (list[dict]): Meta info of each image.\\n        Returns:\\n            Tensor: dets of shape [N, num_det, 5].\\n        '\n    (cls_scores, bbox_preds) = self(x)\n    assert len(cls_scores) == len(bbox_preds)\n    (batch_bboxes, batch_scores) = super(RPNNHead, self).onnx_export(cls_scores, bbox_preds, img_metas=img_metas, with_nms=False)\n    from mmdet.core.export import add_dummy_nms_for_onnx\n    cfg = copy.deepcopy(self.test_cfg)\n    score_threshold = cfg.nms.get('score_thr', 0.0)\n    nms_pre = cfg.get('deploy_nms_pre', -1)\n    (dets, _) = add_dummy_nms_for_onnx(batch_bboxes, batch_scores, cfg.max_per_img, cfg.nms.iou_threshold, score_threshold, nms_pre, cfg.max_per_img)\n    return dets",
            "def onnx_export(self, x, img_metas):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Test without augmentation.\\n\\n        Args:\\n            x (tuple[Tensor]): Features from the upstream network, each is\\n                a 4D-tensor.\\n            img_metas (list[dict]): Meta info of each image.\\n        Returns:\\n            Tensor: dets of shape [N, num_det, 5].\\n        '\n    (cls_scores, bbox_preds) = self(x)\n    assert len(cls_scores) == len(bbox_preds)\n    (batch_bboxes, batch_scores) = super(RPNNHead, self).onnx_export(cls_scores, bbox_preds, img_metas=img_metas, with_nms=False)\n    from mmdet.core.export import add_dummy_nms_for_onnx\n    cfg = copy.deepcopy(self.test_cfg)\n    score_threshold = cfg.nms.get('score_thr', 0.0)\n    nms_pre = cfg.get('deploy_nms_pre', -1)\n    (dets, _) = add_dummy_nms_for_onnx(batch_bboxes, batch_scores, cfg.max_per_img, cfg.nms.iou_threshold, score_threshold, nms_pre, cfg.max_per_img)\n    return dets",
            "def onnx_export(self, x, img_metas):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Test without augmentation.\\n\\n        Args:\\n            x (tuple[Tensor]): Features from the upstream network, each is\\n                a 4D-tensor.\\n            img_metas (list[dict]): Meta info of each image.\\n        Returns:\\n            Tensor: dets of shape [N, num_det, 5].\\n        '\n    (cls_scores, bbox_preds) = self(x)\n    assert len(cls_scores) == len(bbox_preds)\n    (batch_bboxes, batch_scores) = super(RPNNHead, self).onnx_export(cls_scores, bbox_preds, img_metas=img_metas, with_nms=False)\n    from mmdet.core.export import add_dummy_nms_for_onnx\n    cfg = copy.deepcopy(self.test_cfg)\n    score_threshold = cfg.nms.get('score_thr', 0.0)\n    nms_pre = cfg.get('deploy_nms_pre', -1)\n    (dets, _) = add_dummy_nms_for_onnx(batch_bboxes, batch_scores, cfg.max_per_img, cfg.nms.iou_threshold, score_threshold, nms_pre, cfg.max_per_img)\n    return dets"
        ]
    }
]
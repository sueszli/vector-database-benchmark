[
    {
        "func_name": "__init__",
        "original": "def __init__(self, val=None, children=None):\n    self.val = val\n    self.children = children if children is not None else []",
        "mutated": [
            "def __init__(self, val=None, children=None):\n    if False:\n        i = 10\n    self.val = val\n    self.children = children if children is not None else []",
            "def __init__(self, val=None, children=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.val = val\n    self.children = children if children is not None else []",
            "def __init__(self, val=None, children=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.val = val\n    self.children = children if children is not None else []",
            "def __init__(self, val=None, children=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.val = val\n    self.children = children if children is not None else []",
            "def __init__(self, val=None, children=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.val = val\n    self.children = children if children is not None else []"
        ]
    },
    {
        "func_name": "iter_dfs",
        "original": "def iter_dfs(root):\n    result = [0] * 2\n    stk = [(1, (root, result))]\n    while stk:\n        (step, params) = stk.pop()\n        if step == 1:\n            (node, ret) = params\n            for child in reversed(node.children):\n                ret2 = [0] * 2\n                stk.append((2, (ret2, ret)))\n                stk.append((1, (child, ret2)))\n        else:\n            (ret2, ret) = params\n            ret[0] = max(ret[0], ret2[0], ret[1] + ret2[1] + 1)\n            ret[1] = max(ret[1], ret2[1] + 1)\n    return result",
        "mutated": [
            "def iter_dfs(root):\n    if False:\n        i = 10\n    result = [0] * 2\n    stk = [(1, (root, result))]\n    while stk:\n        (step, params) = stk.pop()\n        if step == 1:\n            (node, ret) = params\n            for child in reversed(node.children):\n                ret2 = [0] * 2\n                stk.append((2, (ret2, ret)))\n                stk.append((1, (child, ret2)))\n        else:\n            (ret2, ret) = params\n            ret[0] = max(ret[0], ret2[0], ret[1] + ret2[1] + 1)\n            ret[1] = max(ret[1], ret2[1] + 1)\n    return result",
            "def iter_dfs(root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    result = [0] * 2\n    stk = [(1, (root, result))]\n    while stk:\n        (step, params) = stk.pop()\n        if step == 1:\n            (node, ret) = params\n            for child in reversed(node.children):\n                ret2 = [0] * 2\n                stk.append((2, (ret2, ret)))\n                stk.append((1, (child, ret2)))\n        else:\n            (ret2, ret) = params\n            ret[0] = max(ret[0], ret2[0], ret[1] + ret2[1] + 1)\n            ret[1] = max(ret[1], ret2[1] + 1)\n    return result",
            "def iter_dfs(root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    result = [0] * 2\n    stk = [(1, (root, result))]\n    while stk:\n        (step, params) = stk.pop()\n        if step == 1:\n            (node, ret) = params\n            for child in reversed(node.children):\n                ret2 = [0] * 2\n                stk.append((2, (ret2, ret)))\n                stk.append((1, (child, ret2)))\n        else:\n            (ret2, ret) = params\n            ret[0] = max(ret[0], ret2[0], ret[1] + ret2[1] + 1)\n            ret[1] = max(ret[1], ret2[1] + 1)\n    return result",
            "def iter_dfs(root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    result = [0] * 2\n    stk = [(1, (root, result))]\n    while stk:\n        (step, params) = stk.pop()\n        if step == 1:\n            (node, ret) = params\n            for child in reversed(node.children):\n                ret2 = [0] * 2\n                stk.append((2, (ret2, ret)))\n                stk.append((1, (child, ret2)))\n        else:\n            (ret2, ret) = params\n            ret[0] = max(ret[0], ret2[0], ret[1] + ret2[1] + 1)\n            ret[1] = max(ret[1], ret2[1] + 1)\n    return result",
            "def iter_dfs(root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    result = [0] * 2\n    stk = [(1, (root, result))]\n    while stk:\n        (step, params) = stk.pop()\n        if step == 1:\n            (node, ret) = params\n            for child in reversed(node.children):\n                ret2 = [0] * 2\n                stk.append((2, (ret2, ret)))\n                stk.append((1, (child, ret2)))\n        else:\n            (ret2, ret) = params\n            ret[0] = max(ret[0], ret2[0], ret[1] + ret2[1] + 1)\n            ret[1] = max(ret[1], ret2[1] + 1)\n    return result"
        ]
    },
    {
        "func_name": "diameter",
        "original": "def diameter(self, root):\n    \"\"\"\n        :type root: 'Node'\n        :rtype: int\n        \"\"\"\n\n    def iter_dfs(root):\n        result = [0] * 2\n        stk = [(1, (root, result))]\n        while stk:\n            (step, params) = stk.pop()\n            if step == 1:\n                (node, ret) = params\n                for child in reversed(node.children):\n                    ret2 = [0] * 2\n                    stk.append((2, (ret2, ret)))\n                    stk.append((1, (child, ret2)))\n            else:\n                (ret2, ret) = params\n                ret[0] = max(ret[0], ret2[0], ret[1] + ret2[1] + 1)\n                ret[1] = max(ret[1], ret2[1] + 1)\n        return result\n    return iter_dfs(root)[0]",
        "mutated": [
            "def diameter(self, root):\n    if False:\n        i = 10\n    \"\\n        :type root: 'Node'\\n        :rtype: int\\n        \"\n\n    def iter_dfs(root):\n        result = [0] * 2\n        stk = [(1, (root, result))]\n        while stk:\n            (step, params) = stk.pop()\n            if step == 1:\n                (node, ret) = params\n                for child in reversed(node.children):\n                    ret2 = [0] * 2\n                    stk.append((2, (ret2, ret)))\n                    stk.append((1, (child, ret2)))\n            else:\n                (ret2, ret) = params\n                ret[0] = max(ret[0], ret2[0], ret[1] + ret2[1] + 1)\n                ret[1] = max(ret[1], ret2[1] + 1)\n        return result\n    return iter_dfs(root)[0]",
            "def diameter(self, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n        :type root: 'Node'\\n        :rtype: int\\n        \"\n\n    def iter_dfs(root):\n        result = [0] * 2\n        stk = [(1, (root, result))]\n        while stk:\n            (step, params) = stk.pop()\n            if step == 1:\n                (node, ret) = params\n                for child in reversed(node.children):\n                    ret2 = [0] * 2\n                    stk.append((2, (ret2, ret)))\n                    stk.append((1, (child, ret2)))\n            else:\n                (ret2, ret) = params\n                ret[0] = max(ret[0], ret2[0], ret[1] + ret2[1] + 1)\n                ret[1] = max(ret[1], ret2[1] + 1)\n        return result\n    return iter_dfs(root)[0]",
            "def diameter(self, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n        :type root: 'Node'\\n        :rtype: int\\n        \"\n\n    def iter_dfs(root):\n        result = [0] * 2\n        stk = [(1, (root, result))]\n        while stk:\n            (step, params) = stk.pop()\n            if step == 1:\n                (node, ret) = params\n                for child in reversed(node.children):\n                    ret2 = [0] * 2\n                    stk.append((2, (ret2, ret)))\n                    stk.append((1, (child, ret2)))\n            else:\n                (ret2, ret) = params\n                ret[0] = max(ret[0], ret2[0], ret[1] + ret2[1] + 1)\n                ret[1] = max(ret[1], ret2[1] + 1)\n        return result\n    return iter_dfs(root)[0]",
            "def diameter(self, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n        :type root: 'Node'\\n        :rtype: int\\n        \"\n\n    def iter_dfs(root):\n        result = [0] * 2\n        stk = [(1, (root, result))]\n        while stk:\n            (step, params) = stk.pop()\n            if step == 1:\n                (node, ret) = params\n                for child in reversed(node.children):\n                    ret2 = [0] * 2\n                    stk.append((2, (ret2, ret)))\n                    stk.append((1, (child, ret2)))\n            else:\n                (ret2, ret) = params\n                ret[0] = max(ret[0], ret2[0], ret[1] + ret2[1] + 1)\n                ret[1] = max(ret[1], ret2[1] + 1)\n        return result\n    return iter_dfs(root)[0]",
            "def diameter(self, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n        :type root: 'Node'\\n        :rtype: int\\n        \"\n\n    def iter_dfs(root):\n        result = [0] * 2\n        stk = [(1, (root, result))]\n        while stk:\n            (step, params) = stk.pop()\n            if step == 1:\n                (node, ret) = params\n                for child in reversed(node.children):\n                    ret2 = [0] * 2\n                    stk.append((2, (ret2, ret)))\n                    stk.append((1, (child, ret2)))\n            else:\n                (ret2, ret) = params\n                ret[0] = max(ret[0], ret2[0], ret[1] + ret2[1] + 1)\n                ret[1] = max(ret[1], ret2[1] + 1)\n        return result\n    return iter_dfs(root)[0]"
        ]
    },
    {
        "func_name": "dfs",
        "original": "def dfs(node):\n    (max_dia, max_depth) = (0, 0)\n    for child in node.children:\n        (child_max_dia, child_max_depth) = dfs(child)\n        max_dia = max(max_dia, child_max_dia, max_depth + child_max_depth + 1)\n        max_depth = max(max_depth, child_max_depth + 1)\n    return (max_dia, max_depth)",
        "mutated": [
            "def dfs(node):\n    if False:\n        i = 10\n    (max_dia, max_depth) = (0, 0)\n    for child in node.children:\n        (child_max_dia, child_max_depth) = dfs(child)\n        max_dia = max(max_dia, child_max_dia, max_depth + child_max_depth + 1)\n        max_depth = max(max_depth, child_max_depth + 1)\n    return (max_dia, max_depth)",
            "def dfs(node):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (max_dia, max_depth) = (0, 0)\n    for child in node.children:\n        (child_max_dia, child_max_depth) = dfs(child)\n        max_dia = max(max_dia, child_max_dia, max_depth + child_max_depth + 1)\n        max_depth = max(max_depth, child_max_depth + 1)\n    return (max_dia, max_depth)",
            "def dfs(node):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (max_dia, max_depth) = (0, 0)\n    for child in node.children:\n        (child_max_dia, child_max_depth) = dfs(child)\n        max_dia = max(max_dia, child_max_dia, max_depth + child_max_depth + 1)\n        max_depth = max(max_depth, child_max_depth + 1)\n    return (max_dia, max_depth)",
            "def dfs(node):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (max_dia, max_depth) = (0, 0)\n    for child in node.children:\n        (child_max_dia, child_max_depth) = dfs(child)\n        max_dia = max(max_dia, child_max_dia, max_depth + child_max_depth + 1)\n        max_depth = max(max_depth, child_max_depth + 1)\n    return (max_dia, max_depth)",
            "def dfs(node):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (max_dia, max_depth) = (0, 0)\n    for child in node.children:\n        (child_max_dia, child_max_depth) = dfs(child)\n        max_dia = max(max_dia, child_max_dia, max_depth + child_max_depth + 1)\n        max_depth = max(max_depth, child_max_depth + 1)\n    return (max_dia, max_depth)"
        ]
    },
    {
        "func_name": "diameter",
        "original": "def diameter(self, root):\n    \"\"\"\n        :type root: 'Node'\n        :rtype: int\n        \"\"\"\n\n    def dfs(node):\n        (max_dia, max_depth) = (0, 0)\n        for child in node.children:\n            (child_max_dia, child_max_depth) = dfs(child)\n            max_dia = max(max_dia, child_max_dia, max_depth + child_max_depth + 1)\n            max_depth = max(max_depth, child_max_depth + 1)\n        return (max_dia, max_depth)\n    return dfs(root)[0]",
        "mutated": [
            "def diameter(self, root):\n    if False:\n        i = 10\n    \"\\n        :type root: 'Node'\\n        :rtype: int\\n        \"\n\n    def dfs(node):\n        (max_dia, max_depth) = (0, 0)\n        for child in node.children:\n            (child_max_dia, child_max_depth) = dfs(child)\n            max_dia = max(max_dia, child_max_dia, max_depth + child_max_depth + 1)\n            max_depth = max(max_depth, child_max_depth + 1)\n        return (max_dia, max_depth)\n    return dfs(root)[0]",
            "def diameter(self, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"\\n        :type root: 'Node'\\n        :rtype: int\\n        \"\n\n    def dfs(node):\n        (max_dia, max_depth) = (0, 0)\n        for child in node.children:\n            (child_max_dia, child_max_depth) = dfs(child)\n            max_dia = max(max_dia, child_max_dia, max_depth + child_max_depth + 1)\n            max_depth = max(max_depth, child_max_depth + 1)\n        return (max_dia, max_depth)\n    return dfs(root)[0]",
            "def diameter(self, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"\\n        :type root: 'Node'\\n        :rtype: int\\n        \"\n\n    def dfs(node):\n        (max_dia, max_depth) = (0, 0)\n        for child in node.children:\n            (child_max_dia, child_max_depth) = dfs(child)\n            max_dia = max(max_dia, child_max_dia, max_depth + child_max_depth + 1)\n            max_depth = max(max_depth, child_max_depth + 1)\n        return (max_dia, max_depth)\n    return dfs(root)[0]",
            "def diameter(self, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"\\n        :type root: 'Node'\\n        :rtype: int\\n        \"\n\n    def dfs(node):\n        (max_dia, max_depth) = (0, 0)\n        for child in node.children:\n            (child_max_dia, child_max_depth) = dfs(child)\n            max_dia = max(max_dia, child_max_dia, max_depth + child_max_depth + 1)\n            max_depth = max(max_depth, child_max_depth + 1)\n        return (max_dia, max_depth)\n    return dfs(root)[0]",
            "def diameter(self, root):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"\\n        :type root: 'Node'\\n        :rtype: int\\n        \"\n\n    def dfs(node):\n        (max_dia, max_depth) = (0, 0)\n        for child in node.children:\n            (child_max_dia, child_max_depth) = dfs(child)\n            max_dia = max(max_dia, child_max_dia, max_depth + child_max_depth + 1)\n            max_depth = max(max_depth, child_max_depth + 1)\n        return (max_dia, max_depth)\n    return dfs(root)[0]"
        ]
    }
]
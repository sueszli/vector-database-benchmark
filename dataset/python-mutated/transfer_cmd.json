[
    {
        "func_name": "check_repo",
        "original": "def check_repo():\n    listing = cmd(archiver, 'rlist', '--short')\n    assert 'arch1' in listing\n    assert 'arch2' in listing\n    listing = cmd(archiver, 'list', '--short', 'arch1')\n    assert 'file1' in listing\n    assert 'dir2/file2' in listing\n    cmd(archiver, 'check')",
        "mutated": [
            "def check_repo():\n    if False:\n        i = 10\n    listing = cmd(archiver, 'rlist', '--short')\n    assert 'arch1' in listing\n    assert 'arch2' in listing\n    listing = cmd(archiver, 'list', '--short', 'arch1')\n    assert 'file1' in listing\n    assert 'dir2/file2' in listing\n    cmd(archiver, 'check')",
            "def check_repo():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    listing = cmd(archiver, 'rlist', '--short')\n    assert 'arch1' in listing\n    assert 'arch2' in listing\n    listing = cmd(archiver, 'list', '--short', 'arch1')\n    assert 'file1' in listing\n    assert 'dir2/file2' in listing\n    cmd(archiver, 'check')",
            "def check_repo():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    listing = cmd(archiver, 'rlist', '--short')\n    assert 'arch1' in listing\n    assert 'arch2' in listing\n    listing = cmd(archiver, 'list', '--short', 'arch1')\n    assert 'file1' in listing\n    assert 'dir2/file2' in listing\n    cmd(archiver, 'check')",
            "def check_repo():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    listing = cmd(archiver, 'rlist', '--short')\n    assert 'arch1' in listing\n    assert 'arch2' in listing\n    listing = cmd(archiver, 'list', '--short', 'arch1')\n    assert 'file1' in listing\n    assert 'dir2/file2' in listing\n    cmd(archiver, 'check')",
            "def check_repo():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    listing = cmd(archiver, 'rlist', '--short')\n    assert 'arch1' in listing\n    assert 'arch2' in listing\n    listing = cmd(archiver, 'list', '--short', 'arch1')\n    assert 'file1' in listing\n    assert 'dir2/file2' in listing\n    cmd(archiver, 'check')"
        ]
    },
    {
        "func_name": "test_transfer",
        "original": "def test_transfer(archivers, request):\n    archiver = request.getfixturevalue(archivers)\n    (original_location, input_path) = (archiver.repository_location, archiver.input_path)\n\n    def check_repo():\n        listing = cmd(archiver, 'rlist', '--short')\n        assert 'arch1' in listing\n        assert 'arch2' in listing\n        listing = cmd(archiver, 'list', '--short', 'arch1')\n        assert 'file1' in listing\n        assert 'dir2/file2' in listing\n        cmd(archiver, 'check')\n    create_test_files(input_path)\n    archiver.repository_location = original_location + '1'\n    cmd(archiver, 'rcreate', RK_ENCRYPTION)\n    cmd(archiver, 'create', 'arch1', 'input')\n    cmd(archiver, 'create', 'arch2', 'input')\n    check_repo()\n    archiver.repository_location = original_location + '2'\n    other_repo1 = f'--other-repo={original_location}1'\n    cmd(archiver, 'rcreate', RK_ENCRYPTION, other_repo1)\n    cmd(archiver, 'transfer', other_repo1, '--dry-run')\n    cmd(archiver, 'transfer', other_repo1)\n    cmd(archiver, 'transfer', other_repo1, '--dry-run')\n    check_repo()",
        "mutated": [
            "def test_transfer(archivers, request):\n    if False:\n        i = 10\n    archiver = request.getfixturevalue(archivers)\n    (original_location, input_path) = (archiver.repository_location, archiver.input_path)\n\n    def check_repo():\n        listing = cmd(archiver, 'rlist', '--short')\n        assert 'arch1' in listing\n        assert 'arch2' in listing\n        listing = cmd(archiver, 'list', '--short', 'arch1')\n        assert 'file1' in listing\n        assert 'dir2/file2' in listing\n        cmd(archiver, 'check')\n    create_test_files(input_path)\n    archiver.repository_location = original_location + '1'\n    cmd(archiver, 'rcreate', RK_ENCRYPTION)\n    cmd(archiver, 'create', 'arch1', 'input')\n    cmd(archiver, 'create', 'arch2', 'input')\n    check_repo()\n    archiver.repository_location = original_location + '2'\n    other_repo1 = f'--other-repo={original_location}1'\n    cmd(archiver, 'rcreate', RK_ENCRYPTION, other_repo1)\n    cmd(archiver, 'transfer', other_repo1, '--dry-run')\n    cmd(archiver, 'transfer', other_repo1)\n    cmd(archiver, 'transfer', other_repo1, '--dry-run')\n    check_repo()",
            "def test_transfer(archivers, request):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    archiver = request.getfixturevalue(archivers)\n    (original_location, input_path) = (archiver.repository_location, archiver.input_path)\n\n    def check_repo():\n        listing = cmd(archiver, 'rlist', '--short')\n        assert 'arch1' in listing\n        assert 'arch2' in listing\n        listing = cmd(archiver, 'list', '--short', 'arch1')\n        assert 'file1' in listing\n        assert 'dir2/file2' in listing\n        cmd(archiver, 'check')\n    create_test_files(input_path)\n    archiver.repository_location = original_location + '1'\n    cmd(archiver, 'rcreate', RK_ENCRYPTION)\n    cmd(archiver, 'create', 'arch1', 'input')\n    cmd(archiver, 'create', 'arch2', 'input')\n    check_repo()\n    archiver.repository_location = original_location + '2'\n    other_repo1 = f'--other-repo={original_location}1'\n    cmd(archiver, 'rcreate', RK_ENCRYPTION, other_repo1)\n    cmd(archiver, 'transfer', other_repo1, '--dry-run')\n    cmd(archiver, 'transfer', other_repo1)\n    cmd(archiver, 'transfer', other_repo1, '--dry-run')\n    check_repo()",
            "def test_transfer(archivers, request):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    archiver = request.getfixturevalue(archivers)\n    (original_location, input_path) = (archiver.repository_location, archiver.input_path)\n\n    def check_repo():\n        listing = cmd(archiver, 'rlist', '--short')\n        assert 'arch1' in listing\n        assert 'arch2' in listing\n        listing = cmd(archiver, 'list', '--short', 'arch1')\n        assert 'file1' in listing\n        assert 'dir2/file2' in listing\n        cmd(archiver, 'check')\n    create_test_files(input_path)\n    archiver.repository_location = original_location + '1'\n    cmd(archiver, 'rcreate', RK_ENCRYPTION)\n    cmd(archiver, 'create', 'arch1', 'input')\n    cmd(archiver, 'create', 'arch2', 'input')\n    check_repo()\n    archiver.repository_location = original_location + '2'\n    other_repo1 = f'--other-repo={original_location}1'\n    cmd(archiver, 'rcreate', RK_ENCRYPTION, other_repo1)\n    cmd(archiver, 'transfer', other_repo1, '--dry-run')\n    cmd(archiver, 'transfer', other_repo1)\n    cmd(archiver, 'transfer', other_repo1, '--dry-run')\n    check_repo()",
            "def test_transfer(archivers, request):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    archiver = request.getfixturevalue(archivers)\n    (original_location, input_path) = (archiver.repository_location, archiver.input_path)\n\n    def check_repo():\n        listing = cmd(archiver, 'rlist', '--short')\n        assert 'arch1' in listing\n        assert 'arch2' in listing\n        listing = cmd(archiver, 'list', '--short', 'arch1')\n        assert 'file1' in listing\n        assert 'dir2/file2' in listing\n        cmd(archiver, 'check')\n    create_test_files(input_path)\n    archiver.repository_location = original_location + '1'\n    cmd(archiver, 'rcreate', RK_ENCRYPTION)\n    cmd(archiver, 'create', 'arch1', 'input')\n    cmd(archiver, 'create', 'arch2', 'input')\n    check_repo()\n    archiver.repository_location = original_location + '2'\n    other_repo1 = f'--other-repo={original_location}1'\n    cmd(archiver, 'rcreate', RK_ENCRYPTION, other_repo1)\n    cmd(archiver, 'transfer', other_repo1, '--dry-run')\n    cmd(archiver, 'transfer', other_repo1)\n    cmd(archiver, 'transfer', other_repo1, '--dry-run')\n    check_repo()",
            "def test_transfer(archivers, request):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    archiver = request.getfixturevalue(archivers)\n    (original_location, input_path) = (archiver.repository_location, archiver.input_path)\n\n    def check_repo():\n        listing = cmd(archiver, 'rlist', '--short')\n        assert 'arch1' in listing\n        assert 'arch2' in listing\n        listing = cmd(archiver, 'list', '--short', 'arch1')\n        assert 'file1' in listing\n        assert 'dir2/file2' in listing\n        cmd(archiver, 'check')\n    create_test_files(input_path)\n    archiver.repository_location = original_location + '1'\n    cmd(archiver, 'rcreate', RK_ENCRYPTION)\n    cmd(archiver, 'create', 'arch1', 'input')\n    cmd(archiver, 'create', 'arch2', 'input')\n    check_repo()\n    archiver.repository_location = original_location + '2'\n    other_repo1 = f'--other-repo={original_location}1'\n    cmd(archiver, 'rcreate', RK_ENCRYPTION, other_repo1)\n    cmd(archiver, 'transfer', other_repo1, '--dry-run')\n    cmd(archiver, 'transfer', other_repo1)\n    cmd(archiver, 'transfer', other_repo1, '--dry-run')\n    check_repo()"
        ]
    },
    {
        "func_name": "convert_tz",
        "original": "def convert_tz(local_naive, tzoffset, tzinfo):\n    ts = parse_timestamp(local_naive + tzoffset)\n    return ts.astimezone(tzinfo).isoformat(timespec='microseconds')",
        "mutated": [
            "def convert_tz(local_naive, tzoffset, tzinfo):\n    if False:\n        i = 10\n    ts = parse_timestamp(local_naive + tzoffset)\n    return ts.astimezone(tzinfo).isoformat(timespec='microseconds')",
            "def convert_tz(local_naive, tzoffset, tzinfo):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    ts = parse_timestamp(local_naive + tzoffset)\n    return ts.astimezone(tzinfo).isoformat(timespec='microseconds')",
            "def convert_tz(local_naive, tzoffset, tzinfo):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    ts = parse_timestamp(local_naive + tzoffset)\n    return ts.astimezone(tzinfo).isoformat(timespec='microseconds')",
            "def convert_tz(local_naive, tzoffset, tzinfo):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    ts = parse_timestamp(local_naive + tzoffset)\n    return ts.astimezone(tzinfo).isoformat(timespec='microseconds')",
            "def convert_tz(local_naive, tzoffset, tzinfo):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    ts = parse_timestamp(local_naive + tzoffset)\n    return ts.astimezone(tzinfo).isoformat(timespec='microseconds')"
        ]
    },
    {
        "func_name": "test_transfer_upgrade",
        "original": "def test_transfer_upgrade(archivers, request):\n    archiver = request.getfixturevalue(archivers)\n    if archiver.get_kind() in ['remote', 'binary']:\n        pytest.skip('only works locally')\n    repo12_tar = os.path.join(os.path.dirname(__file__), 'repo12.tar.gz')\n    repo12_tzoffset = '+01:00'\n\n    def convert_tz(local_naive, tzoffset, tzinfo):\n        ts = parse_timestamp(local_naive + tzoffset)\n        return ts.astimezone(tzinfo).isoformat(timespec='microseconds')\n    original_location = archiver.repository_location\n    dst_dir = f'{original_location}1'\n    os.makedirs(dst_dir)\n    with tarfile.open(repo12_tar) as tf:\n        tf.extractall(dst_dir)\n    other_repo1 = f'--other-repo={original_location}1'\n    archiver.repository_location = original_location + '2'\n    assert os.environ.get('BORG_PASSPHRASE') == 'waytooeasyonlyfortests'\n    os.environ['BORG_TESTONLY_WEAKEN_KDF'] = '0'\n    cmd(archiver, 'rcreate', RK_ENCRYPTION, other_repo1)\n    cmd(archiver, 'transfer', other_repo1, '--upgrader=From12To20')\n    cmd(archiver, 'check')\n    rlist_json = cmd(archiver, 'rlist', '--json')\n    got = json.loads(rlist_json)\n    with open(os.path.join(dst_dir, 'test_meta', 'repo_list.json')) as f:\n        expected = json.load(f)\n    for key in ('encryption', 'repository'):\n        del got[key]\n        del expected[key]\n    assert len(got['archives']) == len(expected['archives'])\n    for (got_archive, expected_archive) in zip(got['archives'], expected['archives']):\n        del got_archive['id']\n        del expected_archive['id']\n        del expected_archive['barchive']\n        for key in ('start', 'time'):\n            expected_archive[key] = convert_tz(expected_archive[key], repo12_tzoffset, None)\n            got_ts = parse_timestamp(got_archive[key])\n            got_archive[key] = got_ts.replace(microsecond=0).isoformat(timespec='microseconds')\n    assert got == expected\n    for archive in got['archives']:\n        name = archive['name']\n        list_json = cmd(archiver, 'list', '--json-lines', name)\n        got = [json.loads(line) for line in list_json.splitlines()]\n        with open(os.path.join(dst_dir, 'test_meta', f'{name}_list.json')) as f:\n            lines = f.read()\n        expected = [json.loads(line) for line in lines.splitlines()]\n        hardlinks = {}\n        for (g, e) in zip(got, expected):\n            if e['flags'] == 0 and g['flags'] is None:\n                e['flags'] = None\n            if g['user'] == str(g['uid']) == str(e['uid']):\n                e['user'] = str(e['uid'])\n            if g['group'] == str(g['gid']) == str(e['gid']):\n                e['group'] = str(e['gid'])\n            for key in ('mtime', 'ctime', 'atime'):\n                if key in e:\n                    e[key] = convert_tz(e[key], repo12_tzoffset, None)\n            hardlink = bool(g.get('hlid'))\n            if hardlink:\n                hardlinks[g['path']] = g['hlid']\n                if e['mode'].startswith('h'):\n                    e['mode'] = g['mode'][0] + e['mode'][1:]\n                    assert e['source'] != ''\n                    assert e['linktarget'] != ''\n                    e['source'] = ''\n                    e['linktarget'] = ''\n                    assert e['size'] == 0\n                    assert g['size'] >= 0\n                    e['size'] = g['size']\n            del g['hlid']\n            if g['target'] == e['linktarget']:\n                e['target'] = e['linktarget']\n                del e['linktarget']\n                del e['source']\n            if e['type'] == 'b' and is_win32:\n                del e['type'], g['type']\n                del e['mode'], g['mode']\n            assert g == e\n        if name == 'archive1':\n            assert hardlinks['tmp/borgtest/hardlink1'] == hardlinks['tmp/borgtest/hardlink2']\n    repo_path = f'{original_location}2'\n    for archive_name in ('archive1', 'archive2'):\n        (archive, repository) = open_archive(repo_path, archive_name)\n        with repository:\n            for item in archive.iter_items():\n                item_dict = item.as_dict()\n                assert not any((value is None for value in item_dict.values())), f'found None value in {item_dict}'\n                assert 'chunks' not in item or ('size' in item and item.size >= 0)\n                if item.path.endswith('directory') or item.path.endswith('borgtest'):\n                    assert stat.S_ISDIR(item.mode)\n                    assert item.uid > 0\n                    assert 'hlid' not in item\n                elif item.path.endswith('no_hardlink') or item.path.endswith('target'):\n                    assert stat.S_ISREG(item.mode)\n                    assert item.uid > 0\n                    assert 'hlid' not in item\n                    assert len(item.chunks) > 0\n                    assert 'bsdflags' not in item\n                elif item.path.endswith('hardlink1'):\n                    assert stat.S_ISREG(item.mode)\n                    assert item.uid > 0\n                    assert 'hlid' in item and len(item.hlid) == 32\n                    hlid1 = item.hlid\n                    assert len(item.chunks) > 0\n                    chunks1 = item.chunks\n                    size1 = item.size\n                    assert 'source' not in item\n                    assert 'target' not in item\n                    assert 'hardlink_master' not in item\n                elif item.path.endswith('hardlink2'):\n                    assert stat.S_ISREG(item.mode)\n                    assert item.uid > 0\n                    assert 'hlid' in item and len(item.hlid) == 32\n                    hlid2 = item.hlid\n                    assert len(item.chunks) > 0\n                    chunks2 = item.chunks\n                    size2 = item.size\n                    assert 'source' not in item\n                    assert 'target' not in item\n                    assert 'hardlink_master' not in item\n                elif item.path.endswith('broken_symlink'):\n                    assert stat.S_ISLNK(item.mode)\n                    assert item.target == 'doesnotexist'\n                    assert item.uid > 0\n                    assert 'hlid' not in item\n                elif item.path.endswith('symlink'):\n                    assert stat.S_ISLNK(item.mode)\n                    assert item.target == 'target'\n                    assert item.uid > 0\n                    assert 'hlid' not in item\n                elif item.path.endswith('fifo'):\n                    assert stat.S_ISFIFO(item.mode)\n                    assert item.uid > 0\n                    assert 'hlid' not in item\n                elif item.path.endswith('without_xattrs'):\n                    assert stat.S_ISREG(item.mode)\n                    assert 'xattrs' not in item\n                elif item.path.endswith('with_xattrs'):\n                    assert stat.S_ISREG(item.mode)\n                    assert 'xattrs' in item\n                    assert len(item.xattrs) == 2\n                    assert item.xattrs[b'key1'] == b'value'\n                    assert item.xattrs[b'key2'] == b''\n                elif item.path.endswith('without_flags'):\n                    assert stat.S_ISREG(item.mode)\n                    assert 'bsdflags' not in item\n                elif item.path.endswith('with_flags'):\n                    assert stat.S_ISREG(item.mode)\n                    assert 'bsdflags' in item\n                    assert item.bsdflags == stat.UF_NODUMP\n                elif item.path.endswith('root_stuff'):\n                    assert stat.S_ISDIR(item.mode)\n                    assert item.uid == 0\n                    assert item.gid == 0\n                    assert 'hlid' not in item\n                elif item.path.endswith('cdev_34_56'):\n                    assert stat.S_ISCHR(item.mode)\n                    assert 'rdev' in item and item.rdev != 0\n                    assert item.uid == 0\n                    assert item.gid == 0\n                    assert item.user == 'root'\n                    assert item.group in ('root', 'wheel')\n                    assert 'hlid' not in item\n                elif item.path.endswith('bdev_12_34'):\n                    if not is_win32:\n                        assert stat.S_ISBLK(item.mode)\n                    assert 'rdev' in item and item.rdev != 0\n                    assert item.uid == 0\n                    assert item.gid == 0\n                    assert item.user == 'root'\n                    assert item.group in ('root', 'wheel')\n                    assert 'hlid' not in item\n                elif item.path.endswith('strange_uid_gid'):\n                    assert stat.S_ISREG(item.mode)\n                    assert item.uid == 54321\n                    assert item.gid == 54321\n                    assert 'user' not in item\n                    assert 'group' not in item\n                else:\n                    raise NotImplementedError(f'test missing for {item.path}')\n        if archive_name == 'archive1':\n            assert hlid1 == hlid2\n            assert size1 == size2 == 16 + 1\n            assert chunks1 == chunks2",
        "mutated": [
            "def test_transfer_upgrade(archivers, request):\n    if False:\n        i = 10\n    archiver = request.getfixturevalue(archivers)\n    if archiver.get_kind() in ['remote', 'binary']:\n        pytest.skip('only works locally')\n    repo12_tar = os.path.join(os.path.dirname(__file__), 'repo12.tar.gz')\n    repo12_tzoffset = '+01:00'\n\n    def convert_tz(local_naive, tzoffset, tzinfo):\n        ts = parse_timestamp(local_naive + tzoffset)\n        return ts.astimezone(tzinfo).isoformat(timespec='microseconds')\n    original_location = archiver.repository_location\n    dst_dir = f'{original_location}1'\n    os.makedirs(dst_dir)\n    with tarfile.open(repo12_tar) as tf:\n        tf.extractall(dst_dir)\n    other_repo1 = f'--other-repo={original_location}1'\n    archiver.repository_location = original_location + '2'\n    assert os.environ.get('BORG_PASSPHRASE') == 'waytooeasyonlyfortests'\n    os.environ['BORG_TESTONLY_WEAKEN_KDF'] = '0'\n    cmd(archiver, 'rcreate', RK_ENCRYPTION, other_repo1)\n    cmd(archiver, 'transfer', other_repo1, '--upgrader=From12To20')\n    cmd(archiver, 'check')\n    rlist_json = cmd(archiver, 'rlist', '--json')\n    got = json.loads(rlist_json)\n    with open(os.path.join(dst_dir, 'test_meta', 'repo_list.json')) as f:\n        expected = json.load(f)\n    for key in ('encryption', 'repository'):\n        del got[key]\n        del expected[key]\n    assert len(got['archives']) == len(expected['archives'])\n    for (got_archive, expected_archive) in zip(got['archives'], expected['archives']):\n        del got_archive['id']\n        del expected_archive['id']\n        del expected_archive['barchive']\n        for key in ('start', 'time'):\n            expected_archive[key] = convert_tz(expected_archive[key], repo12_tzoffset, None)\n            got_ts = parse_timestamp(got_archive[key])\n            got_archive[key] = got_ts.replace(microsecond=0).isoformat(timespec='microseconds')\n    assert got == expected\n    for archive in got['archives']:\n        name = archive['name']\n        list_json = cmd(archiver, 'list', '--json-lines', name)\n        got = [json.loads(line) for line in list_json.splitlines()]\n        with open(os.path.join(dst_dir, 'test_meta', f'{name}_list.json')) as f:\n            lines = f.read()\n        expected = [json.loads(line) for line in lines.splitlines()]\n        hardlinks = {}\n        for (g, e) in zip(got, expected):\n            if e['flags'] == 0 and g['flags'] is None:\n                e['flags'] = None\n            if g['user'] == str(g['uid']) == str(e['uid']):\n                e['user'] = str(e['uid'])\n            if g['group'] == str(g['gid']) == str(e['gid']):\n                e['group'] = str(e['gid'])\n            for key in ('mtime', 'ctime', 'atime'):\n                if key in e:\n                    e[key] = convert_tz(e[key], repo12_tzoffset, None)\n            hardlink = bool(g.get('hlid'))\n            if hardlink:\n                hardlinks[g['path']] = g['hlid']\n                if e['mode'].startswith('h'):\n                    e['mode'] = g['mode'][0] + e['mode'][1:]\n                    assert e['source'] != ''\n                    assert e['linktarget'] != ''\n                    e['source'] = ''\n                    e['linktarget'] = ''\n                    assert e['size'] == 0\n                    assert g['size'] >= 0\n                    e['size'] = g['size']\n            del g['hlid']\n            if g['target'] == e['linktarget']:\n                e['target'] = e['linktarget']\n                del e['linktarget']\n                del e['source']\n            if e['type'] == 'b' and is_win32:\n                del e['type'], g['type']\n                del e['mode'], g['mode']\n            assert g == e\n        if name == 'archive1':\n            assert hardlinks['tmp/borgtest/hardlink1'] == hardlinks['tmp/borgtest/hardlink2']\n    repo_path = f'{original_location}2'\n    for archive_name in ('archive1', 'archive2'):\n        (archive, repository) = open_archive(repo_path, archive_name)\n        with repository:\n            for item in archive.iter_items():\n                item_dict = item.as_dict()\n                assert not any((value is None for value in item_dict.values())), f'found None value in {item_dict}'\n                assert 'chunks' not in item or ('size' in item and item.size >= 0)\n                if item.path.endswith('directory') or item.path.endswith('borgtest'):\n                    assert stat.S_ISDIR(item.mode)\n                    assert item.uid > 0\n                    assert 'hlid' not in item\n                elif item.path.endswith('no_hardlink') or item.path.endswith('target'):\n                    assert stat.S_ISREG(item.mode)\n                    assert item.uid > 0\n                    assert 'hlid' not in item\n                    assert len(item.chunks) > 0\n                    assert 'bsdflags' not in item\n                elif item.path.endswith('hardlink1'):\n                    assert stat.S_ISREG(item.mode)\n                    assert item.uid > 0\n                    assert 'hlid' in item and len(item.hlid) == 32\n                    hlid1 = item.hlid\n                    assert len(item.chunks) > 0\n                    chunks1 = item.chunks\n                    size1 = item.size\n                    assert 'source' not in item\n                    assert 'target' not in item\n                    assert 'hardlink_master' not in item\n                elif item.path.endswith('hardlink2'):\n                    assert stat.S_ISREG(item.mode)\n                    assert item.uid > 0\n                    assert 'hlid' in item and len(item.hlid) == 32\n                    hlid2 = item.hlid\n                    assert len(item.chunks) > 0\n                    chunks2 = item.chunks\n                    size2 = item.size\n                    assert 'source' not in item\n                    assert 'target' not in item\n                    assert 'hardlink_master' not in item\n                elif item.path.endswith('broken_symlink'):\n                    assert stat.S_ISLNK(item.mode)\n                    assert item.target == 'doesnotexist'\n                    assert item.uid > 0\n                    assert 'hlid' not in item\n                elif item.path.endswith('symlink'):\n                    assert stat.S_ISLNK(item.mode)\n                    assert item.target == 'target'\n                    assert item.uid > 0\n                    assert 'hlid' not in item\n                elif item.path.endswith('fifo'):\n                    assert stat.S_ISFIFO(item.mode)\n                    assert item.uid > 0\n                    assert 'hlid' not in item\n                elif item.path.endswith('without_xattrs'):\n                    assert stat.S_ISREG(item.mode)\n                    assert 'xattrs' not in item\n                elif item.path.endswith('with_xattrs'):\n                    assert stat.S_ISREG(item.mode)\n                    assert 'xattrs' in item\n                    assert len(item.xattrs) == 2\n                    assert item.xattrs[b'key1'] == b'value'\n                    assert item.xattrs[b'key2'] == b''\n                elif item.path.endswith('without_flags'):\n                    assert stat.S_ISREG(item.mode)\n                    assert 'bsdflags' not in item\n                elif item.path.endswith('with_flags'):\n                    assert stat.S_ISREG(item.mode)\n                    assert 'bsdflags' in item\n                    assert item.bsdflags == stat.UF_NODUMP\n                elif item.path.endswith('root_stuff'):\n                    assert stat.S_ISDIR(item.mode)\n                    assert item.uid == 0\n                    assert item.gid == 0\n                    assert 'hlid' not in item\n                elif item.path.endswith('cdev_34_56'):\n                    assert stat.S_ISCHR(item.mode)\n                    assert 'rdev' in item and item.rdev != 0\n                    assert item.uid == 0\n                    assert item.gid == 0\n                    assert item.user == 'root'\n                    assert item.group in ('root', 'wheel')\n                    assert 'hlid' not in item\n                elif item.path.endswith('bdev_12_34'):\n                    if not is_win32:\n                        assert stat.S_ISBLK(item.mode)\n                    assert 'rdev' in item and item.rdev != 0\n                    assert item.uid == 0\n                    assert item.gid == 0\n                    assert item.user == 'root'\n                    assert item.group in ('root', 'wheel')\n                    assert 'hlid' not in item\n                elif item.path.endswith('strange_uid_gid'):\n                    assert stat.S_ISREG(item.mode)\n                    assert item.uid == 54321\n                    assert item.gid == 54321\n                    assert 'user' not in item\n                    assert 'group' not in item\n                else:\n                    raise NotImplementedError(f'test missing for {item.path}')\n        if archive_name == 'archive1':\n            assert hlid1 == hlid2\n            assert size1 == size2 == 16 + 1\n            assert chunks1 == chunks2",
            "def test_transfer_upgrade(archivers, request):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    archiver = request.getfixturevalue(archivers)\n    if archiver.get_kind() in ['remote', 'binary']:\n        pytest.skip('only works locally')\n    repo12_tar = os.path.join(os.path.dirname(__file__), 'repo12.tar.gz')\n    repo12_tzoffset = '+01:00'\n\n    def convert_tz(local_naive, tzoffset, tzinfo):\n        ts = parse_timestamp(local_naive + tzoffset)\n        return ts.astimezone(tzinfo).isoformat(timespec='microseconds')\n    original_location = archiver.repository_location\n    dst_dir = f'{original_location}1'\n    os.makedirs(dst_dir)\n    with tarfile.open(repo12_tar) as tf:\n        tf.extractall(dst_dir)\n    other_repo1 = f'--other-repo={original_location}1'\n    archiver.repository_location = original_location + '2'\n    assert os.environ.get('BORG_PASSPHRASE') == 'waytooeasyonlyfortests'\n    os.environ['BORG_TESTONLY_WEAKEN_KDF'] = '0'\n    cmd(archiver, 'rcreate', RK_ENCRYPTION, other_repo1)\n    cmd(archiver, 'transfer', other_repo1, '--upgrader=From12To20')\n    cmd(archiver, 'check')\n    rlist_json = cmd(archiver, 'rlist', '--json')\n    got = json.loads(rlist_json)\n    with open(os.path.join(dst_dir, 'test_meta', 'repo_list.json')) as f:\n        expected = json.load(f)\n    for key in ('encryption', 'repository'):\n        del got[key]\n        del expected[key]\n    assert len(got['archives']) == len(expected['archives'])\n    for (got_archive, expected_archive) in zip(got['archives'], expected['archives']):\n        del got_archive['id']\n        del expected_archive['id']\n        del expected_archive['barchive']\n        for key in ('start', 'time'):\n            expected_archive[key] = convert_tz(expected_archive[key], repo12_tzoffset, None)\n            got_ts = parse_timestamp(got_archive[key])\n            got_archive[key] = got_ts.replace(microsecond=0).isoformat(timespec='microseconds')\n    assert got == expected\n    for archive in got['archives']:\n        name = archive['name']\n        list_json = cmd(archiver, 'list', '--json-lines', name)\n        got = [json.loads(line) for line in list_json.splitlines()]\n        with open(os.path.join(dst_dir, 'test_meta', f'{name}_list.json')) as f:\n            lines = f.read()\n        expected = [json.loads(line) for line in lines.splitlines()]\n        hardlinks = {}\n        for (g, e) in zip(got, expected):\n            if e['flags'] == 0 and g['flags'] is None:\n                e['flags'] = None\n            if g['user'] == str(g['uid']) == str(e['uid']):\n                e['user'] = str(e['uid'])\n            if g['group'] == str(g['gid']) == str(e['gid']):\n                e['group'] = str(e['gid'])\n            for key in ('mtime', 'ctime', 'atime'):\n                if key in e:\n                    e[key] = convert_tz(e[key], repo12_tzoffset, None)\n            hardlink = bool(g.get('hlid'))\n            if hardlink:\n                hardlinks[g['path']] = g['hlid']\n                if e['mode'].startswith('h'):\n                    e['mode'] = g['mode'][0] + e['mode'][1:]\n                    assert e['source'] != ''\n                    assert e['linktarget'] != ''\n                    e['source'] = ''\n                    e['linktarget'] = ''\n                    assert e['size'] == 0\n                    assert g['size'] >= 0\n                    e['size'] = g['size']\n            del g['hlid']\n            if g['target'] == e['linktarget']:\n                e['target'] = e['linktarget']\n                del e['linktarget']\n                del e['source']\n            if e['type'] == 'b' and is_win32:\n                del e['type'], g['type']\n                del e['mode'], g['mode']\n            assert g == e\n        if name == 'archive1':\n            assert hardlinks['tmp/borgtest/hardlink1'] == hardlinks['tmp/borgtest/hardlink2']\n    repo_path = f'{original_location}2'\n    for archive_name in ('archive1', 'archive2'):\n        (archive, repository) = open_archive(repo_path, archive_name)\n        with repository:\n            for item in archive.iter_items():\n                item_dict = item.as_dict()\n                assert not any((value is None for value in item_dict.values())), f'found None value in {item_dict}'\n                assert 'chunks' not in item or ('size' in item and item.size >= 0)\n                if item.path.endswith('directory') or item.path.endswith('borgtest'):\n                    assert stat.S_ISDIR(item.mode)\n                    assert item.uid > 0\n                    assert 'hlid' not in item\n                elif item.path.endswith('no_hardlink') or item.path.endswith('target'):\n                    assert stat.S_ISREG(item.mode)\n                    assert item.uid > 0\n                    assert 'hlid' not in item\n                    assert len(item.chunks) > 0\n                    assert 'bsdflags' not in item\n                elif item.path.endswith('hardlink1'):\n                    assert stat.S_ISREG(item.mode)\n                    assert item.uid > 0\n                    assert 'hlid' in item and len(item.hlid) == 32\n                    hlid1 = item.hlid\n                    assert len(item.chunks) > 0\n                    chunks1 = item.chunks\n                    size1 = item.size\n                    assert 'source' not in item\n                    assert 'target' not in item\n                    assert 'hardlink_master' not in item\n                elif item.path.endswith('hardlink2'):\n                    assert stat.S_ISREG(item.mode)\n                    assert item.uid > 0\n                    assert 'hlid' in item and len(item.hlid) == 32\n                    hlid2 = item.hlid\n                    assert len(item.chunks) > 0\n                    chunks2 = item.chunks\n                    size2 = item.size\n                    assert 'source' not in item\n                    assert 'target' not in item\n                    assert 'hardlink_master' not in item\n                elif item.path.endswith('broken_symlink'):\n                    assert stat.S_ISLNK(item.mode)\n                    assert item.target == 'doesnotexist'\n                    assert item.uid > 0\n                    assert 'hlid' not in item\n                elif item.path.endswith('symlink'):\n                    assert stat.S_ISLNK(item.mode)\n                    assert item.target == 'target'\n                    assert item.uid > 0\n                    assert 'hlid' not in item\n                elif item.path.endswith('fifo'):\n                    assert stat.S_ISFIFO(item.mode)\n                    assert item.uid > 0\n                    assert 'hlid' not in item\n                elif item.path.endswith('without_xattrs'):\n                    assert stat.S_ISREG(item.mode)\n                    assert 'xattrs' not in item\n                elif item.path.endswith('with_xattrs'):\n                    assert stat.S_ISREG(item.mode)\n                    assert 'xattrs' in item\n                    assert len(item.xattrs) == 2\n                    assert item.xattrs[b'key1'] == b'value'\n                    assert item.xattrs[b'key2'] == b''\n                elif item.path.endswith('without_flags'):\n                    assert stat.S_ISREG(item.mode)\n                    assert 'bsdflags' not in item\n                elif item.path.endswith('with_flags'):\n                    assert stat.S_ISREG(item.mode)\n                    assert 'bsdflags' in item\n                    assert item.bsdflags == stat.UF_NODUMP\n                elif item.path.endswith('root_stuff'):\n                    assert stat.S_ISDIR(item.mode)\n                    assert item.uid == 0\n                    assert item.gid == 0\n                    assert 'hlid' not in item\n                elif item.path.endswith('cdev_34_56'):\n                    assert stat.S_ISCHR(item.mode)\n                    assert 'rdev' in item and item.rdev != 0\n                    assert item.uid == 0\n                    assert item.gid == 0\n                    assert item.user == 'root'\n                    assert item.group in ('root', 'wheel')\n                    assert 'hlid' not in item\n                elif item.path.endswith('bdev_12_34'):\n                    if not is_win32:\n                        assert stat.S_ISBLK(item.mode)\n                    assert 'rdev' in item and item.rdev != 0\n                    assert item.uid == 0\n                    assert item.gid == 0\n                    assert item.user == 'root'\n                    assert item.group in ('root', 'wheel')\n                    assert 'hlid' not in item\n                elif item.path.endswith('strange_uid_gid'):\n                    assert stat.S_ISREG(item.mode)\n                    assert item.uid == 54321\n                    assert item.gid == 54321\n                    assert 'user' not in item\n                    assert 'group' not in item\n                else:\n                    raise NotImplementedError(f'test missing for {item.path}')\n        if archive_name == 'archive1':\n            assert hlid1 == hlid2\n            assert size1 == size2 == 16 + 1\n            assert chunks1 == chunks2",
            "def test_transfer_upgrade(archivers, request):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    archiver = request.getfixturevalue(archivers)\n    if archiver.get_kind() in ['remote', 'binary']:\n        pytest.skip('only works locally')\n    repo12_tar = os.path.join(os.path.dirname(__file__), 'repo12.tar.gz')\n    repo12_tzoffset = '+01:00'\n\n    def convert_tz(local_naive, tzoffset, tzinfo):\n        ts = parse_timestamp(local_naive + tzoffset)\n        return ts.astimezone(tzinfo).isoformat(timespec='microseconds')\n    original_location = archiver.repository_location\n    dst_dir = f'{original_location}1'\n    os.makedirs(dst_dir)\n    with tarfile.open(repo12_tar) as tf:\n        tf.extractall(dst_dir)\n    other_repo1 = f'--other-repo={original_location}1'\n    archiver.repository_location = original_location + '2'\n    assert os.environ.get('BORG_PASSPHRASE') == 'waytooeasyonlyfortests'\n    os.environ['BORG_TESTONLY_WEAKEN_KDF'] = '0'\n    cmd(archiver, 'rcreate', RK_ENCRYPTION, other_repo1)\n    cmd(archiver, 'transfer', other_repo1, '--upgrader=From12To20')\n    cmd(archiver, 'check')\n    rlist_json = cmd(archiver, 'rlist', '--json')\n    got = json.loads(rlist_json)\n    with open(os.path.join(dst_dir, 'test_meta', 'repo_list.json')) as f:\n        expected = json.load(f)\n    for key in ('encryption', 'repository'):\n        del got[key]\n        del expected[key]\n    assert len(got['archives']) == len(expected['archives'])\n    for (got_archive, expected_archive) in zip(got['archives'], expected['archives']):\n        del got_archive['id']\n        del expected_archive['id']\n        del expected_archive['barchive']\n        for key in ('start', 'time'):\n            expected_archive[key] = convert_tz(expected_archive[key], repo12_tzoffset, None)\n            got_ts = parse_timestamp(got_archive[key])\n            got_archive[key] = got_ts.replace(microsecond=0).isoformat(timespec='microseconds')\n    assert got == expected\n    for archive in got['archives']:\n        name = archive['name']\n        list_json = cmd(archiver, 'list', '--json-lines', name)\n        got = [json.loads(line) for line in list_json.splitlines()]\n        with open(os.path.join(dst_dir, 'test_meta', f'{name}_list.json')) as f:\n            lines = f.read()\n        expected = [json.loads(line) for line in lines.splitlines()]\n        hardlinks = {}\n        for (g, e) in zip(got, expected):\n            if e['flags'] == 0 and g['flags'] is None:\n                e['flags'] = None\n            if g['user'] == str(g['uid']) == str(e['uid']):\n                e['user'] = str(e['uid'])\n            if g['group'] == str(g['gid']) == str(e['gid']):\n                e['group'] = str(e['gid'])\n            for key in ('mtime', 'ctime', 'atime'):\n                if key in e:\n                    e[key] = convert_tz(e[key], repo12_tzoffset, None)\n            hardlink = bool(g.get('hlid'))\n            if hardlink:\n                hardlinks[g['path']] = g['hlid']\n                if e['mode'].startswith('h'):\n                    e['mode'] = g['mode'][0] + e['mode'][1:]\n                    assert e['source'] != ''\n                    assert e['linktarget'] != ''\n                    e['source'] = ''\n                    e['linktarget'] = ''\n                    assert e['size'] == 0\n                    assert g['size'] >= 0\n                    e['size'] = g['size']\n            del g['hlid']\n            if g['target'] == e['linktarget']:\n                e['target'] = e['linktarget']\n                del e['linktarget']\n                del e['source']\n            if e['type'] == 'b' and is_win32:\n                del e['type'], g['type']\n                del e['mode'], g['mode']\n            assert g == e\n        if name == 'archive1':\n            assert hardlinks['tmp/borgtest/hardlink1'] == hardlinks['tmp/borgtest/hardlink2']\n    repo_path = f'{original_location}2'\n    for archive_name in ('archive1', 'archive2'):\n        (archive, repository) = open_archive(repo_path, archive_name)\n        with repository:\n            for item in archive.iter_items():\n                item_dict = item.as_dict()\n                assert not any((value is None for value in item_dict.values())), f'found None value in {item_dict}'\n                assert 'chunks' not in item or ('size' in item and item.size >= 0)\n                if item.path.endswith('directory') or item.path.endswith('borgtest'):\n                    assert stat.S_ISDIR(item.mode)\n                    assert item.uid > 0\n                    assert 'hlid' not in item\n                elif item.path.endswith('no_hardlink') or item.path.endswith('target'):\n                    assert stat.S_ISREG(item.mode)\n                    assert item.uid > 0\n                    assert 'hlid' not in item\n                    assert len(item.chunks) > 0\n                    assert 'bsdflags' not in item\n                elif item.path.endswith('hardlink1'):\n                    assert stat.S_ISREG(item.mode)\n                    assert item.uid > 0\n                    assert 'hlid' in item and len(item.hlid) == 32\n                    hlid1 = item.hlid\n                    assert len(item.chunks) > 0\n                    chunks1 = item.chunks\n                    size1 = item.size\n                    assert 'source' not in item\n                    assert 'target' not in item\n                    assert 'hardlink_master' not in item\n                elif item.path.endswith('hardlink2'):\n                    assert stat.S_ISREG(item.mode)\n                    assert item.uid > 0\n                    assert 'hlid' in item and len(item.hlid) == 32\n                    hlid2 = item.hlid\n                    assert len(item.chunks) > 0\n                    chunks2 = item.chunks\n                    size2 = item.size\n                    assert 'source' not in item\n                    assert 'target' not in item\n                    assert 'hardlink_master' not in item\n                elif item.path.endswith('broken_symlink'):\n                    assert stat.S_ISLNK(item.mode)\n                    assert item.target == 'doesnotexist'\n                    assert item.uid > 0\n                    assert 'hlid' not in item\n                elif item.path.endswith('symlink'):\n                    assert stat.S_ISLNK(item.mode)\n                    assert item.target == 'target'\n                    assert item.uid > 0\n                    assert 'hlid' not in item\n                elif item.path.endswith('fifo'):\n                    assert stat.S_ISFIFO(item.mode)\n                    assert item.uid > 0\n                    assert 'hlid' not in item\n                elif item.path.endswith('without_xattrs'):\n                    assert stat.S_ISREG(item.mode)\n                    assert 'xattrs' not in item\n                elif item.path.endswith('with_xattrs'):\n                    assert stat.S_ISREG(item.mode)\n                    assert 'xattrs' in item\n                    assert len(item.xattrs) == 2\n                    assert item.xattrs[b'key1'] == b'value'\n                    assert item.xattrs[b'key2'] == b''\n                elif item.path.endswith('without_flags'):\n                    assert stat.S_ISREG(item.mode)\n                    assert 'bsdflags' not in item\n                elif item.path.endswith('with_flags'):\n                    assert stat.S_ISREG(item.mode)\n                    assert 'bsdflags' in item\n                    assert item.bsdflags == stat.UF_NODUMP\n                elif item.path.endswith('root_stuff'):\n                    assert stat.S_ISDIR(item.mode)\n                    assert item.uid == 0\n                    assert item.gid == 0\n                    assert 'hlid' not in item\n                elif item.path.endswith('cdev_34_56'):\n                    assert stat.S_ISCHR(item.mode)\n                    assert 'rdev' in item and item.rdev != 0\n                    assert item.uid == 0\n                    assert item.gid == 0\n                    assert item.user == 'root'\n                    assert item.group in ('root', 'wheel')\n                    assert 'hlid' not in item\n                elif item.path.endswith('bdev_12_34'):\n                    if not is_win32:\n                        assert stat.S_ISBLK(item.mode)\n                    assert 'rdev' in item and item.rdev != 0\n                    assert item.uid == 0\n                    assert item.gid == 0\n                    assert item.user == 'root'\n                    assert item.group in ('root', 'wheel')\n                    assert 'hlid' not in item\n                elif item.path.endswith('strange_uid_gid'):\n                    assert stat.S_ISREG(item.mode)\n                    assert item.uid == 54321\n                    assert item.gid == 54321\n                    assert 'user' not in item\n                    assert 'group' not in item\n                else:\n                    raise NotImplementedError(f'test missing for {item.path}')\n        if archive_name == 'archive1':\n            assert hlid1 == hlid2\n            assert size1 == size2 == 16 + 1\n            assert chunks1 == chunks2",
            "def test_transfer_upgrade(archivers, request):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    archiver = request.getfixturevalue(archivers)\n    if archiver.get_kind() in ['remote', 'binary']:\n        pytest.skip('only works locally')\n    repo12_tar = os.path.join(os.path.dirname(__file__), 'repo12.tar.gz')\n    repo12_tzoffset = '+01:00'\n\n    def convert_tz(local_naive, tzoffset, tzinfo):\n        ts = parse_timestamp(local_naive + tzoffset)\n        return ts.astimezone(tzinfo).isoformat(timespec='microseconds')\n    original_location = archiver.repository_location\n    dst_dir = f'{original_location}1'\n    os.makedirs(dst_dir)\n    with tarfile.open(repo12_tar) as tf:\n        tf.extractall(dst_dir)\n    other_repo1 = f'--other-repo={original_location}1'\n    archiver.repository_location = original_location + '2'\n    assert os.environ.get('BORG_PASSPHRASE') == 'waytooeasyonlyfortests'\n    os.environ['BORG_TESTONLY_WEAKEN_KDF'] = '0'\n    cmd(archiver, 'rcreate', RK_ENCRYPTION, other_repo1)\n    cmd(archiver, 'transfer', other_repo1, '--upgrader=From12To20')\n    cmd(archiver, 'check')\n    rlist_json = cmd(archiver, 'rlist', '--json')\n    got = json.loads(rlist_json)\n    with open(os.path.join(dst_dir, 'test_meta', 'repo_list.json')) as f:\n        expected = json.load(f)\n    for key in ('encryption', 'repository'):\n        del got[key]\n        del expected[key]\n    assert len(got['archives']) == len(expected['archives'])\n    for (got_archive, expected_archive) in zip(got['archives'], expected['archives']):\n        del got_archive['id']\n        del expected_archive['id']\n        del expected_archive['barchive']\n        for key in ('start', 'time'):\n            expected_archive[key] = convert_tz(expected_archive[key], repo12_tzoffset, None)\n            got_ts = parse_timestamp(got_archive[key])\n            got_archive[key] = got_ts.replace(microsecond=0).isoformat(timespec='microseconds')\n    assert got == expected\n    for archive in got['archives']:\n        name = archive['name']\n        list_json = cmd(archiver, 'list', '--json-lines', name)\n        got = [json.loads(line) for line in list_json.splitlines()]\n        with open(os.path.join(dst_dir, 'test_meta', f'{name}_list.json')) as f:\n            lines = f.read()\n        expected = [json.loads(line) for line in lines.splitlines()]\n        hardlinks = {}\n        for (g, e) in zip(got, expected):\n            if e['flags'] == 0 and g['flags'] is None:\n                e['flags'] = None\n            if g['user'] == str(g['uid']) == str(e['uid']):\n                e['user'] = str(e['uid'])\n            if g['group'] == str(g['gid']) == str(e['gid']):\n                e['group'] = str(e['gid'])\n            for key in ('mtime', 'ctime', 'atime'):\n                if key in e:\n                    e[key] = convert_tz(e[key], repo12_tzoffset, None)\n            hardlink = bool(g.get('hlid'))\n            if hardlink:\n                hardlinks[g['path']] = g['hlid']\n                if e['mode'].startswith('h'):\n                    e['mode'] = g['mode'][0] + e['mode'][1:]\n                    assert e['source'] != ''\n                    assert e['linktarget'] != ''\n                    e['source'] = ''\n                    e['linktarget'] = ''\n                    assert e['size'] == 0\n                    assert g['size'] >= 0\n                    e['size'] = g['size']\n            del g['hlid']\n            if g['target'] == e['linktarget']:\n                e['target'] = e['linktarget']\n                del e['linktarget']\n                del e['source']\n            if e['type'] == 'b' and is_win32:\n                del e['type'], g['type']\n                del e['mode'], g['mode']\n            assert g == e\n        if name == 'archive1':\n            assert hardlinks['tmp/borgtest/hardlink1'] == hardlinks['tmp/borgtest/hardlink2']\n    repo_path = f'{original_location}2'\n    for archive_name in ('archive1', 'archive2'):\n        (archive, repository) = open_archive(repo_path, archive_name)\n        with repository:\n            for item in archive.iter_items():\n                item_dict = item.as_dict()\n                assert not any((value is None for value in item_dict.values())), f'found None value in {item_dict}'\n                assert 'chunks' not in item or ('size' in item and item.size >= 0)\n                if item.path.endswith('directory') or item.path.endswith('borgtest'):\n                    assert stat.S_ISDIR(item.mode)\n                    assert item.uid > 0\n                    assert 'hlid' not in item\n                elif item.path.endswith('no_hardlink') or item.path.endswith('target'):\n                    assert stat.S_ISREG(item.mode)\n                    assert item.uid > 0\n                    assert 'hlid' not in item\n                    assert len(item.chunks) > 0\n                    assert 'bsdflags' not in item\n                elif item.path.endswith('hardlink1'):\n                    assert stat.S_ISREG(item.mode)\n                    assert item.uid > 0\n                    assert 'hlid' in item and len(item.hlid) == 32\n                    hlid1 = item.hlid\n                    assert len(item.chunks) > 0\n                    chunks1 = item.chunks\n                    size1 = item.size\n                    assert 'source' not in item\n                    assert 'target' not in item\n                    assert 'hardlink_master' not in item\n                elif item.path.endswith('hardlink2'):\n                    assert stat.S_ISREG(item.mode)\n                    assert item.uid > 0\n                    assert 'hlid' in item and len(item.hlid) == 32\n                    hlid2 = item.hlid\n                    assert len(item.chunks) > 0\n                    chunks2 = item.chunks\n                    size2 = item.size\n                    assert 'source' not in item\n                    assert 'target' not in item\n                    assert 'hardlink_master' not in item\n                elif item.path.endswith('broken_symlink'):\n                    assert stat.S_ISLNK(item.mode)\n                    assert item.target == 'doesnotexist'\n                    assert item.uid > 0\n                    assert 'hlid' not in item\n                elif item.path.endswith('symlink'):\n                    assert stat.S_ISLNK(item.mode)\n                    assert item.target == 'target'\n                    assert item.uid > 0\n                    assert 'hlid' not in item\n                elif item.path.endswith('fifo'):\n                    assert stat.S_ISFIFO(item.mode)\n                    assert item.uid > 0\n                    assert 'hlid' not in item\n                elif item.path.endswith('without_xattrs'):\n                    assert stat.S_ISREG(item.mode)\n                    assert 'xattrs' not in item\n                elif item.path.endswith('with_xattrs'):\n                    assert stat.S_ISREG(item.mode)\n                    assert 'xattrs' in item\n                    assert len(item.xattrs) == 2\n                    assert item.xattrs[b'key1'] == b'value'\n                    assert item.xattrs[b'key2'] == b''\n                elif item.path.endswith('without_flags'):\n                    assert stat.S_ISREG(item.mode)\n                    assert 'bsdflags' not in item\n                elif item.path.endswith('with_flags'):\n                    assert stat.S_ISREG(item.mode)\n                    assert 'bsdflags' in item\n                    assert item.bsdflags == stat.UF_NODUMP\n                elif item.path.endswith('root_stuff'):\n                    assert stat.S_ISDIR(item.mode)\n                    assert item.uid == 0\n                    assert item.gid == 0\n                    assert 'hlid' not in item\n                elif item.path.endswith('cdev_34_56'):\n                    assert stat.S_ISCHR(item.mode)\n                    assert 'rdev' in item and item.rdev != 0\n                    assert item.uid == 0\n                    assert item.gid == 0\n                    assert item.user == 'root'\n                    assert item.group in ('root', 'wheel')\n                    assert 'hlid' not in item\n                elif item.path.endswith('bdev_12_34'):\n                    if not is_win32:\n                        assert stat.S_ISBLK(item.mode)\n                    assert 'rdev' in item and item.rdev != 0\n                    assert item.uid == 0\n                    assert item.gid == 0\n                    assert item.user == 'root'\n                    assert item.group in ('root', 'wheel')\n                    assert 'hlid' not in item\n                elif item.path.endswith('strange_uid_gid'):\n                    assert stat.S_ISREG(item.mode)\n                    assert item.uid == 54321\n                    assert item.gid == 54321\n                    assert 'user' not in item\n                    assert 'group' not in item\n                else:\n                    raise NotImplementedError(f'test missing for {item.path}')\n        if archive_name == 'archive1':\n            assert hlid1 == hlid2\n            assert size1 == size2 == 16 + 1\n            assert chunks1 == chunks2",
            "def test_transfer_upgrade(archivers, request):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    archiver = request.getfixturevalue(archivers)\n    if archiver.get_kind() in ['remote', 'binary']:\n        pytest.skip('only works locally')\n    repo12_tar = os.path.join(os.path.dirname(__file__), 'repo12.tar.gz')\n    repo12_tzoffset = '+01:00'\n\n    def convert_tz(local_naive, tzoffset, tzinfo):\n        ts = parse_timestamp(local_naive + tzoffset)\n        return ts.astimezone(tzinfo).isoformat(timespec='microseconds')\n    original_location = archiver.repository_location\n    dst_dir = f'{original_location}1'\n    os.makedirs(dst_dir)\n    with tarfile.open(repo12_tar) as tf:\n        tf.extractall(dst_dir)\n    other_repo1 = f'--other-repo={original_location}1'\n    archiver.repository_location = original_location + '2'\n    assert os.environ.get('BORG_PASSPHRASE') == 'waytooeasyonlyfortests'\n    os.environ['BORG_TESTONLY_WEAKEN_KDF'] = '0'\n    cmd(archiver, 'rcreate', RK_ENCRYPTION, other_repo1)\n    cmd(archiver, 'transfer', other_repo1, '--upgrader=From12To20')\n    cmd(archiver, 'check')\n    rlist_json = cmd(archiver, 'rlist', '--json')\n    got = json.loads(rlist_json)\n    with open(os.path.join(dst_dir, 'test_meta', 'repo_list.json')) as f:\n        expected = json.load(f)\n    for key in ('encryption', 'repository'):\n        del got[key]\n        del expected[key]\n    assert len(got['archives']) == len(expected['archives'])\n    for (got_archive, expected_archive) in zip(got['archives'], expected['archives']):\n        del got_archive['id']\n        del expected_archive['id']\n        del expected_archive['barchive']\n        for key in ('start', 'time'):\n            expected_archive[key] = convert_tz(expected_archive[key], repo12_tzoffset, None)\n            got_ts = parse_timestamp(got_archive[key])\n            got_archive[key] = got_ts.replace(microsecond=0).isoformat(timespec='microseconds')\n    assert got == expected\n    for archive in got['archives']:\n        name = archive['name']\n        list_json = cmd(archiver, 'list', '--json-lines', name)\n        got = [json.loads(line) for line in list_json.splitlines()]\n        with open(os.path.join(dst_dir, 'test_meta', f'{name}_list.json')) as f:\n            lines = f.read()\n        expected = [json.loads(line) for line in lines.splitlines()]\n        hardlinks = {}\n        for (g, e) in zip(got, expected):\n            if e['flags'] == 0 and g['flags'] is None:\n                e['flags'] = None\n            if g['user'] == str(g['uid']) == str(e['uid']):\n                e['user'] = str(e['uid'])\n            if g['group'] == str(g['gid']) == str(e['gid']):\n                e['group'] = str(e['gid'])\n            for key in ('mtime', 'ctime', 'atime'):\n                if key in e:\n                    e[key] = convert_tz(e[key], repo12_tzoffset, None)\n            hardlink = bool(g.get('hlid'))\n            if hardlink:\n                hardlinks[g['path']] = g['hlid']\n                if e['mode'].startswith('h'):\n                    e['mode'] = g['mode'][0] + e['mode'][1:]\n                    assert e['source'] != ''\n                    assert e['linktarget'] != ''\n                    e['source'] = ''\n                    e['linktarget'] = ''\n                    assert e['size'] == 0\n                    assert g['size'] >= 0\n                    e['size'] = g['size']\n            del g['hlid']\n            if g['target'] == e['linktarget']:\n                e['target'] = e['linktarget']\n                del e['linktarget']\n                del e['source']\n            if e['type'] == 'b' and is_win32:\n                del e['type'], g['type']\n                del e['mode'], g['mode']\n            assert g == e\n        if name == 'archive1':\n            assert hardlinks['tmp/borgtest/hardlink1'] == hardlinks['tmp/borgtest/hardlink2']\n    repo_path = f'{original_location}2'\n    for archive_name in ('archive1', 'archive2'):\n        (archive, repository) = open_archive(repo_path, archive_name)\n        with repository:\n            for item in archive.iter_items():\n                item_dict = item.as_dict()\n                assert not any((value is None for value in item_dict.values())), f'found None value in {item_dict}'\n                assert 'chunks' not in item or ('size' in item and item.size >= 0)\n                if item.path.endswith('directory') or item.path.endswith('borgtest'):\n                    assert stat.S_ISDIR(item.mode)\n                    assert item.uid > 0\n                    assert 'hlid' not in item\n                elif item.path.endswith('no_hardlink') or item.path.endswith('target'):\n                    assert stat.S_ISREG(item.mode)\n                    assert item.uid > 0\n                    assert 'hlid' not in item\n                    assert len(item.chunks) > 0\n                    assert 'bsdflags' not in item\n                elif item.path.endswith('hardlink1'):\n                    assert stat.S_ISREG(item.mode)\n                    assert item.uid > 0\n                    assert 'hlid' in item and len(item.hlid) == 32\n                    hlid1 = item.hlid\n                    assert len(item.chunks) > 0\n                    chunks1 = item.chunks\n                    size1 = item.size\n                    assert 'source' not in item\n                    assert 'target' not in item\n                    assert 'hardlink_master' not in item\n                elif item.path.endswith('hardlink2'):\n                    assert stat.S_ISREG(item.mode)\n                    assert item.uid > 0\n                    assert 'hlid' in item and len(item.hlid) == 32\n                    hlid2 = item.hlid\n                    assert len(item.chunks) > 0\n                    chunks2 = item.chunks\n                    size2 = item.size\n                    assert 'source' not in item\n                    assert 'target' not in item\n                    assert 'hardlink_master' not in item\n                elif item.path.endswith('broken_symlink'):\n                    assert stat.S_ISLNK(item.mode)\n                    assert item.target == 'doesnotexist'\n                    assert item.uid > 0\n                    assert 'hlid' not in item\n                elif item.path.endswith('symlink'):\n                    assert stat.S_ISLNK(item.mode)\n                    assert item.target == 'target'\n                    assert item.uid > 0\n                    assert 'hlid' not in item\n                elif item.path.endswith('fifo'):\n                    assert stat.S_ISFIFO(item.mode)\n                    assert item.uid > 0\n                    assert 'hlid' not in item\n                elif item.path.endswith('without_xattrs'):\n                    assert stat.S_ISREG(item.mode)\n                    assert 'xattrs' not in item\n                elif item.path.endswith('with_xattrs'):\n                    assert stat.S_ISREG(item.mode)\n                    assert 'xattrs' in item\n                    assert len(item.xattrs) == 2\n                    assert item.xattrs[b'key1'] == b'value'\n                    assert item.xattrs[b'key2'] == b''\n                elif item.path.endswith('without_flags'):\n                    assert stat.S_ISREG(item.mode)\n                    assert 'bsdflags' not in item\n                elif item.path.endswith('with_flags'):\n                    assert stat.S_ISREG(item.mode)\n                    assert 'bsdflags' in item\n                    assert item.bsdflags == stat.UF_NODUMP\n                elif item.path.endswith('root_stuff'):\n                    assert stat.S_ISDIR(item.mode)\n                    assert item.uid == 0\n                    assert item.gid == 0\n                    assert 'hlid' not in item\n                elif item.path.endswith('cdev_34_56'):\n                    assert stat.S_ISCHR(item.mode)\n                    assert 'rdev' in item and item.rdev != 0\n                    assert item.uid == 0\n                    assert item.gid == 0\n                    assert item.user == 'root'\n                    assert item.group in ('root', 'wheel')\n                    assert 'hlid' not in item\n                elif item.path.endswith('bdev_12_34'):\n                    if not is_win32:\n                        assert stat.S_ISBLK(item.mode)\n                    assert 'rdev' in item and item.rdev != 0\n                    assert item.uid == 0\n                    assert item.gid == 0\n                    assert item.user == 'root'\n                    assert item.group in ('root', 'wheel')\n                    assert 'hlid' not in item\n                elif item.path.endswith('strange_uid_gid'):\n                    assert stat.S_ISREG(item.mode)\n                    assert item.uid == 54321\n                    assert item.gid == 54321\n                    assert 'user' not in item\n                    assert 'group' not in item\n                else:\n                    raise NotImplementedError(f'test missing for {item.path}')\n        if archive_name == 'archive1':\n            assert hlid1 == hlid2\n            assert size1 == size2 == 16 + 1\n            assert chunks1 == chunks2"
        ]
    }
]
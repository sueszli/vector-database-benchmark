[
    {
        "func_name": "__init__",
        "original": "def __init__(self, *args, **kwds):\n    kwds['style'] = wx.DEFAULT_DIALOG_STYLE\n    wx.Dialog.__init__(self, *args, **kwds)\n    self.dlg_main_panel = wx.Panel(self, -1)\n    self.dlgOutText = wx.TextCtrl(self.dlg_main_panel, -1, '', style=wx.TE_MULTILINE | wx.NO_BORDER)\n    self.dlgClearOutBTN = wx.Button(self.dlg_main_panel, -1, 'Clear')\n    self.dlgCloseBTN = wx.Button(self.dlg_main_panel, -1, 'Close')\n    self.dlg_static_sizer_staticbox = wx.StaticBox(self, -1, 'Output')\n    self.__set_properties()\n    self.__do_layout()\n    self.Bind(wx.EVT_BUTTON, self.OnClearDlgOut, self.dlgClearOutBTN)\n    self.Bind(wx.EVT_BUTTON, self.OnOutDlgClose, self.dlgCloseBTN)",
        "mutated": [
            "def __init__(self, *args, **kwds):\n    if False:\n        i = 10\n    kwds['style'] = wx.DEFAULT_DIALOG_STYLE\n    wx.Dialog.__init__(self, *args, **kwds)\n    self.dlg_main_panel = wx.Panel(self, -1)\n    self.dlgOutText = wx.TextCtrl(self.dlg_main_panel, -1, '', style=wx.TE_MULTILINE | wx.NO_BORDER)\n    self.dlgClearOutBTN = wx.Button(self.dlg_main_panel, -1, 'Clear')\n    self.dlgCloseBTN = wx.Button(self.dlg_main_panel, -1, 'Close')\n    self.dlg_static_sizer_staticbox = wx.StaticBox(self, -1, 'Output')\n    self.__set_properties()\n    self.__do_layout()\n    self.Bind(wx.EVT_BUTTON, self.OnClearDlgOut, self.dlgClearOutBTN)\n    self.Bind(wx.EVT_BUTTON, self.OnOutDlgClose, self.dlgCloseBTN)",
            "def __init__(self, *args, **kwds):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    kwds['style'] = wx.DEFAULT_DIALOG_STYLE\n    wx.Dialog.__init__(self, *args, **kwds)\n    self.dlg_main_panel = wx.Panel(self, -1)\n    self.dlgOutText = wx.TextCtrl(self.dlg_main_panel, -1, '', style=wx.TE_MULTILINE | wx.NO_BORDER)\n    self.dlgClearOutBTN = wx.Button(self.dlg_main_panel, -1, 'Clear')\n    self.dlgCloseBTN = wx.Button(self.dlg_main_panel, -1, 'Close')\n    self.dlg_static_sizer_staticbox = wx.StaticBox(self, -1, 'Output')\n    self.__set_properties()\n    self.__do_layout()\n    self.Bind(wx.EVT_BUTTON, self.OnClearDlgOut, self.dlgClearOutBTN)\n    self.Bind(wx.EVT_BUTTON, self.OnOutDlgClose, self.dlgCloseBTN)",
            "def __init__(self, *args, **kwds):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    kwds['style'] = wx.DEFAULT_DIALOG_STYLE\n    wx.Dialog.__init__(self, *args, **kwds)\n    self.dlg_main_panel = wx.Panel(self, -1)\n    self.dlgOutText = wx.TextCtrl(self.dlg_main_panel, -1, '', style=wx.TE_MULTILINE | wx.NO_BORDER)\n    self.dlgClearOutBTN = wx.Button(self.dlg_main_panel, -1, 'Clear')\n    self.dlgCloseBTN = wx.Button(self.dlg_main_panel, -1, 'Close')\n    self.dlg_static_sizer_staticbox = wx.StaticBox(self, -1, 'Output')\n    self.__set_properties()\n    self.__do_layout()\n    self.Bind(wx.EVT_BUTTON, self.OnClearDlgOut, self.dlgClearOutBTN)\n    self.Bind(wx.EVT_BUTTON, self.OnOutDlgClose, self.dlgCloseBTN)",
            "def __init__(self, *args, **kwds):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    kwds['style'] = wx.DEFAULT_DIALOG_STYLE\n    wx.Dialog.__init__(self, *args, **kwds)\n    self.dlg_main_panel = wx.Panel(self, -1)\n    self.dlgOutText = wx.TextCtrl(self.dlg_main_panel, -1, '', style=wx.TE_MULTILINE | wx.NO_BORDER)\n    self.dlgClearOutBTN = wx.Button(self.dlg_main_panel, -1, 'Clear')\n    self.dlgCloseBTN = wx.Button(self.dlg_main_panel, -1, 'Close')\n    self.dlg_static_sizer_staticbox = wx.StaticBox(self, -1, 'Output')\n    self.__set_properties()\n    self.__do_layout()\n    self.Bind(wx.EVT_BUTTON, self.OnClearDlgOut, self.dlgClearOutBTN)\n    self.Bind(wx.EVT_BUTTON, self.OnOutDlgClose, self.dlgCloseBTN)",
            "def __init__(self, *args, **kwds):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    kwds['style'] = wx.DEFAULT_DIALOG_STYLE\n    wx.Dialog.__init__(self, *args, **kwds)\n    self.dlg_main_panel = wx.Panel(self, -1)\n    self.dlgOutText = wx.TextCtrl(self.dlg_main_panel, -1, '', style=wx.TE_MULTILINE | wx.NO_BORDER)\n    self.dlgClearOutBTN = wx.Button(self.dlg_main_panel, -1, 'Clear')\n    self.dlgCloseBTN = wx.Button(self.dlg_main_panel, -1, 'Close')\n    self.dlg_static_sizer_staticbox = wx.StaticBox(self, -1, 'Output')\n    self.__set_properties()\n    self.__do_layout()\n    self.Bind(wx.EVT_BUTTON, self.OnClearDlgOut, self.dlgClearOutBTN)\n    self.Bind(wx.EVT_BUTTON, self.OnOutDlgClose, self.dlgCloseBTN)"
        ]
    },
    {
        "func_name": "__set_properties",
        "original": "def __set_properties(self):\n    self.SetTitle('Exporter Output')\n    self.SetSize((530, 405))\n    self.dlgOutText.SetSize((500, 300))",
        "mutated": [
            "def __set_properties(self):\n    if False:\n        i = 10\n    self.SetTitle('Exporter Output')\n    self.SetSize((530, 405))\n    self.dlgOutText.SetSize((500, 300))",
            "def __set_properties(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.SetTitle('Exporter Output')\n    self.SetSize((530, 405))\n    self.dlgOutText.SetSize((500, 300))",
            "def __set_properties(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.SetTitle('Exporter Output')\n    self.SetSize((530, 405))\n    self.dlgOutText.SetSize((500, 300))",
            "def __set_properties(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.SetTitle('Exporter Output')\n    self.SetSize((530, 405))\n    self.dlgOutText.SetSize((500, 300))",
            "def __set_properties(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.SetTitle('Exporter Output')\n    self.SetSize((530, 405))\n    self.dlgOutText.SetSize((500, 300))"
        ]
    },
    {
        "func_name": "__do_layout",
        "original": "def __do_layout(self):\n    self.dlg_static_sizer_staticbox.Lower()\n    dlg_static_sizer = wx.StaticBoxSizer(self.dlg_static_sizer_staticbox, wx.HORIZONTAL)\n    dlg_main_flex_sizer = wx.FlexGridSizer(3, 1, 0, 0)\n    dlg_button_sizer = wx.GridSizer(1, 2, 0, 0)\n    dlg_main_flex_sizer.Add(self.dlgOutText, 0, wx.ALL | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 2)\n    dlg_button_sizer.Add(self.dlgClearOutBTN, 0, wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)\n    dlg_button_sizer.Add(self.dlgCloseBTN, 0, wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)\n    dlg_main_flex_sizer.Add(dlg_button_sizer, 1, wx.EXPAND, 0)\n    self.dlg_main_panel.SetSizer(dlg_main_flex_sizer)\n    dlg_static_sizer.Add(self.dlg_main_panel, 1, wx.EXPAND, 0)\n    self.SetSizer(dlg_static_sizer)\n    self.Layout()\n    self.Centre()",
        "mutated": [
            "def __do_layout(self):\n    if False:\n        i = 10\n    self.dlg_static_sizer_staticbox.Lower()\n    dlg_static_sizer = wx.StaticBoxSizer(self.dlg_static_sizer_staticbox, wx.HORIZONTAL)\n    dlg_main_flex_sizer = wx.FlexGridSizer(3, 1, 0, 0)\n    dlg_button_sizer = wx.GridSizer(1, 2, 0, 0)\n    dlg_main_flex_sizer.Add(self.dlgOutText, 0, wx.ALL | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 2)\n    dlg_button_sizer.Add(self.dlgClearOutBTN, 0, wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)\n    dlg_button_sizer.Add(self.dlgCloseBTN, 0, wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)\n    dlg_main_flex_sizer.Add(dlg_button_sizer, 1, wx.EXPAND, 0)\n    self.dlg_main_panel.SetSizer(dlg_main_flex_sizer)\n    dlg_static_sizer.Add(self.dlg_main_panel, 1, wx.EXPAND, 0)\n    self.SetSizer(dlg_static_sizer)\n    self.Layout()\n    self.Centre()",
            "def __do_layout(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.dlg_static_sizer_staticbox.Lower()\n    dlg_static_sizer = wx.StaticBoxSizer(self.dlg_static_sizer_staticbox, wx.HORIZONTAL)\n    dlg_main_flex_sizer = wx.FlexGridSizer(3, 1, 0, 0)\n    dlg_button_sizer = wx.GridSizer(1, 2, 0, 0)\n    dlg_main_flex_sizer.Add(self.dlgOutText, 0, wx.ALL | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 2)\n    dlg_button_sizer.Add(self.dlgClearOutBTN, 0, wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)\n    dlg_button_sizer.Add(self.dlgCloseBTN, 0, wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)\n    dlg_main_flex_sizer.Add(dlg_button_sizer, 1, wx.EXPAND, 0)\n    self.dlg_main_panel.SetSizer(dlg_main_flex_sizer)\n    dlg_static_sizer.Add(self.dlg_main_panel, 1, wx.EXPAND, 0)\n    self.SetSizer(dlg_static_sizer)\n    self.Layout()\n    self.Centre()",
            "def __do_layout(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.dlg_static_sizer_staticbox.Lower()\n    dlg_static_sizer = wx.StaticBoxSizer(self.dlg_static_sizer_staticbox, wx.HORIZONTAL)\n    dlg_main_flex_sizer = wx.FlexGridSizer(3, 1, 0, 0)\n    dlg_button_sizer = wx.GridSizer(1, 2, 0, 0)\n    dlg_main_flex_sizer.Add(self.dlgOutText, 0, wx.ALL | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 2)\n    dlg_button_sizer.Add(self.dlgClearOutBTN, 0, wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)\n    dlg_button_sizer.Add(self.dlgCloseBTN, 0, wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)\n    dlg_main_flex_sizer.Add(dlg_button_sizer, 1, wx.EXPAND, 0)\n    self.dlg_main_panel.SetSizer(dlg_main_flex_sizer)\n    dlg_static_sizer.Add(self.dlg_main_panel, 1, wx.EXPAND, 0)\n    self.SetSizer(dlg_static_sizer)\n    self.Layout()\n    self.Centre()",
            "def __do_layout(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.dlg_static_sizer_staticbox.Lower()\n    dlg_static_sizer = wx.StaticBoxSizer(self.dlg_static_sizer_staticbox, wx.HORIZONTAL)\n    dlg_main_flex_sizer = wx.FlexGridSizer(3, 1, 0, 0)\n    dlg_button_sizer = wx.GridSizer(1, 2, 0, 0)\n    dlg_main_flex_sizer.Add(self.dlgOutText, 0, wx.ALL | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 2)\n    dlg_button_sizer.Add(self.dlgClearOutBTN, 0, wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)\n    dlg_button_sizer.Add(self.dlgCloseBTN, 0, wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)\n    dlg_main_flex_sizer.Add(dlg_button_sizer, 1, wx.EXPAND, 0)\n    self.dlg_main_panel.SetSizer(dlg_main_flex_sizer)\n    dlg_static_sizer.Add(self.dlg_main_panel, 1, wx.EXPAND, 0)\n    self.SetSizer(dlg_static_sizer)\n    self.Layout()\n    self.Centre()",
            "def __do_layout(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.dlg_static_sizer_staticbox.Lower()\n    dlg_static_sizer = wx.StaticBoxSizer(self.dlg_static_sizer_staticbox, wx.HORIZONTAL)\n    dlg_main_flex_sizer = wx.FlexGridSizer(3, 1, 0, 0)\n    dlg_button_sizer = wx.GridSizer(1, 2, 0, 0)\n    dlg_main_flex_sizer.Add(self.dlgOutText, 0, wx.ALL | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 2)\n    dlg_button_sizer.Add(self.dlgClearOutBTN, 0, wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)\n    dlg_button_sizer.Add(self.dlgCloseBTN, 0, wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)\n    dlg_main_flex_sizer.Add(dlg_button_sizer, 1, wx.EXPAND, 0)\n    self.dlg_main_panel.SetSizer(dlg_main_flex_sizer)\n    dlg_static_sizer.Add(self.dlg_main_panel, 1, wx.EXPAND, 0)\n    self.SetSizer(dlg_static_sizer)\n    self.Layout()\n    self.Centre()"
        ]
    },
    {
        "func_name": "OnClearDlgOut",
        "original": "def OnClearDlgOut(self, event):\n    self.dlgOutText.Clear()\n    event.Skip()",
        "mutated": [
            "def OnClearDlgOut(self, event):\n    if False:\n        i = 10\n    self.dlgOutText.Clear()\n    event.Skip()",
            "def OnClearDlgOut(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.dlgOutText.Clear()\n    event.Skip()",
            "def OnClearDlgOut(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.dlgOutText.Clear()\n    event.Skip()",
            "def OnClearDlgOut(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.dlgOutText.Clear()\n    event.Skip()",
            "def OnClearDlgOut(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.dlgOutText.Clear()\n    event.Skip()"
        ]
    },
    {
        "func_name": "OnOutDlgClose",
        "original": "def OnOutDlgClose(self, event):\n    self.Close()\n    event.Skip()",
        "mutated": [
            "def OnOutDlgClose(self, event):\n    if False:\n        i = 10\n    self.Close()\n    event.Skip()",
            "def OnOutDlgClose(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.Close()\n    event.Skip()",
            "def OnOutDlgClose(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.Close()\n    event.Skip()",
            "def OnOutDlgClose(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.Close()\n    event.Skip()",
            "def OnOutDlgClose(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.Close()\n    event.Skip()"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, main, *args, **kwds):\n    kwds['style'] = wx.DEFAULT_DIALOG_STYLE\n    wx.Dialog.__init__(self, main, *args, **kwds)\n    self.p = wx.Panel(self)\n    self.pview_modelFile = FileBrowseButton(self.p, labelText='Model File', buttonText='Choose..')\n    self.pview_animFile = FileBrowseButton(self.p, labelText='Animation File', buttonText='Choose..')\n    self.pview_run = wx.Button(self.p, -1, 'Pview')\n    self.__set_properties()\n    self.__do_layout()\n    self.Bind(wx.EVT_BUTTON, self.RunPview, self.pview_run)",
        "mutated": [
            "def __init__(self, main, *args, **kwds):\n    if False:\n        i = 10\n    kwds['style'] = wx.DEFAULT_DIALOG_STYLE\n    wx.Dialog.__init__(self, main, *args, **kwds)\n    self.p = wx.Panel(self)\n    self.pview_modelFile = FileBrowseButton(self.p, labelText='Model File', buttonText='Choose..')\n    self.pview_animFile = FileBrowseButton(self.p, labelText='Animation File', buttonText='Choose..')\n    self.pview_run = wx.Button(self.p, -1, 'Pview')\n    self.__set_properties()\n    self.__do_layout()\n    self.Bind(wx.EVT_BUTTON, self.RunPview, self.pview_run)",
            "def __init__(self, main, *args, **kwds):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    kwds['style'] = wx.DEFAULT_DIALOG_STYLE\n    wx.Dialog.__init__(self, main, *args, **kwds)\n    self.p = wx.Panel(self)\n    self.pview_modelFile = FileBrowseButton(self.p, labelText='Model File', buttonText='Choose..')\n    self.pview_animFile = FileBrowseButton(self.p, labelText='Animation File', buttonText='Choose..')\n    self.pview_run = wx.Button(self.p, -1, 'Pview')\n    self.__set_properties()\n    self.__do_layout()\n    self.Bind(wx.EVT_BUTTON, self.RunPview, self.pview_run)",
            "def __init__(self, main, *args, **kwds):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    kwds['style'] = wx.DEFAULT_DIALOG_STYLE\n    wx.Dialog.__init__(self, main, *args, **kwds)\n    self.p = wx.Panel(self)\n    self.pview_modelFile = FileBrowseButton(self.p, labelText='Model File', buttonText='Choose..')\n    self.pview_animFile = FileBrowseButton(self.p, labelText='Animation File', buttonText='Choose..')\n    self.pview_run = wx.Button(self.p, -1, 'Pview')\n    self.__set_properties()\n    self.__do_layout()\n    self.Bind(wx.EVT_BUTTON, self.RunPview, self.pview_run)",
            "def __init__(self, main, *args, **kwds):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    kwds['style'] = wx.DEFAULT_DIALOG_STYLE\n    wx.Dialog.__init__(self, main, *args, **kwds)\n    self.p = wx.Panel(self)\n    self.pview_modelFile = FileBrowseButton(self.p, labelText='Model File', buttonText='Choose..')\n    self.pview_animFile = FileBrowseButton(self.p, labelText='Animation File', buttonText='Choose..')\n    self.pview_run = wx.Button(self.p, -1, 'Pview')\n    self.__set_properties()\n    self.__do_layout()\n    self.Bind(wx.EVT_BUTTON, self.RunPview, self.pview_run)",
            "def __init__(self, main, *args, **kwds):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    kwds['style'] = wx.DEFAULT_DIALOG_STYLE\n    wx.Dialog.__init__(self, main, *args, **kwds)\n    self.p = wx.Panel(self)\n    self.pview_modelFile = FileBrowseButton(self.p, labelText='Model File', buttonText='Choose..')\n    self.pview_animFile = FileBrowseButton(self.p, labelText='Animation File', buttonText='Choose..')\n    self.pview_run = wx.Button(self.p, -1, 'Pview')\n    self.__set_properties()\n    self.__do_layout()\n    self.Bind(wx.EVT_BUTTON, self.RunPview, self.pview_run)"
        ]
    },
    {
        "func_name": "__set_properties",
        "original": "def __set_properties(self):\n    self.SetTitle('Pview')\n    self.SetSize((400, 100))\n    self.pview_modelFile.SetMinSize((350, 23))\n    self.pview_animFile.SetMinSize((400, 23))",
        "mutated": [
            "def __set_properties(self):\n    if False:\n        i = 10\n    self.SetTitle('Pview')\n    self.SetSize((400, 100))\n    self.pview_modelFile.SetMinSize((350, 23))\n    self.pview_animFile.SetMinSize((400, 23))",
            "def __set_properties(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.SetTitle('Pview')\n    self.SetSize((400, 100))\n    self.pview_modelFile.SetMinSize((350, 23))\n    self.pview_animFile.SetMinSize((400, 23))",
            "def __set_properties(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.SetTitle('Pview')\n    self.SetSize((400, 100))\n    self.pview_modelFile.SetMinSize((350, 23))\n    self.pview_animFile.SetMinSize((400, 23))",
            "def __set_properties(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.SetTitle('Pview')\n    self.SetSize((400, 100))\n    self.pview_modelFile.SetMinSize((350, 23))\n    self.pview_animFile.SetMinSize((400, 23))",
            "def __set_properties(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.SetTitle('Pview')\n    self.SetSize((400, 100))\n    self.pview_modelFile.SetMinSize((350, 23))\n    self.pview_animFile.SetMinSize((400, 23))"
        ]
    },
    {
        "func_name": "__do_layout",
        "original": "def __do_layout(self):\n    pview_main_flex_sizer = wx.FlexGridSizer(4, 1, 0, 0)\n    pview_main_flex_sizer.Add(self.pview_modelFile, 1, wx.EXPAND | wx.ALIGN_CENTER_VERTICAL)\n    pview_main_flex_sizer.Add(self.pview_animFile, 1, wx.EXPAND | wx.ALIGN_CENTER_VERTICAL)\n    pview_main_flex_sizer.Add(self.pview_run, 0, wx.ALIGN_RIGHT | wx.RIGHT, 3)\n    self.SetSizer(pview_main_flex_sizer)\n    self.Layout()\n    self.Centre()",
        "mutated": [
            "def __do_layout(self):\n    if False:\n        i = 10\n    pview_main_flex_sizer = wx.FlexGridSizer(4, 1, 0, 0)\n    pview_main_flex_sizer.Add(self.pview_modelFile, 1, wx.EXPAND | wx.ALIGN_CENTER_VERTICAL)\n    pview_main_flex_sizer.Add(self.pview_animFile, 1, wx.EXPAND | wx.ALIGN_CENTER_VERTICAL)\n    pview_main_flex_sizer.Add(self.pview_run, 0, wx.ALIGN_RIGHT | wx.RIGHT, 3)\n    self.SetSizer(pview_main_flex_sizer)\n    self.Layout()\n    self.Centre()",
            "def __do_layout(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    pview_main_flex_sizer = wx.FlexGridSizer(4, 1, 0, 0)\n    pview_main_flex_sizer.Add(self.pview_modelFile, 1, wx.EXPAND | wx.ALIGN_CENTER_VERTICAL)\n    pview_main_flex_sizer.Add(self.pview_animFile, 1, wx.EXPAND | wx.ALIGN_CENTER_VERTICAL)\n    pview_main_flex_sizer.Add(self.pview_run, 0, wx.ALIGN_RIGHT | wx.RIGHT, 3)\n    self.SetSizer(pview_main_flex_sizer)\n    self.Layout()\n    self.Centre()",
            "def __do_layout(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    pview_main_flex_sizer = wx.FlexGridSizer(4, 1, 0, 0)\n    pview_main_flex_sizer.Add(self.pview_modelFile, 1, wx.EXPAND | wx.ALIGN_CENTER_VERTICAL)\n    pview_main_flex_sizer.Add(self.pview_animFile, 1, wx.EXPAND | wx.ALIGN_CENTER_VERTICAL)\n    pview_main_flex_sizer.Add(self.pview_run, 0, wx.ALIGN_RIGHT | wx.RIGHT, 3)\n    self.SetSizer(pview_main_flex_sizer)\n    self.Layout()\n    self.Centre()",
            "def __do_layout(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    pview_main_flex_sizer = wx.FlexGridSizer(4, 1, 0, 0)\n    pview_main_flex_sizer.Add(self.pview_modelFile, 1, wx.EXPAND | wx.ALIGN_CENTER_VERTICAL)\n    pview_main_flex_sizer.Add(self.pview_animFile, 1, wx.EXPAND | wx.ALIGN_CENTER_VERTICAL)\n    pview_main_flex_sizer.Add(self.pview_run, 0, wx.ALIGN_RIGHT | wx.RIGHT, 3)\n    self.SetSizer(pview_main_flex_sizer)\n    self.Layout()\n    self.Centre()",
            "def __do_layout(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    pview_main_flex_sizer = wx.FlexGridSizer(4, 1, 0, 0)\n    pview_main_flex_sizer.Add(self.pview_modelFile, 1, wx.EXPAND | wx.ALIGN_CENTER_VERTICAL)\n    pview_main_flex_sizer.Add(self.pview_animFile, 1, wx.EXPAND | wx.ALIGN_CENTER_VERTICAL)\n    pview_main_flex_sizer.Add(self.pview_run, 0, wx.ALIGN_RIGHT | wx.RIGHT, 3)\n    self.SetSizer(pview_main_flex_sizer)\n    self.Layout()\n    self.Centre()"
        ]
    },
    {
        "func_name": "RunPview",
        "original": "def RunPview(self, e):\n    filename = self.pview_modelFile.GetValue()\n    anim_filename = self.pview_animFile.GetValue()\n    args = {}\n    args['filename'] = str(filename)\n    args['animfilename'] = str(anim_filename)\n    if sys.platform == 'win32':\n        extension = '.exe'\n    elif sys.platform == 'darwin':\n        extension = ''\n    else:\n        extension = ''\n    command = 'pview' + extension + ' ' + '\"' + args['filename'] + '\"' + ' ' + '\"' + args['animfilename'] + '\"'\n    try:\n        p = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, universal_newlines=True)\n    except:\n        dlg = wx.MessageDialog(self, 'Failed To Find Or run the Exporter Application', 'ERROR', wx.OK)\n        dlg.ShowModal()\n        dlg.Destroy()",
        "mutated": [
            "def RunPview(self, e):\n    if False:\n        i = 10\n    filename = self.pview_modelFile.GetValue()\n    anim_filename = self.pview_animFile.GetValue()\n    args = {}\n    args['filename'] = str(filename)\n    args['animfilename'] = str(anim_filename)\n    if sys.platform == 'win32':\n        extension = '.exe'\n    elif sys.platform == 'darwin':\n        extension = ''\n    else:\n        extension = ''\n    command = 'pview' + extension + ' ' + '\"' + args['filename'] + '\"' + ' ' + '\"' + args['animfilename'] + '\"'\n    try:\n        p = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, universal_newlines=True)\n    except:\n        dlg = wx.MessageDialog(self, 'Failed To Find Or run the Exporter Application', 'ERROR', wx.OK)\n        dlg.ShowModal()\n        dlg.Destroy()",
            "def RunPview(self, e):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    filename = self.pview_modelFile.GetValue()\n    anim_filename = self.pview_animFile.GetValue()\n    args = {}\n    args['filename'] = str(filename)\n    args['animfilename'] = str(anim_filename)\n    if sys.platform == 'win32':\n        extension = '.exe'\n    elif sys.platform == 'darwin':\n        extension = ''\n    else:\n        extension = ''\n    command = 'pview' + extension + ' ' + '\"' + args['filename'] + '\"' + ' ' + '\"' + args['animfilename'] + '\"'\n    try:\n        p = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, universal_newlines=True)\n    except:\n        dlg = wx.MessageDialog(self, 'Failed To Find Or run the Exporter Application', 'ERROR', wx.OK)\n        dlg.ShowModal()\n        dlg.Destroy()",
            "def RunPview(self, e):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    filename = self.pview_modelFile.GetValue()\n    anim_filename = self.pview_animFile.GetValue()\n    args = {}\n    args['filename'] = str(filename)\n    args['animfilename'] = str(anim_filename)\n    if sys.platform == 'win32':\n        extension = '.exe'\n    elif sys.platform == 'darwin':\n        extension = ''\n    else:\n        extension = ''\n    command = 'pview' + extension + ' ' + '\"' + args['filename'] + '\"' + ' ' + '\"' + args['animfilename'] + '\"'\n    try:\n        p = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, universal_newlines=True)\n    except:\n        dlg = wx.MessageDialog(self, 'Failed To Find Or run the Exporter Application', 'ERROR', wx.OK)\n        dlg.ShowModal()\n        dlg.Destroy()",
            "def RunPview(self, e):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    filename = self.pview_modelFile.GetValue()\n    anim_filename = self.pview_animFile.GetValue()\n    args = {}\n    args['filename'] = str(filename)\n    args['animfilename'] = str(anim_filename)\n    if sys.platform == 'win32':\n        extension = '.exe'\n    elif sys.platform == 'darwin':\n        extension = ''\n    else:\n        extension = ''\n    command = 'pview' + extension + ' ' + '\"' + args['filename'] + '\"' + ' ' + '\"' + args['animfilename'] + '\"'\n    try:\n        p = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, universal_newlines=True)\n    except:\n        dlg = wx.MessageDialog(self, 'Failed To Find Or run the Exporter Application', 'ERROR', wx.OK)\n        dlg.ShowModal()\n        dlg.Destroy()",
            "def RunPview(self, e):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    filename = self.pview_modelFile.GetValue()\n    anim_filename = self.pview_animFile.GetValue()\n    args = {}\n    args['filename'] = str(filename)\n    args['animfilename'] = str(anim_filename)\n    if sys.platform == 'win32':\n        extension = '.exe'\n    elif sys.platform == 'darwin':\n        extension = ''\n    else:\n        extension = ''\n    command = 'pview' + extension + ' ' + '\"' + args['filename'] + '\"' + ' ' + '\"' + args['animfilename'] + '\"'\n    try:\n        p = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, universal_newlines=True)\n    except:\n        dlg = wx.MessageDialog(self, 'Failed To Find Or run the Exporter Application', 'ERROR', wx.OK)\n        dlg.ShowModal()\n        dlg.Destroy()"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, main, *args, **kwds):\n    kwds['style'] = wx.DEFAULT_DIALOG_STYLE\n    wx.Dialog.__init__(self, main, *args, **kwds)\n    self.p = wx.Panel(self)\n    self.callback = None\n    self.paths_inputLbl = wx.StaticText(self.p, -1, 'Input')\n    self.paths_inputTxt = wx.TextCtrl(self.p, -1, '')\n    self.paths_outputLbl = wx.StaticText(self.p, -1, 'Output')\n    self.paths_outputTxt = wx.TextCtrl(self.p, -1, '')\n    self.paths_done = wx.Button(self.p, -1, 'Done')\n    self.__set_properties()\n    self.__do_layout()\n    self.Bind(wx.EVT_BUTTON, self.RunPaths, self.paths_done)",
        "mutated": [
            "def __init__(self, main, *args, **kwds):\n    if False:\n        i = 10\n    kwds['style'] = wx.DEFAULT_DIALOG_STYLE\n    wx.Dialog.__init__(self, main, *args, **kwds)\n    self.p = wx.Panel(self)\n    self.callback = None\n    self.paths_inputLbl = wx.StaticText(self.p, -1, 'Input')\n    self.paths_inputTxt = wx.TextCtrl(self.p, -1, '')\n    self.paths_outputLbl = wx.StaticText(self.p, -1, 'Output')\n    self.paths_outputTxt = wx.TextCtrl(self.p, -1, '')\n    self.paths_done = wx.Button(self.p, -1, 'Done')\n    self.__set_properties()\n    self.__do_layout()\n    self.Bind(wx.EVT_BUTTON, self.RunPaths, self.paths_done)",
            "def __init__(self, main, *args, **kwds):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    kwds['style'] = wx.DEFAULT_DIALOG_STYLE\n    wx.Dialog.__init__(self, main, *args, **kwds)\n    self.p = wx.Panel(self)\n    self.callback = None\n    self.paths_inputLbl = wx.StaticText(self.p, -1, 'Input')\n    self.paths_inputTxt = wx.TextCtrl(self.p, -1, '')\n    self.paths_outputLbl = wx.StaticText(self.p, -1, 'Output')\n    self.paths_outputTxt = wx.TextCtrl(self.p, -1, '')\n    self.paths_done = wx.Button(self.p, -1, 'Done')\n    self.__set_properties()\n    self.__do_layout()\n    self.Bind(wx.EVT_BUTTON, self.RunPaths, self.paths_done)",
            "def __init__(self, main, *args, **kwds):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    kwds['style'] = wx.DEFAULT_DIALOG_STYLE\n    wx.Dialog.__init__(self, main, *args, **kwds)\n    self.p = wx.Panel(self)\n    self.callback = None\n    self.paths_inputLbl = wx.StaticText(self.p, -1, 'Input')\n    self.paths_inputTxt = wx.TextCtrl(self.p, -1, '')\n    self.paths_outputLbl = wx.StaticText(self.p, -1, 'Output')\n    self.paths_outputTxt = wx.TextCtrl(self.p, -1, '')\n    self.paths_done = wx.Button(self.p, -1, 'Done')\n    self.__set_properties()\n    self.__do_layout()\n    self.Bind(wx.EVT_BUTTON, self.RunPaths, self.paths_done)",
            "def __init__(self, main, *args, **kwds):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    kwds['style'] = wx.DEFAULT_DIALOG_STYLE\n    wx.Dialog.__init__(self, main, *args, **kwds)\n    self.p = wx.Panel(self)\n    self.callback = None\n    self.paths_inputLbl = wx.StaticText(self.p, -1, 'Input')\n    self.paths_inputTxt = wx.TextCtrl(self.p, -1, '')\n    self.paths_outputLbl = wx.StaticText(self.p, -1, 'Output')\n    self.paths_outputTxt = wx.TextCtrl(self.p, -1, '')\n    self.paths_done = wx.Button(self.p, -1, 'Done')\n    self.__set_properties()\n    self.__do_layout()\n    self.Bind(wx.EVT_BUTTON, self.RunPaths, self.paths_done)",
            "def __init__(self, main, *args, **kwds):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    kwds['style'] = wx.DEFAULT_DIALOG_STYLE\n    wx.Dialog.__init__(self, main, *args, **kwds)\n    self.p = wx.Panel(self)\n    self.callback = None\n    self.paths_inputLbl = wx.StaticText(self.p, -1, 'Input')\n    self.paths_inputTxt = wx.TextCtrl(self.p, -1, '')\n    self.paths_outputLbl = wx.StaticText(self.p, -1, 'Output')\n    self.paths_outputTxt = wx.TextCtrl(self.p, -1, '')\n    self.paths_done = wx.Button(self.p, -1, 'Done')\n    self.__set_properties()\n    self.__do_layout()\n    self.Bind(wx.EVT_BUTTON, self.RunPaths, self.paths_done)"
        ]
    },
    {
        "func_name": "setCallback",
        "original": "def setCallback(self, callback):\n    self.callback = callback",
        "mutated": [
            "def setCallback(self, callback):\n    if False:\n        i = 10\n    self.callback = callback",
            "def setCallback(self, callback):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.callback = callback",
            "def setCallback(self, callback):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.callback = callback",
            "def setCallback(self, callback):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.callback = callback",
            "def setCallback(self, callback):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.callback = callback"
        ]
    },
    {
        "func_name": "__set_properties",
        "original": "def __set_properties(self):\n    self.SetTitle('Change Paths')\n    self.SetSize((400, 100))\n    self.paths_inputTxt.SetMinSize((350, 21))\n    self.paths_outputTxt.SetMinSize((350, 21))",
        "mutated": [
            "def __set_properties(self):\n    if False:\n        i = 10\n    self.SetTitle('Change Paths')\n    self.SetSize((400, 100))\n    self.paths_inputTxt.SetMinSize((350, 21))\n    self.paths_outputTxt.SetMinSize((350, 21))",
            "def __set_properties(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.SetTitle('Change Paths')\n    self.SetSize((400, 100))\n    self.paths_inputTxt.SetMinSize((350, 21))\n    self.paths_outputTxt.SetMinSize((350, 21))",
            "def __set_properties(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.SetTitle('Change Paths')\n    self.SetSize((400, 100))\n    self.paths_inputTxt.SetMinSize((350, 21))\n    self.paths_outputTxt.SetMinSize((350, 21))",
            "def __set_properties(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.SetTitle('Change Paths')\n    self.SetSize((400, 100))\n    self.paths_inputTxt.SetMinSize((350, 21))\n    self.paths_outputTxt.SetMinSize((350, 21))",
            "def __set_properties(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.SetTitle('Change Paths')\n    self.SetSize((400, 100))\n    self.paths_inputTxt.SetMinSize((350, 21))\n    self.paths_outputTxt.SetMinSize((350, 21))"
        ]
    },
    {
        "func_name": "__do_layout",
        "original": "def __do_layout(self):\n    paths_sizer = wx.BoxSizer(wx.VERTICAL)\n    paths_main_flex_sizer = wx.FlexGridSizer(4, 2, 0, 0)\n    paths_main_flex_sizer.Add(self.paths_inputLbl, 1, wx.TOP | wx.LEFT, 3)\n    paths_main_flex_sizer.Add(self.paths_inputTxt, 1, wx.ALL, 1)\n    paths_main_flex_sizer.Add(self.paths_outputLbl, 1, wx.TOP | wx.LEFT, 3)\n    paths_main_flex_sizer.Add(self.paths_outputTxt, 1, wx.ALL, 1)\n    paths_sizer.Add(paths_main_flex_sizer)\n    paths_sizer.Add(self.paths_done, 0, wx.RIGHT | wx.ALIGN_RIGHT, 4)\n    self.SetSizer(paths_sizer)\n    self.Layout()\n    self.Centre()",
        "mutated": [
            "def __do_layout(self):\n    if False:\n        i = 10\n    paths_sizer = wx.BoxSizer(wx.VERTICAL)\n    paths_main_flex_sizer = wx.FlexGridSizer(4, 2, 0, 0)\n    paths_main_flex_sizer.Add(self.paths_inputLbl, 1, wx.TOP | wx.LEFT, 3)\n    paths_main_flex_sizer.Add(self.paths_inputTxt, 1, wx.ALL, 1)\n    paths_main_flex_sizer.Add(self.paths_outputLbl, 1, wx.TOP | wx.LEFT, 3)\n    paths_main_flex_sizer.Add(self.paths_outputTxt, 1, wx.ALL, 1)\n    paths_sizer.Add(paths_main_flex_sizer)\n    paths_sizer.Add(self.paths_done, 0, wx.RIGHT | wx.ALIGN_RIGHT, 4)\n    self.SetSizer(paths_sizer)\n    self.Layout()\n    self.Centre()",
            "def __do_layout(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    paths_sizer = wx.BoxSizer(wx.VERTICAL)\n    paths_main_flex_sizer = wx.FlexGridSizer(4, 2, 0, 0)\n    paths_main_flex_sizer.Add(self.paths_inputLbl, 1, wx.TOP | wx.LEFT, 3)\n    paths_main_flex_sizer.Add(self.paths_inputTxt, 1, wx.ALL, 1)\n    paths_main_flex_sizer.Add(self.paths_outputLbl, 1, wx.TOP | wx.LEFT, 3)\n    paths_main_flex_sizer.Add(self.paths_outputTxt, 1, wx.ALL, 1)\n    paths_sizer.Add(paths_main_flex_sizer)\n    paths_sizer.Add(self.paths_done, 0, wx.RIGHT | wx.ALIGN_RIGHT, 4)\n    self.SetSizer(paths_sizer)\n    self.Layout()\n    self.Centre()",
            "def __do_layout(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    paths_sizer = wx.BoxSizer(wx.VERTICAL)\n    paths_main_flex_sizer = wx.FlexGridSizer(4, 2, 0, 0)\n    paths_main_flex_sizer.Add(self.paths_inputLbl, 1, wx.TOP | wx.LEFT, 3)\n    paths_main_flex_sizer.Add(self.paths_inputTxt, 1, wx.ALL, 1)\n    paths_main_flex_sizer.Add(self.paths_outputLbl, 1, wx.TOP | wx.LEFT, 3)\n    paths_main_flex_sizer.Add(self.paths_outputTxt, 1, wx.ALL, 1)\n    paths_sizer.Add(paths_main_flex_sizer)\n    paths_sizer.Add(self.paths_done, 0, wx.RIGHT | wx.ALIGN_RIGHT, 4)\n    self.SetSizer(paths_sizer)\n    self.Layout()\n    self.Centre()",
            "def __do_layout(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    paths_sizer = wx.BoxSizer(wx.VERTICAL)\n    paths_main_flex_sizer = wx.FlexGridSizer(4, 2, 0, 0)\n    paths_main_flex_sizer.Add(self.paths_inputLbl, 1, wx.TOP | wx.LEFT, 3)\n    paths_main_flex_sizer.Add(self.paths_inputTxt, 1, wx.ALL, 1)\n    paths_main_flex_sizer.Add(self.paths_outputLbl, 1, wx.TOP | wx.LEFT, 3)\n    paths_main_flex_sizer.Add(self.paths_outputTxt, 1, wx.ALL, 1)\n    paths_sizer.Add(paths_main_flex_sizer)\n    paths_sizer.Add(self.paths_done, 0, wx.RIGHT | wx.ALIGN_RIGHT, 4)\n    self.SetSizer(paths_sizer)\n    self.Layout()\n    self.Centre()",
            "def __do_layout(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    paths_sizer = wx.BoxSizer(wx.VERTICAL)\n    paths_main_flex_sizer = wx.FlexGridSizer(4, 2, 0, 0)\n    paths_main_flex_sizer.Add(self.paths_inputLbl, 1, wx.TOP | wx.LEFT, 3)\n    paths_main_flex_sizer.Add(self.paths_inputTxt, 1, wx.ALL, 1)\n    paths_main_flex_sizer.Add(self.paths_outputLbl, 1, wx.TOP | wx.LEFT, 3)\n    paths_main_flex_sizer.Add(self.paths_outputTxt, 1, wx.ALL, 1)\n    paths_sizer.Add(paths_main_flex_sizer)\n    paths_sizer.Add(self.paths_done, 0, wx.RIGHT | wx.ALIGN_RIGHT, 4)\n    self.SetSizer(paths_sizer)\n    self.Layout()\n    self.Centre()"
        ]
    },
    {
        "func_name": "RunPaths",
        "original": "def RunPaths(self, e):\n    self.callback(self.paths_inputTxt.GetValue(), self.paths_outputTxt.GetValue())\n    self.Destroy()",
        "mutated": [
            "def RunPaths(self, e):\n    if False:\n        i = 10\n    self.callback(self.paths_inputTxt.GetValue(), self.paths_outputTxt.GetValue())\n    self.Destroy()",
            "def RunPaths(self, e):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.callback(self.paths_inputTxt.GetValue(), self.paths_outputTxt.GetValue())\n    self.Destroy()",
            "def RunPaths(self, e):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.callback(self.paths_inputTxt.GetValue(), self.paths_outputTxt.GetValue())\n    self.Destroy()",
            "def RunPaths(self, e):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.callback(self.paths_inputTxt.GetValue(), self.paths_outputTxt.GetValue())\n    self.Destroy()",
            "def RunPaths(self, e):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.callback(self.paths_inputTxt.GetValue(), self.paths_outputTxt.GetValue())\n    self.Destroy()"
        ]
    },
    {
        "func_name": "__init__",
        "original": "def __init__(self, *args, **kwds):\n    kwds['style'] = wx.DEFAULT_FRAME_STYLE\n    wx.Frame.__init__(self, *args, **kwds)\n    self.SetIcon(wx.Icon('pandaIcon.ico', wx.BITMAP_TYPE_ICO))\n    self.pandaPathDir = ''\n    self.batchList = []\n    self.optchar_eggList = []\n    self.palettize_eggList = []\n    self.rename_eggList = []\n    self.srcProjectFolder = ''\n    self.destProjectFolder = ''\n    self.txaExtraLines = []\n    self._setupUI()\n    self.ShowInitialEnv()",
        "mutated": [
            "def __init__(self, *args, **kwds):\n    if False:\n        i = 10\n    kwds['style'] = wx.DEFAULT_FRAME_STYLE\n    wx.Frame.__init__(self, *args, **kwds)\n    self.SetIcon(wx.Icon('pandaIcon.ico', wx.BITMAP_TYPE_ICO))\n    self.pandaPathDir = ''\n    self.batchList = []\n    self.optchar_eggList = []\n    self.palettize_eggList = []\n    self.rename_eggList = []\n    self.srcProjectFolder = ''\n    self.destProjectFolder = ''\n    self.txaExtraLines = []\n    self._setupUI()\n    self.ShowInitialEnv()",
            "def __init__(self, *args, **kwds):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    kwds['style'] = wx.DEFAULT_FRAME_STYLE\n    wx.Frame.__init__(self, *args, **kwds)\n    self.SetIcon(wx.Icon('pandaIcon.ico', wx.BITMAP_TYPE_ICO))\n    self.pandaPathDir = ''\n    self.batchList = []\n    self.optchar_eggList = []\n    self.palettize_eggList = []\n    self.rename_eggList = []\n    self.srcProjectFolder = ''\n    self.destProjectFolder = ''\n    self.txaExtraLines = []\n    self._setupUI()\n    self.ShowInitialEnv()",
            "def __init__(self, *args, **kwds):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    kwds['style'] = wx.DEFAULT_FRAME_STYLE\n    wx.Frame.__init__(self, *args, **kwds)\n    self.SetIcon(wx.Icon('pandaIcon.ico', wx.BITMAP_TYPE_ICO))\n    self.pandaPathDir = ''\n    self.batchList = []\n    self.optchar_eggList = []\n    self.palettize_eggList = []\n    self.rename_eggList = []\n    self.srcProjectFolder = ''\n    self.destProjectFolder = ''\n    self.txaExtraLines = []\n    self._setupUI()\n    self.ShowInitialEnv()",
            "def __init__(self, *args, **kwds):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    kwds['style'] = wx.DEFAULT_FRAME_STYLE\n    wx.Frame.__init__(self, *args, **kwds)\n    self.SetIcon(wx.Icon('pandaIcon.ico', wx.BITMAP_TYPE_ICO))\n    self.pandaPathDir = ''\n    self.batchList = []\n    self.optchar_eggList = []\n    self.palettize_eggList = []\n    self.rename_eggList = []\n    self.srcProjectFolder = ''\n    self.destProjectFolder = ''\n    self.txaExtraLines = []\n    self._setupUI()\n    self.ShowInitialEnv()",
            "def __init__(self, *args, **kwds):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    kwds['style'] = wx.DEFAULT_FRAME_STYLE\n    wx.Frame.__init__(self, *args, **kwds)\n    self.SetIcon(wx.Icon('pandaIcon.ico', wx.BITMAP_TYPE_ICO))\n    self.pandaPathDir = ''\n    self.batchList = []\n    self.optchar_eggList = []\n    self.palettize_eggList = []\n    self.rename_eggList = []\n    self.srcProjectFolder = ''\n    self.destProjectFolder = ''\n    self.txaExtraLines = []\n    self._setupUI()\n    self.ShowInitialEnv()"
        ]
    },
    {
        "func_name": "_setupUI",
        "original": "def _setupUI(self):\n    self.menuBar = wx.MenuBar()\n    wxglade_tmp_menu = wx.Menu()\n    self.prefsLoadButton = wx.MenuItem(wxglade_tmp_menu, ID_LOADPREFS, 'Load Preferences', '', wx.ITEM_NORMAL)\n    wxglade_tmp_menu.AppendItem(self.prefsLoadButton)\n    self.savePrefsButton = wx.MenuItem(wxglade_tmp_menu, ID_SAVEPREFS, 'Save Preferences', '', wx.ITEM_NORMAL)\n    wxglade_tmp_menu.AppendItem(self.savePrefsButton)\n    wxglade_tmp_menu.AppendSeparator()\n    self.exitButton = wx.MenuItem(wxglade_tmp_menu, ID_EXIT, 'Exit', '', wx.ITEM_NORMAL)\n    wxglade_tmp_menu.AppendItem(self.exitButton)\n    self.menuBar.Append(wxglade_tmp_menu, 'File')\n    wxglade_tmp_menu = wx.Menu()\n    self.loadBatchMenuButton = wx.MenuItem(wxglade_tmp_menu, ID_LOADBATCH, 'Load Batch ', '', wx.ITEM_NORMAL)\n    wxglade_tmp_menu.AppendItem(self.loadBatchMenuButton)\n    self.saveBatchMenuButton = wx.MenuItem(wxglade_tmp_menu, ID_SAVEBATCH, 'Save Batch', '', wx.ITEM_NORMAL)\n    wxglade_tmp_menu.AppendItem(self.saveBatchMenuButton)\n    self.menuBar.Append(wxglade_tmp_menu, 'Batch')\n    self.SetMenuBar(self.menuBar)\n    wxglade_tmp_menu = wx.Menu()\n    self.HelpMenuButton = wx.MenuItem(wxglade_tmp_menu, ID_HELP, 'Help ', '', wx.ITEM_NORMAL)\n    wxglade_tmp_menu.AppendItem(self.HelpMenuButton)\n    self.AboutMenuButton = wx.MenuItem(wxglade_tmp_menu, ID_ABOUT, 'About', '', wx.ITEM_NORMAL)\n    wxglade_tmp_menu.AppendItem(self.AboutMenuButton)\n    self.menuBar.Append(wxglade_tmp_menu, 'Help')\n    self.SetMenuBar(self.menuBar)\n    self.statusBar = self.CreateStatusBar(1, 0)\n    self.tab_panel = wx.Notebook(self, 1)\n    self.outdlg = OutputDialog(self)\n    self.simple_panel = wx.Panel(self.tab_panel, -1)\n    self.simple_options_panel = wx.Panel(self.simple_panel, -1)\n    self.simple_options_sizer_staticbox = wx.StaticBox(self.simple_options_panel, -1, 'Maya2Egg')\n    self.simple_mayaFileLbl = wx.StaticText(self.simple_options_panel, -1, 'Maya Scene File')\n    self.simple_mayaFileTxt = wx.TextCtrl(self.simple_options_panel, -1, '')\n    self.simple_mayaFileBtn = wx.Button(self.simple_options_panel, ID_SIMPLEMBPICK, 'Choose..')\n    self.simple_exportDestLbl = wx.StaticText(self.simple_options_panel, -1, 'Export Destination')\n    self.simple_exportDestTxt = wx.TextCtrl(self.simple_options_panel, -1, '')\n    self.simple_exportDestBtn = wx.Button(self.simple_options_panel, ID_SIMPLEEGGSAVE, 'Choose..')\n    self.simple_mayaVerLbl = wx.StaticText(self.simple_options_panel, -1, 'Maya Version', style=wx.ALIGN_CENTRE)\n    self.simple_mayaVerComboBox = wx.ComboBox(self.simple_options_panel, -1, choices=MAYA_VERSIONS, style=wx.CB_DROPDOWN | wx.CB_READONLY)\n    self.simple_animOptChoice = wx.RadioBox(self.simple_options_panel, -1, 'animation-mode', choices=['none', 'model', 'chan', 'both'], majorDimension=4, style=wx.RA_SPECIFY_COLS)\n    self.simple_runExportBtn = wx.Button(self.simple_options_panel, ID_RUNSIMPLEEXPORT, 'Run Export')\n    self.main_panel = wx.Panel(self.tab_panel, -1, style=wx.NO_BORDER | wx.TAB_TRAVERSAL)\n    self.toolComboBox = wx.ComboBox(self.main_panel, -1, choices=TOOLS, style=wx.CB_DROPDOWN | wx.CB_READONLY)\n    self.tool_options_panel = wx.Panel(self.main_panel, -1)\n    self.tool_options_sizer_staticbox = wx.StaticBox(self.tool_options_panel, -1, 'Tool Options')\n    self.batch_panel = wx.Panel(self.main_panel, -1)\n    self.batch_static_sizer_staticbox = wx.StaticBox(self.batch_panel, -1, 'Batch List')\n    self.loadBatchButton = wx.Button(self.batch_panel, ID_LOADBATCH, 'Load Batch')\n    self.saveBatchButton = wx.Button(self.batch_panel, ID_SAVEBATCH, 'Save Batch')\n    self.sortBatchButton = wx.Button(self.batch_panel, ID_SORTBATCH, 'Sort Batch')\n    self.changePathsButton = wx.Button(self.batch_panel, ID_SORTBATCH, 'Change Paths')\n    self.editSelBatchButton = wx.Button(self.batch_panel, ID_EDITSELBATCH, 'Edit Selected')\n    self.removeSelBatchButton = wx.Button(self.batch_panel, ID_REMOVESELBATCH, 'Remove Selected')\n    self.removeAllBatchButton = wx.Button(self.batch_panel, ID_REMOVEALLBATCH, 'Remove All')\n    self.batchTree = wx.TreeCtrl(self.batch_panel, -1, style=wx.TR_HAS_BUTTONS | wx.TR_LINES_AT_ROOT | wx.TR_DEFAULT_STYLE | wx.SUNKEN_BORDER | wx.TR_MULTIPLE)\n    self.treeRoot = self.batchTree.AddRoot('Batch Files')\n    self.console_panel = wx.Panel(self.main_panel, -1)\n    self.consoleOutputTxt = wx.TextCtrl(self.console_panel, -1, '', style=wx.TE_MULTILINE | wx.TE_READONLY | wx.TE_WORDWRAP)\n    self.console_static_sizer_staticbox = wx.StaticBox(self.console_panel, -1, 'Console Output')\n    self.runBatchButton = wx.Button(self.console_panel, ID_RUNBATCH, 'Run Batch')\n    self.clearConsoleButton = wx.Button(self.console_panel, ID_CLEAROUTPUT, 'Clear Output')\n    self.runPviewButton = wx.Button(self.console_panel, -1, 'Load pview')\n    self.pathLbl = wx.StaticText(self.console_panel, -1, 'Panda Directory', style=wx.ALIGN_CENTRE)\n    self.pandaPathTxt = wx.TextCtrl(self.console_panel, -1, '', style=wx.TE_READONLY)\n    self.loadPandaPathBtn = wx.Button(self.console_panel, ID_CHOOSEPANDA, 'Choose..')\n    self.ignoreModDates = wx.CheckBox(self.console_panel, -1, 'Override export changed maya scene files')\n    self.maya2egg_panel = wx.Panel(self.tool_options_panel, -1, style=wx.NO_BORDER | wx.TAB_TRAVERSAL)\n    self.m2e_mayaVerLbl = wx.StaticText(self.maya2egg_panel, -1, 'Maya Version', style=wx.ALIGN_CENTRE)\n    self.m2e_mayaVerComboBox = wx.ComboBox(self.maya2egg_panel, -1, choices=MAYA_VERSIONS, style=wx.CB_DROPDOWN | wx.CB_READONLY)\n    self.m2e_mayaFileLbl = wx.StaticText(self.maya2egg_panel, -1, 'Maya Scene File')\n    self.m2e_mayaFileTxt = wx.TextCtrl(self.maya2egg_panel, -1, '')\n    self.m2e_mayaFileBtn = wx.Button(self.maya2egg_panel, -1, 'Choose..')\n    self.m2e_exportDestLbl = wx.StaticText(self.maya2egg_panel, -1, 'Export Destination')\n    self.m2e_exportDestTxt = wx.TextCtrl(self.maya2egg_panel, -1, '')\n    self.m2e_exportDestBtn = wx.Button(self.maya2egg_panel, -1, 'Choose..')\n    self.m2e_options_panel = wx.Panel(self.maya2egg_panel, -1)\n    self.m2e_options_panel_sizer_staticbox = wx.StaticBox(self.m2e_options_panel, 1, 'General Options')\n    self.m2e_mayaUnitsLbl = wx.StaticText(self.m2e_options_panel, -1, 'Maya Units (Input)')\n    self.m2e_mayaUnitsComboBox = wx.ComboBox(self.m2e_options_panel, -1, choices=UNIT_TYPES, style=wx.CB_DROPDOWN | wx.CB_READONLY)\n    self.m2e_pandaUnitsLbl = wx.StaticText(self.m2e_options_panel, -1, '--->   Panda Units (Output)')\n    self.m2e_pandaUnitsComboBox = wx.ComboBox(self.m2e_options_panel, -1, choices=UNIT_TYPES, style=wx.CB_DROPDOWN | wx.CB_READONLY)\n    self.m2e_backfaceChk = wx.CheckBox(self.m2e_options_panel, -1, 'Back Face Rendering')\n    self.m2e_polygonOutputChk = wx.CheckBox(self.m2e_options_panel, -1, 'Polygon Output Only')\n    self.m2e_tbnallChk = wx.CheckBox(self.m2e_options_panel, -1, 'Calculate Tangent and Binormal')\n    self.m2e_subrootsChk = wx.CheckBox(self.m2e_options_panel, -1, 'Export Specified Subroots')\n    self.m2e_subrootsTxt = wx.TextCtrl(self.m2e_options_panel, -1, '')\n    self.m2e_subsetsChk = wx.CheckBox(self.m2e_options_panel, -1, 'Export Specified Subsets')\n    self.m2e_subsetsTxt = wx.TextCtrl(self.m2e_options_panel, -1, '')\n    self.m2e_excludesChk = wx.CheckBox(self.m2e_options_panel, -1, 'Exclude Specified Subsets')\n    self.m2e_excludesTxt = wx.TextCtrl(self.m2e_options_panel, -1, '')\n    self.m2e_anim_options_panel = wx.Panel(self.maya2egg_panel, -1)\n    self.m2e_anim_options_sizer_staticbox = wx.StaticBox(self.m2e_anim_options_panel, 1, 'Animation Options')\n    self.m2e_animOptChoice = wx.RadioBox(self.m2e_anim_options_panel, -1, 'mode', choices=['none', 'model', 'chan', 'both', 'pose'], majorDimension=5, style=wx.RA_SPECIFY_COLS)\n    self.m2e_startFrameChk = wx.CheckBox(self.m2e_anim_options_panel, -1, 'Start Frame')\n    self.m2e_startFrameSpin = wx.SpinCtrl(self.m2e_anim_options_panel, -1, '', min=-10000, max=10000)\n    self.m2e_endFrameChk = wx.CheckBox(self.m2e_anim_options_panel, -1, 'End Frame')\n    self.m2e_endFrameSpin = wx.SpinCtrl(self.m2e_anim_options_panel, -1, '', min=-10000, max=10000)\n    self.m2e_frameRateInChk = wx.CheckBox(self.m2e_anim_options_panel, -1, 'Frame Rate Input (+/-)')\n    self.m2e_frameRateInSpin = wx.SpinCtrl(self.m2e_anim_options_panel, -1, '', min=-10000, max=10000)\n    self.m2e_frameRateOutChk = wx.CheckBox(self.m2e_anim_options_panel, -1, 'Frame Rate Output (+/-)  ')\n    self.m2e_frameRateOutSpin = wx.SpinCtrl(self.m2e_anim_options_panel, -1, '', min=-10000, max=10000)\n    self.m2e_charNameChk = wx.CheckBox(self.m2e_anim_options_panel, -1, 'Character Name')\n    self.m2e_charNameTxt = wx.TextCtrl(self.m2e_anim_options_panel, -1, '')\n    self.m2e_tex_options_panel = wx.Panel(self.maya2egg_panel, -1)\n    self.m2e_tex_options_sizer_staticbox = wx.StaticBox(self.m2e_tex_options_panel, 1, 'Texture/Shader Options')\n    self.m2e_legacyShaderChk = wx.CheckBox(self.m2e_tex_options_panel, -1, 'Use Legacy Shader Generation')\n    self.m2e_copyTexChk = wx.CheckBox(self.m2e_tex_options_panel, -1, 'Copy Textures')\n    self.m2e_copyTexPathTxt = wx.TextCtrl(self.m2e_tex_options_panel, -1, '')\n    self.m2e_copyTexPathBtn = wx.Button(self.m2e_tex_options_panel, -1, 'Choose..')\n    self.m2e_pathReplaceChk = wx.CheckBox(self.m2e_tex_options_panel, -1, 'Path Replace')\n    self.m2e_pathReplaceTxt = wx.TextCtrl(self.m2e_tex_options_panel, -1, '')\n    self.m2e_pathReplaceBtn = wx.Button(self.m2e_tex_options_panel, -1, 'Batch Files')\n    self.m2e_addEgg2BamChk = wx.CheckBox(self.maya2egg_panel, -1, 'Add with Egg2Bam')\n    self.m2e_addEgg2BamChk.Hide()\n    self.batchItemNameLbl = wx.StaticText(self.main_panel, -1, 'Batch Item Name')\n    self.batchItemNameTxt = wx.TextCtrl(self.main_panel, -1, '')\n    self.addToBatchBtn = wx.Button(self.main_panel, ID_MAYAADDTOBATCH, 'Add To Batch >>')\n    self.egg2bam_panel = wx.Panel(self.tool_options_panel, -1, style=wx.NO_BORDER | wx.TAB_TRAVERSAL)\n    self.e2b_eggFileLbl = wx.StaticText(self.egg2bam_panel, -1, 'Egg File')\n    self.e2b_eggFileTxt = wx.TextCtrl(self.egg2bam_panel, -1, '')\n    self.e2b_eggFileBtn = wx.Button(self.egg2bam_panel, -1, 'Choose..')\n    self.e2b_exportDestLbl = wx.StaticText(self.egg2bam_panel, -1, 'Export Destination')\n    self.e2b_exportDestTxt = wx.TextCtrl(self.egg2bam_panel, -1, '')\n    self.e2b_exportDestBtn = wx.Button(self.egg2bam_panel, -1, 'Choose..')\n    self.e2b_bamBatchOutputLbl = wx.StaticText(self.egg2bam_panel, -1, 'Bam Output Files from the Current Batch')\n    self.e2b_bamBatchOutputBtn = wx.Button(self.egg2bam_panel, -1, 'Bam Batch Output')\n    self.e2b_options_panel = wx.Panel(self.egg2bam_panel, -1)\n    self.e2b_options_sizer_staticbox = wx.StaticBox(self.e2b_options_panel, 1, 'General Options')\n    self.e2b_flattenChk = wx.CheckBox(self.e2b_options_panel, -1, 'Flatten')\n    self.e2b_embedTexChk = wx.CheckBox(self.e2b_options_panel, -1, 'Embed Textures')\n    self.e2b_useCurrEggChk = wx.CheckBox(self.e2b_options_panel, -1, 'Use current egg file')\n    self.eggRename_panel = wx.Panel(self.tool_options_panel, -1, style=wx.NO_BORDER | wx.TAB_TRAVERSAL)\n    self.rename_eggFilesLbl = wx.StaticText(self.eggRename_panel, -1, 'Egg Files')\n    self.rename_eggFilesTree = wx.TreeCtrl(self.eggRename_panel, -1, style=wx.TR_HAS_BUTTONS | wx.TR_LINES_AT_ROOT | wx.TR_DEFAULT_STYLE | wx.SUNKEN_BORDER)\n    self.rename_eggFilesRoot = self.rename_eggFilesTree.AddRoot('Egg Files')\n    self.rename_addEggBtn = wx.Button(self.eggRename_panel, -1, 'Add')\n    self.rename_addFromBatchBtn = wx.Button(self.eggRename_panel, -1, 'Batch Files')\n    self.rename_removeEggBtn = wx.Button(self.eggRename_panel, -1, 'Remove')\n    self.rename_removeAllEggsBtn = wx.Button(self.eggRename_panel, -1, 'Remove All')\n    self.rename_exportDestLbl = wx.StaticText(self.eggRename_panel, -1, 'Export Destination')\n    self.rename_exportInPlaceChk = wx.CheckBox(self.eggRename_panel, -1, 'In Place')\n    self.rename_exportDirLbl = wx.StaticText(self.eggRename_panel, -1, 'Directory')\n    self.rename_exportDirTxt = wx.TextCtrl(self.eggRename_panel, -1, '')\n    self.rename_exportDirBtn = wx.Button(self.eggRename_panel, -1, 'Choose..')\n    self.rename_exportFileLbl = wx.StaticText(self.eggRename_panel, -1, 'File')\n    self.rename_exportFileTxt = wx.TextCtrl(self.eggRename_panel, -1, '')\n    self.rename_exportFileBtn = wx.Button(self.eggRename_panel, -1, 'Choose..')\n    self.rename_options_panel = wx.Panel(self.eggRename_panel, -1)\n    self.rename_options_sizer_staticbox = wx.StaticBox(self.rename_options_panel, 1, 'General Options')\n    self.rename_stripPrefixChk = wx.CheckBox(self.rename_options_panel, -1, 'Strip Specified Prefix')\n    self.rename_stripPrefixTxt = wx.TextCtrl(self.rename_options_panel, -1, '')\n    self.eggOptChar_panel = wx.Panel(self.tool_options_panel, -1, style=wx.NO_BORDER | wx.TAB_TRAVERSAL)\n    self.optchar_eggFilesLbl = wx.StaticText(self.eggOptChar_panel, -1, 'Egg Files')\n    self.optchar_eggFilesTree = wx.TreeCtrl(self.eggOptChar_panel, -1, style=wx.TR_HAS_BUTTONS | wx.TR_LINES_AT_ROOT | wx.TR_DEFAULT_STYLE | wx.SUNKEN_BORDER)\n    self.optchar_eggFilesRoot = self.optchar_eggFilesTree.AddRoot('Egg Files')\n    self.optchar_addEggBtn = wx.Button(self.eggOptChar_panel, -1, 'Add')\n    self.optchar_addFromBatchBtn = wx.Button(self.eggOptChar_panel, -1, 'Batch Files')\n    self.optchar_removeEggBtn = wx.Button(self.eggOptChar_panel, -1, 'Remove')\n    self.optchar_removeAllEggsBtn = wx.Button(self.eggOptChar_panel, -1, 'Remove All')\n    self.optchar_exportDestLbl = wx.StaticText(self.eggOptChar_panel, -1, 'Export Destination')\n    self.optchar_exportInPlaceChk = wx.CheckBox(self.eggOptChar_panel, -1, 'In Place')\n    self.optchar_exportDirLbl = wx.StaticText(self.eggOptChar_panel, -1, 'Directory')\n    self.optchar_exportDirTxt = wx.TextCtrl(self.eggOptChar_panel, -1, '')\n    self.optchar_exportDirBtn = wx.Button(self.eggOptChar_panel, -1, 'Choose..')\n    self.optchar_exportFileLbl = wx.StaticText(self.eggOptChar_panel, -1, 'File')\n    self.optchar_exportFileTxt = wx.TextCtrl(self.eggOptChar_panel, -1, '')\n    self.optchar_exportFileBtn = wx.Button(self.eggOptChar_panel, -1, 'Choose..')\n    self.optchar_options_panel = wx.Panel(self.eggOptChar_panel, -1)\n    self.optchar_options_sizer_staticbox = wx.StaticBox(self.optchar_options_panel, 1, 'General Options')\n    self.optchar_keepAllJointsChk = wx.CheckBox(self.optchar_options_panel, -1, 'Keep All Joints')\n    self.optchar_keepJointsChk = wx.CheckBox(self.optchar_options_panel, -1, 'Keep Specified Joints')\n    self.optchar_keepJointsTxt = wx.TextCtrl(self.optchar_options_panel, -1, '')\n    self.optchar_dropJointsChk = wx.CheckBox(self.optchar_options_panel, -1, 'Drop Specified Joints')\n    self.optchar_dropJointsTxt = wx.TextCtrl(self.optchar_options_panel, -1, '')\n    self.optchar_exposeJointsChk = wx.CheckBox(self.optchar_options_panel, -1, 'Expose Specified Joints')\n    self.optchar_exposeJointsTxt = wx.TextCtrl(self.optchar_options_panel, -1, '')\n    self.optchar_flagGeometryChk = wx.CheckBox(self.optchar_options_panel, -1, 'Flag Specified Geometry')\n    self.optchar_flagGeometryTxt = wx.TextCtrl(self.optchar_options_panel, -1, '')\n    self.optchar_dartChoice = wx.RadioBox(self.optchar_options_panel, -1, 'dart', choices=['default', 'sync', 'nosync', 'structured'], majorDimension=4, style=wx.RA_SPECIFY_COLS)\n    self.eggPalettize_panel = wx.Panel(self.tool_options_panel, -1, style=wx.NO_BORDER | wx.TAB_TRAVERSAL)\n    self.palettize_eggFilesLbl = wx.StaticText(self.eggPalettize_panel, -1, 'Egg Files')\n    self.palettize_eggFilesTree = wx.TreeCtrl(self.eggPalettize_panel, -1, style=wx.TR_HAS_BUTTONS | wx.TR_LINES_AT_ROOT | wx.TR_DEFAULT_STYLE | wx.SUNKEN_BORDER)\n    self.palettize_eggFilesRoot = self.palettize_eggFilesTree.AddRoot('Egg Files')\n    self.palettize_addEggBtn = wx.Button(self.eggPalettize_panel, -1, 'Add')\n    self.palettize_addFromBatchBtn = wx.Button(self.eggPalettize_panel, -1, 'Batch Files')\n    self.palettize_removeEggBtn = wx.Button(self.eggPalettize_panel, -1, 'Remove')\n    self.palettize_removeAllEggsBtn = wx.Button(self.eggPalettize_panel, -1, 'Remove All')\n    self.palettize_exportDestLbl = wx.StaticText(self.eggPalettize_panel, -1, 'Export Destination')\n    self.palettize_exportInPlaceChk = wx.CheckBox(self.eggPalettize_panel, -1, 'In Place')\n    self.palettize_exportDirLbl = wx.StaticText(self.eggPalettize_panel, -1, 'Directory')\n    self.palettize_exportDirTxt = wx.TextCtrl(self.eggPalettize_panel, -1, '')\n    self.palettize_exportDirBtn = wx.Button(self.eggPalettize_panel, -1, 'Choose..')\n    self.palettize_exportFileLbl = wx.StaticText(self.eggPalettize_panel, -1, 'File')\n    self.palettize_exportFileTxt = wx.TextCtrl(self.eggPalettize_panel, -1, '')\n    self.palettize_exportFileBtn = wx.Button(self.eggPalettize_panel, -1, 'Choose..')\n    self.palettize_exportTexLbl = wx.StaticText(self.eggPalettize_panel, -1, 'Texture')\n    self.palettize_exportTexTxt = wx.TextCtrl(self.eggPalettize_panel, -1, '')\n    self.palettize_exportTexBtn = wx.Button(self.eggPalettize_panel, ID_OUTTEX, 'Choose..')\n    self.palettize_options_panel = wx.Panel(self.eggPalettize_panel, -1)\n    self.palettize_options_sizer_staticbox = wx.StaticBox(self.palettize_options_panel, 1, 'Palettize Attributes')\n    self.palettize_saveTxaLbl = wx.StaticText(self.palettize_options_panel, -1, '    Attrubutes File')\n    self.palettize_saveTxaTxt = wx.TextCtrl(self.palettize_options_panel, -1, '')\n    self.palettize_loadTxaBtn = wx.Button(self.palettize_options_panel, -1, 'Choose..')\n    self.palettize_saveTxaBtn = wx.Button(self.palettize_options_panel, -1, 'Create')\n    self.palettize_sizeLbl = wx.StaticText(self.palettize_options_panel, -1, 'Palette Size')\n    self.palettize_sizeWidthTxt = wx.TextCtrl(self.palettize_options_panel, -1, '4096', (30, 20), (80, -1))\n    self.palettize_sizeByLbl = wx.StaticText(self.palettize_options_panel, -1, ' x ')\n    self.palettize_sizeHeightTxt = wx.TextCtrl(self.palettize_options_panel, -1, '4096', (30, 20), (80, -1))\n    self.palettize_powerOf2Chk = wx.CheckBox(self.palettize_options_panel, -1, 'Power of 2')\n    self.palettize_imageTypeLbl = wx.StaticText(self.palettize_options_panel, -1, 'Image Type')\n    self.palettize_imageTypeChoice = wx.RadioBox(self.palettize_options_panel, -1, '', choices=['rgb', 'jpg', 'png'], majorDimension=3, style=wx.RA_SPECIFY_COLS)\n    self.palettize_colorLbl = wx.StaticText(self.palettize_options_panel, -1, 'Background Color')\n    self.palettize_redLbl = wx.StaticText(self.palettize_options_panel, -1, 'R')\n    self.palettize_redTxt = wx.SpinCtrl(self.palettize_options_panel, -1, '', (30, 20), (80, -1), min=0, max=255)\n    self.palettize_greenLbl = wx.StaticText(self.palettize_options_panel, -1, 'G')\n    self.palettize_greenTxt = wx.SpinCtrl(self.palettize_options_panel, -1, '', (30, 20), (80, -1), min=0, max=255)\n    self.palettize_blueLbl = wx.StaticText(self.palettize_options_panel, -1, 'B')\n    self.palettize_blueTxt = wx.SpinCtrl(self.palettize_options_panel, -1, '', (30, 20), (80, -1), min=0, max=255)\n    self.palettize_alphaLbl = wx.StaticText(self.palettize_options_panel, -1, 'A')\n    self.palettize_alphaTxt = wx.SpinCtrl(self.palettize_options_panel, -1, '', (30, 20), (80, -1), min=0, max=255)\n    self.palettize_color_sizer_staticbox = wx.StaticBox(self.palettize_options_panel, -1, '')\n    self.palettize_marginLbl = wx.StaticText(self.palettize_options_panel, -1, 'Margin')\n    self.palettize_marginTxt = wx.SpinCtrl(self.palettize_options_panel, -1, '', (30, 20), (80, -1), min=0, max=10000)\n    self.palettize_coverageLbl = wx.StaticText(self.palettize_options_panel, -1, 'Coverage')\n    self.palettize_coverageTxt = wx.TextCtrl(self.palettize_options_panel, -1, '1.0', (30, 20), (80, -1))\n    self.__set_properties()\n    self.__do_layout()\n    self.Bind(wx.EVT_BUTTON, self.OnSimpleExport, self.simple_runExportBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnSimpleExportDest, self.simple_exportDestBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnSimpleMayaFile, self.simple_mayaFileBtn)\n    self.Bind(wx.EVT_MENU, self.OnLoadPrefs, self.prefsLoadButton)\n    self.Bind(wx.EVT_MENU, self.OnSavePrefs, self.savePrefsButton)\n    self.Bind(wx.EVT_MENU, self.OnExit, self.exitButton)\n    self.Bind(wx.EVT_COMBOBOX, self.OnTool, self.toolComboBox)\n    self.Bind(wx.EVT_BUTTON, self.OnBatchItemEdit, id=ID_EDITSELBATCH)\n    self.Bind(wx.EVT_BUTTON, self.OnRemoveBatch, id=ID_REMOVESELBATCH)\n    self.Bind(wx.EVT_BUTTON, self.OnRemoveAllBatch, id=ID_REMOVEALLBATCH)\n    self.Bind(wx.EVT_BUTTON, self.OnClearOutput, id=ID_CLEAROUTPUT)\n    self.Bind(wx.EVT_BUTTON, self.OnAddToBatch, self.addToBatchBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnPandaPathChoose, id=ID_CHOOSEPANDA)\n    self.Bind(wx.EVT_BUTTON, self.OnMaya2EggExportDest, self.m2e_exportDestBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnMaya2EggMayaFile, self.m2e_mayaFileBtn)\n    self.Bind(wx.EVT_COMBOBOX, self.OnMayaVerChoose, self.m2e_mayaVerComboBox)\n    self.Bind(wx.EVT_BUTTON, self.OnMaya2EggCopyTexPath, self.m2e_copyTexPathBtn)\n    self.Bind(wx.EVT_RADIOBOX, self.OnMaya2EggAnimOpt, self.m2e_animOptChoice)\n    self.Bind(wx.EVT_BUTTON, self.OnMaya2EggPathReplace, self.m2e_pathReplaceBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnEgg2BamEggFile, self.e2b_eggFileBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnEgg2BamExportDest, self.e2b_exportDestBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnEgg2BamBatchOutput, self.e2b_bamBatchOutputBtn)\n    self.Bind(wx.EVT_CHECKBOX, self.OnEgg2BamUseCurrEgg, self.e2b_useCurrEggChk)\n    self.Bind(wx.EVT_BUTTON, self.OnRenameAddEgg, self.rename_addEggBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnRenameAddFromBatch, self.rename_addFromBatchBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnRenameRemoveEgg, self.rename_removeEggBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnRenameRemoveAllEggs, self.rename_removeAllEggsBtn)\n    self.Bind(wx.EVT_CHECKBOX, self.OnRenameInPlace, self.rename_exportInPlaceChk)\n    self.Bind(wx.EVT_BUTTON, self.OnRenameExportDir, self.rename_exportDirBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnRenameExportFile, self.rename_exportFileBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnOptcharAddEgg, self.optchar_addEggBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnOptcharAddFromBatch, self.optchar_addFromBatchBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnOptcharRemoveEgg, self.optchar_removeEggBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnOptcharRemoveAllEggs, self.optchar_removeAllEggsBtn)\n    self.Bind(wx.EVT_CHECKBOX, self.OnOptcharInPlace, self.optchar_exportInPlaceChk)\n    self.Bind(wx.EVT_BUTTON, self.OnOptcharExportDir, self.optchar_exportDirBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnOptcharExportFile, self.optchar_exportFileBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnPalettizeAddEgg, self.palettize_addEggBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnPalettizeAddFromBatch, self.palettize_addFromBatchBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnPalettizeRemoveEgg, self.palettize_removeEggBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnPalettizeRemoveAllEggs, self.palettize_removeAllEggsBtn)\n    self.Bind(wx.EVT_CHECKBOX, self.OnPalettizeInPlace, self.palettize_exportInPlaceChk)\n    self.Bind(wx.EVT_BUTTON, self.OnPalettizeExportDir, self.palettize_exportDirBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnPalettizeExportFile, self.palettize_exportFileBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnPalettizeExportTex, self.palettize_exportTexBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnPalettizeLoadTxa, self.palettize_loadTxaBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnPalettizeSaveTxa, self.palettize_saveTxaBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnRunBatch, id=ID_RUNBATCH)\n    self.Bind(wx.EVT_BUTTON, self.OnLoadBatch, id=ID_LOADBATCH)\n    self.Bind(wx.EVT_BUTTON, self.OnSaveBatch, id=ID_SAVEBATCH)\n    self.Bind(wx.EVT_BUTTON, self.OnSortBatch, id=ID_SORTBATCH)\n    self.Bind(wx.EVT_BUTTON, self.OnChangePaths, self.changePathsButton)\n    self.Bind(wx.EVT_TREE_SEL_CHANGED, self.OnBatchItemSelection, self.batchTree)\n    self.Bind(wx.EVT_BUTTON, self.OnLoadPview, self.runPviewButton)",
        "mutated": [
            "def _setupUI(self):\n    if False:\n        i = 10\n    self.menuBar = wx.MenuBar()\n    wxglade_tmp_menu = wx.Menu()\n    self.prefsLoadButton = wx.MenuItem(wxglade_tmp_menu, ID_LOADPREFS, 'Load Preferences', '', wx.ITEM_NORMAL)\n    wxglade_tmp_menu.AppendItem(self.prefsLoadButton)\n    self.savePrefsButton = wx.MenuItem(wxglade_tmp_menu, ID_SAVEPREFS, 'Save Preferences', '', wx.ITEM_NORMAL)\n    wxglade_tmp_menu.AppendItem(self.savePrefsButton)\n    wxglade_tmp_menu.AppendSeparator()\n    self.exitButton = wx.MenuItem(wxglade_tmp_menu, ID_EXIT, 'Exit', '', wx.ITEM_NORMAL)\n    wxglade_tmp_menu.AppendItem(self.exitButton)\n    self.menuBar.Append(wxglade_tmp_menu, 'File')\n    wxglade_tmp_menu = wx.Menu()\n    self.loadBatchMenuButton = wx.MenuItem(wxglade_tmp_menu, ID_LOADBATCH, 'Load Batch ', '', wx.ITEM_NORMAL)\n    wxglade_tmp_menu.AppendItem(self.loadBatchMenuButton)\n    self.saveBatchMenuButton = wx.MenuItem(wxglade_tmp_menu, ID_SAVEBATCH, 'Save Batch', '', wx.ITEM_NORMAL)\n    wxglade_tmp_menu.AppendItem(self.saveBatchMenuButton)\n    self.menuBar.Append(wxglade_tmp_menu, 'Batch')\n    self.SetMenuBar(self.menuBar)\n    wxglade_tmp_menu = wx.Menu()\n    self.HelpMenuButton = wx.MenuItem(wxglade_tmp_menu, ID_HELP, 'Help ', '', wx.ITEM_NORMAL)\n    wxglade_tmp_menu.AppendItem(self.HelpMenuButton)\n    self.AboutMenuButton = wx.MenuItem(wxglade_tmp_menu, ID_ABOUT, 'About', '', wx.ITEM_NORMAL)\n    wxglade_tmp_menu.AppendItem(self.AboutMenuButton)\n    self.menuBar.Append(wxglade_tmp_menu, 'Help')\n    self.SetMenuBar(self.menuBar)\n    self.statusBar = self.CreateStatusBar(1, 0)\n    self.tab_panel = wx.Notebook(self, 1)\n    self.outdlg = OutputDialog(self)\n    self.simple_panel = wx.Panel(self.tab_panel, -1)\n    self.simple_options_panel = wx.Panel(self.simple_panel, -1)\n    self.simple_options_sizer_staticbox = wx.StaticBox(self.simple_options_panel, -1, 'Maya2Egg')\n    self.simple_mayaFileLbl = wx.StaticText(self.simple_options_panel, -1, 'Maya Scene File')\n    self.simple_mayaFileTxt = wx.TextCtrl(self.simple_options_panel, -1, '')\n    self.simple_mayaFileBtn = wx.Button(self.simple_options_panel, ID_SIMPLEMBPICK, 'Choose..')\n    self.simple_exportDestLbl = wx.StaticText(self.simple_options_panel, -1, 'Export Destination')\n    self.simple_exportDestTxt = wx.TextCtrl(self.simple_options_panel, -1, '')\n    self.simple_exportDestBtn = wx.Button(self.simple_options_panel, ID_SIMPLEEGGSAVE, 'Choose..')\n    self.simple_mayaVerLbl = wx.StaticText(self.simple_options_panel, -1, 'Maya Version', style=wx.ALIGN_CENTRE)\n    self.simple_mayaVerComboBox = wx.ComboBox(self.simple_options_panel, -1, choices=MAYA_VERSIONS, style=wx.CB_DROPDOWN | wx.CB_READONLY)\n    self.simple_animOptChoice = wx.RadioBox(self.simple_options_panel, -1, 'animation-mode', choices=['none', 'model', 'chan', 'both'], majorDimension=4, style=wx.RA_SPECIFY_COLS)\n    self.simple_runExportBtn = wx.Button(self.simple_options_panel, ID_RUNSIMPLEEXPORT, 'Run Export')\n    self.main_panel = wx.Panel(self.tab_panel, -1, style=wx.NO_BORDER | wx.TAB_TRAVERSAL)\n    self.toolComboBox = wx.ComboBox(self.main_panel, -1, choices=TOOLS, style=wx.CB_DROPDOWN | wx.CB_READONLY)\n    self.tool_options_panel = wx.Panel(self.main_panel, -1)\n    self.tool_options_sizer_staticbox = wx.StaticBox(self.tool_options_panel, -1, 'Tool Options')\n    self.batch_panel = wx.Panel(self.main_panel, -1)\n    self.batch_static_sizer_staticbox = wx.StaticBox(self.batch_panel, -1, 'Batch List')\n    self.loadBatchButton = wx.Button(self.batch_panel, ID_LOADBATCH, 'Load Batch')\n    self.saveBatchButton = wx.Button(self.batch_panel, ID_SAVEBATCH, 'Save Batch')\n    self.sortBatchButton = wx.Button(self.batch_panel, ID_SORTBATCH, 'Sort Batch')\n    self.changePathsButton = wx.Button(self.batch_panel, ID_SORTBATCH, 'Change Paths')\n    self.editSelBatchButton = wx.Button(self.batch_panel, ID_EDITSELBATCH, 'Edit Selected')\n    self.removeSelBatchButton = wx.Button(self.batch_panel, ID_REMOVESELBATCH, 'Remove Selected')\n    self.removeAllBatchButton = wx.Button(self.batch_panel, ID_REMOVEALLBATCH, 'Remove All')\n    self.batchTree = wx.TreeCtrl(self.batch_panel, -1, style=wx.TR_HAS_BUTTONS | wx.TR_LINES_AT_ROOT | wx.TR_DEFAULT_STYLE | wx.SUNKEN_BORDER | wx.TR_MULTIPLE)\n    self.treeRoot = self.batchTree.AddRoot('Batch Files')\n    self.console_panel = wx.Panel(self.main_panel, -1)\n    self.consoleOutputTxt = wx.TextCtrl(self.console_panel, -1, '', style=wx.TE_MULTILINE | wx.TE_READONLY | wx.TE_WORDWRAP)\n    self.console_static_sizer_staticbox = wx.StaticBox(self.console_panel, -1, 'Console Output')\n    self.runBatchButton = wx.Button(self.console_panel, ID_RUNBATCH, 'Run Batch')\n    self.clearConsoleButton = wx.Button(self.console_panel, ID_CLEAROUTPUT, 'Clear Output')\n    self.runPviewButton = wx.Button(self.console_panel, -1, 'Load pview')\n    self.pathLbl = wx.StaticText(self.console_panel, -1, 'Panda Directory', style=wx.ALIGN_CENTRE)\n    self.pandaPathTxt = wx.TextCtrl(self.console_panel, -1, '', style=wx.TE_READONLY)\n    self.loadPandaPathBtn = wx.Button(self.console_panel, ID_CHOOSEPANDA, 'Choose..')\n    self.ignoreModDates = wx.CheckBox(self.console_panel, -1, 'Override export changed maya scene files')\n    self.maya2egg_panel = wx.Panel(self.tool_options_panel, -1, style=wx.NO_BORDER | wx.TAB_TRAVERSAL)\n    self.m2e_mayaVerLbl = wx.StaticText(self.maya2egg_panel, -1, 'Maya Version', style=wx.ALIGN_CENTRE)\n    self.m2e_mayaVerComboBox = wx.ComboBox(self.maya2egg_panel, -1, choices=MAYA_VERSIONS, style=wx.CB_DROPDOWN | wx.CB_READONLY)\n    self.m2e_mayaFileLbl = wx.StaticText(self.maya2egg_panel, -1, 'Maya Scene File')\n    self.m2e_mayaFileTxt = wx.TextCtrl(self.maya2egg_panel, -1, '')\n    self.m2e_mayaFileBtn = wx.Button(self.maya2egg_panel, -1, 'Choose..')\n    self.m2e_exportDestLbl = wx.StaticText(self.maya2egg_panel, -1, 'Export Destination')\n    self.m2e_exportDestTxt = wx.TextCtrl(self.maya2egg_panel, -1, '')\n    self.m2e_exportDestBtn = wx.Button(self.maya2egg_panel, -1, 'Choose..')\n    self.m2e_options_panel = wx.Panel(self.maya2egg_panel, -1)\n    self.m2e_options_panel_sizer_staticbox = wx.StaticBox(self.m2e_options_panel, 1, 'General Options')\n    self.m2e_mayaUnitsLbl = wx.StaticText(self.m2e_options_panel, -1, 'Maya Units (Input)')\n    self.m2e_mayaUnitsComboBox = wx.ComboBox(self.m2e_options_panel, -1, choices=UNIT_TYPES, style=wx.CB_DROPDOWN | wx.CB_READONLY)\n    self.m2e_pandaUnitsLbl = wx.StaticText(self.m2e_options_panel, -1, '--->   Panda Units (Output)')\n    self.m2e_pandaUnitsComboBox = wx.ComboBox(self.m2e_options_panel, -1, choices=UNIT_TYPES, style=wx.CB_DROPDOWN | wx.CB_READONLY)\n    self.m2e_backfaceChk = wx.CheckBox(self.m2e_options_panel, -1, 'Back Face Rendering')\n    self.m2e_polygonOutputChk = wx.CheckBox(self.m2e_options_panel, -1, 'Polygon Output Only')\n    self.m2e_tbnallChk = wx.CheckBox(self.m2e_options_panel, -1, 'Calculate Tangent and Binormal')\n    self.m2e_subrootsChk = wx.CheckBox(self.m2e_options_panel, -1, 'Export Specified Subroots')\n    self.m2e_subrootsTxt = wx.TextCtrl(self.m2e_options_panel, -1, '')\n    self.m2e_subsetsChk = wx.CheckBox(self.m2e_options_panel, -1, 'Export Specified Subsets')\n    self.m2e_subsetsTxt = wx.TextCtrl(self.m2e_options_panel, -1, '')\n    self.m2e_excludesChk = wx.CheckBox(self.m2e_options_panel, -1, 'Exclude Specified Subsets')\n    self.m2e_excludesTxt = wx.TextCtrl(self.m2e_options_panel, -1, '')\n    self.m2e_anim_options_panel = wx.Panel(self.maya2egg_panel, -1)\n    self.m2e_anim_options_sizer_staticbox = wx.StaticBox(self.m2e_anim_options_panel, 1, 'Animation Options')\n    self.m2e_animOptChoice = wx.RadioBox(self.m2e_anim_options_panel, -1, 'mode', choices=['none', 'model', 'chan', 'both', 'pose'], majorDimension=5, style=wx.RA_SPECIFY_COLS)\n    self.m2e_startFrameChk = wx.CheckBox(self.m2e_anim_options_panel, -1, 'Start Frame')\n    self.m2e_startFrameSpin = wx.SpinCtrl(self.m2e_anim_options_panel, -1, '', min=-10000, max=10000)\n    self.m2e_endFrameChk = wx.CheckBox(self.m2e_anim_options_panel, -1, 'End Frame')\n    self.m2e_endFrameSpin = wx.SpinCtrl(self.m2e_anim_options_panel, -1, '', min=-10000, max=10000)\n    self.m2e_frameRateInChk = wx.CheckBox(self.m2e_anim_options_panel, -1, 'Frame Rate Input (+/-)')\n    self.m2e_frameRateInSpin = wx.SpinCtrl(self.m2e_anim_options_panel, -1, '', min=-10000, max=10000)\n    self.m2e_frameRateOutChk = wx.CheckBox(self.m2e_anim_options_panel, -1, 'Frame Rate Output (+/-)  ')\n    self.m2e_frameRateOutSpin = wx.SpinCtrl(self.m2e_anim_options_panel, -1, '', min=-10000, max=10000)\n    self.m2e_charNameChk = wx.CheckBox(self.m2e_anim_options_panel, -1, 'Character Name')\n    self.m2e_charNameTxt = wx.TextCtrl(self.m2e_anim_options_panel, -1, '')\n    self.m2e_tex_options_panel = wx.Panel(self.maya2egg_panel, -1)\n    self.m2e_tex_options_sizer_staticbox = wx.StaticBox(self.m2e_tex_options_panel, 1, 'Texture/Shader Options')\n    self.m2e_legacyShaderChk = wx.CheckBox(self.m2e_tex_options_panel, -1, 'Use Legacy Shader Generation')\n    self.m2e_copyTexChk = wx.CheckBox(self.m2e_tex_options_panel, -1, 'Copy Textures')\n    self.m2e_copyTexPathTxt = wx.TextCtrl(self.m2e_tex_options_panel, -1, '')\n    self.m2e_copyTexPathBtn = wx.Button(self.m2e_tex_options_panel, -1, 'Choose..')\n    self.m2e_pathReplaceChk = wx.CheckBox(self.m2e_tex_options_panel, -1, 'Path Replace')\n    self.m2e_pathReplaceTxt = wx.TextCtrl(self.m2e_tex_options_panel, -1, '')\n    self.m2e_pathReplaceBtn = wx.Button(self.m2e_tex_options_panel, -1, 'Batch Files')\n    self.m2e_addEgg2BamChk = wx.CheckBox(self.maya2egg_panel, -1, 'Add with Egg2Bam')\n    self.m2e_addEgg2BamChk.Hide()\n    self.batchItemNameLbl = wx.StaticText(self.main_panel, -1, 'Batch Item Name')\n    self.batchItemNameTxt = wx.TextCtrl(self.main_panel, -1, '')\n    self.addToBatchBtn = wx.Button(self.main_panel, ID_MAYAADDTOBATCH, 'Add To Batch >>')\n    self.egg2bam_panel = wx.Panel(self.tool_options_panel, -1, style=wx.NO_BORDER | wx.TAB_TRAVERSAL)\n    self.e2b_eggFileLbl = wx.StaticText(self.egg2bam_panel, -1, 'Egg File')\n    self.e2b_eggFileTxt = wx.TextCtrl(self.egg2bam_panel, -1, '')\n    self.e2b_eggFileBtn = wx.Button(self.egg2bam_panel, -1, 'Choose..')\n    self.e2b_exportDestLbl = wx.StaticText(self.egg2bam_panel, -1, 'Export Destination')\n    self.e2b_exportDestTxt = wx.TextCtrl(self.egg2bam_panel, -1, '')\n    self.e2b_exportDestBtn = wx.Button(self.egg2bam_panel, -1, 'Choose..')\n    self.e2b_bamBatchOutputLbl = wx.StaticText(self.egg2bam_panel, -1, 'Bam Output Files from the Current Batch')\n    self.e2b_bamBatchOutputBtn = wx.Button(self.egg2bam_panel, -1, 'Bam Batch Output')\n    self.e2b_options_panel = wx.Panel(self.egg2bam_panel, -1)\n    self.e2b_options_sizer_staticbox = wx.StaticBox(self.e2b_options_panel, 1, 'General Options')\n    self.e2b_flattenChk = wx.CheckBox(self.e2b_options_panel, -1, 'Flatten')\n    self.e2b_embedTexChk = wx.CheckBox(self.e2b_options_panel, -1, 'Embed Textures')\n    self.e2b_useCurrEggChk = wx.CheckBox(self.e2b_options_panel, -1, 'Use current egg file')\n    self.eggRename_panel = wx.Panel(self.tool_options_panel, -1, style=wx.NO_BORDER | wx.TAB_TRAVERSAL)\n    self.rename_eggFilesLbl = wx.StaticText(self.eggRename_panel, -1, 'Egg Files')\n    self.rename_eggFilesTree = wx.TreeCtrl(self.eggRename_panel, -1, style=wx.TR_HAS_BUTTONS | wx.TR_LINES_AT_ROOT | wx.TR_DEFAULT_STYLE | wx.SUNKEN_BORDER)\n    self.rename_eggFilesRoot = self.rename_eggFilesTree.AddRoot('Egg Files')\n    self.rename_addEggBtn = wx.Button(self.eggRename_panel, -1, 'Add')\n    self.rename_addFromBatchBtn = wx.Button(self.eggRename_panel, -1, 'Batch Files')\n    self.rename_removeEggBtn = wx.Button(self.eggRename_panel, -1, 'Remove')\n    self.rename_removeAllEggsBtn = wx.Button(self.eggRename_panel, -1, 'Remove All')\n    self.rename_exportDestLbl = wx.StaticText(self.eggRename_panel, -1, 'Export Destination')\n    self.rename_exportInPlaceChk = wx.CheckBox(self.eggRename_panel, -1, 'In Place')\n    self.rename_exportDirLbl = wx.StaticText(self.eggRename_panel, -1, 'Directory')\n    self.rename_exportDirTxt = wx.TextCtrl(self.eggRename_panel, -1, '')\n    self.rename_exportDirBtn = wx.Button(self.eggRename_panel, -1, 'Choose..')\n    self.rename_exportFileLbl = wx.StaticText(self.eggRename_panel, -1, 'File')\n    self.rename_exportFileTxt = wx.TextCtrl(self.eggRename_panel, -1, '')\n    self.rename_exportFileBtn = wx.Button(self.eggRename_panel, -1, 'Choose..')\n    self.rename_options_panel = wx.Panel(self.eggRename_panel, -1)\n    self.rename_options_sizer_staticbox = wx.StaticBox(self.rename_options_panel, 1, 'General Options')\n    self.rename_stripPrefixChk = wx.CheckBox(self.rename_options_panel, -1, 'Strip Specified Prefix')\n    self.rename_stripPrefixTxt = wx.TextCtrl(self.rename_options_panel, -1, '')\n    self.eggOptChar_panel = wx.Panel(self.tool_options_panel, -1, style=wx.NO_BORDER | wx.TAB_TRAVERSAL)\n    self.optchar_eggFilesLbl = wx.StaticText(self.eggOptChar_panel, -1, 'Egg Files')\n    self.optchar_eggFilesTree = wx.TreeCtrl(self.eggOptChar_panel, -1, style=wx.TR_HAS_BUTTONS | wx.TR_LINES_AT_ROOT | wx.TR_DEFAULT_STYLE | wx.SUNKEN_BORDER)\n    self.optchar_eggFilesRoot = self.optchar_eggFilesTree.AddRoot('Egg Files')\n    self.optchar_addEggBtn = wx.Button(self.eggOptChar_panel, -1, 'Add')\n    self.optchar_addFromBatchBtn = wx.Button(self.eggOptChar_panel, -1, 'Batch Files')\n    self.optchar_removeEggBtn = wx.Button(self.eggOptChar_panel, -1, 'Remove')\n    self.optchar_removeAllEggsBtn = wx.Button(self.eggOptChar_panel, -1, 'Remove All')\n    self.optchar_exportDestLbl = wx.StaticText(self.eggOptChar_panel, -1, 'Export Destination')\n    self.optchar_exportInPlaceChk = wx.CheckBox(self.eggOptChar_panel, -1, 'In Place')\n    self.optchar_exportDirLbl = wx.StaticText(self.eggOptChar_panel, -1, 'Directory')\n    self.optchar_exportDirTxt = wx.TextCtrl(self.eggOptChar_panel, -1, '')\n    self.optchar_exportDirBtn = wx.Button(self.eggOptChar_panel, -1, 'Choose..')\n    self.optchar_exportFileLbl = wx.StaticText(self.eggOptChar_panel, -1, 'File')\n    self.optchar_exportFileTxt = wx.TextCtrl(self.eggOptChar_panel, -1, '')\n    self.optchar_exportFileBtn = wx.Button(self.eggOptChar_panel, -1, 'Choose..')\n    self.optchar_options_panel = wx.Panel(self.eggOptChar_panel, -1)\n    self.optchar_options_sizer_staticbox = wx.StaticBox(self.optchar_options_panel, 1, 'General Options')\n    self.optchar_keepAllJointsChk = wx.CheckBox(self.optchar_options_panel, -1, 'Keep All Joints')\n    self.optchar_keepJointsChk = wx.CheckBox(self.optchar_options_panel, -1, 'Keep Specified Joints')\n    self.optchar_keepJointsTxt = wx.TextCtrl(self.optchar_options_panel, -1, '')\n    self.optchar_dropJointsChk = wx.CheckBox(self.optchar_options_panel, -1, 'Drop Specified Joints')\n    self.optchar_dropJointsTxt = wx.TextCtrl(self.optchar_options_panel, -1, '')\n    self.optchar_exposeJointsChk = wx.CheckBox(self.optchar_options_panel, -1, 'Expose Specified Joints')\n    self.optchar_exposeJointsTxt = wx.TextCtrl(self.optchar_options_panel, -1, '')\n    self.optchar_flagGeometryChk = wx.CheckBox(self.optchar_options_panel, -1, 'Flag Specified Geometry')\n    self.optchar_flagGeometryTxt = wx.TextCtrl(self.optchar_options_panel, -1, '')\n    self.optchar_dartChoice = wx.RadioBox(self.optchar_options_panel, -1, 'dart', choices=['default', 'sync', 'nosync', 'structured'], majorDimension=4, style=wx.RA_SPECIFY_COLS)\n    self.eggPalettize_panel = wx.Panel(self.tool_options_panel, -1, style=wx.NO_BORDER | wx.TAB_TRAVERSAL)\n    self.palettize_eggFilesLbl = wx.StaticText(self.eggPalettize_panel, -1, 'Egg Files')\n    self.palettize_eggFilesTree = wx.TreeCtrl(self.eggPalettize_panel, -1, style=wx.TR_HAS_BUTTONS | wx.TR_LINES_AT_ROOT | wx.TR_DEFAULT_STYLE | wx.SUNKEN_BORDER)\n    self.palettize_eggFilesRoot = self.palettize_eggFilesTree.AddRoot('Egg Files')\n    self.palettize_addEggBtn = wx.Button(self.eggPalettize_panel, -1, 'Add')\n    self.palettize_addFromBatchBtn = wx.Button(self.eggPalettize_panel, -1, 'Batch Files')\n    self.palettize_removeEggBtn = wx.Button(self.eggPalettize_panel, -1, 'Remove')\n    self.palettize_removeAllEggsBtn = wx.Button(self.eggPalettize_panel, -1, 'Remove All')\n    self.palettize_exportDestLbl = wx.StaticText(self.eggPalettize_panel, -1, 'Export Destination')\n    self.palettize_exportInPlaceChk = wx.CheckBox(self.eggPalettize_panel, -1, 'In Place')\n    self.palettize_exportDirLbl = wx.StaticText(self.eggPalettize_panel, -1, 'Directory')\n    self.palettize_exportDirTxt = wx.TextCtrl(self.eggPalettize_panel, -1, '')\n    self.palettize_exportDirBtn = wx.Button(self.eggPalettize_panel, -1, 'Choose..')\n    self.palettize_exportFileLbl = wx.StaticText(self.eggPalettize_panel, -1, 'File')\n    self.palettize_exportFileTxt = wx.TextCtrl(self.eggPalettize_panel, -1, '')\n    self.palettize_exportFileBtn = wx.Button(self.eggPalettize_panel, -1, 'Choose..')\n    self.palettize_exportTexLbl = wx.StaticText(self.eggPalettize_panel, -1, 'Texture')\n    self.palettize_exportTexTxt = wx.TextCtrl(self.eggPalettize_panel, -1, '')\n    self.palettize_exportTexBtn = wx.Button(self.eggPalettize_panel, ID_OUTTEX, 'Choose..')\n    self.palettize_options_panel = wx.Panel(self.eggPalettize_panel, -1)\n    self.palettize_options_sizer_staticbox = wx.StaticBox(self.palettize_options_panel, 1, 'Palettize Attributes')\n    self.palettize_saveTxaLbl = wx.StaticText(self.palettize_options_panel, -1, '    Attrubutes File')\n    self.palettize_saveTxaTxt = wx.TextCtrl(self.palettize_options_panel, -1, '')\n    self.palettize_loadTxaBtn = wx.Button(self.palettize_options_panel, -1, 'Choose..')\n    self.palettize_saveTxaBtn = wx.Button(self.palettize_options_panel, -1, 'Create')\n    self.palettize_sizeLbl = wx.StaticText(self.palettize_options_panel, -1, 'Palette Size')\n    self.palettize_sizeWidthTxt = wx.TextCtrl(self.palettize_options_panel, -1, '4096', (30, 20), (80, -1))\n    self.palettize_sizeByLbl = wx.StaticText(self.palettize_options_panel, -1, ' x ')\n    self.palettize_sizeHeightTxt = wx.TextCtrl(self.palettize_options_panel, -1, '4096', (30, 20), (80, -1))\n    self.palettize_powerOf2Chk = wx.CheckBox(self.palettize_options_panel, -1, 'Power of 2')\n    self.palettize_imageTypeLbl = wx.StaticText(self.palettize_options_panel, -1, 'Image Type')\n    self.palettize_imageTypeChoice = wx.RadioBox(self.palettize_options_panel, -1, '', choices=['rgb', 'jpg', 'png'], majorDimension=3, style=wx.RA_SPECIFY_COLS)\n    self.palettize_colorLbl = wx.StaticText(self.palettize_options_panel, -1, 'Background Color')\n    self.palettize_redLbl = wx.StaticText(self.palettize_options_panel, -1, 'R')\n    self.palettize_redTxt = wx.SpinCtrl(self.palettize_options_panel, -1, '', (30, 20), (80, -1), min=0, max=255)\n    self.palettize_greenLbl = wx.StaticText(self.palettize_options_panel, -1, 'G')\n    self.palettize_greenTxt = wx.SpinCtrl(self.palettize_options_panel, -1, '', (30, 20), (80, -1), min=0, max=255)\n    self.palettize_blueLbl = wx.StaticText(self.palettize_options_panel, -1, 'B')\n    self.palettize_blueTxt = wx.SpinCtrl(self.palettize_options_panel, -1, '', (30, 20), (80, -1), min=0, max=255)\n    self.palettize_alphaLbl = wx.StaticText(self.palettize_options_panel, -1, 'A')\n    self.palettize_alphaTxt = wx.SpinCtrl(self.palettize_options_panel, -1, '', (30, 20), (80, -1), min=0, max=255)\n    self.palettize_color_sizer_staticbox = wx.StaticBox(self.palettize_options_panel, -1, '')\n    self.palettize_marginLbl = wx.StaticText(self.palettize_options_panel, -1, 'Margin')\n    self.palettize_marginTxt = wx.SpinCtrl(self.palettize_options_panel, -1, '', (30, 20), (80, -1), min=0, max=10000)\n    self.palettize_coverageLbl = wx.StaticText(self.palettize_options_panel, -1, 'Coverage')\n    self.palettize_coverageTxt = wx.TextCtrl(self.palettize_options_panel, -1, '1.0', (30, 20), (80, -1))\n    self.__set_properties()\n    self.__do_layout()\n    self.Bind(wx.EVT_BUTTON, self.OnSimpleExport, self.simple_runExportBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnSimpleExportDest, self.simple_exportDestBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnSimpleMayaFile, self.simple_mayaFileBtn)\n    self.Bind(wx.EVT_MENU, self.OnLoadPrefs, self.prefsLoadButton)\n    self.Bind(wx.EVT_MENU, self.OnSavePrefs, self.savePrefsButton)\n    self.Bind(wx.EVT_MENU, self.OnExit, self.exitButton)\n    self.Bind(wx.EVT_COMBOBOX, self.OnTool, self.toolComboBox)\n    self.Bind(wx.EVT_BUTTON, self.OnBatchItemEdit, id=ID_EDITSELBATCH)\n    self.Bind(wx.EVT_BUTTON, self.OnRemoveBatch, id=ID_REMOVESELBATCH)\n    self.Bind(wx.EVT_BUTTON, self.OnRemoveAllBatch, id=ID_REMOVEALLBATCH)\n    self.Bind(wx.EVT_BUTTON, self.OnClearOutput, id=ID_CLEAROUTPUT)\n    self.Bind(wx.EVT_BUTTON, self.OnAddToBatch, self.addToBatchBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnPandaPathChoose, id=ID_CHOOSEPANDA)\n    self.Bind(wx.EVT_BUTTON, self.OnMaya2EggExportDest, self.m2e_exportDestBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnMaya2EggMayaFile, self.m2e_mayaFileBtn)\n    self.Bind(wx.EVT_COMBOBOX, self.OnMayaVerChoose, self.m2e_mayaVerComboBox)\n    self.Bind(wx.EVT_BUTTON, self.OnMaya2EggCopyTexPath, self.m2e_copyTexPathBtn)\n    self.Bind(wx.EVT_RADIOBOX, self.OnMaya2EggAnimOpt, self.m2e_animOptChoice)\n    self.Bind(wx.EVT_BUTTON, self.OnMaya2EggPathReplace, self.m2e_pathReplaceBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnEgg2BamEggFile, self.e2b_eggFileBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnEgg2BamExportDest, self.e2b_exportDestBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnEgg2BamBatchOutput, self.e2b_bamBatchOutputBtn)\n    self.Bind(wx.EVT_CHECKBOX, self.OnEgg2BamUseCurrEgg, self.e2b_useCurrEggChk)\n    self.Bind(wx.EVT_BUTTON, self.OnRenameAddEgg, self.rename_addEggBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnRenameAddFromBatch, self.rename_addFromBatchBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnRenameRemoveEgg, self.rename_removeEggBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnRenameRemoveAllEggs, self.rename_removeAllEggsBtn)\n    self.Bind(wx.EVT_CHECKBOX, self.OnRenameInPlace, self.rename_exportInPlaceChk)\n    self.Bind(wx.EVT_BUTTON, self.OnRenameExportDir, self.rename_exportDirBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnRenameExportFile, self.rename_exportFileBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnOptcharAddEgg, self.optchar_addEggBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnOptcharAddFromBatch, self.optchar_addFromBatchBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnOptcharRemoveEgg, self.optchar_removeEggBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnOptcharRemoveAllEggs, self.optchar_removeAllEggsBtn)\n    self.Bind(wx.EVT_CHECKBOX, self.OnOptcharInPlace, self.optchar_exportInPlaceChk)\n    self.Bind(wx.EVT_BUTTON, self.OnOptcharExportDir, self.optchar_exportDirBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnOptcharExportFile, self.optchar_exportFileBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnPalettizeAddEgg, self.palettize_addEggBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnPalettizeAddFromBatch, self.palettize_addFromBatchBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnPalettizeRemoveEgg, self.palettize_removeEggBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnPalettizeRemoveAllEggs, self.palettize_removeAllEggsBtn)\n    self.Bind(wx.EVT_CHECKBOX, self.OnPalettizeInPlace, self.palettize_exportInPlaceChk)\n    self.Bind(wx.EVT_BUTTON, self.OnPalettizeExportDir, self.palettize_exportDirBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnPalettizeExportFile, self.palettize_exportFileBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnPalettizeExportTex, self.palettize_exportTexBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnPalettizeLoadTxa, self.palettize_loadTxaBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnPalettizeSaveTxa, self.palettize_saveTxaBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnRunBatch, id=ID_RUNBATCH)\n    self.Bind(wx.EVT_BUTTON, self.OnLoadBatch, id=ID_LOADBATCH)\n    self.Bind(wx.EVT_BUTTON, self.OnSaveBatch, id=ID_SAVEBATCH)\n    self.Bind(wx.EVT_BUTTON, self.OnSortBatch, id=ID_SORTBATCH)\n    self.Bind(wx.EVT_BUTTON, self.OnChangePaths, self.changePathsButton)\n    self.Bind(wx.EVT_TREE_SEL_CHANGED, self.OnBatchItemSelection, self.batchTree)\n    self.Bind(wx.EVT_BUTTON, self.OnLoadPview, self.runPviewButton)",
            "def _setupUI(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.menuBar = wx.MenuBar()\n    wxglade_tmp_menu = wx.Menu()\n    self.prefsLoadButton = wx.MenuItem(wxglade_tmp_menu, ID_LOADPREFS, 'Load Preferences', '', wx.ITEM_NORMAL)\n    wxglade_tmp_menu.AppendItem(self.prefsLoadButton)\n    self.savePrefsButton = wx.MenuItem(wxglade_tmp_menu, ID_SAVEPREFS, 'Save Preferences', '', wx.ITEM_NORMAL)\n    wxglade_tmp_menu.AppendItem(self.savePrefsButton)\n    wxglade_tmp_menu.AppendSeparator()\n    self.exitButton = wx.MenuItem(wxglade_tmp_menu, ID_EXIT, 'Exit', '', wx.ITEM_NORMAL)\n    wxglade_tmp_menu.AppendItem(self.exitButton)\n    self.menuBar.Append(wxglade_tmp_menu, 'File')\n    wxglade_tmp_menu = wx.Menu()\n    self.loadBatchMenuButton = wx.MenuItem(wxglade_tmp_menu, ID_LOADBATCH, 'Load Batch ', '', wx.ITEM_NORMAL)\n    wxglade_tmp_menu.AppendItem(self.loadBatchMenuButton)\n    self.saveBatchMenuButton = wx.MenuItem(wxglade_tmp_menu, ID_SAVEBATCH, 'Save Batch', '', wx.ITEM_NORMAL)\n    wxglade_tmp_menu.AppendItem(self.saveBatchMenuButton)\n    self.menuBar.Append(wxglade_tmp_menu, 'Batch')\n    self.SetMenuBar(self.menuBar)\n    wxglade_tmp_menu = wx.Menu()\n    self.HelpMenuButton = wx.MenuItem(wxglade_tmp_menu, ID_HELP, 'Help ', '', wx.ITEM_NORMAL)\n    wxglade_tmp_menu.AppendItem(self.HelpMenuButton)\n    self.AboutMenuButton = wx.MenuItem(wxglade_tmp_menu, ID_ABOUT, 'About', '', wx.ITEM_NORMAL)\n    wxglade_tmp_menu.AppendItem(self.AboutMenuButton)\n    self.menuBar.Append(wxglade_tmp_menu, 'Help')\n    self.SetMenuBar(self.menuBar)\n    self.statusBar = self.CreateStatusBar(1, 0)\n    self.tab_panel = wx.Notebook(self, 1)\n    self.outdlg = OutputDialog(self)\n    self.simple_panel = wx.Panel(self.tab_panel, -1)\n    self.simple_options_panel = wx.Panel(self.simple_panel, -1)\n    self.simple_options_sizer_staticbox = wx.StaticBox(self.simple_options_panel, -1, 'Maya2Egg')\n    self.simple_mayaFileLbl = wx.StaticText(self.simple_options_panel, -1, 'Maya Scene File')\n    self.simple_mayaFileTxt = wx.TextCtrl(self.simple_options_panel, -1, '')\n    self.simple_mayaFileBtn = wx.Button(self.simple_options_panel, ID_SIMPLEMBPICK, 'Choose..')\n    self.simple_exportDestLbl = wx.StaticText(self.simple_options_panel, -1, 'Export Destination')\n    self.simple_exportDestTxt = wx.TextCtrl(self.simple_options_panel, -1, '')\n    self.simple_exportDestBtn = wx.Button(self.simple_options_panel, ID_SIMPLEEGGSAVE, 'Choose..')\n    self.simple_mayaVerLbl = wx.StaticText(self.simple_options_panel, -1, 'Maya Version', style=wx.ALIGN_CENTRE)\n    self.simple_mayaVerComboBox = wx.ComboBox(self.simple_options_panel, -1, choices=MAYA_VERSIONS, style=wx.CB_DROPDOWN | wx.CB_READONLY)\n    self.simple_animOptChoice = wx.RadioBox(self.simple_options_panel, -1, 'animation-mode', choices=['none', 'model', 'chan', 'both'], majorDimension=4, style=wx.RA_SPECIFY_COLS)\n    self.simple_runExportBtn = wx.Button(self.simple_options_panel, ID_RUNSIMPLEEXPORT, 'Run Export')\n    self.main_panel = wx.Panel(self.tab_panel, -1, style=wx.NO_BORDER | wx.TAB_TRAVERSAL)\n    self.toolComboBox = wx.ComboBox(self.main_panel, -1, choices=TOOLS, style=wx.CB_DROPDOWN | wx.CB_READONLY)\n    self.tool_options_panel = wx.Panel(self.main_panel, -1)\n    self.tool_options_sizer_staticbox = wx.StaticBox(self.tool_options_panel, -1, 'Tool Options')\n    self.batch_panel = wx.Panel(self.main_panel, -1)\n    self.batch_static_sizer_staticbox = wx.StaticBox(self.batch_panel, -1, 'Batch List')\n    self.loadBatchButton = wx.Button(self.batch_panel, ID_LOADBATCH, 'Load Batch')\n    self.saveBatchButton = wx.Button(self.batch_panel, ID_SAVEBATCH, 'Save Batch')\n    self.sortBatchButton = wx.Button(self.batch_panel, ID_SORTBATCH, 'Sort Batch')\n    self.changePathsButton = wx.Button(self.batch_panel, ID_SORTBATCH, 'Change Paths')\n    self.editSelBatchButton = wx.Button(self.batch_panel, ID_EDITSELBATCH, 'Edit Selected')\n    self.removeSelBatchButton = wx.Button(self.batch_panel, ID_REMOVESELBATCH, 'Remove Selected')\n    self.removeAllBatchButton = wx.Button(self.batch_panel, ID_REMOVEALLBATCH, 'Remove All')\n    self.batchTree = wx.TreeCtrl(self.batch_panel, -1, style=wx.TR_HAS_BUTTONS | wx.TR_LINES_AT_ROOT | wx.TR_DEFAULT_STYLE | wx.SUNKEN_BORDER | wx.TR_MULTIPLE)\n    self.treeRoot = self.batchTree.AddRoot('Batch Files')\n    self.console_panel = wx.Panel(self.main_panel, -1)\n    self.consoleOutputTxt = wx.TextCtrl(self.console_panel, -1, '', style=wx.TE_MULTILINE | wx.TE_READONLY | wx.TE_WORDWRAP)\n    self.console_static_sizer_staticbox = wx.StaticBox(self.console_panel, -1, 'Console Output')\n    self.runBatchButton = wx.Button(self.console_panel, ID_RUNBATCH, 'Run Batch')\n    self.clearConsoleButton = wx.Button(self.console_panel, ID_CLEAROUTPUT, 'Clear Output')\n    self.runPviewButton = wx.Button(self.console_panel, -1, 'Load pview')\n    self.pathLbl = wx.StaticText(self.console_panel, -1, 'Panda Directory', style=wx.ALIGN_CENTRE)\n    self.pandaPathTxt = wx.TextCtrl(self.console_panel, -1, '', style=wx.TE_READONLY)\n    self.loadPandaPathBtn = wx.Button(self.console_panel, ID_CHOOSEPANDA, 'Choose..')\n    self.ignoreModDates = wx.CheckBox(self.console_panel, -1, 'Override export changed maya scene files')\n    self.maya2egg_panel = wx.Panel(self.tool_options_panel, -1, style=wx.NO_BORDER | wx.TAB_TRAVERSAL)\n    self.m2e_mayaVerLbl = wx.StaticText(self.maya2egg_panel, -1, 'Maya Version', style=wx.ALIGN_CENTRE)\n    self.m2e_mayaVerComboBox = wx.ComboBox(self.maya2egg_panel, -1, choices=MAYA_VERSIONS, style=wx.CB_DROPDOWN | wx.CB_READONLY)\n    self.m2e_mayaFileLbl = wx.StaticText(self.maya2egg_panel, -1, 'Maya Scene File')\n    self.m2e_mayaFileTxt = wx.TextCtrl(self.maya2egg_panel, -1, '')\n    self.m2e_mayaFileBtn = wx.Button(self.maya2egg_panel, -1, 'Choose..')\n    self.m2e_exportDestLbl = wx.StaticText(self.maya2egg_panel, -1, 'Export Destination')\n    self.m2e_exportDestTxt = wx.TextCtrl(self.maya2egg_panel, -1, '')\n    self.m2e_exportDestBtn = wx.Button(self.maya2egg_panel, -1, 'Choose..')\n    self.m2e_options_panel = wx.Panel(self.maya2egg_panel, -1)\n    self.m2e_options_panel_sizer_staticbox = wx.StaticBox(self.m2e_options_panel, 1, 'General Options')\n    self.m2e_mayaUnitsLbl = wx.StaticText(self.m2e_options_panel, -1, 'Maya Units (Input)')\n    self.m2e_mayaUnitsComboBox = wx.ComboBox(self.m2e_options_panel, -1, choices=UNIT_TYPES, style=wx.CB_DROPDOWN | wx.CB_READONLY)\n    self.m2e_pandaUnitsLbl = wx.StaticText(self.m2e_options_panel, -1, '--->   Panda Units (Output)')\n    self.m2e_pandaUnitsComboBox = wx.ComboBox(self.m2e_options_panel, -1, choices=UNIT_TYPES, style=wx.CB_DROPDOWN | wx.CB_READONLY)\n    self.m2e_backfaceChk = wx.CheckBox(self.m2e_options_panel, -1, 'Back Face Rendering')\n    self.m2e_polygonOutputChk = wx.CheckBox(self.m2e_options_panel, -1, 'Polygon Output Only')\n    self.m2e_tbnallChk = wx.CheckBox(self.m2e_options_panel, -1, 'Calculate Tangent and Binormal')\n    self.m2e_subrootsChk = wx.CheckBox(self.m2e_options_panel, -1, 'Export Specified Subroots')\n    self.m2e_subrootsTxt = wx.TextCtrl(self.m2e_options_panel, -1, '')\n    self.m2e_subsetsChk = wx.CheckBox(self.m2e_options_panel, -1, 'Export Specified Subsets')\n    self.m2e_subsetsTxt = wx.TextCtrl(self.m2e_options_panel, -1, '')\n    self.m2e_excludesChk = wx.CheckBox(self.m2e_options_panel, -1, 'Exclude Specified Subsets')\n    self.m2e_excludesTxt = wx.TextCtrl(self.m2e_options_panel, -1, '')\n    self.m2e_anim_options_panel = wx.Panel(self.maya2egg_panel, -1)\n    self.m2e_anim_options_sizer_staticbox = wx.StaticBox(self.m2e_anim_options_panel, 1, 'Animation Options')\n    self.m2e_animOptChoice = wx.RadioBox(self.m2e_anim_options_panel, -1, 'mode', choices=['none', 'model', 'chan', 'both', 'pose'], majorDimension=5, style=wx.RA_SPECIFY_COLS)\n    self.m2e_startFrameChk = wx.CheckBox(self.m2e_anim_options_panel, -1, 'Start Frame')\n    self.m2e_startFrameSpin = wx.SpinCtrl(self.m2e_anim_options_panel, -1, '', min=-10000, max=10000)\n    self.m2e_endFrameChk = wx.CheckBox(self.m2e_anim_options_panel, -1, 'End Frame')\n    self.m2e_endFrameSpin = wx.SpinCtrl(self.m2e_anim_options_panel, -1, '', min=-10000, max=10000)\n    self.m2e_frameRateInChk = wx.CheckBox(self.m2e_anim_options_panel, -1, 'Frame Rate Input (+/-)')\n    self.m2e_frameRateInSpin = wx.SpinCtrl(self.m2e_anim_options_panel, -1, '', min=-10000, max=10000)\n    self.m2e_frameRateOutChk = wx.CheckBox(self.m2e_anim_options_panel, -1, 'Frame Rate Output (+/-)  ')\n    self.m2e_frameRateOutSpin = wx.SpinCtrl(self.m2e_anim_options_panel, -1, '', min=-10000, max=10000)\n    self.m2e_charNameChk = wx.CheckBox(self.m2e_anim_options_panel, -1, 'Character Name')\n    self.m2e_charNameTxt = wx.TextCtrl(self.m2e_anim_options_panel, -1, '')\n    self.m2e_tex_options_panel = wx.Panel(self.maya2egg_panel, -1)\n    self.m2e_tex_options_sizer_staticbox = wx.StaticBox(self.m2e_tex_options_panel, 1, 'Texture/Shader Options')\n    self.m2e_legacyShaderChk = wx.CheckBox(self.m2e_tex_options_panel, -1, 'Use Legacy Shader Generation')\n    self.m2e_copyTexChk = wx.CheckBox(self.m2e_tex_options_panel, -1, 'Copy Textures')\n    self.m2e_copyTexPathTxt = wx.TextCtrl(self.m2e_tex_options_panel, -1, '')\n    self.m2e_copyTexPathBtn = wx.Button(self.m2e_tex_options_panel, -1, 'Choose..')\n    self.m2e_pathReplaceChk = wx.CheckBox(self.m2e_tex_options_panel, -1, 'Path Replace')\n    self.m2e_pathReplaceTxt = wx.TextCtrl(self.m2e_tex_options_panel, -1, '')\n    self.m2e_pathReplaceBtn = wx.Button(self.m2e_tex_options_panel, -1, 'Batch Files')\n    self.m2e_addEgg2BamChk = wx.CheckBox(self.maya2egg_panel, -1, 'Add with Egg2Bam')\n    self.m2e_addEgg2BamChk.Hide()\n    self.batchItemNameLbl = wx.StaticText(self.main_panel, -1, 'Batch Item Name')\n    self.batchItemNameTxt = wx.TextCtrl(self.main_panel, -1, '')\n    self.addToBatchBtn = wx.Button(self.main_panel, ID_MAYAADDTOBATCH, 'Add To Batch >>')\n    self.egg2bam_panel = wx.Panel(self.tool_options_panel, -1, style=wx.NO_BORDER | wx.TAB_TRAVERSAL)\n    self.e2b_eggFileLbl = wx.StaticText(self.egg2bam_panel, -1, 'Egg File')\n    self.e2b_eggFileTxt = wx.TextCtrl(self.egg2bam_panel, -1, '')\n    self.e2b_eggFileBtn = wx.Button(self.egg2bam_panel, -1, 'Choose..')\n    self.e2b_exportDestLbl = wx.StaticText(self.egg2bam_panel, -1, 'Export Destination')\n    self.e2b_exportDestTxt = wx.TextCtrl(self.egg2bam_panel, -1, '')\n    self.e2b_exportDestBtn = wx.Button(self.egg2bam_panel, -1, 'Choose..')\n    self.e2b_bamBatchOutputLbl = wx.StaticText(self.egg2bam_panel, -1, 'Bam Output Files from the Current Batch')\n    self.e2b_bamBatchOutputBtn = wx.Button(self.egg2bam_panel, -1, 'Bam Batch Output')\n    self.e2b_options_panel = wx.Panel(self.egg2bam_panel, -1)\n    self.e2b_options_sizer_staticbox = wx.StaticBox(self.e2b_options_panel, 1, 'General Options')\n    self.e2b_flattenChk = wx.CheckBox(self.e2b_options_panel, -1, 'Flatten')\n    self.e2b_embedTexChk = wx.CheckBox(self.e2b_options_panel, -1, 'Embed Textures')\n    self.e2b_useCurrEggChk = wx.CheckBox(self.e2b_options_panel, -1, 'Use current egg file')\n    self.eggRename_panel = wx.Panel(self.tool_options_panel, -1, style=wx.NO_BORDER | wx.TAB_TRAVERSAL)\n    self.rename_eggFilesLbl = wx.StaticText(self.eggRename_panel, -1, 'Egg Files')\n    self.rename_eggFilesTree = wx.TreeCtrl(self.eggRename_panel, -1, style=wx.TR_HAS_BUTTONS | wx.TR_LINES_AT_ROOT | wx.TR_DEFAULT_STYLE | wx.SUNKEN_BORDER)\n    self.rename_eggFilesRoot = self.rename_eggFilesTree.AddRoot('Egg Files')\n    self.rename_addEggBtn = wx.Button(self.eggRename_panel, -1, 'Add')\n    self.rename_addFromBatchBtn = wx.Button(self.eggRename_panel, -1, 'Batch Files')\n    self.rename_removeEggBtn = wx.Button(self.eggRename_panel, -1, 'Remove')\n    self.rename_removeAllEggsBtn = wx.Button(self.eggRename_panel, -1, 'Remove All')\n    self.rename_exportDestLbl = wx.StaticText(self.eggRename_panel, -1, 'Export Destination')\n    self.rename_exportInPlaceChk = wx.CheckBox(self.eggRename_panel, -1, 'In Place')\n    self.rename_exportDirLbl = wx.StaticText(self.eggRename_panel, -1, 'Directory')\n    self.rename_exportDirTxt = wx.TextCtrl(self.eggRename_panel, -1, '')\n    self.rename_exportDirBtn = wx.Button(self.eggRename_panel, -1, 'Choose..')\n    self.rename_exportFileLbl = wx.StaticText(self.eggRename_panel, -1, 'File')\n    self.rename_exportFileTxt = wx.TextCtrl(self.eggRename_panel, -1, '')\n    self.rename_exportFileBtn = wx.Button(self.eggRename_panel, -1, 'Choose..')\n    self.rename_options_panel = wx.Panel(self.eggRename_panel, -1)\n    self.rename_options_sizer_staticbox = wx.StaticBox(self.rename_options_panel, 1, 'General Options')\n    self.rename_stripPrefixChk = wx.CheckBox(self.rename_options_panel, -1, 'Strip Specified Prefix')\n    self.rename_stripPrefixTxt = wx.TextCtrl(self.rename_options_panel, -1, '')\n    self.eggOptChar_panel = wx.Panel(self.tool_options_panel, -1, style=wx.NO_BORDER | wx.TAB_TRAVERSAL)\n    self.optchar_eggFilesLbl = wx.StaticText(self.eggOptChar_panel, -1, 'Egg Files')\n    self.optchar_eggFilesTree = wx.TreeCtrl(self.eggOptChar_panel, -1, style=wx.TR_HAS_BUTTONS | wx.TR_LINES_AT_ROOT | wx.TR_DEFAULT_STYLE | wx.SUNKEN_BORDER)\n    self.optchar_eggFilesRoot = self.optchar_eggFilesTree.AddRoot('Egg Files')\n    self.optchar_addEggBtn = wx.Button(self.eggOptChar_panel, -1, 'Add')\n    self.optchar_addFromBatchBtn = wx.Button(self.eggOptChar_panel, -1, 'Batch Files')\n    self.optchar_removeEggBtn = wx.Button(self.eggOptChar_panel, -1, 'Remove')\n    self.optchar_removeAllEggsBtn = wx.Button(self.eggOptChar_panel, -1, 'Remove All')\n    self.optchar_exportDestLbl = wx.StaticText(self.eggOptChar_panel, -1, 'Export Destination')\n    self.optchar_exportInPlaceChk = wx.CheckBox(self.eggOptChar_panel, -1, 'In Place')\n    self.optchar_exportDirLbl = wx.StaticText(self.eggOptChar_panel, -1, 'Directory')\n    self.optchar_exportDirTxt = wx.TextCtrl(self.eggOptChar_panel, -1, '')\n    self.optchar_exportDirBtn = wx.Button(self.eggOptChar_panel, -1, 'Choose..')\n    self.optchar_exportFileLbl = wx.StaticText(self.eggOptChar_panel, -1, 'File')\n    self.optchar_exportFileTxt = wx.TextCtrl(self.eggOptChar_panel, -1, '')\n    self.optchar_exportFileBtn = wx.Button(self.eggOptChar_panel, -1, 'Choose..')\n    self.optchar_options_panel = wx.Panel(self.eggOptChar_panel, -1)\n    self.optchar_options_sizer_staticbox = wx.StaticBox(self.optchar_options_panel, 1, 'General Options')\n    self.optchar_keepAllJointsChk = wx.CheckBox(self.optchar_options_panel, -1, 'Keep All Joints')\n    self.optchar_keepJointsChk = wx.CheckBox(self.optchar_options_panel, -1, 'Keep Specified Joints')\n    self.optchar_keepJointsTxt = wx.TextCtrl(self.optchar_options_panel, -1, '')\n    self.optchar_dropJointsChk = wx.CheckBox(self.optchar_options_panel, -1, 'Drop Specified Joints')\n    self.optchar_dropJointsTxt = wx.TextCtrl(self.optchar_options_panel, -1, '')\n    self.optchar_exposeJointsChk = wx.CheckBox(self.optchar_options_panel, -1, 'Expose Specified Joints')\n    self.optchar_exposeJointsTxt = wx.TextCtrl(self.optchar_options_panel, -1, '')\n    self.optchar_flagGeometryChk = wx.CheckBox(self.optchar_options_panel, -1, 'Flag Specified Geometry')\n    self.optchar_flagGeometryTxt = wx.TextCtrl(self.optchar_options_panel, -1, '')\n    self.optchar_dartChoice = wx.RadioBox(self.optchar_options_panel, -1, 'dart', choices=['default', 'sync', 'nosync', 'structured'], majorDimension=4, style=wx.RA_SPECIFY_COLS)\n    self.eggPalettize_panel = wx.Panel(self.tool_options_panel, -1, style=wx.NO_BORDER | wx.TAB_TRAVERSAL)\n    self.palettize_eggFilesLbl = wx.StaticText(self.eggPalettize_panel, -1, 'Egg Files')\n    self.palettize_eggFilesTree = wx.TreeCtrl(self.eggPalettize_panel, -1, style=wx.TR_HAS_BUTTONS | wx.TR_LINES_AT_ROOT | wx.TR_DEFAULT_STYLE | wx.SUNKEN_BORDER)\n    self.palettize_eggFilesRoot = self.palettize_eggFilesTree.AddRoot('Egg Files')\n    self.palettize_addEggBtn = wx.Button(self.eggPalettize_panel, -1, 'Add')\n    self.palettize_addFromBatchBtn = wx.Button(self.eggPalettize_panel, -1, 'Batch Files')\n    self.palettize_removeEggBtn = wx.Button(self.eggPalettize_panel, -1, 'Remove')\n    self.palettize_removeAllEggsBtn = wx.Button(self.eggPalettize_panel, -1, 'Remove All')\n    self.palettize_exportDestLbl = wx.StaticText(self.eggPalettize_panel, -1, 'Export Destination')\n    self.palettize_exportInPlaceChk = wx.CheckBox(self.eggPalettize_panel, -1, 'In Place')\n    self.palettize_exportDirLbl = wx.StaticText(self.eggPalettize_panel, -1, 'Directory')\n    self.palettize_exportDirTxt = wx.TextCtrl(self.eggPalettize_panel, -1, '')\n    self.palettize_exportDirBtn = wx.Button(self.eggPalettize_panel, -1, 'Choose..')\n    self.palettize_exportFileLbl = wx.StaticText(self.eggPalettize_panel, -1, 'File')\n    self.palettize_exportFileTxt = wx.TextCtrl(self.eggPalettize_panel, -1, '')\n    self.palettize_exportFileBtn = wx.Button(self.eggPalettize_panel, -1, 'Choose..')\n    self.palettize_exportTexLbl = wx.StaticText(self.eggPalettize_panel, -1, 'Texture')\n    self.palettize_exportTexTxt = wx.TextCtrl(self.eggPalettize_panel, -1, '')\n    self.palettize_exportTexBtn = wx.Button(self.eggPalettize_panel, ID_OUTTEX, 'Choose..')\n    self.palettize_options_panel = wx.Panel(self.eggPalettize_panel, -1)\n    self.palettize_options_sizer_staticbox = wx.StaticBox(self.palettize_options_panel, 1, 'Palettize Attributes')\n    self.palettize_saveTxaLbl = wx.StaticText(self.palettize_options_panel, -1, '    Attrubutes File')\n    self.palettize_saveTxaTxt = wx.TextCtrl(self.palettize_options_panel, -1, '')\n    self.palettize_loadTxaBtn = wx.Button(self.palettize_options_panel, -1, 'Choose..')\n    self.palettize_saveTxaBtn = wx.Button(self.palettize_options_panel, -1, 'Create')\n    self.palettize_sizeLbl = wx.StaticText(self.palettize_options_panel, -1, 'Palette Size')\n    self.palettize_sizeWidthTxt = wx.TextCtrl(self.palettize_options_panel, -1, '4096', (30, 20), (80, -1))\n    self.palettize_sizeByLbl = wx.StaticText(self.palettize_options_panel, -1, ' x ')\n    self.palettize_sizeHeightTxt = wx.TextCtrl(self.palettize_options_panel, -1, '4096', (30, 20), (80, -1))\n    self.palettize_powerOf2Chk = wx.CheckBox(self.palettize_options_panel, -1, 'Power of 2')\n    self.palettize_imageTypeLbl = wx.StaticText(self.palettize_options_panel, -1, 'Image Type')\n    self.palettize_imageTypeChoice = wx.RadioBox(self.palettize_options_panel, -1, '', choices=['rgb', 'jpg', 'png'], majorDimension=3, style=wx.RA_SPECIFY_COLS)\n    self.palettize_colorLbl = wx.StaticText(self.palettize_options_panel, -1, 'Background Color')\n    self.palettize_redLbl = wx.StaticText(self.palettize_options_panel, -1, 'R')\n    self.palettize_redTxt = wx.SpinCtrl(self.palettize_options_panel, -1, '', (30, 20), (80, -1), min=0, max=255)\n    self.palettize_greenLbl = wx.StaticText(self.palettize_options_panel, -1, 'G')\n    self.palettize_greenTxt = wx.SpinCtrl(self.palettize_options_panel, -1, '', (30, 20), (80, -1), min=0, max=255)\n    self.palettize_blueLbl = wx.StaticText(self.palettize_options_panel, -1, 'B')\n    self.palettize_blueTxt = wx.SpinCtrl(self.palettize_options_panel, -1, '', (30, 20), (80, -1), min=0, max=255)\n    self.palettize_alphaLbl = wx.StaticText(self.palettize_options_panel, -1, 'A')\n    self.palettize_alphaTxt = wx.SpinCtrl(self.palettize_options_panel, -1, '', (30, 20), (80, -1), min=0, max=255)\n    self.palettize_color_sizer_staticbox = wx.StaticBox(self.palettize_options_panel, -1, '')\n    self.palettize_marginLbl = wx.StaticText(self.palettize_options_panel, -1, 'Margin')\n    self.palettize_marginTxt = wx.SpinCtrl(self.palettize_options_panel, -1, '', (30, 20), (80, -1), min=0, max=10000)\n    self.palettize_coverageLbl = wx.StaticText(self.palettize_options_panel, -1, 'Coverage')\n    self.palettize_coverageTxt = wx.TextCtrl(self.palettize_options_panel, -1, '1.0', (30, 20), (80, -1))\n    self.__set_properties()\n    self.__do_layout()\n    self.Bind(wx.EVT_BUTTON, self.OnSimpleExport, self.simple_runExportBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnSimpleExportDest, self.simple_exportDestBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnSimpleMayaFile, self.simple_mayaFileBtn)\n    self.Bind(wx.EVT_MENU, self.OnLoadPrefs, self.prefsLoadButton)\n    self.Bind(wx.EVT_MENU, self.OnSavePrefs, self.savePrefsButton)\n    self.Bind(wx.EVT_MENU, self.OnExit, self.exitButton)\n    self.Bind(wx.EVT_COMBOBOX, self.OnTool, self.toolComboBox)\n    self.Bind(wx.EVT_BUTTON, self.OnBatchItemEdit, id=ID_EDITSELBATCH)\n    self.Bind(wx.EVT_BUTTON, self.OnRemoveBatch, id=ID_REMOVESELBATCH)\n    self.Bind(wx.EVT_BUTTON, self.OnRemoveAllBatch, id=ID_REMOVEALLBATCH)\n    self.Bind(wx.EVT_BUTTON, self.OnClearOutput, id=ID_CLEAROUTPUT)\n    self.Bind(wx.EVT_BUTTON, self.OnAddToBatch, self.addToBatchBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnPandaPathChoose, id=ID_CHOOSEPANDA)\n    self.Bind(wx.EVT_BUTTON, self.OnMaya2EggExportDest, self.m2e_exportDestBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnMaya2EggMayaFile, self.m2e_mayaFileBtn)\n    self.Bind(wx.EVT_COMBOBOX, self.OnMayaVerChoose, self.m2e_mayaVerComboBox)\n    self.Bind(wx.EVT_BUTTON, self.OnMaya2EggCopyTexPath, self.m2e_copyTexPathBtn)\n    self.Bind(wx.EVT_RADIOBOX, self.OnMaya2EggAnimOpt, self.m2e_animOptChoice)\n    self.Bind(wx.EVT_BUTTON, self.OnMaya2EggPathReplace, self.m2e_pathReplaceBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnEgg2BamEggFile, self.e2b_eggFileBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnEgg2BamExportDest, self.e2b_exportDestBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnEgg2BamBatchOutput, self.e2b_bamBatchOutputBtn)\n    self.Bind(wx.EVT_CHECKBOX, self.OnEgg2BamUseCurrEgg, self.e2b_useCurrEggChk)\n    self.Bind(wx.EVT_BUTTON, self.OnRenameAddEgg, self.rename_addEggBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnRenameAddFromBatch, self.rename_addFromBatchBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnRenameRemoveEgg, self.rename_removeEggBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnRenameRemoveAllEggs, self.rename_removeAllEggsBtn)\n    self.Bind(wx.EVT_CHECKBOX, self.OnRenameInPlace, self.rename_exportInPlaceChk)\n    self.Bind(wx.EVT_BUTTON, self.OnRenameExportDir, self.rename_exportDirBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnRenameExportFile, self.rename_exportFileBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnOptcharAddEgg, self.optchar_addEggBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnOptcharAddFromBatch, self.optchar_addFromBatchBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnOptcharRemoveEgg, self.optchar_removeEggBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnOptcharRemoveAllEggs, self.optchar_removeAllEggsBtn)\n    self.Bind(wx.EVT_CHECKBOX, self.OnOptcharInPlace, self.optchar_exportInPlaceChk)\n    self.Bind(wx.EVT_BUTTON, self.OnOptcharExportDir, self.optchar_exportDirBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnOptcharExportFile, self.optchar_exportFileBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnPalettizeAddEgg, self.palettize_addEggBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnPalettizeAddFromBatch, self.palettize_addFromBatchBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnPalettizeRemoveEgg, self.palettize_removeEggBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnPalettizeRemoveAllEggs, self.palettize_removeAllEggsBtn)\n    self.Bind(wx.EVT_CHECKBOX, self.OnPalettizeInPlace, self.palettize_exportInPlaceChk)\n    self.Bind(wx.EVT_BUTTON, self.OnPalettizeExportDir, self.palettize_exportDirBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnPalettizeExportFile, self.palettize_exportFileBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnPalettizeExportTex, self.palettize_exportTexBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnPalettizeLoadTxa, self.palettize_loadTxaBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnPalettizeSaveTxa, self.palettize_saveTxaBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnRunBatch, id=ID_RUNBATCH)\n    self.Bind(wx.EVT_BUTTON, self.OnLoadBatch, id=ID_LOADBATCH)\n    self.Bind(wx.EVT_BUTTON, self.OnSaveBatch, id=ID_SAVEBATCH)\n    self.Bind(wx.EVT_BUTTON, self.OnSortBatch, id=ID_SORTBATCH)\n    self.Bind(wx.EVT_BUTTON, self.OnChangePaths, self.changePathsButton)\n    self.Bind(wx.EVT_TREE_SEL_CHANGED, self.OnBatchItemSelection, self.batchTree)\n    self.Bind(wx.EVT_BUTTON, self.OnLoadPview, self.runPviewButton)",
            "def _setupUI(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.menuBar = wx.MenuBar()\n    wxglade_tmp_menu = wx.Menu()\n    self.prefsLoadButton = wx.MenuItem(wxglade_tmp_menu, ID_LOADPREFS, 'Load Preferences', '', wx.ITEM_NORMAL)\n    wxglade_tmp_menu.AppendItem(self.prefsLoadButton)\n    self.savePrefsButton = wx.MenuItem(wxglade_tmp_menu, ID_SAVEPREFS, 'Save Preferences', '', wx.ITEM_NORMAL)\n    wxglade_tmp_menu.AppendItem(self.savePrefsButton)\n    wxglade_tmp_menu.AppendSeparator()\n    self.exitButton = wx.MenuItem(wxglade_tmp_menu, ID_EXIT, 'Exit', '', wx.ITEM_NORMAL)\n    wxglade_tmp_menu.AppendItem(self.exitButton)\n    self.menuBar.Append(wxglade_tmp_menu, 'File')\n    wxglade_tmp_menu = wx.Menu()\n    self.loadBatchMenuButton = wx.MenuItem(wxglade_tmp_menu, ID_LOADBATCH, 'Load Batch ', '', wx.ITEM_NORMAL)\n    wxglade_tmp_menu.AppendItem(self.loadBatchMenuButton)\n    self.saveBatchMenuButton = wx.MenuItem(wxglade_tmp_menu, ID_SAVEBATCH, 'Save Batch', '', wx.ITEM_NORMAL)\n    wxglade_tmp_menu.AppendItem(self.saveBatchMenuButton)\n    self.menuBar.Append(wxglade_tmp_menu, 'Batch')\n    self.SetMenuBar(self.menuBar)\n    wxglade_tmp_menu = wx.Menu()\n    self.HelpMenuButton = wx.MenuItem(wxglade_tmp_menu, ID_HELP, 'Help ', '', wx.ITEM_NORMAL)\n    wxglade_tmp_menu.AppendItem(self.HelpMenuButton)\n    self.AboutMenuButton = wx.MenuItem(wxglade_tmp_menu, ID_ABOUT, 'About', '', wx.ITEM_NORMAL)\n    wxglade_tmp_menu.AppendItem(self.AboutMenuButton)\n    self.menuBar.Append(wxglade_tmp_menu, 'Help')\n    self.SetMenuBar(self.menuBar)\n    self.statusBar = self.CreateStatusBar(1, 0)\n    self.tab_panel = wx.Notebook(self, 1)\n    self.outdlg = OutputDialog(self)\n    self.simple_panel = wx.Panel(self.tab_panel, -1)\n    self.simple_options_panel = wx.Panel(self.simple_panel, -1)\n    self.simple_options_sizer_staticbox = wx.StaticBox(self.simple_options_panel, -1, 'Maya2Egg')\n    self.simple_mayaFileLbl = wx.StaticText(self.simple_options_panel, -1, 'Maya Scene File')\n    self.simple_mayaFileTxt = wx.TextCtrl(self.simple_options_panel, -1, '')\n    self.simple_mayaFileBtn = wx.Button(self.simple_options_panel, ID_SIMPLEMBPICK, 'Choose..')\n    self.simple_exportDestLbl = wx.StaticText(self.simple_options_panel, -1, 'Export Destination')\n    self.simple_exportDestTxt = wx.TextCtrl(self.simple_options_panel, -1, '')\n    self.simple_exportDestBtn = wx.Button(self.simple_options_panel, ID_SIMPLEEGGSAVE, 'Choose..')\n    self.simple_mayaVerLbl = wx.StaticText(self.simple_options_panel, -1, 'Maya Version', style=wx.ALIGN_CENTRE)\n    self.simple_mayaVerComboBox = wx.ComboBox(self.simple_options_panel, -1, choices=MAYA_VERSIONS, style=wx.CB_DROPDOWN | wx.CB_READONLY)\n    self.simple_animOptChoice = wx.RadioBox(self.simple_options_panel, -1, 'animation-mode', choices=['none', 'model', 'chan', 'both'], majorDimension=4, style=wx.RA_SPECIFY_COLS)\n    self.simple_runExportBtn = wx.Button(self.simple_options_panel, ID_RUNSIMPLEEXPORT, 'Run Export')\n    self.main_panel = wx.Panel(self.tab_panel, -1, style=wx.NO_BORDER | wx.TAB_TRAVERSAL)\n    self.toolComboBox = wx.ComboBox(self.main_panel, -1, choices=TOOLS, style=wx.CB_DROPDOWN | wx.CB_READONLY)\n    self.tool_options_panel = wx.Panel(self.main_panel, -1)\n    self.tool_options_sizer_staticbox = wx.StaticBox(self.tool_options_panel, -1, 'Tool Options')\n    self.batch_panel = wx.Panel(self.main_panel, -1)\n    self.batch_static_sizer_staticbox = wx.StaticBox(self.batch_panel, -1, 'Batch List')\n    self.loadBatchButton = wx.Button(self.batch_panel, ID_LOADBATCH, 'Load Batch')\n    self.saveBatchButton = wx.Button(self.batch_panel, ID_SAVEBATCH, 'Save Batch')\n    self.sortBatchButton = wx.Button(self.batch_panel, ID_SORTBATCH, 'Sort Batch')\n    self.changePathsButton = wx.Button(self.batch_panel, ID_SORTBATCH, 'Change Paths')\n    self.editSelBatchButton = wx.Button(self.batch_panel, ID_EDITSELBATCH, 'Edit Selected')\n    self.removeSelBatchButton = wx.Button(self.batch_panel, ID_REMOVESELBATCH, 'Remove Selected')\n    self.removeAllBatchButton = wx.Button(self.batch_panel, ID_REMOVEALLBATCH, 'Remove All')\n    self.batchTree = wx.TreeCtrl(self.batch_panel, -1, style=wx.TR_HAS_BUTTONS | wx.TR_LINES_AT_ROOT | wx.TR_DEFAULT_STYLE | wx.SUNKEN_BORDER | wx.TR_MULTIPLE)\n    self.treeRoot = self.batchTree.AddRoot('Batch Files')\n    self.console_panel = wx.Panel(self.main_panel, -1)\n    self.consoleOutputTxt = wx.TextCtrl(self.console_panel, -1, '', style=wx.TE_MULTILINE | wx.TE_READONLY | wx.TE_WORDWRAP)\n    self.console_static_sizer_staticbox = wx.StaticBox(self.console_panel, -1, 'Console Output')\n    self.runBatchButton = wx.Button(self.console_panel, ID_RUNBATCH, 'Run Batch')\n    self.clearConsoleButton = wx.Button(self.console_panel, ID_CLEAROUTPUT, 'Clear Output')\n    self.runPviewButton = wx.Button(self.console_panel, -1, 'Load pview')\n    self.pathLbl = wx.StaticText(self.console_panel, -1, 'Panda Directory', style=wx.ALIGN_CENTRE)\n    self.pandaPathTxt = wx.TextCtrl(self.console_panel, -1, '', style=wx.TE_READONLY)\n    self.loadPandaPathBtn = wx.Button(self.console_panel, ID_CHOOSEPANDA, 'Choose..')\n    self.ignoreModDates = wx.CheckBox(self.console_panel, -1, 'Override export changed maya scene files')\n    self.maya2egg_panel = wx.Panel(self.tool_options_panel, -1, style=wx.NO_BORDER | wx.TAB_TRAVERSAL)\n    self.m2e_mayaVerLbl = wx.StaticText(self.maya2egg_panel, -1, 'Maya Version', style=wx.ALIGN_CENTRE)\n    self.m2e_mayaVerComboBox = wx.ComboBox(self.maya2egg_panel, -1, choices=MAYA_VERSIONS, style=wx.CB_DROPDOWN | wx.CB_READONLY)\n    self.m2e_mayaFileLbl = wx.StaticText(self.maya2egg_panel, -1, 'Maya Scene File')\n    self.m2e_mayaFileTxt = wx.TextCtrl(self.maya2egg_panel, -1, '')\n    self.m2e_mayaFileBtn = wx.Button(self.maya2egg_panel, -1, 'Choose..')\n    self.m2e_exportDestLbl = wx.StaticText(self.maya2egg_panel, -1, 'Export Destination')\n    self.m2e_exportDestTxt = wx.TextCtrl(self.maya2egg_panel, -1, '')\n    self.m2e_exportDestBtn = wx.Button(self.maya2egg_panel, -1, 'Choose..')\n    self.m2e_options_panel = wx.Panel(self.maya2egg_panel, -1)\n    self.m2e_options_panel_sizer_staticbox = wx.StaticBox(self.m2e_options_panel, 1, 'General Options')\n    self.m2e_mayaUnitsLbl = wx.StaticText(self.m2e_options_panel, -1, 'Maya Units (Input)')\n    self.m2e_mayaUnitsComboBox = wx.ComboBox(self.m2e_options_panel, -1, choices=UNIT_TYPES, style=wx.CB_DROPDOWN | wx.CB_READONLY)\n    self.m2e_pandaUnitsLbl = wx.StaticText(self.m2e_options_panel, -1, '--->   Panda Units (Output)')\n    self.m2e_pandaUnitsComboBox = wx.ComboBox(self.m2e_options_panel, -1, choices=UNIT_TYPES, style=wx.CB_DROPDOWN | wx.CB_READONLY)\n    self.m2e_backfaceChk = wx.CheckBox(self.m2e_options_panel, -1, 'Back Face Rendering')\n    self.m2e_polygonOutputChk = wx.CheckBox(self.m2e_options_panel, -1, 'Polygon Output Only')\n    self.m2e_tbnallChk = wx.CheckBox(self.m2e_options_panel, -1, 'Calculate Tangent and Binormal')\n    self.m2e_subrootsChk = wx.CheckBox(self.m2e_options_panel, -1, 'Export Specified Subroots')\n    self.m2e_subrootsTxt = wx.TextCtrl(self.m2e_options_panel, -1, '')\n    self.m2e_subsetsChk = wx.CheckBox(self.m2e_options_panel, -1, 'Export Specified Subsets')\n    self.m2e_subsetsTxt = wx.TextCtrl(self.m2e_options_panel, -1, '')\n    self.m2e_excludesChk = wx.CheckBox(self.m2e_options_panel, -1, 'Exclude Specified Subsets')\n    self.m2e_excludesTxt = wx.TextCtrl(self.m2e_options_panel, -1, '')\n    self.m2e_anim_options_panel = wx.Panel(self.maya2egg_panel, -1)\n    self.m2e_anim_options_sizer_staticbox = wx.StaticBox(self.m2e_anim_options_panel, 1, 'Animation Options')\n    self.m2e_animOptChoice = wx.RadioBox(self.m2e_anim_options_panel, -1, 'mode', choices=['none', 'model', 'chan', 'both', 'pose'], majorDimension=5, style=wx.RA_SPECIFY_COLS)\n    self.m2e_startFrameChk = wx.CheckBox(self.m2e_anim_options_panel, -1, 'Start Frame')\n    self.m2e_startFrameSpin = wx.SpinCtrl(self.m2e_anim_options_panel, -1, '', min=-10000, max=10000)\n    self.m2e_endFrameChk = wx.CheckBox(self.m2e_anim_options_panel, -1, 'End Frame')\n    self.m2e_endFrameSpin = wx.SpinCtrl(self.m2e_anim_options_panel, -1, '', min=-10000, max=10000)\n    self.m2e_frameRateInChk = wx.CheckBox(self.m2e_anim_options_panel, -1, 'Frame Rate Input (+/-)')\n    self.m2e_frameRateInSpin = wx.SpinCtrl(self.m2e_anim_options_panel, -1, '', min=-10000, max=10000)\n    self.m2e_frameRateOutChk = wx.CheckBox(self.m2e_anim_options_panel, -1, 'Frame Rate Output (+/-)  ')\n    self.m2e_frameRateOutSpin = wx.SpinCtrl(self.m2e_anim_options_panel, -1, '', min=-10000, max=10000)\n    self.m2e_charNameChk = wx.CheckBox(self.m2e_anim_options_panel, -1, 'Character Name')\n    self.m2e_charNameTxt = wx.TextCtrl(self.m2e_anim_options_panel, -1, '')\n    self.m2e_tex_options_panel = wx.Panel(self.maya2egg_panel, -1)\n    self.m2e_tex_options_sizer_staticbox = wx.StaticBox(self.m2e_tex_options_panel, 1, 'Texture/Shader Options')\n    self.m2e_legacyShaderChk = wx.CheckBox(self.m2e_tex_options_panel, -1, 'Use Legacy Shader Generation')\n    self.m2e_copyTexChk = wx.CheckBox(self.m2e_tex_options_panel, -1, 'Copy Textures')\n    self.m2e_copyTexPathTxt = wx.TextCtrl(self.m2e_tex_options_panel, -1, '')\n    self.m2e_copyTexPathBtn = wx.Button(self.m2e_tex_options_panel, -1, 'Choose..')\n    self.m2e_pathReplaceChk = wx.CheckBox(self.m2e_tex_options_panel, -1, 'Path Replace')\n    self.m2e_pathReplaceTxt = wx.TextCtrl(self.m2e_tex_options_panel, -1, '')\n    self.m2e_pathReplaceBtn = wx.Button(self.m2e_tex_options_panel, -1, 'Batch Files')\n    self.m2e_addEgg2BamChk = wx.CheckBox(self.maya2egg_panel, -1, 'Add with Egg2Bam')\n    self.m2e_addEgg2BamChk.Hide()\n    self.batchItemNameLbl = wx.StaticText(self.main_panel, -1, 'Batch Item Name')\n    self.batchItemNameTxt = wx.TextCtrl(self.main_panel, -1, '')\n    self.addToBatchBtn = wx.Button(self.main_panel, ID_MAYAADDTOBATCH, 'Add To Batch >>')\n    self.egg2bam_panel = wx.Panel(self.tool_options_panel, -1, style=wx.NO_BORDER | wx.TAB_TRAVERSAL)\n    self.e2b_eggFileLbl = wx.StaticText(self.egg2bam_panel, -1, 'Egg File')\n    self.e2b_eggFileTxt = wx.TextCtrl(self.egg2bam_panel, -1, '')\n    self.e2b_eggFileBtn = wx.Button(self.egg2bam_panel, -1, 'Choose..')\n    self.e2b_exportDestLbl = wx.StaticText(self.egg2bam_panel, -1, 'Export Destination')\n    self.e2b_exportDestTxt = wx.TextCtrl(self.egg2bam_panel, -1, '')\n    self.e2b_exportDestBtn = wx.Button(self.egg2bam_panel, -1, 'Choose..')\n    self.e2b_bamBatchOutputLbl = wx.StaticText(self.egg2bam_panel, -1, 'Bam Output Files from the Current Batch')\n    self.e2b_bamBatchOutputBtn = wx.Button(self.egg2bam_panel, -1, 'Bam Batch Output')\n    self.e2b_options_panel = wx.Panel(self.egg2bam_panel, -1)\n    self.e2b_options_sizer_staticbox = wx.StaticBox(self.e2b_options_panel, 1, 'General Options')\n    self.e2b_flattenChk = wx.CheckBox(self.e2b_options_panel, -1, 'Flatten')\n    self.e2b_embedTexChk = wx.CheckBox(self.e2b_options_panel, -1, 'Embed Textures')\n    self.e2b_useCurrEggChk = wx.CheckBox(self.e2b_options_panel, -1, 'Use current egg file')\n    self.eggRename_panel = wx.Panel(self.tool_options_panel, -1, style=wx.NO_BORDER | wx.TAB_TRAVERSAL)\n    self.rename_eggFilesLbl = wx.StaticText(self.eggRename_panel, -1, 'Egg Files')\n    self.rename_eggFilesTree = wx.TreeCtrl(self.eggRename_panel, -1, style=wx.TR_HAS_BUTTONS | wx.TR_LINES_AT_ROOT | wx.TR_DEFAULT_STYLE | wx.SUNKEN_BORDER)\n    self.rename_eggFilesRoot = self.rename_eggFilesTree.AddRoot('Egg Files')\n    self.rename_addEggBtn = wx.Button(self.eggRename_panel, -1, 'Add')\n    self.rename_addFromBatchBtn = wx.Button(self.eggRename_panel, -1, 'Batch Files')\n    self.rename_removeEggBtn = wx.Button(self.eggRename_panel, -1, 'Remove')\n    self.rename_removeAllEggsBtn = wx.Button(self.eggRename_panel, -1, 'Remove All')\n    self.rename_exportDestLbl = wx.StaticText(self.eggRename_panel, -1, 'Export Destination')\n    self.rename_exportInPlaceChk = wx.CheckBox(self.eggRename_panel, -1, 'In Place')\n    self.rename_exportDirLbl = wx.StaticText(self.eggRename_panel, -1, 'Directory')\n    self.rename_exportDirTxt = wx.TextCtrl(self.eggRename_panel, -1, '')\n    self.rename_exportDirBtn = wx.Button(self.eggRename_panel, -1, 'Choose..')\n    self.rename_exportFileLbl = wx.StaticText(self.eggRename_panel, -1, 'File')\n    self.rename_exportFileTxt = wx.TextCtrl(self.eggRename_panel, -1, '')\n    self.rename_exportFileBtn = wx.Button(self.eggRename_panel, -1, 'Choose..')\n    self.rename_options_panel = wx.Panel(self.eggRename_panel, -1)\n    self.rename_options_sizer_staticbox = wx.StaticBox(self.rename_options_panel, 1, 'General Options')\n    self.rename_stripPrefixChk = wx.CheckBox(self.rename_options_panel, -1, 'Strip Specified Prefix')\n    self.rename_stripPrefixTxt = wx.TextCtrl(self.rename_options_panel, -1, '')\n    self.eggOptChar_panel = wx.Panel(self.tool_options_panel, -1, style=wx.NO_BORDER | wx.TAB_TRAVERSAL)\n    self.optchar_eggFilesLbl = wx.StaticText(self.eggOptChar_panel, -1, 'Egg Files')\n    self.optchar_eggFilesTree = wx.TreeCtrl(self.eggOptChar_panel, -1, style=wx.TR_HAS_BUTTONS | wx.TR_LINES_AT_ROOT | wx.TR_DEFAULT_STYLE | wx.SUNKEN_BORDER)\n    self.optchar_eggFilesRoot = self.optchar_eggFilesTree.AddRoot('Egg Files')\n    self.optchar_addEggBtn = wx.Button(self.eggOptChar_panel, -1, 'Add')\n    self.optchar_addFromBatchBtn = wx.Button(self.eggOptChar_panel, -1, 'Batch Files')\n    self.optchar_removeEggBtn = wx.Button(self.eggOptChar_panel, -1, 'Remove')\n    self.optchar_removeAllEggsBtn = wx.Button(self.eggOptChar_panel, -1, 'Remove All')\n    self.optchar_exportDestLbl = wx.StaticText(self.eggOptChar_panel, -1, 'Export Destination')\n    self.optchar_exportInPlaceChk = wx.CheckBox(self.eggOptChar_panel, -1, 'In Place')\n    self.optchar_exportDirLbl = wx.StaticText(self.eggOptChar_panel, -1, 'Directory')\n    self.optchar_exportDirTxt = wx.TextCtrl(self.eggOptChar_panel, -1, '')\n    self.optchar_exportDirBtn = wx.Button(self.eggOptChar_panel, -1, 'Choose..')\n    self.optchar_exportFileLbl = wx.StaticText(self.eggOptChar_panel, -1, 'File')\n    self.optchar_exportFileTxt = wx.TextCtrl(self.eggOptChar_panel, -1, '')\n    self.optchar_exportFileBtn = wx.Button(self.eggOptChar_panel, -1, 'Choose..')\n    self.optchar_options_panel = wx.Panel(self.eggOptChar_panel, -1)\n    self.optchar_options_sizer_staticbox = wx.StaticBox(self.optchar_options_panel, 1, 'General Options')\n    self.optchar_keepAllJointsChk = wx.CheckBox(self.optchar_options_panel, -1, 'Keep All Joints')\n    self.optchar_keepJointsChk = wx.CheckBox(self.optchar_options_panel, -1, 'Keep Specified Joints')\n    self.optchar_keepJointsTxt = wx.TextCtrl(self.optchar_options_panel, -1, '')\n    self.optchar_dropJointsChk = wx.CheckBox(self.optchar_options_panel, -1, 'Drop Specified Joints')\n    self.optchar_dropJointsTxt = wx.TextCtrl(self.optchar_options_panel, -1, '')\n    self.optchar_exposeJointsChk = wx.CheckBox(self.optchar_options_panel, -1, 'Expose Specified Joints')\n    self.optchar_exposeJointsTxt = wx.TextCtrl(self.optchar_options_panel, -1, '')\n    self.optchar_flagGeometryChk = wx.CheckBox(self.optchar_options_panel, -1, 'Flag Specified Geometry')\n    self.optchar_flagGeometryTxt = wx.TextCtrl(self.optchar_options_panel, -1, '')\n    self.optchar_dartChoice = wx.RadioBox(self.optchar_options_panel, -1, 'dart', choices=['default', 'sync', 'nosync', 'structured'], majorDimension=4, style=wx.RA_SPECIFY_COLS)\n    self.eggPalettize_panel = wx.Panel(self.tool_options_panel, -1, style=wx.NO_BORDER | wx.TAB_TRAVERSAL)\n    self.palettize_eggFilesLbl = wx.StaticText(self.eggPalettize_panel, -1, 'Egg Files')\n    self.palettize_eggFilesTree = wx.TreeCtrl(self.eggPalettize_panel, -1, style=wx.TR_HAS_BUTTONS | wx.TR_LINES_AT_ROOT | wx.TR_DEFAULT_STYLE | wx.SUNKEN_BORDER)\n    self.palettize_eggFilesRoot = self.palettize_eggFilesTree.AddRoot('Egg Files')\n    self.palettize_addEggBtn = wx.Button(self.eggPalettize_panel, -1, 'Add')\n    self.palettize_addFromBatchBtn = wx.Button(self.eggPalettize_panel, -1, 'Batch Files')\n    self.palettize_removeEggBtn = wx.Button(self.eggPalettize_panel, -1, 'Remove')\n    self.palettize_removeAllEggsBtn = wx.Button(self.eggPalettize_panel, -1, 'Remove All')\n    self.palettize_exportDestLbl = wx.StaticText(self.eggPalettize_panel, -1, 'Export Destination')\n    self.palettize_exportInPlaceChk = wx.CheckBox(self.eggPalettize_panel, -1, 'In Place')\n    self.palettize_exportDirLbl = wx.StaticText(self.eggPalettize_panel, -1, 'Directory')\n    self.palettize_exportDirTxt = wx.TextCtrl(self.eggPalettize_panel, -1, '')\n    self.palettize_exportDirBtn = wx.Button(self.eggPalettize_panel, -1, 'Choose..')\n    self.palettize_exportFileLbl = wx.StaticText(self.eggPalettize_panel, -1, 'File')\n    self.palettize_exportFileTxt = wx.TextCtrl(self.eggPalettize_panel, -1, '')\n    self.palettize_exportFileBtn = wx.Button(self.eggPalettize_panel, -1, 'Choose..')\n    self.palettize_exportTexLbl = wx.StaticText(self.eggPalettize_panel, -1, 'Texture')\n    self.palettize_exportTexTxt = wx.TextCtrl(self.eggPalettize_panel, -1, '')\n    self.palettize_exportTexBtn = wx.Button(self.eggPalettize_panel, ID_OUTTEX, 'Choose..')\n    self.palettize_options_panel = wx.Panel(self.eggPalettize_panel, -1)\n    self.palettize_options_sizer_staticbox = wx.StaticBox(self.palettize_options_panel, 1, 'Palettize Attributes')\n    self.palettize_saveTxaLbl = wx.StaticText(self.palettize_options_panel, -1, '    Attrubutes File')\n    self.palettize_saveTxaTxt = wx.TextCtrl(self.palettize_options_panel, -1, '')\n    self.palettize_loadTxaBtn = wx.Button(self.palettize_options_panel, -1, 'Choose..')\n    self.palettize_saveTxaBtn = wx.Button(self.palettize_options_panel, -1, 'Create')\n    self.palettize_sizeLbl = wx.StaticText(self.palettize_options_panel, -1, 'Palette Size')\n    self.palettize_sizeWidthTxt = wx.TextCtrl(self.palettize_options_panel, -1, '4096', (30, 20), (80, -1))\n    self.palettize_sizeByLbl = wx.StaticText(self.palettize_options_panel, -1, ' x ')\n    self.palettize_sizeHeightTxt = wx.TextCtrl(self.palettize_options_panel, -1, '4096', (30, 20), (80, -1))\n    self.palettize_powerOf2Chk = wx.CheckBox(self.palettize_options_panel, -1, 'Power of 2')\n    self.palettize_imageTypeLbl = wx.StaticText(self.palettize_options_panel, -1, 'Image Type')\n    self.palettize_imageTypeChoice = wx.RadioBox(self.palettize_options_panel, -1, '', choices=['rgb', 'jpg', 'png'], majorDimension=3, style=wx.RA_SPECIFY_COLS)\n    self.palettize_colorLbl = wx.StaticText(self.palettize_options_panel, -1, 'Background Color')\n    self.palettize_redLbl = wx.StaticText(self.palettize_options_panel, -1, 'R')\n    self.palettize_redTxt = wx.SpinCtrl(self.palettize_options_panel, -1, '', (30, 20), (80, -1), min=0, max=255)\n    self.palettize_greenLbl = wx.StaticText(self.palettize_options_panel, -1, 'G')\n    self.palettize_greenTxt = wx.SpinCtrl(self.palettize_options_panel, -1, '', (30, 20), (80, -1), min=0, max=255)\n    self.palettize_blueLbl = wx.StaticText(self.palettize_options_panel, -1, 'B')\n    self.palettize_blueTxt = wx.SpinCtrl(self.palettize_options_panel, -1, '', (30, 20), (80, -1), min=0, max=255)\n    self.palettize_alphaLbl = wx.StaticText(self.palettize_options_panel, -1, 'A')\n    self.palettize_alphaTxt = wx.SpinCtrl(self.palettize_options_panel, -1, '', (30, 20), (80, -1), min=0, max=255)\n    self.palettize_color_sizer_staticbox = wx.StaticBox(self.palettize_options_panel, -1, '')\n    self.palettize_marginLbl = wx.StaticText(self.palettize_options_panel, -1, 'Margin')\n    self.palettize_marginTxt = wx.SpinCtrl(self.palettize_options_panel, -1, '', (30, 20), (80, -1), min=0, max=10000)\n    self.palettize_coverageLbl = wx.StaticText(self.palettize_options_panel, -1, 'Coverage')\n    self.palettize_coverageTxt = wx.TextCtrl(self.palettize_options_panel, -1, '1.0', (30, 20), (80, -1))\n    self.__set_properties()\n    self.__do_layout()\n    self.Bind(wx.EVT_BUTTON, self.OnSimpleExport, self.simple_runExportBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnSimpleExportDest, self.simple_exportDestBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnSimpleMayaFile, self.simple_mayaFileBtn)\n    self.Bind(wx.EVT_MENU, self.OnLoadPrefs, self.prefsLoadButton)\n    self.Bind(wx.EVT_MENU, self.OnSavePrefs, self.savePrefsButton)\n    self.Bind(wx.EVT_MENU, self.OnExit, self.exitButton)\n    self.Bind(wx.EVT_COMBOBOX, self.OnTool, self.toolComboBox)\n    self.Bind(wx.EVT_BUTTON, self.OnBatchItemEdit, id=ID_EDITSELBATCH)\n    self.Bind(wx.EVT_BUTTON, self.OnRemoveBatch, id=ID_REMOVESELBATCH)\n    self.Bind(wx.EVT_BUTTON, self.OnRemoveAllBatch, id=ID_REMOVEALLBATCH)\n    self.Bind(wx.EVT_BUTTON, self.OnClearOutput, id=ID_CLEAROUTPUT)\n    self.Bind(wx.EVT_BUTTON, self.OnAddToBatch, self.addToBatchBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnPandaPathChoose, id=ID_CHOOSEPANDA)\n    self.Bind(wx.EVT_BUTTON, self.OnMaya2EggExportDest, self.m2e_exportDestBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnMaya2EggMayaFile, self.m2e_mayaFileBtn)\n    self.Bind(wx.EVT_COMBOBOX, self.OnMayaVerChoose, self.m2e_mayaVerComboBox)\n    self.Bind(wx.EVT_BUTTON, self.OnMaya2EggCopyTexPath, self.m2e_copyTexPathBtn)\n    self.Bind(wx.EVT_RADIOBOX, self.OnMaya2EggAnimOpt, self.m2e_animOptChoice)\n    self.Bind(wx.EVT_BUTTON, self.OnMaya2EggPathReplace, self.m2e_pathReplaceBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnEgg2BamEggFile, self.e2b_eggFileBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnEgg2BamExportDest, self.e2b_exportDestBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnEgg2BamBatchOutput, self.e2b_bamBatchOutputBtn)\n    self.Bind(wx.EVT_CHECKBOX, self.OnEgg2BamUseCurrEgg, self.e2b_useCurrEggChk)\n    self.Bind(wx.EVT_BUTTON, self.OnRenameAddEgg, self.rename_addEggBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnRenameAddFromBatch, self.rename_addFromBatchBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnRenameRemoveEgg, self.rename_removeEggBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnRenameRemoveAllEggs, self.rename_removeAllEggsBtn)\n    self.Bind(wx.EVT_CHECKBOX, self.OnRenameInPlace, self.rename_exportInPlaceChk)\n    self.Bind(wx.EVT_BUTTON, self.OnRenameExportDir, self.rename_exportDirBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnRenameExportFile, self.rename_exportFileBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnOptcharAddEgg, self.optchar_addEggBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnOptcharAddFromBatch, self.optchar_addFromBatchBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnOptcharRemoveEgg, self.optchar_removeEggBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnOptcharRemoveAllEggs, self.optchar_removeAllEggsBtn)\n    self.Bind(wx.EVT_CHECKBOX, self.OnOptcharInPlace, self.optchar_exportInPlaceChk)\n    self.Bind(wx.EVT_BUTTON, self.OnOptcharExportDir, self.optchar_exportDirBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnOptcharExportFile, self.optchar_exportFileBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnPalettizeAddEgg, self.palettize_addEggBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnPalettizeAddFromBatch, self.palettize_addFromBatchBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnPalettizeRemoveEgg, self.palettize_removeEggBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnPalettizeRemoveAllEggs, self.palettize_removeAllEggsBtn)\n    self.Bind(wx.EVT_CHECKBOX, self.OnPalettizeInPlace, self.palettize_exportInPlaceChk)\n    self.Bind(wx.EVT_BUTTON, self.OnPalettizeExportDir, self.palettize_exportDirBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnPalettizeExportFile, self.palettize_exportFileBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnPalettizeExportTex, self.palettize_exportTexBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnPalettizeLoadTxa, self.palettize_loadTxaBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnPalettizeSaveTxa, self.palettize_saveTxaBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnRunBatch, id=ID_RUNBATCH)\n    self.Bind(wx.EVT_BUTTON, self.OnLoadBatch, id=ID_LOADBATCH)\n    self.Bind(wx.EVT_BUTTON, self.OnSaveBatch, id=ID_SAVEBATCH)\n    self.Bind(wx.EVT_BUTTON, self.OnSortBatch, id=ID_SORTBATCH)\n    self.Bind(wx.EVT_BUTTON, self.OnChangePaths, self.changePathsButton)\n    self.Bind(wx.EVT_TREE_SEL_CHANGED, self.OnBatchItemSelection, self.batchTree)\n    self.Bind(wx.EVT_BUTTON, self.OnLoadPview, self.runPviewButton)",
            "def _setupUI(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.menuBar = wx.MenuBar()\n    wxglade_tmp_menu = wx.Menu()\n    self.prefsLoadButton = wx.MenuItem(wxglade_tmp_menu, ID_LOADPREFS, 'Load Preferences', '', wx.ITEM_NORMAL)\n    wxglade_tmp_menu.AppendItem(self.prefsLoadButton)\n    self.savePrefsButton = wx.MenuItem(wxglade_tmp_menu, ID_SAVEPREFS, 'Save Preferences', '', wx.ITEM_NORMAL)\n    wxglade_tmp_menu.AppendItem(self.savePrefsButton)\n    wxglade_tmp_menu.AppendSeparator()\n    self.exitButton = wx.MenuItem(wxglade_tmp_menu, ID_EXIT, 'Exit', '', wx.ITEM_NORMAL)\n    wxglade_tmp_menu.AppendItem(self.exitButton)\n    self.menuBar.Append(wxglade_tmp_menu, 'File')\n    wxglade_tmp_menu = wx.Menu()\n    self.loadBatchMenuButton = wx.MenuItem(wxglade_tmp_menu, ID_LOADBATCH, 'Load Batch ', '', wx.ITEM_NORMAL)\n    wxglade_tmp_menu.AppendItem(self.loadBatchMenuButton)\n    self.saveBatchMenuButton = wx.MenuItem(wxglade_tmp_menu, ID_SAVEBATCH, 'Save Batch', '', wx.ITEM_NORMAL)\n    wxglade_tmp_menu.AppendItem(self.saveBatchMenuButton)\n    self.menuBar.Append(wxglade_tmp_menu, 'Batch')\n    self.SetMenuBar(self.menuBar)\n    wxglade_tmp_menu = wx.Menu()\n    self.HelpMenuButton = wx.MenuItem(wxglade_tmp_menu, ID_HELP, 'Help ', '', wx.ITEM_NORMAL)\n    wxglade_tmp_menu.AppendItem(self.HelpMenuButton)\n    self.AboutMenuButton = wx.MenuItem(wxglade_tmp_menu, ID_ABOUT, 'About', '', wx.ITEM_NORMAL)\n    wxglade_tmp_menu.AppendItem(self.AboutMenuButton)\n    self.menuBar.Append(wxglade_tmp_menu, 'Help')\n    self.SetMenuBar(self.menuBar)\n    self.statusBar = self.CreateStatusBar(1, 0)\n    self.tab_panel = wx.Notebook(self, 1)\n    self.outdlg = OutputDialog(self)\n    self.simple_panel = wx.Panel(self.tab_panel, -1)\n    self.simple_options_panel = wx.Panel(self.simple_panel, -1)\n    self.simple_options_sizer_staticbox = wx.StaticBox(self.simple_options_panel, -1, 'Maya2Egg')\n    self.simple_mayaFileLbl = wx.StaticText(self.simple_options_panel, -1, 'Maya Scene File')\n    self.simple_mayaFileTxt = wx.TextCtrl(self.simple_options_panel, -1, '')\n    self.simple_mayaFileBtn = wx.Button(self.simple_options_panel, ID_SIMPLEMBPICK, 'Choose..')\n    self.simple_exportDestLbl = wx.StaticText(self.simple_options_panel, -1, 'Export Destination')\n    self.simple_exportDestTxt = wx.TextCtrl(self.simple_options_panel, -1, '')\n    self.simple_exportDestBtn = wx.Button(self.simple_options_panel, ID_SIMPLEEGGSAVE, 'Choose..')\n    self.simple_mayaVerLbl = wx.StaticText(self.simple_options_panel, -1, 'Maya Version', style=wx.ALIGN_CENTRE)\n    self.simple_mayaVerComboBox = wx.ComboBox(self.simple_options_panel, -1, choices=MAYA_VERSIONS, style=wx.CB_DROPDOWN | wx.CB_READONLY)\n    self.simple_animOptChoice = wx.RadioBox(self.simple_options_panel, -1, 'animation-mode', choices=['none', 'model', 'chan', 'both'], majorDimension=4, style=wx.RA_SPECIFY_COLS)\n    self.simple_runExportBtn = wx.Button(self.simple_options_panel, ID_RUNSIMPLEEXPORT, 'Run Export')\n    self.main_panel = wx.Panel(self.tab_panel, -1, style=wx.NO_BORDER | wx.TAB_TRAVERSAL)\n    self.toolComboBox = wx.ComboBox(self.main_panel, -1, choices=TOOLS, style=wx.CB_DROPDOWN | wx.CB_READONLY)\n    self.tool_options_panel = wx.Panel(self.main_panel, -1)\n    self.tool_options_sizer_staticbox = wx.StaticBox(self.tool_options_panel, -1, 'Tool Options')\n    self.batch_panel = wx.Panel(self.main_panel, -1)\n    self.batch_static_sizer_staticbox = wx.StaticBox(self.batch_panel, -1, 'Batch List')\n    self.loadBatchButton = wx.Button(self.batch_panel, ID_LOADBATCH, 'Load Batch')\n    self.saveBatchButton = wx.Button(self.batch_panel, ID_SAVEBATCH, 'Save Batch')\n    self.sortBatchButton = wx.Button(self.batch_panel, ID_SORTBATCH, 'Sort Batch')\n    self.changePathsButton = wx.Button(self.batch_panel, ID_SORTBATCH, 'Change Paths')\n    self.editSelBatchButton = wx.Button(self.batch_panel, ID_EDITSELBATCH, 'Edit Selected')\n    self.removeSelBatchButton = wx.Button(self.batch_panel, ID_REMOVESELBATCH, 'Remove Selected')\n    self.removeAllBatchButton = wx.Button(self.batch_panel, ID_REMOVEALLBATCH, 'Remove All')\n    self.batchTree = wx.TreeCtrl(self.batch_panel, -1, style=wx.TR_HAS_BUTTONS | wx.TR_LINES_AT_ROOT | wx.TR_DEFAULT_STYLE | wx.SUNKEN_BORDER | wx.TR_MULTIPLE)\n    self.treeRoot = self.batchTree.AddRoot('Batch Files')\n    self.console_panel = wx.Panel(self.main_panel, -1)\n    self.consoleOutputTxt = wx.TextCtrl(self.console_panel, -1, '', style=wx.TE_MULTILINE | wx.TE_READONLY | wx.TE_WORDWRAP)\n    self.console_static_sizer_staticbox = wx.StaticBox(self.console_panel, -1, 'Console Output')\n    self.runBatchButton = wx.Button(self.console_panel, ID_RUNBATCH, 'Run Batch')\n    self.clearConsoleButton = wx.Button(self.console_panel, ID_CLEAROUTPUT, 'Clear Output')\n    self.runPviewButton = wx.Button(self.console_panel, -1, 'Load pview')\n    self.pathLbl = wx.StaticText(self.console_panel, -1, 'Panda Directory', style=wx.ALIGN_CENTRE)\n    self.pandaPathTxt = wx.TextCtrl(self.console_panel, -1, '', style=wx.TE_READONLY)\n    self.loadPandaPathBtn = wx.Button(self.console_panel, ID_CHOOSEPANDA, 'Choose..')\n    self.ignoreModDates = wx.CheckBox(self.console_panel, -1, 'Override export changed maya scene files')\n    self.maya2egg_panel = wx.Panel(self.tool_options_panel, -1, style=wx.NO_BORDER | wx.TAB_TRAVERSAL)\n    self.m2e_mayaVerLbl = wx.StaticText(self.maya2egg_panel, -1, 'Maya Version', style=wx.ALIGN_CENTRE)\n    self.m2e_mayaVerComboBox = wx.ComboBox(self.maya2egg_panel, -1, choices=MAYA_VERSIONS, style=wx.CB_DROPDOWN | wx.CB_READONLY)\n    self.m2e_mayaFileLbl = wx.StaticText(self.maya2egg_panel, -1, 'Maya Scene File')\n    self.m2e_mayaFileTxt = wx.TextCtrl(self.maya2egg_panel, -1, '')\n    self.m2e_mayaFileBtn = wx.Button(self.maya2egg_panel, -1, 'Choose..')\n    self.m2e_exportDestLbl = wx.StaticText(self.maya2egg_panel, -1, 'Export Destination')\n    self.m2e_exportDestTxt = wx.TextCtrl(self.maya2egg_panel, -1, '')\n    self.m2e_exportDestBtn = wx.Button(self.maya2egg_panel, -1, 'Choose..')\n    self.m2e_options_panel = wx.Panel(self.maya2egg_panel, -1)\n    self.m2e_options_panel_sizer_staticbox = wx.StaticBox(self.m2e_options_panel, 1, 'General Options')\n    self.m2e_mayaUnitsLbl = wx.StaticText(self.m2e_options_panel, -1, 'Maya Units (Input)')\n    self.m2e_mayaUnitsComboBox = wx.ComboBox(self.m2e_options_panel, -1, choices=UNIT_TYPES, style=wx.CB_DROPDOWN | wx.CB_READONLY)\n    self.m2e_pandaUnitsLbl = wx.StaticText(self.m2e_options_panel, -1, '--->   Panda Units (Output)')\n    self.m2e_pandaUnitsComboBox = wx.ComboBox(self.m2e_options_panel, -1, choices=UNIT_TYPES, style=wx.CB_DROPDOWN | wx.CB_READONLY)\n    self.m2e_backfaceChk = wx.CheckBox(self.m2e_options_panel, -1, 'Back Face Rendering')\n    self.m2e_polygonOutputChk = wx.CheckBox(self.m2e_options_panel, -1, 'Polygon Output Only')\n    self.m2e_tbnallChk = wx.CheckBox(self.m2e_options_panel, -1, 'Calculate Tangent and Binormal')\n    self.m2e_subrootsChk = wx.CheckBox(self.m2e_options_panel, -1, 'Export Specified Subroots')\n    self.m2e_subrootsTxt = wx.TextCtrl(self.m2e_options_panel, -1, '')\n    self.m2e_subsetsChk = wx.CheckBox(self.m2e_options_panel, -1, 'Export Specified Subsets')\n    self.m2e_subsetsTxt = wx.TextCtrl(self.m2e_options_panel, -1, '')\n    self.m2e_excludesChk = wx.CheckBox(self.m2e_options_panel, -1, 'Exclude Specified Subsets')\n    self.m2e_excludesTxt = wx.TextCtrl(self.m2e_options_panel, -1, '')\n    self.m2e_anim_options_panel = wx.Panel(self.maya2egg_panel, -1)\n    self.m2e_anim_options_sizer_staticbox = wx.StaticBox(self.m2e_anim_options_panel, 1, 'Animation Options')\n    self.m2e_animOptChoice = wx.RadioBox(self.m2e_anim_options_panel, -1, 'mode', choices=['none', 'model', 'chan', 'both', 'pose'], majorDimension=5, style=wx.RA_SPECIFY_COLS)\n    self.m2e_startFrameChk = wx.CheckBox(self.m2e_anim_options_panel, -1, 'Start Frame')\n    self.m2e_startFrameSpin = wx.SpinCtrl(self.m2e_anim_options_panel, -1, '', min=-10000, max=10000)\n    self.m2e_endFrameChk = wx.CheckBox(self.m2e_anim_options_panel, -1, 'End Frame')\n    self.m2e_endFrameSpin = wx.SpinCtrl(self.m2e_anim_options_panel, -1, '', min=-10000, max=10000)\n    self.m2e_frameRateInChk = wx.CheckBox(self.m2e_anim_options_panel, -1, 'Frame Rate Input (+/-)')\n    self.m2e_frameRateInSpin = wx.SpinCtrl(self.m2e_anim_options_panel, -1, '', min=-10000, max=10000)\n    self.m2e_frameRateOutChk = wx.CheckBox(self.m2e_anim_options_panel, -1, 'Frame Rate Output (+/-)  ')\n    self.m2e_frameRateOutSpin = wx.SpinCtrl(self.m2e_anim_options_panel, -1, '', min=-10000, max=10000)\n    self.m2e_charNameChk = wx.CheckBox(self.m2e_anim_options_panel, -1, 'Character Name')\n    self.m2e_charNameTxt = wx.TextCtrl(self.m2e_anim_options_panel, -1, '')\n    self.m2e_tex_options_panel = wx.Panel(self.maya2egg_panel, -1)\n    self.m2e_tex_options_sizer_staticbox = wx.StaticBox(self.m2e_tex_options_panel, 1, 'Texture/Shader Options')\n    self.m2e_legacyShaderChk = wx.CheckBox(self.m2e_tex_options_panel, -1, 'Use Legacy Shader Generation')\n    self.m2e_copyTexChk = wx.CheckBox(self.m2e_tex_options_panel, -1, 'Copy Textures')\n    self.m2e_copyTexPathTxt = wx.TextCtrl(self.m2e_tex_options_panel, -1, '')\n    self.m2e_copyTexPathBtn = wx.Button(self.m2e_tex_options_panel, -1, 'Choose..')\n    self.m2e_pathReplaceChk = wx.CheckBox(self.m2e_tex_options_panel, -1, 'Path Replace')\n    self.m2e_pathReplaceTxt = wx.TextCtrl(self.m2e_tex_options_panel, -1, '')\n    self.m2e_pathReplaceBtn = wx.Button(self.m2e_tex_options_panel, -1, 'Batch Files')\n    self.m2e_addEgg2BamChk = wx.CheckBox(self.maya2egg_panel, -1, 'Add with Egg2Bam')\n    self.m2e_addEgg2BamChk.Hide()\n    self.batchItemNameLbl = wx.StaticText(self.main_panel, -1, 'Batch Item Name')\n    self.batchItemNameTxt = wx.TextCtrl(self.main_panel, -1, '')\n    self.addToBatchBtn = wx.Button(self.main_panel, ID_MAYAADDTOBATCH, 'Add To Batch >>')\n    self.egg2bam_panel = wx.Panel(self.tool_options_panel, -1, style=wx.NO_BORDER | wx.TAB_TRAVERSAL)\n    self.e2b_eggFileLbl = wx.StaticText(self.egg2bam_panel, -1, 'Egg File')\n    self.e2b_eggFileTxt = wx.TextCtrl(self.egg2bam_panel, -1, '')\n    self.e2b_eggFileBtn = wx.Button(self.egg2bam_panel, -1, 'Choose..')\n    self.e2b_exportDestLbl = wx.StaticText(self.egg2bam_panel, -1, 'Export Destination')\n    self.e2b_exportDestTxt = wx.TextCtrl(self.egg2bam_panel, -1, '')\n    self.e2b_exportDestBtn = wx.Button(self.egg2bam_panel, -1, 'Choose..')\n    self.e2b_bamBatchOutputLbl = wx.StaticText(self.egg2bam_panel, -1, 'Bam Output Files from the Current Batch')\n    self.e2b_bamBatchOutputBtn = wx.Button(self.egg2bam_panel, -1, 'Bam Batch Output')\n    self.e2b_options_panel = wx.Panel(self.egg2bam_panel, -1)\n    self.e2b_options_sizer_staticbox = wx.StaticBox(self.e2b_options_panel, 1, 'General Options')\n    self.e2b_flattenChk = wx.CheckBox(self.e2b_options_panel, -1, 'Flatten')\n    self.e2b_embedTexChk = wx.CheckBox(self.e2b_options_panel, -1, 'Embed Textures')\n    self.e2b_useCurrEggChk = wx.CheckBox(self.e2b_options_panel, -1, 'Use current egg file')\n    self.eggRename_panel = wx.Panel(self.tool_options_panel, -1, style=wx.NO_BORDER | wx.TAB_TRAVERSAL)\n    self.rename_eggFilesLbl = wx.StaticText(self.eggRename_panel, -1, 'Egg Files')\n    self.rename_eggFilesTree = wx.TreeCtrl(self.eggRename_panel, -1, style=wx.TR_HAS_BUTTONS | wx.TR_LINES_AT_ROOT | wx.TR_DEFAULT_STYLE | wx.SUNKEN_BORDER)\n    self.rename_eggFilesRoot = self.rename_eggFilesTree.AddRoot('Egg Files')\n    self.rename_addEggBtn = wx.Button(self.eggRename_panel, -1, 'Add')\n    self.rename_addFromBatchBtn = wx.Button(self.eggRename_panel, -1, 'Batch Files')\n    self.rename_removeEggBtn = wx.Button(self.eggRename_panel, -1, 'Remove')\n    self.rename_removeAllEggsBtn = wx.Button(self.eggRename_panel, -1, 'Remove All')\n    self.rename_exportDestLbl = wx.StaticText(self.eggRename_panel, -1, 'Export Destination')\n    self.rename_exportInPlaceChk = wx.CheckBox(self.eggRename_panel, -1, 'In Place')\n    self.rename_exportDirLbl = wx.StaticText(self.eggRename_panel, -1, 'Directory')\n    self.rename_exportDirTxt = wx.TextCtrl(self.eggRename_panel, -1, '')\n    self.rename_exportDirBtn = wx.Button(self.eggRename_panel, -1, 'Choose..')\n    self.rename_exportFileLbl = wx.StaticText(self.eggRename_panel, -1, 'File')\n    self.rename_exportFileTxt = wx.TextCtrl(self.eggRename_panel, -1, '')\n    self.rename_exportFileBtn = wx.Button(self.eggRename_panel, -1, 'Choose..')\n    self.rename_options_panel = wx.Panel(self.eggRename_panel, -1)\n    self.rename_options_sizer_staticbox = wx.StaticBox(self.rename_options_panel, 1, 'General Options')\n    self.rename_stripPrefixChk = wx.CheckBox(self.rename_options_panel, -1, 'Strip Specified Prefix')\n    self.rename_stripPrefixTxt = wx.TextCtrl(self.rename_options_panel, -1, '')\n    self.eggOptChar_panel = wx.Panel(self.tool_options_panel, -1, style=wx.NO_BORDER | wx.TAB_TRAVERSAL)\n    self.optchar_eggFilesLbl = wx.StaticText(self.eggOptChar_panel, -1, 'Egg Files')\n    self.optchar_eggFilesTree = wx.TreeCtrl(self.eggOptChar_panel, -1, style=wx.TR_HAS_BUTTONS | wx.TR_LINES_AT_ROOT | wx.TR_DEFAULT_STYLE | wx.SUNKEN_BORDER)\n    self.optchar_eggFilesRoot = self.optchar_eggFilesTree.AddRoot('Egg Files')\n    self.optchar_addEggBtn = wx.Button(self.eggOptChar_panel, -1, 'Add')\n    self.optchar_addFromBatchBtn = wx.Button(self.eggOptChar_panel, -1, 'Batch Files')\n    self.optchar_removeEggBtn = wx.Button(self.eggOptChar_panel, -1, 'Remove')\n    self.optchar_removeAllEggsBtn = wx.Button(self.eggOptChar_panel, -1, 'Remove All')\n    self.optchar_exportDestLbl = wx.StaticText(self.eggOptChar_panel, -1, 'Export Destination')\n    self.optchar_exportInPlaceChk = wx.CheckBox(self.eggOptChar_panel, -1, 'In Place')\n    self.optchar_exportDirLbl = wx.StaticText(self.eggOptChar_panel, -1, 'Directory')\n    self.optchar_exportDirTxt = wx.TextCtrl(self.eggOptChar_panel, -1, '')\n    self.optchar_exportDirBtn = wx.Button(self.eggOptChar_panel, -1, 'Choose..')\n    self.optchar_exportFileLbl = wx.StaticText(self.eggOptChar_panel, -1, 'File')\n    self.optchar_exportFileTxt = wx.TextCtrl(self.eggOptChar_panel, -1, '')\n    self.optchar_exportFileBtn = wx.Button(self.eggOptChar_panel, -1, 'Choose..')\n    self.optchar_options_panel = wx.Panel(self.eggOptChar_panel, -1)\n    self.optchar_options_sizer_staticbox = wx.StaticBox(self.optchar_options_panel, 1, 'General Options')\n    self.optchar_keepAllJointsChk = wx.CheckBox(self.optchar_options_panel, -1, 'Keep All Joints')\n    self.optchar_keepJointsChk = wx.CheckBox(self.optchar_options_panel, -1, 'Keep Specified Joints')\n    self.optchar_keepJointsTxt = wx.TextCtrl(self.optchar_options_panel, -1, '')\n    self.optchar_dropJointsChk = wx.CheckBox(self.optchar_options_panel, -1, 'Drop Specified Joints')\n    self.optchar_dropJointsTxt = wx.TextCtrl(self.optchar_options_panel, -1, '')\n    self.optchar_exposeJointsChk = wx.CheckBox(self.optchar_options_panel, -1, 'Expose Specified Joints')\n    self.optchar_exposeJointsTxt = wx.TextCtrl(self.optchar_options_panel, -1, '')\n    self.optchar_flagGeometryChk = wx.CheckBox(self.optchar_options_panel, -1, 'Flag Specified Geometry')\n    self.optchar_flagGeometryTxt = wx.TextCtrl(self.optchar_options_panel, -1, '')\n    self.optchar_dartChoice = wx.RadioBox(self.optchar_options_panel, -1, 'dart', choices=['default', 'sync', 'nosync', 'structured'], majorDimension=4, style=wx.RA_SPECIFY_COLS)\n    self.eggPalettize_panel = wx.Panel(self.tool_options_panel, -1, style=wx.NO_BORDER | wx.TAB_TRAVERSAL)\n    self.palettize_eggFilesLbl = wx.StaticText(self.eggPalettize_panel, -1, 'Egg Files')\n    self.palettize_eggFilesTree = wx.TreeCtrl(self.eggPalettize_panel, -1, style=wx.TR_HAS_BUTTONS | wx.TR_LINES_AT_ROOT | wx.TR_DEFAULT_STYLE | wx.SUNKEN_BORDER)\n    self.palettize_eggFilesRoot = self.palettize_eggFilesTree.AddRoot('Egg Files')\n    self.palettize_addEggBtn = wx.Button(self.eggPalettize_panel, -1, 'Add')\n    self.palettize_addFromBatchBtn = wx.Button(self.eggPalettize_panel, -1, 'Batch Files')\n    self.palettize_removeEggBtn = wx.Button(self.eggPalettize_panel, -1, 'Remove')\n    self.palettize_removeAllEggsBtn = wx.Button(self.eggPalettize_panel, -1, 'Remove All')\n    self.palettize_exportDestLbl = wx.StaticText(self.eggPalettize_panel, -1, 'Export Destination')\n    self.palettize_exportInPlaceChk = wx.CheckBox(self.eggPalettize_panel, -1, 'In Place')\n    self.palettize_exportDirLbl = wx.StaticText(self.eggPalettize_panel, -1, 'Directory')\n    self.palettize_exportDirTxt = wx.TextCtrl(self.eggPalettize_panel, -1, '')\n    self.palettize_exportDirBtn = wx.Button(self.eggPalettize_panel, -1, 'Choose..')\n    self.palettize_exportFileLbl = wx.StaticText(self.eggPalettize_panel, -1, 'File')\n    self.palettize_exportFileTxt = wx.TextCtrl(self.eggPalettize_panel, -1, '')\n    self.palettize_exportFileBtn = wx.Button(self.eggPalettize_panel, -1, 'Choose..')\n    self.palettize_exportTexLbl = wx.StaticText(self.eggPalettize_panel, -1, 'Texture')\n    self.palettize_exportTexTxt = wx.TextCtrl(self.eggPalettize_panel, -1, '')\n    self.palettize_exportTexBtn = wx.Button(self.eggPalettize_panel, ID_OUTTEX, 'Choose..')\n    self.palettize_options_panel = wx.Panel(self.eggPalettize_panel, -1)\n    self.palettize_options_sizer_staticbox = wx.StaticBox(self.palettize_options_panel, 1, 'Palettize Attributes')\n    self.palettize_saveTxaLbl = wx.StaticText(self.palettize_options_panel, -1, '    Attrubutes File')\n    self.palettize_saveTxaTxt = wx.TextCtrl(self.palettize_options_panel, -1, '')\n    self.palettize_loadTxaBtn = wx.Button(self.palettize_options_panel, -1, 'Choose..')\n    self.palettize_saveTxaBtn = wx.Button(self.palettize_options_panel, -1, 'Create')\n    self.palettize_sizeLbl = wx.StaticText(self.palettize_options_panel, -1, 'Palette Size')\n    self.palettize_sizeWidthTxt = wx.TextCtrl(self.palettize_options_panel, -1, '4096', (30, 20), (80, -1))\n    self.palettize_sizeByLbl = wx.StaticText(self.palettize_options_panel, -1, ' x ')\n    self.palettize_sizeHeightTxt = wx.TextCtrl(self.palettize_options_panel, -1, '4096', (30, 20), (80, -1))\n    self.palettize_powerOf2Chk = wx.CheckBox(self.palettize_options_panel, -1, 'Power of 2')\n    self.palettize_imageTypeLbl = wx.StaticText(self.palettize_options_panel, -1, 'Image Type')\n    self.palettize_imageTypeChoice = wx.RadioBox(self.palettize_options_panel, -1, '', choices=['rgb', 'jpg', 'png'], majorDimension=3, style=wx.RA_SPECIFY_COLS)\n    self.palettize_colorLbl = wx.StaticText(self.palettize_options_panel, -1, 'Background Color')\n    self.palettize_redLbl = wx.StaticText(self.palettize_options_panel, -1, 'R')\n    self.palettize_redTxt = wx.SpinCtrl(self.palettize_options_panel, -1, '', (30, 20), (80, -1), min=0, max=255)\n    self.palettize_greenLbl = wx.StaticText(self.palettize_options_panel, -1, 'G')\n    self.palettize_greenTxt = wx.SpinCtrl(self.palettize_options_panel, -1, '', (30, 20), (80, -1), min=0, max=255)\n    self.palettize_blueLbl = wx.StaticText(self.palettize_options_panel, -1, 'B')\n    self.palettize_blueTxt = wx.SpinCtrl(self.palettize_options_panel, -1, '', (30, 20), (80, -1), min=0, max=255)\n    self.palettize_alphaLbl = wx.StaticText(self.palettize_options_panel, -1, 'A')\n    self.palettize_alphaTxt = wx.SpinCtrl(self.palettize_options_panel, -1, '', (30, 20), (80, -1), min=0, max=255)\n    self.palettize_color_sizer_staticbox = wx.StaticBox(self.palettize_options_panel, -1, '')\n    self.palettize_marginLbl = wx.StaticText(self.palettize_options_panel, -1, 'Margin')\n    self.palettize_marginTxt = wx.SpinCtrl(self.palettize_options_panel, -1, '', (30, 20), (80, -1), min=0, max=10000)\n    self.palettize_coverageLbl = wx.StaticText(self.palettize_options_panel, -1, 'Coverage')\n    self.palettize_coverageTxt = wx.TextCtrl(self.palettize_options_panel, -1, '1.0', (30, 20), (80, -1))\n    self.__set_properties()\n    self.__do_layout()\n    self.Bind(wx.EVT_BUTTON, self.OnSimpleExport, self.simple_runExportBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnSimpleExportDest, self.simple_exportDestBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnSimpleMayaFile, self.simple_mayaFileBtn)\n    self.Bind(wx.EVT_MENU, self.OnLoadPrefs, self.prefsLoadButton)\n    self.Bind(wx.EVT_MENU, self.OnSavePrefs, self.savePrefsButton)\n    self.Bind(wx.EVT_MENU, self.OnExit, self.exitButton)\n    self.Bind(wx.EVT_COMBOBOX, self.OnTool, self.toolComboBox)\n    self.Bind(wx.EVT_BUTTON, self.OnBatchItemEdit, id=ID_EDITSELBATCH)\n    self.Bind(wx.EVT_BUTTON, self.OnRemoveBatch, id=ID_REMOVESELBATCH)\n    self.Bind(wx.EVT_BUTTON, self.OnRemoveAllBatch, id=ID_REMOVEALLBATCH)\n    self.Bind(wx.EVT_BUTTON, self.OnClearOutput, id=ID_CLEAROUTPUT)\n    self.Bind(wx.EVT_BUTTON, self.OnAddToBatch, self.addToBatchBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnPandaPathChoose, id=ID_CHOOSEPANDA)\n    self.Bind(wx.EVT_BUTTON, self.OnMaya2EggExportDest, self.m2e_exportDestBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnMaya2EggMayaFile, self.m2e_mayaFileBtn)\n    self.Bind(wx.EVT_COMBOBOX, self.OnMayaVerChoose, self.m2e_mayaVerComboBox)\n    self.Bind(wx.EVT_BUTTON, self.OnMaya2EggCopyTexPath, self.m2e_copyTexPathBtn)\n    self.Bind(wx.EVT_RADIOBOX, self.OnMaya2EggAnimOpt, self.m2e_animOptChoice)\n    self.Bind(wx.EVT_BUTTON, self.OnMaya2EggPathReplace, self.m2e_pathReplaceBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnEgg2BamEggFile, self.e2b_eggFileBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnEgg2BamExportDest, self.e2b_exportDestBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnEgg2BamBatchOutput, self.e2b_bamBatchOutputBtn)\n    self.Bind(wx.EVT_CHECKBOX, self.OnEgg2BamUseCurrEgg, self.e2b_useCurrEggChk)\n    self.Bind(wx.EVT_BUTTON, self.OnRenameAddEgg, self.rename_addEggBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnRenameAddFromBatch, self.rename_addFromBatchBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnRenameRemoveEgg, self.rename_removeEggBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnRenameRemoveAllEggs, self.rename_removeAllEggsBtn)\n    self.Bind(wx.EVT_CHECKBOX, self.OnRenameInPlace, self.rename_exportInPlaceChk)\n    self.Bind(wx.EVT_BUTTON, self.OnRenameExportDir, self.rename_exportDirBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnRenameExportFile, self.rename_exportFileBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnOptcharAddEgg, self.optchar_addEggBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnOptcharAddFromBatch, self.optchar_addFromBatchBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnOptcharRemoveEgg, self.optchar_removeEggBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnOptcharRemoveAllEggs, self.optchar_removeAllEggsBtn)\n    self.Bind(wx.EVT_CHECKBOX, self.OnOptcharInPlace, self.optchar_exportInPlaceChk)\n    self.Bind(wx.EVT_BUTTON, self.OnOptcharExportDir, self.optchar_exportDirBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnOptcharExportFile, self.optchar_exportFileBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnPalettizeAddEgg, self.palettize_addEggBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnPalettizeAddFromBatch, self.palettize_addFromBatchBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnPalettizeRemoveEgg, self.palettize_removeEggBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnPalettizeRemoveAllEggs, self.palettize_removeAllEggsBtn)\n    self.Bind(wx.EVT_CHECKBOX, self.OnPalettizeInPlace, self.palettize_exportInPlaceChk)\n    self.Bind(wx.EVT_BUTTON, self.OnPalettizeExportDir, self.palettize_exportDirBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnPalettizeExportFile, self.palettize_exportFileBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnPalettizeExportTex, self.palettize_exportTexBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnPalettizeLoadTxa, self.palettize_loadTxaBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnPalettizeSaveTxa, self.palettize_saveTxaBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnRunBatch, id=ID_RUNBATCH)\n    self.Bind(wx.EVT_BUTTON, self.OnLoadBatch, id=ID_LOADBATCH)\n    self.Bind(wx.EVT_BUTTON, self.OnSaveBatch, id=ID_SAVEBATCH)\n    self.Bind(wx.EVT_BUTTON, self.OnSortBatch, id=ID_SORTBATCH)\n    self.Bind(wx.EVT_BUTTON, self.OnChangePaths, self.changePathsButton)\n    self.Bind(wx.EVT_TREE_SEL_CHANGED, self.OnBatchItemSelection, self.batchTree)\n    self.Bind(wx.EVT_BUTTON, self.OnLoadPview, self.runPviewButton)",
            "def _setupUI(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.menuBar = wx.MenuBar()\n    wxglade_tmp_menu = wx.Menu()\n    self.prefsLoadButton = wx.MenuItem(wxglade_tmp_menu, ID_LOADPREFS, 'Load Preferences', '', wx.ITEM_NORMAL)\n    wxglade_tmp_menu.AppendItem(self.prefsLoadButton)\n    self.savePrefsButton = wx.MenuItem(wxglade_tmp_menu, ID_SAVEPREFS, 'Save Preferences', '', wx.ITEM_NORMAL)\n    wxglade_tmp_menu.AppendItem(self.savePrefsButton)\n    wxglade_tmp_menu.AppendSeparator()\n    self.exitButton = wx.MenuItem(wxglade_tmp_menu, ID_EXIT, 'Exit', '', wx.ITEM_NORMAL)\n    wxglade_tmp_menu.AppendItem(self.exitButton)\n    self.menuBar.Append(wxglade_tmp_menu, 'File')\n    wxglade_tmp_menu = wx.Menu()\n    self.loadBatchMenuButton = wx.MenuItem(wxglade_tmp_menu, ID_LOADBATCH, 'Load Batch ', '', wx.ITEM_NORMAL)\n    wxglade_tmp_menu.AppendItem(self.loadBatchMenuButton)\n    self.saveBatchMenuButton = wx.MenuItem(wxglade_tmp_menu, ID_SAVEBATCH, 'Save Batch', '', wx.ITEM_NORMAL)\n    wxglade_tmp_menu.AppendItem(self.saveBatchMenuButton)\n    self.menuBar.Append(wxglade_tmp_menu, 'Batch')\n    self.SetMenuBar(self.menuBar)\n    wxglade_tmp_menu = wx.Menu()\n    self.HelpMenuButton = wx.MenuItem(wxglade_tmp_menu, ID_HELP, 'Help ', '', wx.ITEM_NORMAL)\n    wxglade_tmp_menu.AppendItem(self.HelpMenuButton)\n    self.AboutMenuButton = wx.MenuItem(wxglade_tmp_menu, ID_ABOUT, 'About', '', wx.ITEM_NORMAL)\n    wxglade_tmp_menu.AppendItem(self.AboutMenuButton)\n    self.menuBar.Append(wxglade_tmp_menu, 'Help')\n    self.SetMenuBar(self.menuBar)\n    self.statusBar = self.CreateStatusBar(1, 0)\n    self.tab_panel = wx.Notebook(self, 1)\n    self.outdlg = OutputDialog(self)\n    self.simple_panel = wx.Panel(self.tab_panel, -1)\n    self.simple_options_panel = wx.Panel(self.simple_panel, -1)\n    self.simple_options_sizer_staticbox = wx.StaticBox(self.simple_options_panel, -1, 'Maya2Egg')\n    self.simple_mayaFileLbl = wx.StaticText(self.simple_options_panel, -1, 'Maya Scene File')\n    self.simple_mayaFileTxt = wx.TextCtrl(self.simple_options_panel, -1, '')\n    self.simple_mayaFileBtn = wx.Button(self.simple_options_panel, ID_SIMPLEMBPICK, 'Choose..')\n    self.simple_exportDestLbl = wx.StaticText(self.simple_options_panel, -1, 'Export Destination')\n    self.simple_exportDestTxt = wx.TextCtrl(self.simple_options_panel, -1, '')\n    self.simple_exportDestBtn = wx.Button(self.simple_options_panel, ID_SIMPLEEGGSAVE, 'Choose..')\n    self.simple_mayaVerLbl = wx.StaticText(self.simple_options_panel, -1, 'Maya Version', style=wx.ALIGN_CENTRE)\n    self.simple_mayaVerComboBox = wx.ComboBox(self.simple_options_panel, -1, choices=MAYA_VERSIONS, style=wx.CB_DROPDOWN | wx.CB_READONLY)\n    self.simple_animOptChoice = wx.RadioBox(self.simple_options_panel, -1, 'animation-mode', choices=['none', 'model', 'chan', 'both'], majorDimension=4, style=wx.RA_SPECIFY_COLS)\n    self.simple_runExportBtn = wx.Button(self.simple_options_panel, ID_RUNSIMPLEEXPORT, 'Run Export')\n    self.main_panel = wx.Panel(self.tab_panel, -1, style=wx.NO_BORDER | wx.TAB_TRAVERSAL)\n    self.toolComboBox = wx.ComboBox(self.main_panel, -1, choices=TOOLS, style=wx.CB_DROPDOWN | wx.CB_READONLY)\n    self.tool_options_panel = wx.Panel(self.main_panel, -1)\n    self.tool_options_sizer_staticbox = wx.StaticBox(self.tool_options_panel, -1, 'Tool Options')\n    self.batch_panel = wx.Panel(self.main_panel, -1)\n    self.batch_static_sizer_staticbox = wx.StaticBox(self.batch_panel, -1, 'Batch List')\n    self.loadBatchButton = wx.Button(self.batch_panel, ID_LOADBATCH, 'Load Batch')\n    self.saveBatchButton = wx.Button(self.batch_panel, ID_SAVEBATCH, 'Save Batch')\n    self.sortBatchButton = wx.Button(self.batch_panel, ID_SORTBATCH, 'Sort Batch')\n    self.changePathsButton = wx.Button(self.batch_panel, ID_SORTBATCH, 'Change Paths')\n    self.editSelBatchButton = wx.Button(self.batch_panel, ID_EDITSELBATCH, 'Edit Selected')\n    self.removeSelBatchButton = wx.Button(self.batch_panel, ID_REMOVESELBATCH, 'Remove Selected')\n    self.removeAllBatchButton = wx.Button(self.batch_panel, ID_REMOVEALLBATCH, 'Remove All')\n    self.batchTree = wx.TreeCtrl(self.batch_panel, -1, style=wx.TR_HAS_BUTTONS | wx.TR_LINES_AT_ROOT | wx.TR_DEFAULT_STYLE | wx.SUNKEN_BORDER | wx.TR_MULTIPLE)\n    self.treeRoot = self.batchTree.AddRoot('Batch Files')\n    self.console_panel = wx.Panel(self.main_panel, -1)\n    self.consoleOutputTxt = wx.TextCtrl(self.console_panel, -1, '', style=wx.TE_MULTILINE | wx.TE_READONLY | wx.TE_WORDWRAP)\n    self.console_static_sizer_staticbox = wx.StaticBox(self.console_panel, -1, 'Console Output')\n    self.runBatchButton = wx.Button(self.console_panel, ID_RUNBATCH, 'Run Batch')\n    self.clearConsoleButton = wx.Button(self.console_panel, ID_CLEAROUTPUT, 'Clear Output')\n    self.runPviewButton = wx.Button(self.console_panel, -1, 'Load pview')\n    self.pathLbl = wx.StaticText(self.console_panel, -1, 'Panda Directory', style=wx.ALIGN_CENTRE)\n    self.pandaPathTxt = wx.TextCtrl(self.console_panel, -1, '', style=wx.TE_READONLY)\n    self.loadPandaPathBtn = wx.Button(self.console_panel, ID_CHOOSEPANDA, 'Choose..')\n    self.ignoreModDates = wx.CheckBox(self.console_panel, -1, 'Override export changed maya scene files')\n    self.maya2egg_panel = wx.Panel(self.tool_options_panel, -1, style=wx.NO_BORDER | wx.TAB_TRAVERSAL)\n    self.m2e_mayaVerLbl = wx.StaticText(self.maya2egg_panel, -1, 'Maya Version', style=wx.ALIGN_CENTRE)\n    self.m2e_mayaVerComboBox = wx.ComboBox(self.maya2egg_panel, -1, choices=MAYA_VERSIONS, style=wx.CB_DROPDOWN | wx.CB_READONLY)\n    self.m2e_mayaFileLbl = wx.StaticText(self.maya2egg_panel, -1, 'Maya Scene File')\n    self.m2e_mayaFileTxt = wx.TextCtrl(self.maya2egg_panel, -1, '')\n    self.m2e_mayaFileBtn = wx.Button(self.maya2egg_panel, -1, 'Choose..')\n    self.m2e_exportDestLbl = wx.StaticText(self.maya2egg_panel, -1, 'Export Destination')\n    self.m2e_exportDestTxt = wx.TextCtrl(self.maya2egg_panel, -1, '')\n    self.m2e_exportDestBtn = wx.Button(self.maya2egg_panel, -1, 'Choose..')\n    self.m2e_options_panel = wx.Panel(self.maya2egg_panel, -1)\n    self.m2e_options_panel_sizer_staticbox = wx.StaticBox(self.m2e_options_panel, 1, 'General Options')\n    self.m2e_mayaUnitsLbl = wx.StaticText(self.m2e_options_panel, -1, 'Maya Units (Input)')\n    self.m2e_mayaUnitsComboBox = wx.ComboBox(self.m2e_options_panel, -1, choices=UNIT_TYPES, style=wx.CB_DROPDOWN | wx.CB_READONLY)\n    self.m2e_pandaUnitsLbl = wx.StaticText(self.m2e_options_panel, -1, '--->   Panda Units (Output)')\n    self.m2e_pandaUnitsComboBox = wx.ComboBox(self.m2e_options_panel, -1, choices=UNIT_TYPES, style=wx.CB_DROPDOWN | wx.CB_READONLY)\n    self.m2e_backfaceChk = wx.CheckBox(self.m2e_options_panel, -1, 'Back Face Rendering')\n    self.m2e_polygonOutputChk = wx.CheckBox(self.m2e_options_panel, -1, 'Polygon Output Only')\n    self.m2e_tbnallChk = wx.CheckBox(self.m2e_options_panel, -1, 'Calculate Tangent and Binormal')\n    self.m2e_subrootsChk = wx.CheckBox(self.m2e_options_panel, -1, 'Export Specified Subroots')\n    self.m2e_subrootsTxt = wx.TextCtrl(self.m2e_options_panel, -1, '')\n    self.m2e_subsetsChk = wx.CheckBox(self.m2e_options_panel, -1, 'Export Specified Subsets')\n    self.m2e_subsetsTxt = wx.TextCtrl(self.m2e_options_panel, -1, '')\n    self.m2e_excludesChk = wx.CheckBox(self.m2e_options_panel, -1, 'Exclude Specified Subsets')\n    self.m2e_excludesTxt = wx.TextCtrl(self.m2e_options_panel, -1, '')\n    self.m2e_anim_options_panel = wx.Panel(self.maya2egg_panel, -1)\n    self.m2e_anim_options_sizer_staticbox = wx.StaticBox(self.m2e_anim_options_panel, 1, 'Animation Options')\n    self.m2e_animOptChoice = wx.RadioBox(self.m2e_anim_options_panel, -1, 'mode', choices=['none', 'model', 'chan', 'both', 'pose'], majorDimension=5, style=wx.RA_SPECIFY_COLS)\n    self.m2e_startFrameChk = wx.CheckBox(self.m2e_anim_options_panel, -1, 'Start Frame')\n    self.m2e_startFrameSpin = wx.SpinCtrl(self.m2e_anim_options_panel, -1, '', min=-10000, max=10000)\n    self.m2e_endFrameChk = wx.CheckBox(self.m2e_anim_options_panel, -1, 'End Frame')\n    self.m2e_endFrameSpin = wx.SpinCtrl(self.m2e_anim_options_panel, -1, '', min=-10000, max=10000)\n    self.m2e_frameRateInChk = wx.CheckBox(self.m2e_anim_options_panel, -1, 'Frame Rate Input (+/-)')\n    self.m2e_frameRateInSpin = wx.SpinCtrl(self.m2e_anim_options_panel, -1, '', min=-10000, max=10000)\n    self.m2e_frameRateOutChk = wx.CheckBox(self.m2e_anim_options_panel, -1, 'Frame Rate Output (+/-)  ')\n    self.m2e_frameRateOutSpin = wx.SpinCtrl(self.m2e_anim_options_panel, -1, '', min=-10000, max=10000)\n    self.m2e_charNameChk = wx.CheckBox(self.m2e_anim_options_panel, -1, 'Character Name')\n    self.m2e_charNameTxt = wx.TextCtrl(self.m2e_anim_options_panel, -1, '')\n    self.m2e_tex_options_panel = wx.Panel(self.maya2egg_panel, -1)\n    self.m2e_tex_options_sizer_staticbox = wx.StaticBox(self.m2e_tex_options_panel, 1, 'Texture/Shader Options')\n    self.m2e_legacyShaderChk = wx.CheckBox(self.m2e_tex_options_panel, -1, 'Use Legacy Shader Generation')\n    self.m2e_copyTexChk = wx.CheckBox(self.m2e_tex_options_panel, -1, 'Copy Textures')\n    self.m2e_copyTexPathTxt = wx.TextCtrl(self.m2e_tex_options_panel, -1, '')\n    self.m2e_copyTexPathBtn = wx.Button(self.m2e_tex_options_panel, -1, 'Choose..')\n    self.m2e_pathReplaceChk = wx.CheckBox(self.m2e_tex_options_panel, -1, 'Path Replace')\n    self.m2e_pathReplaceTxt = wx.TextCtrl(self.m2e_tex_options_panel, -1, '')\n    self.m2e_pathReplaceBtn = wx.Button(self.m2e_tex_options_panel, -1, 'Batch Files')\n    self.m2e_addEgg2BamChk = wx.CheckBox(self.maya2egg_panel, -1, 'Add with Egg2Bam')\n    self.m2e_addEgg2BamChk.Hide()\n    self.batchItemNameLbl = wx.StaticText(self.main_panel, -1, 'Batch Item Name')\n    self.batchItemNameTxt = wx.TextCtrl(self.main_panel, -1, '')\n    self.addToBatchBtn = wx.Button(self.main_panel, ID_MAYAADDTOBATCH, 'Add To Batch >>')\n    self.egg2bam_panel = wx.Panel(self.tool_options_panel, -1, style=wx.NO_BORDER | wx.TAB_TRAVERSAL)\n    self.e2b_eggFileLbl = wx.StaticText(self.egg2bam_panel, -1, 'Egg File')\n    self.e2b_eggFileTxt = wx.TextCtrl(self.egg2bam_panel, -1, '')\n    self.e2b_eggFileBtn = wx.Button(self.egg2bam_panel, -1, 'Choose..')\n    self.e2b_exportDestLbl = wx.StaticText(self.egg2bam_panel, -1, 'Export Destination')\n    self.e2b_exportDestTxt = wx.TextCtrl(self.egg2bam_panel, -1, '')\n    self.e2b_exportDestBtn = wx.Button(self.egg2bam_panel, -1, 'Choose..')\n    self.e2b_bamBatchOutputLbl = wx.StaticText(self.egg2bam_panel, -1, 'Bam Output Files from the Current Batch')\n    self.e2b_bamBatchOutputBtn = wx.Button(self.egg2bam_panel, -1, 'Bam Batch Output')\n    self.e2b_options_panel = wx.Panel(self.egg2bam_panel, -1)\n    self.e2b_options_sizer_staticbox = wx.StaticBox(self.e2b_options_panel, 1, 'General Options')\n    self.e2b_flattenChk = wx.CheckBox(self.e2b_options_panel, -1, 'Flatten')\n    self.e2b_embedTexChk = wx.CheckBox(self.e2b_options_panel, -1, 'Embed Textures')\n    self.e2b_useCurrEggChk = wx.CheckBox(self.e2b_options_panel, -1, 'Use current egg file')\n    self.eggRename_panel = wx.Panel(self.tool_options_panel, -1, style=wx.NO_BORDER | wx.TAB_TRAVERSAL)\n    self.rename_eggFilesLbl = wx.StaticText(self.eggRename_panel, -1, 'Egg Files')\n    self.rename_eggFilesTree = wx.TreeCtrl(self.eggRename_panel, -1, style=wx.TR_HAS_BUTTONS | wx.TR_LINES_AT_ROOT | wx.TR_DEFAULT_STYLE | wx.SUNKEN_BORDER)\n    self.rename_eggFilesRoot = self.rename_eggFilesTree.AddRoot('Egg Files')\n    self.rename_addEggBtn = wx.Button(self.eggRename_panel, -1, 'Add')\n    self.rename_addFromBatchBtn = wx.Button(self.eggRename_panel, -1, 'Batch Files')\n    self.rename_removeEggBtn = wx.Button(self.eggRename_panel, -1, 'Remove')\n    self.rename_removeAllEggsBtn = wx.Button(self.eggRename_panel, -1, 'Remove All')\n    self.rename_exportDestLbl = wx.StaticText(self.eggRename_panel, -1, 'Export Destination')\n    self.rename_exportInPlaceChk = wx.CheckBox(self.eggRename_panel, -1, 'In Place')\n    self.rename_exportDirLbl = wx.StaticText(self.eggRename_panel, -1, 'Directory')\n    self.rename_exportDirTxt = wx.TextCtrl(self.eggRename_panel, -1, '')\n    self.rename_exportDirBtn = wx.Button(self.eggRename_panel, -1, 'Choose..')\n    self.rename_exportFileLbl = wx.StaticText(self.eggRename_panel, -1, 'File')\n    self.rename_exportFileTxt = wx.TextCtrl(self.eggRename_panel, -1, '')\n    self.rename_exportFileBtn = wx.Button(self.eggRename_panel, -1, 'Choose..')\n    self.rename_options_panel = wx.Panel(self.eggRename_panel, -1)\n    self.rename_options_sizer_staticbox = wx.StaticBox(self.rename_options_panel, 1, 'General Options')\n    self.rename_stripPrefixChk = wx.CheckBox(self.rename_options_panel, -1, 'Strip Specified Prefix')\n    self.rename_stripPrefixTxt = wx.TextCtrl(self.rename_options_panel, -1, '')\n    self.eggOptChar_panel = wx.Panel(self.tool_options_panel, -1, style=wx.NO_BORDER | wx.TAB_TRAVERSAL)\n    self.optchar_eggFilesLbl = wx.StaticText(self.eggOptChar_panel, -1, 'Egg Files')\n    self.optchar_eggFilesTree = wx.TreeCtrl(self.eggOptChar_panel, -1, style=wx.TR_HAS_BUTTONS | wx.TR_LINES_AT_ROOT | wx.TR_DEFAULT_STYLE | wx.SUNKEN_BORDER)\n    self.optchar_eggFilesRoot = self.optchar_eggFilesTree.AddRoot('Egg Files')\n    self.optchar_addEggBtn = wx.Button(self.eggOptChar_panel, -1, 'Add')\n    self.optchar_addFromBatchBtn = wx.Button(self.eggOptChar_panel, -1, 'Batch Files')\n    self.optchar_removeEggBtn = wx.Button(self.eggOptChar_panel, -1, 'Remove')\n    self.optchar_removeAllEggsBtn = wx.Button(self.eggOptChar_panel, -1, 'Remove All')\n    self.optchar_exportDestLbl = wx.StaticText(self.eggOptChar_panel, -1, 'Export Destination')\n    self.optchar_exportInPlaceChk = wx.CheckBox(self.eggOptChar_panel, -1, 'In Place')\n    self.optchar_exportDirLbl = wx.StaticText(self.eggOptChar_panel, -1, 'Directory')\n    self.optchar_exportDirTxt = wx.TextCtrl(self.eggOptChar_panel, -1, '')\n    self.optchar_exportDirBtn = wx.Button(self.eggOptChar_panel, -1, 'Choose..')\n    self.optchar_exportFileLbl = wx.StaticText(self.eggOptChar_panel, -1, 'File')\n    self.optchar_exportFileTxt = wx.TextCtrl(self.eggOptChar_panel, -1, '')\n    self.optchar_exportFileBtn = wx.Button(self.eggOptChar_panel, -1, 'Choose..')\n    self.optchar_options_panel = wx.Panel(self.eggOptChar_panel, -1)\n    self.optchar_options_sizer_staticbox = wx.StaticBox(self.optchar_options_panel, 1, 'General Options')\n    self.optchar_keepAllJointsChk = wx.CheckBox(self.optchar_options_panel, -1, 'Keep All Joints')\n    self.optchar_keepJointsChk = wx.CheckBox(self.optchar_options_panel, -1, 'Keep Specified Joints')\n    self.optchar_keepJointsTxt = wx.TextCtrl(self.optchar_options_panel, -1, '')\n    self.optchar_dropJointsChk = wx.CheckBox(self.optchar_options_panel, -1, 'Drop Specified Joints')\n    self.optchar_dropJointsTxt = wx.TextCtrl(self.optchar_options_panel, -1, '')\n    self.optchar_exposeJointsChk = wx.CheckBox(self.optchar_options_panel, -1, 'Expose Specified Joints')\n    self.optchar_exposeJointsTxt = wx.TextCtrl(self.optchar_options_panel, -1, '')\n    self.optchar_flagGeometryChk = wx.CheckBox(self.optchar_options_panel, -1, 'Flag Specified Geometry')\n    self.optchar_flagGeometryTxt = wx.TextCtrl(self.optchar_options_panel, -1, '')\n    self.optchar_dartChoice = wx.RadioBox(self.optchar_options_panel, -1, 'dart', choices=['default', 'sync', 'nosync', 'structured'], majorDimension=4, style=wx.RA_SPECIFY_COLS)\n    self.eggPalettize_panel = wx.Panel(self.tool_options_panel, -1, style=wx.NO_BORDER | wx.TAB_TRAVERSAL)\n    self.palettize_eggFilesLbl = wx.StaticText(self.eggPalettize_panel, -1, 'Egg Files')\n    self.palettize_eggFilesTree = wx.TreeCtrl(self.eggPalettize_panel, -1, style=wx.TR_HAS_BUTTONS | wx.TR_LINES_AT_ROOT | wx.TR_DEFAULT_STYLE | wx.SUNKEN_BORDER)\n    self.palettize_eggFilesRoot = self.palettize_eggFilesTree.AddRoot('Egg Files')\n    self.palettize_addEggBtn = wx.Button(self.eggPalettize_panel, -1, 'Add')\n    self.palettize_addFromBatchBtn = wx.Button(self.eggPalettize_panel, -1, 'Batch Files')\n    self.palettize_removeEggBtn = wx.Button(self.eggPalettize_panel, -1, 'Remove')\n    self.palettize_removeAllEggsBtn = wx.Button(self.eggPalettize_panel, -1, 'Remove All')\n    self.palettize_exportDestLbl = wx.StaticText(self.eggPalettize_panel, -1, 'Export Destination')\n    self.palettize_exportInPlaceChk = wx.CheckBox(self.eggPalettize_panel, -1, 'In Place')\n    self.palettize_exportDirLbl = wx.StaticText(self.eggPalettize_panel, -1, 'Directory')\n    self.palettize_exportDirTxt = wx.TextCtrl(self.eggPalettize_panel, -1, '')\n    self.palettize_exportDirBtn = wx.Button(self.eggPalettize_panel, -1, 'Choose..')\n    self.palettize_exportFileLbl = wx.StaticText(self.eggPalettize_panel, -1, 'File')\n    self.palettize_exportFileTxt = wx.TextCtrl(self.eggPalettize_panel, -1, '')\n    self.palettize_exportFileBtn = wx.Button(self.eggPalettize_panel, -1, 'Choose..')\n    self.palettize_exportTexLbl = wx.StaticText(self.eggPalettize_panel, -1, 'Texture')\n    self.palettize_exportTexTxt = wx.TextCtrl(self.eggPalettize_panel, -1, '')\n    self.palettize_exportTexBtn = wx.Button(self.eggPalettize_panel, ID_OUTTEX, 'Choose..')\n    self.palettize_options_panel = wx.Panel(self.eggPalettize_panel, -1)\n    self.palettize_options_sizer_staticbox = wx.StaticBox(self.palettize_options_panel, 1, 'Palettize Attributes')\n    self.palettize_saveTxaLbl = wx.StaticText(self.palettize_options_panel, -1, '    Attrubutes File')\n    self.palettize_saveTxaTxt = wx.TextCtrl(self.palettize_options_panel, -1, '')\n    self.palettize_loadTxaBtn = wx.Button(self.palettize_options_panel, -1, 'Choose..')\n    self.palettize_saveTxaBtn = wx.Button(self.palettize_options_panel, -1, 'Create')\n    self.palettize_sizeLbl = wx.StaticText(self.palettize_options_panel, -1, 'Palette Size')\n    self.palettize_sizeWidthTxt = wx.TextCtrl(self.palettize_options_panel, -1, '4096', (30, 20), (80, -1))\n    self.palettize_sizeByLbl = wx.StaticText(self.palettize_options_panel, -1, ' x ')\n    self.palettize_sizeHeightTxt = wx.TextCtrl(self.palettize_options_panel, -1, '4096', (30, 20), (80, -1))\n    self.palettize_powerOf2Chk = wx.CheckBox(self.palettize_options_panel, -1, 'Power of 2')\n    self.palettize_imageTypeLbl = wx.StaticText(self.palettize_options_panel, -1, 'Image Type')\n    self.palettize_imageTypeChoice = wx.RadioBox(self.palettize_options_panel, -1, '', choices=['rgb', 'jpg', 'png'], majorDimension=3, style=wx.RA_SPECIFY_COLS)\n    self.palettize_colorLbl = wx.StaticText(self.palettize_options_panel, -1, 'Background Color')\n    self.palettize_redLbl = wx.StaticText(self.palettize_options_panel, -1, 'R')\n    self.palettize_redTxt = wx.SpinCtrl(self.palettize_options_panel, -1, '', (30, 20), (80, -1), min=0, max=255)\n    self.palettize_greenLbl = wx.StaticText(self.palettize_options_panel, -1, 'G')\n    self.palettize_greenTxt = wx.SpinCtrl(self.palettize_options_panel, -1, '', (30, 20), (80, -1), min=0, max=255)\n    self.palettize_blueLbl = wx.StaticText(self.palettize_options_panel, -1, 'B')\n    self.palettize_blueTxt = wx.SpinCtrl(self.palettize_options_panel, -1, '', (30, 20), (80, -1), min=0, max=255)\n    self.palettize_alphaLbl = wx.StaticText(self.palettize_options_panel, -1, 'A')\n    self.palettize_alphaTxt = wx.SpinCtrl(self.palettize_options_panel, -1, '', (30, 20), (80, -1), min=0, max=255)\n    self.palettize_color_sizer_staticbox = wx.StaticBox(self.palettize_options_panel, -1, '')\n    self.palettize_marginLbl = wx.StaticText(self.palettize_options_panel, -1, 'Margin')\n    self.palettize_marginTxt = wx.SpinCtrl(self.palettize_options_panel, -1, '', (30, 20), (80, -1), min=0, max=10000)\n    self.palettize_coverageLbl = wx.StaticText(self.palettize_options_panel, -1, 'Coverage')\n    self.palettize_coverageTxt = wx.TextCtrl(self.palettize_options_panel, -1, '1.0', (30, 20), (80, -1))\n    self.__set_properties()\n    self.__do_layout()\n    self.Bind(wx.EVT_BUTTON, self.OnSimpleExport, self.simple_runExportBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnSimpleExportDest, self.simple_exportDestBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnSimpleMayaFile, self.simple_mayaFileBtn)\n    self.Bind(wx.EVT_MENU, self.OnLoadPrefs, self.prefsLoadButton)\n    self.Bind(wx.EVT_MENU, self.OnSavePrefs, self.savePrefsButton)\n    self.Bind(wx.EVT_MENU, self.OnExit, self.exitButton)\n    self.Bind(wx.EVT_COMBOBOX, self.OnTool, self.toolComboBox)\n    self.Bind(wx.EVT_BUTTON, self.OnBatchItemEdit, id=ID_EDITSELBATCH)\n    self.Bind(wx.EVT_BUTTON, self.OnRemoveBatch, id=ID_REMOVESELBATCH)\n    self.Bind(wx.EVT_BUTTON, self.OnRemoveAllBatch, id=ID_REMOVEALLBATCH)\n    self.Bind(wx.EVT_BUTTON, self.OnClearOutput, id=ID_CLEAROUTPUT)\n    self.Bind(wx.EVT_BUTTON, self.OnAddToBatch, self.addToBatchBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnPandaPathChoose, id=ID_CHOOSEPANDA)\n    self.Bind(wx.EVT_BUTTON, self.OnMaya2EggExportDest, self.m2e_exportDestBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnMaya2EggMayaFile, self.m2e_mayaFileBtn)\n    self.Bind(wx.EVT_COMBOBOX, self.OnMayaVerChoose, self.m2e_mayaVerComboBox)\n    self.Bind(wx.EVT_BUTTON, self.OnMaya2EggCopyTexPath, self.m2e_copyTexPathBtn)\n    self.Bind(wx.EVT_RADIOBOX, self.OnMaya2EggAnimOpt, self.m2e_animOptChoice)\n    self.Bind(wx.EVT_BUTTON, self.OnMaya2EggPathReplace, self.m2e_pathReplaceBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnEgg2BamEggFile, self.e2b_eggFileBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnEgg2BamExportDest, self.e2b_exportDestBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnEgg2BamBatchOutput, self.e2b_bamBatchOutputBtn)\n    self.Bind(wx.EVT_CHECKBOX, self.OnEgg2BamUseCurrEgg, self.e2b_useCurrEggChk)\n    self.Bind(wx.EVT_BUTTON, self.OnRenameAddEgg, self.rename_addEggBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnRenameAddFromBatch, self.rename_addFromBatchBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnRenameRemoveEgg, self.rename_removeEggBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnRenameRemoveAllEggs, self.rename_removeAllEggsBtn)\n    self.Bind(wx.EVT_CHECKBOX, self.OnRenameInPlace, self.rename_exportInPlaceChk)\n    self.Bind(wx.EVT_BUTTON, self.OnRenameExportDir, self.rename_exportDirBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnRenameExportFile, self.rename_exportFileBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnOptcharAddEgg, self.optchar_addEggBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnOptcharAddFromBatch, self.optchar_addFromBatchBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnOptcharRemoveEgg, self.optchar_removeEggBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnOptcharRemoveAllEggs, self.optchar_removeAllEggsBtn)\n    self.Bind(wx.EVT_CHECKBOX, self.OnOptcharInPlace, self.optchar_exportInPlaceChk)\n    self.Bind(wx.EVT_BUTTON, self.OnOptcharExportDir, self.optchar_exportDirBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnOptcharExportFile, self.optchar_exportFileBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnPalettizeAddEgg, self.palettize_addEggBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnPalettizeAddFromBatch, self.palettize_addFromBatchBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnPalettizeRemoveEgg, self.palettize_removeEggBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnPalettizeRemoveAllEggs, self.palettize_removeAllEggsBtn)\n    self.Bind(wx.EVT_CHECKBOX, self.OnPalettizeInPlace, self.palettize_exportInPlaceChk)\n    self.Bind(wx.EVT_BUTTON, self.OnPalettizeExportDir, self.palettize_exportDirBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnPalettizeExportFile, self.palettize_exportFileBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnPalettizeExportTex, self.palettize_exportTexBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnPalettizeLoadTxa, self.palettize_loadTxaBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnPalettizeSaveTxa, self.palettize_saveTxaBtn)\n    self.Bind(wx.EVT_BUTTON, self.OnRunBatch, id=ID_RUNBATCH)\n    self.Bind(wx.EVT_BUTTON, self.OnLoadBatch, id=ID_LOADBATCH)\n    self.Bind(wx.EVT_BUTTON, self.OnSaveBatch, id=ID_SAVEBATCH)\n    self.Bind(wx.EVT_BUTTON, self.OnSortBatch, id=ID_SORTBATCH)\n    self.Bind(wx.EVT_BUTTON, self.OnChangePaths, self.changePathsButton)\n    self.Bind(wx.EVT_TREE_SEL_CHANGED, self.OnBatchItemSelection, self.batchTree)\n    self.Bind(wx.EVT_BUTTON, self.OnLoadPview, self.runPviewButton)"
        ]
    },
    {
        "func_name": "__set_properties",
        "original": "def __set_properties(self):\n    self.SetTitle('Panda3D Tools GUI')\n    self.simple_exportDestTxt.SetMinSize((230, 21))\n    self.simple_mayaFileTxt.SetMinSize((230, 21))\n    self.simple_mayaVerComboBox.SetSelection(9)\n    self.simple_animOptChoice.SetSelection(1)\n    self.statusBar.SetStatusWidths([-1])\n    self.simple_mayaFileBtn.SetMinSize((-1, 23))\n    self.simple_exportDestBtn.SetMinSize((-1, 23))\n    self.simple_runExportBtn.SetMinSize((-1, 23))\n    self.batchItemNameTxt.SetMinSize((210, 21))\n    self.addToBatchBtn.SetMinSize((-1, 23))\n    self.m2e_mayaFileTxt.SetMinSize((230, 21))\n    self.m2e_exportDestTxt.SetMinSize((230, 21))\n    self.m2e_mayaVerComboBox.SetSelection(1)\n    self.m2e_mayaUnitsComboBox.SetSelection(1)\n    self.m2e_pandaUnitsComboBox.SetSelection(1)\n    self.m2e_subrootsTxt.SetMinSize((235, 21))\n    self.m2e_subsetsTxt.SetMinSize((235, 21))\n    self.m2e_excludesTxt.SetMinSize((235, 21))\n    self.m2e_animOptChoice.SetSelection(1)\n    self.m2e_charNameTxt.SetMinSize((283, 21))\n    self.m2e_copyTexPathTxt.SetMinSize((218, 21))\n    self.m2e_pathReplaceTxt.SetMinSize((218, 21))\n    self.m2e_mayaFileBtn.SetMinSize((-1, 23))\n    self.m2e_exportDestBtn.SetMinSize((-1, 23))\n    self.m2e_copyTexPathBtn.SetMinSize((-1, 23))\n    self.m2e_pathReplaceBtn.SetMinSize((-1, 23))\n    self.m2e_startFrameSpin.SetMinSize((-1, 21))\n    self.m2e_endFrameSpin.SetMinSize((-1, 21))\n    self.m2e_frameRateInSpin.SetMinSize((-1, 21))\n    self.m2e_frameRateOutSpin.SetMinSize((-1, 21))\n    self.m2e_mayaFileLbl.SetToolTipString('Maya file to be exported')\n    self.m2e_mayaFileTxt.SetToolTipString('Maya file to be exported')\n    self.m2e_mayaFileBtn.SetToolTipString('Select a maya file to be exported')\n    self.m2e_exportDestLbl.SetToolTipString('Destination of the exported file')\n    self.m2e_exportDestTxt.SetToolTipString('Destination of the exported file')\n    self.m2e_exportDestBtn.SetToolTipString('Select the destination of the exported file')\n    self.m2e_mayaVerLbl.SetToolTipString('Version of the maya exporter to use, must match version of *.mb file')\n    self.m2e_mayaVerComboBox.SetToolTipString('Version of the maya exporter to use, must match version of *.mb file')\n    self.m2e_mayaUnitsLbl.SetToolTipString('The units of the input Maya file')\n    self.m2e_mayaUnitsComboBox.SetToolTipString('defaults to centimeters')\n    self.m2e_pandaUnitsLbl.SetToolTipString('The units of the output egg file')\n    self.m2e_pandaUnitsComboBox.SetToolTipString('defaults to centimeters')\n    self.m2e_backfaceChk.SetToolTipString('Enable/Disable backface rendering of polygons in the egg file (default is off)')\n    self.m2e_polygonOutputChk.SetToolTipString('Generate polygon output only. Tesselate all NURBS surfaces to polygons via the built-in Maya tesselator')\n    self.m2e_tbnallChk.SetToolTipString('Calculate the tangents and binormals for all texture coordinate sets (for normal maps, etc)')\n    self.m2e_subrootsChk.SetToolTipString('Export specified subroots of the geometry in the Maya file to be converted')\n    self.m2e_subrootsTxt.SetToolTipString('Export specified subroots of the geometry in the Maya file to be converted')\n    self.m2e_subsetsChk.SetToolTipString('Export specified subsets of the geometry in the Maya file to be converted')\n    self.m2e_subsetsTxt.SetToolTipString('Export specified subsets of the geometry in the Maya file to be converted')\n    self.m2e_excludesChk.SetToolTipString('Exclude specified subsets of the geometry in the Maya file to be converted')\n    self.m2e_excludesTxt.SetToolTipString('Exclude specified subsets of the geometry in the Maya file to be converted')\n    self.m2e_animOptChoice.SetToolTipString('Specifies how animation from the Maya file is converted to egg, if at all')\n    self.m2e_startFrameChk.SetToolTipString('Starting frame of animation to exctract. For pose, this is the one frame of animation to extract')\n    self.m2e_endFrameChk.SetToolTipString('Ending frame of animation to exctract')\n    self.m2e_frameRateInChk.SetToolTipString('Frame rate (frames per second) of the input Maya file')\n    self.m2e_frameRateOutChk.SetToolTipString('Frame rate (frames per second) of the generated animation file. If this is specified, the animation speed is scaled by the appropriate factor based on the frame rate of the input file')\n    self.m2e_charNameChk.SetToolTipString('Name of the animation character. This should match between all of the model files and all of the channel files for a particular model and its associated channels')\n    self.m2e_legacyShaderChk.SetToolTipString('Turn off modern (Phong) shader generation and treat all shaders as if they were Lamberts (legacy)')\n    self.m2e_copyTexChk.SetToolTipString('Copy the textures to a textures sub directory relative to the written out egg file')\n    self.m2e_copyTexPathTxt.SetToolTipString('Copy the textures to a textures sub directory relative to the written out egg file')\n    self.m2e_copyTexPathBtn.SetToolTipString('Specify texture directory')\n    self.m2e_pathReplaceChk.SetToolTipString('Remap prefixes for texture and external reference paths')\n    self.m2e_pathReplaceTxt.SetToolTipString('Remap prefixes for texture and external reference paths. Ex: orig_prefix=replacement_prefix')\n    self.m2e_pathReplaceBtn.SetToolTipString('Replace path prefixes for all Maya2Egg commands for selected batch commands')\n    self.e2b_useCurrEggChk.SetValue(0)\n    self.e2b_useCurrEggChk.Enable(True)\n    self.e2b_eggFileTxt.SetMinSize((230, 21))\n    self.e2b_exportDestTxt.SetMinSize((230, 21))\n    self.egg2bam_panel.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_3DFACE))\n    self.e2b_eggFileBtn.SetMinSize((-1, 23))\n    self.e2b_exportDestBtn.SetMinSize((-1, 23))\n    self.e2b_bamBatchOutputBtn.SetMinSize((-1, 23))\n    self.e2b_bamBatchOutputLbl.SetToolTipString(\"Generate and add to batch bam2egg commands from currently selected batch items' outputs\")\n    self.e2b_bamBatchOutputBtn.SetToolTipString(\"Generate and add to batch bam2egg commands from currently selected batch items' outputs\")\n    self.e2b_eggFileLbl.SetToolTipString('Input egg file to be converted')\n    self.e2b_eggFileTxt.SetToolTipString('Input egg file to be converted')\n    self.e2b_eggFileBtn.SetToolTipString('Select an input egg file to be converted')\n    self.e2b_exportDestLbl.SetToolTipString('Destination of the exported file')\n    self.e2b_exportDestTxt.SetToolTipString('Destination of the exported file')\n    self.e2b_exportDestBtn.SetToolTipString('Select the destination of the exported file')\n    self.e2b_useCurrEggChk.SetToolTipString('Use output from Maya2Egg panel as the input file')\n    self.e2b_flattenChk.SetToolTipString('Flatten the egg hierarchy after it is loaded (unnecessary nodes are eliminated)')\n    self.e2b_embedTexChk.SetToolTipString('Record texture data directly in the bam file, instead of storing a reference to the texture elsewhere on disk')\n    self.eggRename_panel.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_3DFACE))\n    self.rename_eggFilesTree.SetMinSize((230, 120))\n    self.rename_exportDirTxt.SetMinSize((230, 21))\n    self.rename_exportFileTxt.SetMinSize((230, 21))\n    self.rename_stripPrefixTxt.SetMinSize((260, 21))\n    self.rename_addEggBtn.SetMinSize((-1, 23))\n    self.rename_addFromBatchBtn.SetMinSize((-1, 23))\n    self.rename_removeEggBtn.SetMinSize((-1, 23))\n    self.rename_removeAllEggsBtn.SetMinSize((-1, 23))\n    self.rename_exportDirBtn.SetMinSize((-1, 23))\n    self.rename_exportFileBtn.SetMinSize((-1, 23))\n    self.eggOptChar_panel.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_3DFACE))\n    self.optchar_eggFilesTree.SetMinSize((230, 120))\n    self.optchar_exportDirTxt.SetMinSize((230, 21))\n    self.optchar_exportFileTxt.SetMinSize((230, 21))\n    self.optchar_keepJointsTxt.SetMinSize((245, 21))\n    self.optchar_dropJointsTxt.SetMinSize((245, 21))\n    self.optchar_exposeJointsTxt.SetMinSize((245, 21))\n    self.optchar_flagGeometryTxt.SetMinSize((245, 21))\n    self.optchar_addEggBtn.SetMinSize((-1, 23))\n    self.optchar_addFromBatchBtn.SetMinSize((-1, 23))\n    self.optchar_removeEggBtn.SetMinSize((-1, 23))\n    self.optchar_removeAllEggsBtn.SetMinSize((-1, 23))\n    self.optchar_exportDirBtn.SetMinSize((-1, 23))\n    self.optchar_exportFileBtn.SetMinSize((-1, 23))\n    self.optchar_exportInPlaceChk.SetToolTipString('Input egg files will be rewritten in place with the results (original input files are lost)')\n    self.optchar_keepAllJointsChk.SetToolTipString('Keep all joints in the character, except those named explicitily by drop')\n    self.optchar_keepJointsChk.SetToolTipString(\"Keep the specified joints in the character, even if they don't appear to be needed by the animation\")\n    self.optchar_dropJointsChk.SetToolTipString('Remove the specified joints in the character, even if they appear to be needed by the animation')\n    self.optchar_exposeJointsChk.SetToolTipString('Expose the specified joints in the character by flagging them with a DCS attribute, so each one can be found in the scene graph when the character is loaded and object can be parented to it')\n    self.optchar_flagGeometryChk.SetToolTipString('Assign the indicated name to the geometry within the given nodes. This will make the geometry visible as a node in the resulting character model when loaded in the scene graph')\n    self.optchar_dartChoice.SetToolTipString('Change the dart value in the input eggs')\n    self.eggPalettize_panel.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_3DFACE))\n    self.palettize_eggFilesTree.SetMinSize((230, 120))\n    self.palettize_exportDirTxt.SetMinSize((230, 21))\n    self.palettize_exportFileTxt.SetMinSize((230, 21))\n    self.palettize_exportTexTxt.SetMinSize((230, 21))\n    self.palettize_saveTxaTxt.SetMinSize((230, 21))\n    self.palettize_imageTypeChoice.SetSelection(2)\n    self.palettize_marginTxt.SetValue(2)\n    self.palettize_sizeWidthTxt.SetMinSize((60, 21))\n    self.palettize_sizeHeightTxt.SetMinSize((60, 21))\n    self.palettize_redTxt.SetMinSize((60, 21))\n    self.palettize_greenTxt.SetMinSize((60, 21))\n    self.palettize_blueTxt.SetMinSize((60, 21))\n    self.palettize_alphaTxt.SetMinSize((60, 21))\n    self.palettize_marginTxt.SetMinSize((-1, 21))\n    self.palettize_coverageTxt.SetMinSize((-1, 21))\n    self.palettize_addEggBtn.SetMinSize((-1, 23))\n    self.palettize_addFromBatchBtn.SetMinSize((-1, 23))\n    self.palettize_removeEggBtn.SetMinSize((-1, 23))\n    self.palettize_removeAllEggsBtn.SetMinSize((-1, 23))\n    self.palettize_exportDirBtn.SetMinSize((-1, 23))\n    self.palettize_exportFileBtn.SetMinSize((-1, 23))\n    self.palettize_exportTexBtn.SetMinSize((-1, 23))\n    self.palettize_saveTxaBtn.SetMinSize((-1, 23))\n    self.palettize_loadTxaBtn.SetMinSize((-1, 23))\n    self.palettize_exportInPlaceChk.SetToolTipString('Input egg files will be rewritten in place with the results (original input files are lost)')\n    self.palettize_exportDirLbl.SetToolTipString('Destination directory for the exported files')\n    self.palettize_exportDirTxt.SetToolTipString('Destination directory for the exported files')\n    self.palettize_exportDirBtn.SetToolTipString('Select the destination directory for the exported files')\n    self.palettize_exportFileLbl.SetToolTipString('Destination of the exported file')\n    self.palettize_exportFileTxt.SetToolTipString('Destination of the exported file')\n    self.palettize_exportFileBtn.SetToolTipString('Select the destination of the exported file')\n    self.palettize_exportTexLbl.SetToolTipString('Destination folder of the exported textures')\n    self.palettize_exportTexTxt.SetToolTipString('Destination folder of the exported textures')\n    self.palettize_exportTexBtn.SetToolTipString('Select the destination folder of the exported textures')\n    self.palettize_addEggBtn.SetToolTipString('Add an egg file/s to be exported')\n    self.palettize_addFromBatchBtn.SetToolTipString('Add egg file/s to be exported from the batch list')\n    self.palettize_removeEggBtn.SetToolTipString('Remove the selected egg file')\n    self.palettize_removeAllEggsBtn.SetToolTipString('Remove all egg files')\n    self.palettize_sizeLbl.SetToolTipString('Specifies the size of the palette images to be created')\n    self.palettize_sizeWidthTxt.SetToolTipString('Width of the palette images to be created')\n    self.palettize_sizeHeightTxt.SetToolTipString('Height of the palette images to be created')\n    self.palettize_powerOf2Chk.SetToolTipString('Specifies whether texures should be forced to a power of two size when they are placed within a palette')\n    self.palettize_imageTypeLbl.SetToolTipString('Image type of each generated texture palette')\n    self.palettize_imageTypeChoice.SetToolTipString('Image type of each generated texture palette')\n    self.palettize_colorLbl.SetToolTipString(\"Color of the palette's background\")\n    self.palettize_redLbl.SetToolTipString(\"Red value of the palette's background color\")\n    self.palettize_redTxt.SetToolTipString(\"Red value of the palette's background color\")\n    self.palettize_greenLbl.SetToolTipString(\"Green value of the palette's background color\")\n    self.palettize_greenTxt.SetToolTipString(\"Green value of the palette's background color\")\n    self.palettize_blueLbl.SetToolTipString(\"Blue value of the palette's background color\")\n    self.palettize_blueTxt.SetToolTipString(\"Blue value of the palette's background color\")\n    self.palettize_alphaLbl.SetToolTipString(\"Alpha value of the palette's background color\")\n    self.palettize_alphaTxt.SetToolTipString(\"Alpha value of the palette's background color\")\n    self.palettize_color_sizer_staticbox.SetToolTipString(\"Palette's background color\")\n    self.palettize_marginLbl.SetToolTipString('Specifies the amount of margin to apply to all textures that are placed within a palette image')\n    self.palettize_marginTxt.SetToolTipString('Specifies the amount of margin to apply to all textures that are placed within a palette image')\n    self.palettize_coverageLbl.SetToolTipString('Fraction of the area in the texture image that is actually used')\n    self.palettize_coverageTxt.SetToolTipString('Fraction of the area in the texture image that is actually used')\n    self.palettize_saveTxaLbl.SetToolTipString('Attributes (.txa) file')\n    self.palettize_saveTxaTxt.SetToolTipString('Attributes (.txa) file')\n    self.palettize_loadTxaBtn.SetToolTipString('Choose attributes file (.txa)')\n    self.palettize_saveTxaBtn.SetToolTipString('Save current attributes to the .txa file')\n    self.toolComboBox.SetSelection(0)\n    self.batch_panel.SetMinSize((2000, 608))\n    self.batchTree.SetMinSize((2000, 524))\n    self.loadBatchButton.SetMinSize((-1, 23))\n    self.saveBatchButton.SetMinSize((-1, 23))\n    self.sortBatchButton.SetMinSize((-1, 23))\n    self.changePathsButton.SetMinSize((-1, 23))\n    self.editSelBatchButton.SetMinSize((-1, 23))\n    self.removeSelBatchButton.SetMinSize((-1, 23))\n    self.removeAllBatchButton.SetMinSize((-1, 23))\n    self.console_panel.SetMinSize((2000, 1000))\n    self.consoleOutputTxt.SetMinSize((2000, 1000))\n    self.consoleOutputTxt.SetBackgroundColour(wx.Colour(192, 192, 192))\n    self.consoleOutputTxt.SetToolTipString('maya2egg console output appears here when batch process is running')\n    self.consoleOutputTxt.Enable(True)\n    self.runBatchButton.SetMinSize((-1, 23))\n    self.clearConsoleButton.SetMinSize((-1, 23))\n    self.runPviewButton.SetMinSize((-1, 23))\n    self.ignoreModDates.SetValue(True)\n    self.pandaPathTxt.SetMinSize((200, 21))\n    self.loadPandaPathBtn.SetMinSize((-1, 23))\n    self.pandaPathTxt.SetBackgroundColour(wx.Colour(192, 192, 192))\n    self.ignoreModDates.SetToolTipString('Use this check box to export all the mb files regardless if they have been modified since the last export')\n    self.pandaPathTxt.SetToolTipString('Select the particular installed version of Panda3D, if not chosen the first entry in the system path is used')\n    self.main_panel.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_3DFACE))\n    self.simple_panel.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_3DFACE))\n    self.SetStatusText('Welcome to Panda3D Tools GUI')",
        "mutated": [
            "def __set_properties(self):\n    if False:\n        i = 10\n    self.SetTitle('Panda3D Tools GUI')\n    self.simple_exportDestTxt.SetMinSize((230, 21))\n    self.simple_mayaFileTxt.SetMinSize((230, 21))\n    self.simple_mayaVerComboBox.SetSelection(9)\n    self.simple_animOptChoice.SetSelection(1)\n    self.statusBar.SetStatusWidths([-1])\n    self.simple_mayaFileBtn.SetMinSize((-1, 23))\n    self.simple_exportDestBtn.SetMinSize((-1, 23))\n    self.simple_runExportBtn.SetMinSize((-1, 23))\n    self.batchItemNameTxt.SetMinSize((210, 21))\n    self.addToBatchBtn.SetMinSize((-1, 23))\n    self.m2e_mayaFileTxt.SetMinSize((230, 21))\n    self.m2e_exportDestTxt.SetMinSize((230, 21))\n    self.m2e_mayaVerComboBox.SetSelection(1)\n    self.m2e_mayaUnitsComboBox.SetSelection(1)\n    self.m2e_pandaUnitsComboBox.SetSelection(1)\n    self.m2e_subrootsTxt.SetMinSize((235, 21))\n    self.m2e_subsetsTxt.SetMinSize((235, 21))\n    self.m2e_excludesTxt.SetMinSize((235, 21))\n    self.m2e_animOptChoice.SetSelection(1)\n    self.m2e_charNameTxt.SetMinSize((283, 21))\n    self.m2e_copyTexPathTxt.SetMinSize((218, 21))\n    self.m2e_pathReplaceTxt.SetMinSize((218, 21))\n    self.m2e_mayaFileBtn.SetMinSize((-1, 23))\n    self.m2e_exportDestBtn.SetMinSize((-1, 23))\n    self.m2e_copyTexPathBtn.SetMinSize((-1, 23))\n    self.m2e_pathReplaceBtn.SetMinSize((-1, 23))\n    self.m2e_startFrameSpin.SetMinSize((-1, 21))\n    self.m2e_endFrameSpin.SetMinSize((-1, 21))\n    self.m2e_frameRateInSpin.SetMinSize((-1, 21))\n    self.m2e_frameRateOutSpin.SetMinSize((-1, 21))\n    self.m2e_mayaFileLbl.SetToolTipString('Maya file to be exported')\n    self.m2e_mayaFileTxt.SetToolTipString('Maya file to be exported')\n    self.m2e_mayaFileBtn.SetToolTipString('Select a maya file to be exported')\n    self.m2e_exportDestLbl.SetToolTipString('Destination of the exported file')\n    self.m2e_exportDestTxt.SetToolTipString('Destination of the exported file')\n    self.m2e_exportDestBtn.SetToolTipString('Select the destination of the exported file')\n    self.m2e_mayaVerLbl.SetToolTipString('Version of the maya exporter to use, must match version of *.mb file')\n    self.m2e_mayaVerComboBox.SetToolTipString('Version of the maya exporter to use, must match version of *.mb file')\n    self.m2e_mayaUnitsLbl.SetToolTipString('The units of the input Maya file')\n    self.m2e_mayaUnitsComboBox.SetToolTipString('defaults to centimeters')\n    self.m2e_pandaUnitsLbl.SetToolTipString('The units of the output egg file')\n    self.m2e_pandaUnitsComboBox.SetToolTipString('defaults to centimeters')\n    self.m2e_backfaceChk.SetToolTipString('Enable/Disable backface rendering of polygons in the egg file (default is off)')\n    self.m2e_polygonOutputChk.SetToolTipString('Generate polygon output only. Tesselate all NURBS surfaces to polygons via the built-in Maya tesselator')\n    self.m2e_tbnallChk.SetToolTipString('Calculate the tangents and binormals for all texture coordinate sets (for normal maps, etc)')\n    self.m2e_subrootsChk.SetToolTipString('Export specified subroots of the geometry in the Maya file to be converted')\n    self.m2e_subrootsTxt.SetToolTipString('Export specified subroots of the geometry in the Maya file to be converted')\n    self.m2e_subsetsChk.SetToolTipString('Export specified subsets of the geometry in the Maya file to be converted')\n    self.m2e_subsetsTxt.SetToolTipString('Export specified subsets of the geometry in the Maya file to be converted')\n    self.m2e_excludesChk.SetToolTipString('Exclude specified subsets of the geometry in the Maya file to be converted')\n    self.m2e_excludesTxt.SetToolTipString('Exclude specified subsets of the geometry in the Maya file to be converted')\n    self.m2e_animOptChoice.SetToolTipString('Specifies how animation from the Maya file is converted to egg, if at all')\n    self.m2e_startFrameChk.SetToolTipString('Starting frame of animation to exctract. For pose, this is the one frame of animation to extract')\n    self.m2e_endFrameChk.SetToolTipString('Ending frame of animation to exctract')\n    self.m2e_frameRateInChk.SetToolTipString('Frame rate (frames per second) of the input Maya file')\n    self.m2e_frameRateOutChk.SetToolTipString('Frame rate (frames per second) of the generated animation file. If this is specified, the animation speed is scaled by the appropriate factor based on the frame rate of the input file')\n    self.m2e_charNameChk.SetToolTipString('Name of the animation character. This should match between all of the model files and all of the channel files for a particular model and its associated channels')\n    self.m2e_legacyShaderChk.SetToolTipString('Turn off modern (Phong) shader generation and treat all shaders as if they were Lamberts (legacy)')\n    self.m2e_copyTexChk.SetToolTipString('Copy the textures to a textures sub directory relative to the written out egg file')\n    self.m2e_copyTexPathTxt.SetToolTipString('Copy the textures to a textures sub directory relative to the written out egg file')\n    self.m2e_copyTexPathBtn.SetToolTipString('Specify texture directory')\n    self.m2e_pathReplaceChk.SetToolTipString('Remap prefixes for texture and external reference paths')\n    self.m2e_pathReplaceTxt.SetToolTipString('Remap prefixes for texture and external reference paths. Ex: orig_prefix=replacement_prefix')\n    self.m2e_pathReplaceBtn.SetToolTipString('Replace path prefixes for all Maya2Egg commands for selected batch commands')\n    self.e2b_useCurrEggChk.SetValue(0)\n    self.e2b_useCurrEggChk.Enable(True)\n    self.e2b_eggFileTxt.SetMinSize((230, 21))\n    self.e2b_exportDestTxt.SetMinSize((230, 21))\n    self.egg2bam_panel.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_3DFACE))\n    self.e2b_eggFileBtn.SetMinSize((-1, 23))\n    self.e2b_exportDestBtn.SetMinSize((-1, 23))\n    self.e2b_bamBatchOutputBtn.SetMinSize((-1, 23))\n    self.e2b_bamBatchOutputLbl.SetToolTipString(\"Generate and add to batch bam2egg commands from currently selected batch items' outputs\")\n    self.e2b_bamBatchOutputBtn.SetToolTipString(\"Generate and add to batch bam2egg commands from currently selected batch items' outputs\")\n    self.e2b_eggFileLbl.SetToolTipString('Input egg file to be converted')\n    self.e2b_eggFileTxt.SetToolTipString('Input egg file to be converted')\n    self.e2b_eggFileBtn.SetToolTipString('Select an input egg file to be converted')\n    self.e2b_exportDestLbl.SetToolTipString('Destination of the exported file')\n    self.e2b_exportDestTxt.SetToolTipString('Destination of the exported file')\n    self.e2b_exportDestBtn.SetToolTipString('Select the destination of the exported file')\n    self.e2b_useCurrEggChk.SetToolTipString('Use output from Maya2Egg panel as the input file')\n    self.e2b_flattenChk.SetToolTipString('Flatten the egg hierarchy after it is loaded (unnecessary nodes are eliminated)')\n    self.e2b_embedTexChk.SetToolTipString('Record texture data directly in the bam file, instead of storing a reference to the texture elsewhere on disk')\n    self.eggRename_panel.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_3DFACE))\n    self.rename_eggFilesTree.SetMinSize((230, 120))\n    self.rename_exportDirTxt.SetMinSize((230, 21))\n    self.rename_exportFileTxt.SetMinSize((230, 21))\n    self.rename_stripPrefixTxt.SetMinSize((260, 21))\n    self.rename_addEggBtn.SetMinSize((-1, 23))\n    self.rename_addFromBatchBtn.SetMinSize((-1, 23))\n    self.rename_removeEggBtn.SetMinSize((-1, 23))\n    self.rename_removeAllEggsBtn.SetMinSize((-1, 23))\n    self.rename_exportDirBtn.SetMinSize((-1, 23))\n    self.rename_exportFileBtn.SetMinSize((-1, 23))\n    self.eggOptChar_panel.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_3DFACE))\n    self.optchar_eggFilesTree.SetMinSize((230, 120))\n    self.optchar_exportDirTxt.SetMinSize((230, 21))\n    self.optchar_exportFileTxt.SetMinSize((230, 21))\n    self.optchar_keepJointsTxt.SetMinSize((245, 21))\n    self.optchar_dropJointsTxt.SetMinSize((245, 21))\n    self.optchar_exposeJointsTxt.SetMinSize((245, 21))\n    self.optchar_flagGeometryTxt.SetMinSize((245, 21))\n    self.optchar_addEggBtn.SetMinSize((-1, 23))\n    self.optchar_addFromBatchBtn.SetMinSize((-1, 23))\n    self.optchar_removeEggBtn.SetMinSize((-1, 23))\n    self.optchar_removeAllEggsBtn.SetMinSize((-1, 23))\n    self.optchar_exportDirBtn.SetMinSize((-1, 23))\n    self.optchar_exportFileBtn.SetMinSize((-1, 23))\n    self.optchar_exportInPlaceChk.SetToolTipString('Input egg files will be rewritten in place with the results (original input files are lost)')\n    self.optchar_keepAllJointsChk.SetToolTipString('Keep all joints in the character, except those named explicitily by drop')\n    self.optchar_keepJointsChk.SetToolTipString(\"Keep the specified joints in the character, even if they don't appear to be needed by the animation\")\n    self.optchar_dropJointsChk.SetToolTipString('Remove the specified joints in the character, even if they appear to be needed by the animation')\n    self.optchar_exposeJointsChk.SetToolTipString('Expose the specified joints in the character by flagging them with a DCS attribute, so each one can be found in the scene graph when the character is loaded and object can be parented to it')\n    self.optchar_flagGeometryChk.SetToolTipString('Assign the indicated name to the geometry within the given nodes. This will make the geometry visible as a node in the resulting character model when loaded in the scene graph')\n    self.optchar_dartChoice.SetToolTipString('Change the dart value in the input eggs')\n    self.eggPalettize_panel.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_3DFACE))\n    self.palettize_eggFilesTree.SetMinSize((230, 120))\n    self.palettize_exportDirTxt.SetMinSize((230, 21))\n    self.palettize_exportFileTxt.SetMinSize((230, 21))\n    self.palettize_exportTexTxt.SetMinSize((230, 21))\n    self.palettize_saveTxaTxt.SetMinSize((230, 21))\n    self.palettize_imageTypeChoice.SetSelection(2)\n    self.palettize_marginTxt.SetValue(2)\n    self.palettize_sizeWidthTxt.SetMinSize((60, 21))\n    self.palettize_sizeHeightTxt.SetMinSize((60, 21))\n    self.palettize_redTxt.SetMinSize((60, 21))\n    self.palettize_greenTxt.SetMinSize((60, 21))\n    self.palettize_blueTxt.SetMinSize((60, 21))\n    self.palettize_alphaTxt.SetMinSize((60, 21))\n    self.palettize_marginTxt.SetMinSize((-1, 21))\n    self.palettize_coverageTxt.SetMinSize((-1, 21))\n    self.palettize_addEggBtn.SetMinSize((-1, 23))\n    self.palettize_addFromBatchBtn.SetMinSize((-1, 23))\n    self.palettize_removeEggBtn.SetMinSize((-1, 23))\n    self.palettize_removeAllEggsBtn.SetMinSize((-1, 23))\n    self.palettize_exportDirBtn.SetMinSize((-1, 23))\n    self.palettize_exportFileBtn.SetMinSize((-1, 23))\n    self.palettize_exportTexBtn.SetMinSize((-1, 23))\n    self.palettize_saveTxaBtn.SetMinSize((-1, 23))\n    self.palettize_loadTxaBtn.SetMinSize((-1, 23))\n    self.palettize_exportInPlaceChk.SetToolTipString('Input egg files will be rewritten in place with the results (original input files are lost)')\n    self.palettize_exportDirLbl.SetToolTipString('Destination directory for the exported files')\n    self.palettize_exportDirTxt.SetToolTipString('Destination directory for the exported files')\n    self.palettize_exportDirBtn.SetToolTipString('Select the destination directory for the exported files')\n    self.palettize_exportFileLbl.SetToolTipString('Destination of the exported file')\n    self.palettize_exportFileTxt.SetToolTipString('Destination of the exported file')\n    self.palettize_exportFileBtn.SetToolTipString('Select the destination of the exported file')\n    self.palettize_exportTexLbl.SetToolTipString('Destination folder of the exported textures')\n    self.palettize_exportTexTxt.SetToolTipString('Destination folder of the exported textures')\n    self.palettize_exportTexBtn.SetToolTipString('Select the destination folder of the exported textures')\n    self.palettize_addEggBtn.SetToolTipString('Add an egg file/s to be exported')\n    self.palettize_addFromBatchBtn.SetToolTipString('Add egg file/s to be exported from the batch list')\n    self.palettize_removeEggBtn.SetToolTipString('Remove the selected egg file')\n    self.palettize_removeAllEggsBtn.SetToolTipString('Remove all egg files')\n    self.palettize_sizeLbl.SetToolTipString('Specifies the size of the palette images to be created')\n    self.palettize_sizeWidthTxt.SetToolTipString('Width of the palette images to be created')\n    self.palettize_sizeHeightTxt.SetToolTipString('Height of the palette images to be created')\n    self.palettize_powerOf2Chk.SetToolTipString('Specifies whether texures should be forced to a power of two size when they are placed within a palette')\n    self.palettize_imageTypeLbl.SetToolTipString('Image type of each generated texture palette')\n    self.palettize_imageTypeChoice.SetToolTipString('Image type of each generated texture palette')\n    self.palettize_colorLbl.SetToolTipString(\"Color of the palette's background\")\n    self.palettize_redLbl.SetToolTipString(\"Red value of the palette's background color\")\n    self.palettize_redTxt.SetToolTipString(\"Red value of the palette's background color\")\n    self.palettize_greenLbl.SetToolTipString(\"Green value of the palette's background color\")\n    self.palettize_greenTxt.SetToolTipString(\"Green value of the palette's background color\")\n    self.palettize_blueLbl.SetToolTipString(\"Blue value of the palette's background color\")\n    self.palettize_blueTxt.SetToolTipString(\"Blue value of the palette's background color\")\n    self.palettize_alphaLbl.SetToolTipString(\"Alpha value of the palette's background color\")\n    self.palettize_alphaTxt.SetToolTipString(\"Alpha value of the palette's background color\")\n    self.palettize_color_sizer_staticbox.SetToolTipString(\"Palette's background color\")\n    self.palettize_marginLbl.SetToolTipString('Specifies the amount of margin to apply to all textures that are placed within a palette image')\n    self.palettize_marginTxt.SetToolTipString('Specifies the amount of margin to apply to all textures that are placed within a palette image')\n    self.palettize_coverageLbl.SetToolTipString('Fraction of the area in the texture image that is actually used')\n    self.palettize_coverageTxt.SetToolTipString('Fraction of the area in the texture image that is actually used')\n    self.palettize_saveTxaLbl.SetToolTipString('Attributes (.txa) file')\n    self.palettize_saveTxaTxt.SetToolTipString('Attributes (.txa) file')\n    self.palettize_loadTxaBtn.SetToolTipString('Choose attributes file (.txa)')\n    self.palettize_saveTxaBtn.SetToolTipString('Save current attributes to the .txa file')\n    self.toolComboBox.SetSelection(0)\n    self.batch_panel.SetMinSize((2000, 608))\n    self.batchTree.SetMinSize((2000, 524))\n    self.loadBatchButton.SetMinSize((-1, 23))\n    self.saveBatchButton.SetMinSize((-1, 23))\n    self.sortBatchButton.SetMinSize((-1, 23))\n    self.changePathsButton.SetMinSize((-1, 23))\n    self.editSelBatchButton.SetMinSize((-1, 23))\n    self.removeSelBatchButton.SetMinSize((-1, 23))\n    self.removeAllBatchButton.SetMinSize((-1, 23))\n    self.console_panel.SetMinSize((2000, 1000))\n    self.consoleOutputTxt.SetMinSize((2000, 1000))\n    self.consoleOutputTxt.SetBackgroundColour(wx.Colour(192, 192, 192))\n    self.consoleOutputTxt.SetToolTipString('maya2egg console output appears here when batch process is running')\n    self.consoleOutputTxt.Enable(True)\n    self.runBatchButton.SetMinSize((-1, 23))\n    self.clearConsoleButton.SetMinSize((-1, 23))\n    self.runPviewButton.SetMinSize((-1, 23))\n    self.ignoreModDates.SetValue(True)\n    self.pandaPathTxt.SetMinSize((200, 21))\n    self.loadPandaPathBtn.SetMinSize((-1, 23))\n    self.pandaPathTxt.SetBackgroundColour(wx.Colour(192, 192, 192))\n    self.ignoreModDates.SetToolTipString('Use this check box to export all the mb files regardless if they have been modified since the last export')\n    self.pandaPathTxt.SetToolTipString('Select the particular installed version of Panda3D, if not chosen the first entry in the system path is used')\n    self.main_panel.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_3DFACE))\n    self.simple_panel.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_3DFACE))\n    self.SetStatusText('Welcome to Panda3D Tools GUI')",
            "def __set_properties(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.SetTitle('Panda3D Tools GUI')\n    self.simple_exportDestTxt.SetMinSize((230, 21))\n    self.simple_mayaFileTxt.SetMinSize((230, 21))\n    self.simple_mayaVerComboBox.SetSelection(9)\n    self.simple_animOptChoice.SetSelection(1)\n    self.statusBar.SetStatusWidths([-1])\n    self.simple_mayaFileBtn.SetMinSize((-1, 23))\n    self.simple_exportDestBtn.SetMinSize((-1, 23))\n    self.simple_runExportBtn.SetMinSize((-1, 23))\n    self.batchItemNameTxt.SetMinSize((210, 21))\n    self.addToBatchBtn.SetMinSize((-1, 23))\n    self.m2e_mayaFileTxt.SetMinSize((230, 21))\n    self.m2e_exportDestTxt.SetMinSize((230, 21))\n    self.m2e_mayaVerComboBox.SetSelection(1)\n    self.m2e_mayaUnitsComboBox.SetSelection(1)\n    self.m2e_pandaUnitsComboBox.SetSelection(1)\n    self.m2e_subrootsTxt.SetMinSize((235, 21))\n    self.m2e_subsetsTxt.SetMinSize((235, 21))\n    self.m2e_excludesTxt.SetMinSize((235, 21))\n    self.m2e_animOptChoice.SetSelection(1)\n    self.m2e_charNameTxt.SetMinSize((283, 21))\n    self.m2e_copyTexPathTxt.SetMinSize((218, 21))\n    self.m2e_pathReplaceTxt.SetMinSize((218, 21))\n    self.m2e_mayaFileBtn.SetMinSize((-1, 23))\n    self.m2e_exportDestBtn.SetMinSize((-1, 23))\n    self.m2e_copyTexPathBtn.SetMinSize((-1, 23))\n    self.m2e_pathReplaceBtn.SetMinSize((-1, 23))\n    self.m2e_startFrameSpin.SetMinSize((-1, 21))\n    self.m2e_endFrameSpin.SetMinSize((-1, 21))\n    self.m2e_frameRateInSpin.SetMinSize((-1, 21))\n    self.m2e_frameRateOutSpin.SetMinSize((-1, 21))\n    self.m2e_mayaFileLbl.SetToolTipString('Maya file to be exported')\n    self.m2e_mayaFileTxt.SetToolTipString('Maya file to be exported')\n    self.m2e_mayaFileBtn.SetToolTipString('Select a maya file to be exported')\n    self.m2e_exportDestLbl.SetToolTipString('Destination of the exported file')\n    self.m2e_exportDestTxt.SetToolTipString('Destination of the exported file')\n    self.m2e_exportDestBtn.SetToolTipString('Select the destination of the exported file')\n    self.m2e_mayaVerLbl.SetToolTipString('Version of the maya exporter to use, must match version of *.mb file')\n    self.m2e_mayaVerComboBox.SetToolTipString('Version of the maya exporter to use, must match version of *.mb file')\n    self.m2e_mayaUnitsLbl.SetToolTipString('The units of the input Maya file')\n    self.m2e_mayaUnitsComboBox.SetToolTipString('defaults to centimeters')\n    self.m2e_pandaUnitsLbl.SetToolTipString('The units of the output egg file')\n    self.m2e_pandaUnitsComboBox.SetToolTipString('defaults to centimeters')\n    self.m2e_backfaceChk.SetToolTipString('Enable/Disable backface rendering of polygons in the egg file (default is off)')\n    self.m2e_polygonOutputChk.SetToolTipString('Generate polygon output only. Tesselate all NURBS surfaces to polygons via the built-in Maya tesselator')\n    self.m2e_tbnallChk.SetToolTipString('Calculate the tangents and binormals for all texture coordinate sets (for normal maps, etc)')\n    self.m2e_subrootsChk.SetToolTipString('Export specified subroots of the geometry in the Maya file to be converted')\n    self.m2e_subrootsTxt.SetToolTipString('Export specified subroots of the geometry in the Maya file to be converted')\n    self.m2e_subsetsChk.SetToolTipString('Export specified subsets of the geometry in the Maya file to be converted')\n    self.m2e_subsetsTxt.SetToolTipString('Export specified subsets of the geometry in the Maya file to be converted')\n    self.m2e_excludesChk.SetToolTipString('Exclude specified subsets of the geometry in the Maya file to be converted')\n    self.m2e_excludesTxt.SetToolTipString('Exclude specified subsets of the geometry in the Maya file to be converted')\n    self.m2e_animOptChoice.SetToolTipString('Specifies how animation from the Maya file is converted to egg, if at all')\n    self.m2e_startFrameChk.SetToolTipString('Starting frame of animation to exctract. For pose, this is the one frame of animation to extract')\n    self.m2e_endFrameChk.SetToolTipString('Ending frame of animation to exctract')\n    self.m2e_frameRateInChk.SetToolTipString('Frame rate (frames per second) of the input Maya file')\n    self.m2e_frameRateOutChk.SetToolTipString('Frame rate (frames per second) of the generated animation file. If this is specified, the animation speed is scaled by the appropriate factor based on the frame rate of the input file')\n    self.m2e_charNameChk.SetToolTipString('Name of the animation character. This should match between all of the model files and all of the channel files for a particular model and its associated channels')\n    self.m2e_legacyShaderChk.SetToolTipString('Turn off modern (Phong) shader generation and treat all shaders as if they were Lamberts (legacy)')\n    self.m2e_copyTexChk.SetToolTipString('Copy the textures to a textures sub directory relative to the written out egg file')\n    self.m2e_copyTexPathTxt.SetToolTipString('Copy the textures to a textures sub directory relative to the written out egg file')\n    self.m2e_copyTexPathBtn.SetToolTipString('Specify texture directory')\n    self.m2e_pathReplaceChk.SetToolTipString('Remap prefixes for texture and external reference paths')\n    self.m2e_pathReplaceTxt.SetToolTipString('Remap prefixes for texture and external reference paths. Ex: orig_prefix=replacement_prefix')\n    self.m2e_pathReplaceBtn.SetToolTipString('Replace path prefixes for all Maya2Egg commands for selected batch commands')\n    self.e2b_useCurrEggChk.SetValue(0)\n    self.e2b_useCurrEggChk.Enable(True)\n    self.e2b_eggFileTxt.SetMinSize((230, 21))\n    self.e2b_exportDestTxt.SetMinSize((230, 21))\n    self.egg2bam_panel.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_3DFACE))\n    self.e2b_eggFileBtn.SetMinSize((-1, 23))\n    self.e2b_exportDestBtn.SetMinSize((-1, 23))\n    self.e2b_bamBatchOutputBtn.SetMinSize((-1, 23))\n    self.e2b_bamBatchOutputLbl.SetToolTipString(\"Generate and add to batch bam2egg commands from currently selected batch items' outputs\")\n    self.e2b_bamBatchOutputBtn.SetToolTipString(\"Generate and add to batch bam2egg commands from currently selected batch items' outputs\")\n    self.e2b_eggFileLbl.SetToolTipString('Input egg file to be converted')\n    self.e2b_eggFileTxt.SetToolTipString('Input egg file to be converted')\n    self.e2b_eggFileBtn.SetToolTipString('Select an input egg file to be converted')\n    self.e2b_exportDestLbl.SetToolTipString('Destination of the exported file')\n    self.e2b_exportDestTxt.SetToolTipString('Destination of the exported file')\n    self.e2b_exportDestBtn.SetToolTipString('Select the destination of the exported file')\n    self.e2b_useCurrEggChk.SetToolTipString('Use output from Maya2Egg panel as the input file')\n    self.e2b_flattenChk.SetToolTipString('Flatten the egg hierarchy after it is loaded (unnecessary nodes are eliminated)')\n    self.e2b_embedTexChk.SetToolTipString('Record texture data directly in the bam file, instead of storing a reference to the texture elsewhere on disk')\n    self.eggRename_panel.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_3DFACE))\n    self.rename_eggFilesTree.SetMinSize((230, 120))\n    self.rename_exportDirTxt.SetMinSize((230, 21))\n    self.rename_exportFileTxt.SetMinSize((230, 21))\n    self.rename_stripPrefixTxt.SetMinSize((260, 21))\n    self.rename_addEggBtn.SetMinSize((-1, 23))\n    self.rename_addFromBatchBtn.SetMinSize((-1, 23))\n    self.rename_removeEggBtn.SetMinSize((-1, 23))\n    self.rename_removeAllEggsBtn.SetMinSize((-1, 23))\n    self.rename_exportDirBtn.SetMinSize((-1, 23))\n    self.rename_exportFileBtn.SetMinSize((-1, 23))\n    self.eggOptChar_panel.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_3DFACE))\n    self.optchar_eggFilesTree.SetMinSize((230, 120))\n    self.optchar_exportDirTxt.SetMinSize((230, 21))\n    self.optchar_exportFileTxt.SetMinSize((230, 21))\n    self.optchar_keepJointsTxt.SetMinSize((245, 21))\n    self.optchar_dropJointsTxt.SetMinSize((245, 21))\n    self.optchar_exposeJointsTxt.SetMinSize((245, 21))\n    self.optchar_flagGeometryTxt.SetMinSize((245, 21))\n    self.optchar_addEggBtn.SetMinSize((-1, 23))\n    self.optchar_addFromBatchBtn.SetMinSize((-1, 23))\n    self.optchar_removeEggBtn.SetMinSize((-1, 23))\n    self.optchar_removeAllEggsBtn.SetMinSize((-1, 23))\n    self.optchar_exportDirBtn.SetMinSize((-1, 23))\n    self.optchar_exportFileBtn.SetMinSize((-1, 23))\n    self.optchar_exportInPlaceChk.SetToolTipString('Input egg files will be rewritten in place with the results (original input files are lost)')\n    self.optchar_keepAllJointsChk.SetToolTipString('Keep all joints in the character, except those named explicitily by drop')\n    self.optchar_keepJointsChk.SetToolTipString(\"Keep the specified joints in the character, even if they don't appear to be needed by the animation\")\n    self.optchar_dropJointsChk.SetToolTipString('Remove the specified joints in the character, even if they appear to be needed by the animation')\n    self.optchar_exposeJointsChk.SetToolTipString('Expose the specified joints in the character by flagging them with a DCS attribute, so each one can be found in the scene graph when the character is loaded and object can be parented to it')\n    self.optchar_flagGeometryChk.SetToolTipString('Assign the indicated name to the geometry within the given nodes. This will make the geometry visible as a node in the resulting character model when loaded in the scene graph')\n    self.optchar_dartChoice.SetToolTipString('Change the dart value in the input eggs')\n    self.eggPalettize_panel.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_3DFACE))\n    self.palettize_eggFilesTree.SetMinSize((230, 120))\n    self.palettize_exportDirTxt.SetMinSize((230, 21))\n    self.palettize_exportFileTxt.SetMinSize((230, 21))\n    self.palettize_exportTexTxt.SetMinSize((230, 21))\n    self.palettize_saveTxaTxt.SetMinSize((230, 21))\n    self.palettize_imageTypeChoice.SetSelection(2)\n    self.palettize_marginTxt.SetValue(2)\n    self.palettize_sizeWidthTxt.SetMinSize((60, 21))\n    self.palettize_sizeHeightTxt.SetMinSize((60, 21))\n    self.palettize_redTxt.SetMinSize((60, 21))\n    self.palettize_greenTxt.SetMinSize((60, 21))\n    self.palettize_blueTxt.SetMinSize((60, 21))\n    self.palettize_alphaTxt.SetMinSize((60, 21))\n    self.palettize_marginTxt.SetMinSize((-1, 21))\n    self.palettize_coverageTxt.SetMinSize((-1, 21))\n    self.palettize_addEggBtn.SetMinSize((-1, 23))\n    self.palettize_addFromBatchBtn.SetMinSize((-1, 23))\n    self.palettize_removeEggBtn.SetMinSize((-1, 23))\n    self.palettize_removeAllEggsBtn.SetMinSize((-1, 23))\n    self.palettize_exportDirBtn.SetMinSize((-1, 23))\n    self.palettize_exportFileBtn.SetMinSize((-1, 23))\n    self.palettize_exportTexBtn.SetMinSize((-1, 23))\n    self.palettize_saveTxaBtn.SetMinSize((-1, 23))\n    self.palettize_loadTxaBtn.SetMinSize((-1, 23))\n    self.palettize_exportInPlaceChk.SetToolTipString('Input egg files will be rewritten in place with the results (original input files are lost)')\n    self.palettize_exportDirLbl.SetToolTipString('Destination directory for the exported files')\n    self.palettize_exportDirTxt.SetToolTipString('Destination directory for the exported files')\n    self.palettize_exportDirBtn.SetToolTipString('Select the destination directory for the exported files')\n    self.palettize_exportFileLbl.SetToolTipString('Destination of the exported file')\n    self.palettize_exportFileTxt.SetToolTipString('Destination of the exported file')\n    self.palettize_exportFileBtn.SetToolTipString('Select the destination of the exported file')\n    self.palettize_exportTexLbl.SetToolTipString('Destination folder of the exported textures')\n    self.palettize_exportTexTxt.SetToolTipString('Destination folder of the exported textures')\n    self.palettize_exportTexBtn.SetToolTipString('Select the destination folder of the exported textures')\n    self.palettize_addEggBtn.SetToolTipString('Add an egg file/s to be exported')\n    self.palettize_addFromBatchBtn.SetToolTipString('Add egg file/s to be exported from the batch list')\n    self.palettize_removeEggBtn.SetToolTipString('Remove the selected egg file')\n    self.palettize_removeAllEggsBtn.SetToolTipString('Remove all egg files')\n    self.palettize_sizeLbl.SetToolTipString('Specifies the size of the palette images to be created')\n    self.palettize_sizeWidthTxt.SetToolTipString('Width of the palette images to be created')\n    self.palettize_sizeHeightTxt.SetToolTipString('Height of the palette images to be created')\n    self.palettize_powerOf2Chk.SetToolTipString('Specifies whether texures should be forced to a power of two size when they are placed within a palette')\n    self.palettize_imageTypeLbl.SetToolTipString('Image type of each generated texture palette')\n    self.palettize_imageTypeChoice.SetToolTipString('Image type of each generated texture palette')\n    self.palettize_colorLbl.SetToolTipString(\"Color of the palette's background\")\n    self.palettize_redLbl.SetToolTipString(\"Red value of the palette's background color\")\n    self.palettize_redTxt.SetToolTipString(\"Red value of the palette's background color\")\n    self.palettize_greenLbl.SetToolTipString(\"Green value of the palette's background color\")\n    self.palettize_greenTxt.SetToolTipString(\"Green value of the palette's background color\")\n    self.palettize_blueLbl.SetToolTipString(\"Blue value of the palette's background color\")\n    self.palettize_blueTxt.SetToolTipString(\"Blue value of the palette's background color\")\n    self.palettize_alphaLbl.SetToolTipString(\"Alpha value of the palette's background color\")\n    self.palettize_alphaTxt.SetToolTipString(\"Alpha value of the palette's background color\")\n    self.palettize_color_sizer_staticbox.SetToolTipString(\"Palette's background color\")\n    self.palettize_marginLbl.SetToolTipString('Specifies the amount of margin to apply to all textures that are placed within a palette image')\n    self.palettize_marginTxt.SetToolTipString('Specifies the amount of margin to apply to all textures that are placed within a palette image')\n    self.palettize_coverageLbl.SetToolTipString('Fraction of the area in the texture image that is actually used')\n    self.palettize_coverageTxt.SetToolTipString('Fraction of the area in the texture image that is actually used')\n    self.palettize_saveTxaLbl.SetToolTipString('Attributes (.txa) file')\n    self.palettize_saveTxaTxt.SetToolTipString('Attributes (.txa) file')\n    self.palettize_loadTxaBtn.SetToolTipString('Choose attributes file (.txa)')\n    self.palettize_saveTxaBtn.SetToolTipString('Save current attributes to the .txa file')\n    self.toolComboBox.SetSelection(0)\n    self.batch_panel.SetMinSize((2000, 608))\n    self.batchTree.SetMinSize((2000, 524))\n    self.loadBatchButton.SetMinSize((-1, 23))\n    self.saveBatchButton.SetMinSize((-1, 23))\n    self.sortBatchButton.SetMinSize((-1, 23))\n    self.changePathsButton.SetMinSize((-1, 23))\n    self.editSelBatchButton.SetMinSize((-1, 23))\n    self.removeSelBatchButton.SetMinSize((-1, 23))\n    self.removeAllBatchButton.SetMinSize((-1, 23))\n    self.console_panel.SetMinSize((2000, 1000))\n    self.consoleOutputTxt.SetMinSize((2000, 1000))\n    self.consoleOutputTxt.SetBackgroundColour(wx.Colour(192, 192, 192))\n    self.consoleOutputTxt.SetToolTipString('maya2egg console output appears here when batch process is running')\n    self.consoleOutputTxt.Enable(True)\n    self.runBatchButton.SetMinSize((-1, 23))\n    self.clearConsoleButton.SetMinSize((-1, 23))\n    self.runPviewButton.SetMinSize((-1, 23))\n    self.ignoreModDates.SetValue(True)\n    self.pandaPathTxt.SetMinSize((200, 21))\n    self.loadPandaPathBtn.SetMinSize((-1, 23))\n    self.pandaPathTxt.SetBackgroundColour(wx.Colour(192, 192, 192))\n    self.ignoreModDates.SetToolTipString('Use this check box to export all the mb files regardless if they have been modified since the last export')\n    self.pandaPathTxt.SetToolTipString('Select the particular installed version of Panda3D, if not chosen the first entry in the system path is used')\n    self.main_panel.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_3DFACE))\n    self.simple_panel.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_3DFACE))\n    self.SetStatusText('Welcome to Panda3D Tools GUI')",
            "def __set_properties(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.SetTitle('Panda3D Tools GUI')\n    self.simple_exportDestTxt.SetMinSize((230, 21))\n    self.simple_mayaFileTxt.SetMinSize((230, 21))\n    self.simple_mayaVerComboBox.SetSelection(9)\n    self.simple_animOptChoice.SetSelection(1)\n    self.statusBar.SetStatusWidths([-1])\n    self.simple_mayaFileBtn.SetMinSize((-1, 23))\n    self.simple_exportDestBtn.SetMinSize((-1, 23))\n    self.simple_runExportBtn.SetMinSize((-1, 23))\n    self.batchItemNameTxt.SetMinSize((210, 21))\n    self.addToBatchBtn.SetMinSize((-1, 23))\n    self.m2e_mayaFileTxt.SetMinSize((230, 21))\n    self.m2e_exportDestTxt.SetMinSize((230, 21))\n    self.m2e_mayaVerComboBox.SetSelection(1)\n    self.m2e_mayaUnitsComboBox.SetSelection(1)\n    self.m2e_pandaUnitsComboBox.SetSelection(1)\n    self.m2e_subrootsTxt.SetMinSize((235, 21))\n    self.m2e_subsetsTxt.SetMinSize((235, 21))\n    self.m2e_excludesTxt.SetMinSize((235, 21))\n    self.m2e_animOptChoice.SetSelection(1)\n    self.m2e_charNameTxt.SetMinSize((283, 21))\n    self.m2e_copyTexPathTxt.SetMinSize((218, 21))\n    self.m2e_pathReplaceTxt.SetMinSize((218, 21))\n    self.m2e_mayaFileBtn.SetMinSize((-1, 23))\n    self.m2e_exportDestBtn.SetMinSize((-1, 23))\n    self.m2e_copyTexPathBtn.SetMinSize((-1, 23))\n    self.m2e_pathReplaceBtn.SetMinSize((-1, 23))\n    self.m2e_startFrameSpin.SetMinSize((-1, 21))\n    self.m2e_endFrameSpin.SetMinSize((-1, 21))\n    self.m2e_frameRateInSpin.SetMinSize((-1, 21))\n    self.m2e_frameRateOutSpin.SetMinSize((-1, 21))\n    self.m2e_mayaFileLbl.SetToolTipString('Maya file to be exported')\n    self.m2e_mayaFileTxt.SetToolTipString('Maya file to be exported')\n    self.m2e_mayaFileBtn.SetToolTipString('Select a maya file to be exported')\n    self.m2e_exportDestLbl.SetToolTipString('Destination of the exported file')\n    self.m2e_exportDestTxt.SetToolTipString('Destination of the exported file')\n    self.m2e_exportDestBtn.SetToolTipString('Select the destination of the exported file')\n    self.m2e_mayaVerLbl.SetToolTipString('Version of the maya exporter to use, must match version of *.mb file')\n    self.m2e_mayaVerComboBox.SetToolTipString('Version of the maya exporter to use, must match version of *.mb file')\n    self.m2e_mayaUnitsLbl.SetToolTipString('The units of the input Maya file')\n    self.m2e_mayaUnitsComboBox.SetToolTipString('defaults to centimeters')\n    self.m2e_pandaUnitsLbl.SetToolTipString('The units of the output egg file')\n    self.m2e_pandaUnitsComboBox.SetToolTipString('defaults to centimeters')\n    self.m2e_backfaceChk.SetToolTipString('Enable/Disable backface rendering of polygons in the egg file (default is off)')\n    self.m2e_polygonOutputChk.SetToolTipString('Generate polygon output only. Tesselate all NURBS surfaces to polygons via the built-in Maya tesselator')\n    self.m2e_tbnallChk.SetToolTipString('Calculate the tangents and binormals for all texture coordinate sets (for normal maps, etc)')\n    self.m2e_subrootsChk.SetToolTipString('Export specified subroots of the geometry in the Maya file to be converted')\n    self.m2e_subrootsTxt.SetToolTipString('Export specified subroots of the geometry in the Maya file to be converted')\n    self.m2e_subsetsChk.SetToolTipString('Export specified subsets of the geometry in the Maya file to be converted')\n    self.m2e_subsetsTxt.SetToolTipString('Export specified subsets of the geometry in the Maya file to be converted')\n    self.m2e_excludesChk.SetToolTipString('Exclude specified subsets of the geometry in the Maya file to be converted')\n    self.m2e_excludesTxt.SetToolTipString('Exclude specified subsets of the geometry in the Maya file to be converted')\n    self.m2e_animOptChoice.SetToolTipString('Specifies how animation from the Maya file is converted to egg, if at all')\n    self.m2e_startFrameChk.SetToolTipString('Starting frame of animation to exctract. For pose, this is the one frame of animation to extract')\n    self.m2e_endFrameChk.SetToolTipString('Ending frame of animation to exctract')\n    self.m2e_frameRateInChk.SetToolTipString('Frame rate (frames per second) of the input Maya file')\n    self.m2e_frameRateOutChk.SetToolTipString('Frame rate (frames per second) of the generated animation file. If this is specified, the animation speed is scaled by the appropriate factor based on the frame rate of the input file')\n    self.m2e_charNameChk.SetToolTipString('Name of the animation character. This should match between all of the model files and all of the channel files for a particular model and its associated channels')\n    self.m2e_legacyShaderChk.SetToolTipString('Turn off modern (Phong) shader generation and treat all shaders as if they were Lamberts (legacy)')\n    self.m2e_copyTexChk.SetToolTipString('Copy the textures to a textures sub directory relative to the written out egg file')\n    self.m2e_copyTexPathTxt.SetToolTipString('Copy the textures to a textures sub directory relative to the written out egg file')\n    self.m2e_copyTexPathBtn.SetToolTipString('Specify texture directory')\n    self.m2e_pathReplaceChk.SetToolTipString('Remap prefixes for texture and external reference paths')\n    self.m2e_pathReplaceTxt.SetToolTipString('Remap prefixes for texture and external reference paths. Ex: orig_prefix=replacement_prefix')\n    self.m2e_pathReplaceBtn.SetToolTipString('Replace path prefixes for all Maya2Egg commands for selected batch commands')\n    self.e2b_useCurrEggChk.SetValue(0)\n    self.e2b_useCurrEggChk.Enable(True)\n    self.e2b_eggFileTxt.SetMinSize((230, 21))\n    self.e2b_exportDestTxt.SetMinSize((230, 21))\n    self.egg2bam_panel.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_3DFACE))\n    self.e2b_eggFileBtn.SetMinSize((-1, 23))\n    self.e2b_exportDestBtn.SetMinSize((-1, 23))\n    self.e2b_bamBatchOutputBtn.SetMinSize((-1, 23))\n    self.e2b_bamBatchOutputLbl.SetToolTipString(\"Generate and add to batch bam2egg commands from currently selected batch items' outputs\")\n    self.e2b_bamBatchOutputBtn.SetToolTipString(\"Generate and add to batch bam2egg commands from currently selected batch items' outputs\")\n    self.e2b_eggFileLbl.SetToolTipString('Input egg file to be converted')\n    self.e2b_eggFileTxt.SetToolTipString('Input egg file to be converted')\n    self.e2b_eggFileBtn.SetToolTipString('Select an input egg file to be converted')\n    self.e2b_exportDestLbl.SetToolTipString('Destination of the exported file')\n    self.e2b_exportDestTxt.SetToolTipString('Destination of the exported file')\n    self.e2b_exportDestBtn.SetToolTipString('Select the destination of the exported file')\n    self.e2b_useCurrEggChk.SetToolTipString('Use output from Maya2Egg panel as the input file')\n    self.e2b_flattenChk.SetToolTipString('Flatten the egg hierarchy after it is loaded (unnecessary nodes are eliminated)')\n    self.e2b_embedTexChk.SetToolTipString('Record texture data directly in the bam file, instead of storing a reference to the texture elsewhere on disk')\n    self.eggRename_panel.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_3DFACE))\n    self.rename_eggFilesTree.SetMinSize((230, 120))\n    self.rename_exportDirTxt.SetMinSize((230, 21))\n    self.rename_exportFileTxt.SetMinSize((230, 21))\n    self.rename_stripPrefixTxt.SetMinSize((260, 21))\n    self.rename_addEggBtn.SetMinSize((-1, 23))\n    self.rename_addFromBatchBtn.SetMinSize((-1, 23))\n    self.rename_removeEggBtn.SetMinSize((-1, 23))\n    self.rename_removeAllEggsBtn.SetMinSize((-1, 23))\n    self.rename_exportDirBtn.SetMinSize((-1, 23))\n    self.rename_exportFileBtn.SetMinSize((-1, 23))\n    self.eggOptChar_panel.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_3DFACE))\n    self.optchar_eggFilesTree.SetMinSize((230, 120))\n    self.optchar_exportDirTxt.SetMinSize((230, 21))\n    self.optchar_exportFileTxt.SetMinSize((230, 21))\n    self.optchar_keepJointsTxt.SetMinSize((245, 21))\n    self.optchar_dropJointsTxt.SetMinSize((245, 21))\n    self.optchar_exposeJointsTxt.SetMinSize((245, 21))\n    self.optchar_flagGeometryTxt.SetMinSize((245, 21))\n    self.optchar_addEggBtn.SetMinSize((-1, 23))\n    self.optchar_addFromBatchBtn.SetMinSize((-1, 23))\n    self.optchar_removeEggBtn.SetMinSize((-1, 23))\n    self.optchar_removeAllEggsBtn.SetMinSize((-1, 23))\n    self.optchar_exportDirBtn.SetMinSize((-1, 23))\n    self.optchar_exportFileBtn.SetMinSize((-1, 23))\n    self.optchar_exportInPlaceChk.SetToolTipString('Input egg files will be rewritten in place with the results (original input files are lost)')\n    self.optchar_keepAllJointsChk.SetToolTipString('Keep all joints in the character, except those named explicitily by drop')\n    self.optchar_keepJointsChk.SetToolTipString(\"Keep the specified joints in the character, even if they don't appear to be needed by the animation\")\n    self.optchar_dropJointsChk.SetToolTipString('Remove the specified joints in the character, even if they appear to be needed by the animation')\n    self.optchar_exposeJointsChk.SetToolTipString('Expose the specified joints in the character by flagging them with a DCS attribute, so each one can be found in the scene graph when the character is loaded and object can be parented to it')\n    self.optchar_flagGeometryChk.SetToolTipString('Assign the indicated name to the geometry within the given nodes. This will make the geometry visible as a node in the resulting character model when loaded in the scene graph')\n    self.optchar_dartChoice.SetToolTipString('Change the dart value in the input eggs')\n    self.eggPalettize_panel.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_3DFACE))\n    self.palettize_eggFilesTree.SetMinSize((230, 120))\n    self.palettize_exportDirTxt.SetMinSize((230, 21))\n    self.palettize_exportFileTxt.SetMinSize((230, 21))\n    self.palettize_exportTexTxt.SetMinSize((230, 21))\n    self.palettize_saveTxaTxt.SetMinSize((230, 21))\n    self.palettize_imageTypeChoice.SetSelection(2)\n    self.palettize_marginTxt.SetValue(2)\n    self.palettize_sizeWidthTxt.SetMinSize((60, 21))\n    self.palettize_sizeHeightTxt.SetMinSize((60, 21))\n    self.palettize_redTxt.SetMinSize((60, 21))\n    self.palettize_greenTxt.SetMinSize((60, 21))\n    self.palettize_blueTxt.SetMinSize((60, 21))\n    self.palettize_alphaTxt.SetMinSize((60, 21))\n    self.palettize_marginTxt.SetMinSize((-1, 21))\n    self.palettize_coverageTxt.SetMinSize((-1, 21))\n    self.palettize_addEggBtn.SetMinSize((-1, 23))\n    self.palettize_addFromBatchBtn.SetMinSize((-1, 23))\n    self.palettize_removeEggBtn.SetMinSize((-1, 23))\n    self.palettize_removeAllEggsBtn.SetMinSize((-1, 23))\n    self.palettize_exportDirBtn.SetMinSize((-1, 23))\n    self.palettize_exportFileBtn.SetMinSize((-1, 23))\n    self.palettize_exportTexBtn.SetMinSize((-1, 23))\n    self.palettize_saveTxaBtn.SetMinSize((-1, 23))\n    self.palettize_loadTxaBtn.SetMinSize((-1, 23))\n    self.palettize_exportInPlaceChk.SetToolTipString('Input egg files will be rewritten in place with the results (original input files are lost)')\n    self.palettize_exportDirLbl.SetToolTipString('Destination directory for the exported files')\n    self.palettize_exportDirTxt.SetToolTipString('Destination directory for the exported files')\n    self.palettize_exportDirBtn.SetToolTipString('Select the destination directory for the exported files')\n    self.palettize_exportFileLbl.SetToolTipString('Destination of the exported file')\n    self.palettize_exportFileTxt.SetToolTipString('Destination of the exported file')\n    self.palettize_exportFileBtn.SetToolTipString('Select the destination of the exported file')\n    self.palettize_exportTexLbl.SetToolTipString('Destination folder of the exported textures')\n    self.palettize_exportTexTxt.SetToolTipString('Destination folder of the exported textures')\n    self.palettize_exportTexBtn.SetToolTipString('Select the destination folder of the exported textures')\n    self.palettize_addEggBtn.SetToolTipString('Add an egg file/s to be exported')\n    self.palettize_addFromBatchBtn.SetToolTipString('Add egg file/s to be exported from the batch list')\n    self.palettize_removeEggBtn.SetToolTipString('Remove the selected egg file')\n    self.palettize_removeAllEggsBtn.SetToolTipString('Remove all egg files')\n    self.palettize_sizeLbl.SetToolTipString('Specifies the size of the palette images to be created')\n    self.palettize_sizeWidthTxt.SetToolTipString('Width of the palette images to be created')\n    self.palettize_sizeHeightTxt.SetToolTipString('Height of the palette images to be created')\n    self.palettize_powerOf2Chk.SetToolTipString('Specifies whether texures should be forced to a power of two size when they are placed within a palette')\n    self.palettize_imageTypeLbl.SetToolTipString('Image type of each generated texture palette')\n    self.palettize_imageTypeChoice.SetToolTipString('Image type of each generated texture palette')\n    self.palettize_colorLbl.SetToolTipString(\"Color of the palette's background\")\n    self.palettize_redLbl.SetToolTipString(\"Red value of the palette's background color\")\n    self.palettize_redTxt.SetToolTipString(\"Red value of the palette's background color\")\n    self.palettize_greenLbl.SetToolTipString(\"Green value of the palette's background color\")\n    self.palettize_greenTxt.SetToolTipString(\"Green value of the palette's background color\")\n    self.palettize_blueLbl.SetToolTipString(\"Blue value of the palette's background color\")\n    self.palettize_blueTxt.SetToolTipString(\"Blue value of the palette's background color\")\n    self.palettize_alphaLbl.SetToolTipString(\"Alpha value of the palette's background color\")\n    self.palettize_alphaTxt.SetToolTipString(\"Alpha value of the palette's background color\")\n    self.palettize_color_sizer_staticbox.SetToolTipString(\"Palette's background color\")\n    self.palettize_marginLbl.SetToolTipString('Specifies the amount of margin to apply to all textures that are placed within a palette image')\n    self.palettize_marginTxt.SetToolTipString('Specifies the amount of margin to apply to all textures that are placed within a palette image')\n    self.palettize_coverageLbl.SetToolTipString('Fraction of the area in the texture image that is actually used')\n    self.palettize_coverageTxt.SetToolTipString('Fraction of the area in the texture image that is actually used')\n    self.palettize_saveTxaLbl.SetToolTipString('Attributes (.txa) file')\n    self.palettize_saveTxaTxt.SetToolTipString('Attributes (.txa) file')\n    self.palettize_loadTxaBtn.SetToolTipString('Choose attributes file (.txa)')\n    self.palettize_saveTxaBtn.SetToolTipString('Save current attributes to the .txa file')\n    self.toolComboBox.SetSelection(0)\n    self.batch_panel.SetMinSize((2000, 608))\n    self.batchTree.SetMinSize((2000, 524))\n    self.loadBatchButton.SetMinSize((-1, 23))\n    self.saveBatchButton.SetMinSize((-1, 23))\n    self.sortBatchButton.SetMinSize((-1, 23))\n    self.changePathsButton.SetMinSize((-1, 23))\n    self.editSelBatchButton.SetMinSize((-1, 23))\n    self.removeSelBatchButton.SetMinSize((-1, 23))\n    self.removeAllBatchButton.SetMinSize((-1, 23))\n    self.console_panel.SetMinSize((2000, 1000))\n    self.consoleOutputTxt.SetMinSize((2000, 1000))\n    self.consoleOutputTxt.SetBackgroundColour(wx.Colour(192, 192, 192))\n    self.consoleOutputTxt.SetToolTipString('maya2egg console output appears here when batch process is running')\n    self.consoleOutputTxt.Enable(True)\n    self.runBatchButton.SetMinSize((-1, 23))\n    self.clearConsoleButton.SetMinSize((-1, 23))\n    self.runPviewButton.SetMinSize((-1, 23))\n    self.ignoreModDates.SetValue(True)\n    self.pandaPathTxt.SetMinSize((200, 21))\n    self.loadPandaPathBtn.SetMinSize((-1, 23))\n    self.pandaPathTxt.SetBackgroundColour(wx.Colour(192, 192, 192))\n    self.ignoreModDates.SetToolTipString('Use this check box to export all the mb files regardless if they have been modified since the last export')\n    self.pandaPathTxt.SetToolTipString('Select the particular installed version of Panda3D, if not chosen the first entry in the system path is used')\n    self.main_panel.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_3DFACE))\n    self.simple_panel.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_3DFACE))\n    self.SetStatusText('Welcome to Panda3D Tools GUI')",
            "def __set_properties(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.SetTitle('Panda3D Tools GUI')\n    self.simple_exportDestTxt.SetMinSize((230, 21))\n    self.simple_mayaFileTxt.SetMinSize((230, 21))\n    self.simple_mayaVerComboBox.SetSelection(9)\n    self.simple_animOptChoice.SetSelection(1)\n    self.statusBar.SetStatusWidths([-1])\n    self.simple_mayaFileBtn.SetMinSize((-1, 23))\n    self.simple_exportDestBtn.SetMinSize((-1, 23))\n    self.simple_runExportBtn.SetMinSize((-1, 23))\n    self.batchItemNameTxt.SetMinSize((210, 21))\n    self.addToBatchBtn.SetMinSize((-1, 23))\n    self.m2e_mayaFileTxt.SetMinSize((230, 21))\n    self.m2e_exportDestTxt.SetMinSize((230, 21))\n    self.m2e_mayaVerComboBox.SetSelection(1)\n    self.m2e_mayaUnitsComboBox.SetSelection(1)\n    self.m2e_pandaUnitsComboBox.SetSelection(1)\n    self.m2e_subrootsTxt.SetMinSize((235, 21))\n    self.m2e_subsetsTxt.SetMinSize((235, 21))\n    self.m2e_excludesTxt.SetMinSize((235, 21))\n    self.m2e_animOptChoice.SetSelection(1)\n    self.m2e_charNameTxt.SetMinSize((283, 21))\n    self.m2e_copyTexPathTxt.SetMinSize((218, 21))\n    self.m2e_pathReplaceTxt.SetMinSize((218, 21))\n    self.m2e_mayaFileBtn.SetMinSize((-1, 23))\n    self.m2e_exportDestBtn.SetMinSize((-1, 23))\n    self.m2e_copyTexPathBtn.SetMinSize((-1, 23))\n    self.m2e_pathReplaceBtn.SetMinSize((-1, 23))\n    self.m2e_startFrameSpin.SetMinSize((-1, 21))\n    self.m2e_endFrameSpin.SetMinSize((-1, 21))\n    self.m2e_frameRateInSpin.SetMinSize((-1, 21))\n    self.m2e_frameRateOutSpin.SetMinSize((-1, 21))\n    self.m2e_mayaFileLbl.SetToolTipString('Maya file to be exported')\n    self.m2e_mayaFileTxt.SetToolTipString('Maya file to be exported')\n    self.m2e_mayaFileBtn.SetToolTipString('Select a maya file to be exported')\n    self.m2e_exportDestLbl.SetToolTipString('Destination of the exported file')\n    self.m2e_exportDestTxt.SetToolTipString('Destination of the exported file')\n    self.m2e_exportDestBtn.SetToolTipString('Select the destination of the exported file')\n    self.m2e_mayaVerLbl.SetToolTipString('Version of the maya exporter to use, must match version of *.mb file')\n    self.m2e_mayaVerComboBox.SetToolTipString('Version of the maya exporter to use, must match version of *.mb file')\n    self.m2e_mayaUnitsLbl.SetToolTipString('The units of the input Maya file')\n    self.m2e_mayaUnitsComboBox.SetToolTipString('defaults to centimeters')\n    self.m2e_pandaUnitsLbl.SetToolTipString('The units of the output egg file')\n    self.m2e_pandaUnitsComboBox.SetToolTipString('defaults to centimeters')\n    self.m2e_backfaceChk.SetToolTipString('Enable/Disable backface rendering of polygons in the egg file (default is off)')\n    self.m2e_polygonOutputChk.SetToolTipString('Generate polygon output only. Tesselate all NURBS surfaces to polygons via the built-in Maya tesselator')\n    self.m2e_tbnallChk.SetToolTipString('Calculate the tangents and binormals for all texture coordinate sets (for normal maps, etc)')\n    self.m2e_subrootsChk.SetToolTipString('Export specified subroots of the geometry in the Maya file to be converted')\n    self.m2e_subrootsTxt.SetToolTipString('Export specified subroots of the geometry in the Maya file to be converted')\n    self.m2e_subsetsChk.SetToolTipString('Export specified subsets of the geometry in the Maya file to be converted')\n    self.m2e_subsetsTxt.SetToolTipString('Export specified subsets of the geometry in the Maya file to be converted')\n    self.m2e_excludesChk.SetToolTipString('Exclude specified subsets of the geometry in the Maya file to be converted')\n    self.m2e_excludesTxt.SetToolTipString('Exclude specified subsets of the geometry in the Maya file to be converted')\n    self.m2e_animOptChoice.SetToolTipString('Specifies how animation from the Maya file is converted to egg, if at all')\n    self.m2e_startFrameChk.SetToolTipString('Starting frame of animation to exctract. For pose, this is the one frame of animation to extract')\n    self.m2e_endFrameChk.SetToolTipString('Ending frame of animation to exctract')\n    self.m2e_frameRateInChk.SetToolTipString('Frame rate (frames per second) of the input Maya file')\n    self.m2e_frameRateOutChk.SetToolTipString('Frame rate (frames per second) of the generated animation file. If this is specified, the animation speed is scaled by the appropriate factor based on the frame rate of the input file')\n    self.m2e_charNameChk.SetToolTipString('Name of the animation character. This should match between all of the model files and all of the channel files for a particular model and its associated channels')\n    self.m2e_legacyShaderChk.SetToolTipString('Turn off modern (Phong) shader generation and treat all shaders as if they were Lamberts (legacy)')\n    self.m2e_copyTexChk.SetToolTipString('Copy the textures to a textures sub directory relative to the written out egg file')\n    self.m2e_copyTexPathTxt.SetToolTipString('Copy the textures to a textures sub directory relative to the written out egg file')\n    self.m2e_copyTexPathBtn.SetToolTipString('Specify texture directory')\n    self.m2e_pathReplaceChk.SetToolTipString('Remap prefixes for texture and external reference paths')\n    self.m2e_pathReplaceTxt.SetToolTipString('Remap prefixes for texture and external reference paths. Ex: orig_prefix=replacement_prefix')\n    self.m2e_pathReplaceBtn.SetToolTipString('Replace path prefixes for all Maya2Egg commands for selected batch commands')\n    self.e2b_useCurrEggChk.SetValue(0)\n    self.e2b_useCurrEggChk.Enable(True)\n    self.e2b_eggFileTxt.SetMinSize((230, 21))\n    self.e2b_exportDestTxt.SetMinSize((230, 21))\n    self.egg2bam_panel.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_3DFACE))\n    self.e2b_eggFileBtn.SetMinSize((-1, 23))\n    self.e2b_exportDestBtn.SetMinSize((-1, 23))\n    self.e2b_bamBatchOutputBtn.SetMinSize((-1, 23))\n    self.e2b_bamBatchOutputLbl.SetToolTipString(\"Generate and add to batch bam2egg commands from currently selected batch items' outputs\")\n    self.e2b_bamBatchOutputBtn.SetToolTipString(\"Generate and add to batch bam2egg commands from currently selected batch items' outputs\")\n    self.e2b_eggFileLbl.SetToolTipString('Input egg file to be converted')\n    self.e2b_eggFileTxt.SetToolTipString('Input egg file to be converted')\n    self.e2b_eggFileBtn.SetToolTipString('Select an input egg file to be converted')\n    self.e2b_exportDestLbl.SetToolTipString('Destination of the exported file')\n    self.e2b_exportDestTxt.SetToolTipString('Destination of the exported file')\n    self.e2b_exportDestBtn.SetToolTipString('Select the destination of the exported file')\n    self.e2b_useCurrEggChk.SetToolTipString('Use output from Maya2Egg panel as the input file')\n    self.e2b_flattenChk.SetToolTipString('Flatten the egg hierarchy after it is loaded (unnecessary nodes are eliminated)')\n    self.e2b_embedTexChk.SetToolTipString('Record texture data directly in the bam file, instead of storing a reference to the texture elsewhere on disk')\n    self.eggRename_panel.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_3DFACE))\n    self.rename_eggFilesTree.SetMinSize((230, 120))\n    self.rename_exportDirTxt.SetMinSize((230, 21))\n    self.rename_exportFileTxt.SetMinSize((230, 21))\n    self.rename_stripPrefixTxt.SetMinSize((260, 21))\n    self.rename_addEggBtn.SetMinSize((-1, 23))\n    self.rename_addFromBatchBtn.SetMinSize((-1, 23))\n    self.rename_removeEggBtn.SetMinSize((-1, 23))\n    self.rename_removeAllEggsBtn.SetMinSize((-1, 23))\n    self.rename_exportDirBtn.SetMinSize((-1, 23))\n    self.rename_exportFileBtn.SetMinSize((-1, 23))\n    self.eggOptChar_panel.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_3DFACE))\n    self.optchar_eggFilesTree.SetMinSize((230, 120))\n    self.optchar_exportDirTxt.SetMinSize((230, 21))\n    self.optchar_exportFileTxt.SetMinSize((230, 21))\n    self.optchar_keepJointsTxt.SetMinSize((245, 21))\n    self.optchar_dropJointsTxt.SetMinSize((245, 21))\n    self.optchar_exposeJointsTxt.SetMinSize((245, 21))\n    self.optchar_flagGeometryTxt.SetMinSize((245, 21))\n    self.optchar_addEggBtn.SetMinSize((-1, 23))\n    self.optchar_addFromBatchBtn.SetMinSize((-1, 23))\n    self.optchar_removeEggBtn.SetMinSize((-1, 23))\n    self.optchar_removeAllEggsBtn.SetMinSize((-1, 23))\n    self.optchar_exportDirBtn.SetMinSize((-1, 23))\n    self.optchar_exportFileBtn.SetMinSize((-1, 23))\n    self.optchar_exportInPlaceChk.SetToolTipString('Input egg files will be rewritten in place with the results (original input files are lost)')\n    self.optchar_keepAllJointsChk.SetToolTipString('Keep all joints in the character, except those named explicitily by drop')\n    self.optchar_keepJointsChk.SetToolTipString(\"Keep the specified joints in the character, even if they don't appear to be needed by the animation\")\n    self.optchar_dropJointsChk.SetToolTipString('Remove the specified joints in the character, even if they appear to be needed by the animation')\n    self.optchar_exposeJointsChk.SetToolTipString('Expose the specified joints in the character by flagging them with a DCS attribute, so each one can be found in the scene graph when the character is loaded and object can be parented to it')\n    self.optchar_flagGeometryChk.SetToolTipString('Assign the indicated name to the geometry within the given nodes. This will make the geometry visible as a node in the resulting character model when loaded in the scene graph')\n    self.optchar_dartChoice.SetToolTipString('Change the dart value in the input eggs')\n    self.eggPalettize_panel.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_3DFACE))\n    self.palettize_eggFilesTree.SetMinSize((230, 120))\n    self.palettize_exportDirTxt.SetMinSize((230, 21))\n    self.palettize_exportFileTxt.SetMinSize((230, 21))\n    self.palettize_exportTexTxt.SetMinSize((230, 21))\n    self.palettize_saveTxaTxt.SetMinSize((230, 21))\n    self.palettize_imageTypeChoice.SetSelection(2)\n    self.palettize_marginTxt.SetValue(2)\n    self.palettize_sizeWidthTxt.SetMinSize((60, 21))\n    self.palettize_sizeHeightTxt.SetMinSize((60, 21))\n    self.palettize_redTxt.SetMinSize((60, 21))\n    self.palettize_greenTxt.SetMinSize((60, 21))\n    self.palettize_blueTxt.SetMinSize((60, 21))\n    self.palettize_alphaTxt.SetMinSize((60, 21))\n    self.palettize_marginTxt.SetMinSize((-1, 21))\n    self.palettize_coverageTxt.SetMinSize((-1, 21))\n    self.palettize_addEggBtn.SetMinSize((-1, 23))\n    self.palettize_addFromBatchBtn.SetMinSize((-1, 23))\n    self.palettize_removeEggBtn.SetMinSize((-1, 23))\n    self.palettize_removeAllEggsBtn.SetMinSize((-1, 23))\n    self.palettize_exportDirBtn.SetMinSize((-1, 23))\n    self.palettize_exportFileBtn.SetMinSize((-1, 23))\n    self.palettize_exportTexBtn.SetMinSize((-1, 23))\n    self.palettize_saveTxaBtn.SetMinSize((-1, 23))\n    self.palettize_loadTxaBtn.SetMinSize((-1, 23))\n    self.palettize_exportInPlaceChk.SetToolTipString('Input egg files will be rewritten in place with the results (original input files are lost)')\n    self.palettize_exportDirLbl.SetToolTipString('Destination directory for the exported files')\n    self.palettize_exportDirTxt.SetToolTipString('Destination directory for the exported files')\n    self.palettize_exportDirBtn.SetToolTipString('Select the destination directory for the exported files')\n    self.palettize_exportFileLbl.SetToolTipString('Destination of the exported file')\n    self.palettize_exportFileTxt.SetToolTipString('Destination of the exported file')\n    self.palettize_exportFileBtn.SetToolTipString('Select the destination of the exported file')\n    self.palettize_exportTexLbl.SetToolTipString('Destination folder of the exported textures')\n    self.palettize_exportTexTxt.SetToolTipString('Destination folder of the exported textures')\n    self.palettize_exportTexBtn.SetToolTipString('Select the destination folder of the exported textures')\n    self.palettize_addEggBtn.SetToolTipString('Add an egg file/s to be exported')\n    self.palettize_addFromBatchBtn.SetToolTipString('Add egg file/s to be exported from the batch list')\n    self.palettize_removeEggBtn.SetToolTipString('Remove the selected egg file')\n    self.palettize_removeAllEggsBtn.SetToolTipString('Remove all egg files')\n    self.palettize_sizeLbl.SetToolTipString('Specifies the size of the palette images to be created')\n    self.palettize_sizeWidthTxt.SetToolTipString('Width of the palette images to be created')\n    self.palettize_sizeHeightTxt.SetToolTipString('Height of the palette images to be created')\n    self.palettize_powerOf2Chk.SetToolTipString('Specifies whether texures should be forced to a power of two size when they are placed within a palette')\n    self.palettize_imageTypeLbl.SetToolTipString('Image type of each generated texture palette')\n    self.palettize_imageTypeChoice.SetToolTipString('Image type of each generated texture palette')\n    self.palettize_colorLbl.SetToolTipString(\"Color of the palette's background\")\n    self.palettize_redLbl.SetToolTipString(\"Red value of the palette's background color\")\n    self.palettize_redTxt.SetToolTipString(\"Red value of the palette's background color\")\n    self.palettize_greenLbl.SetToolTipString(\"Green value of the palette's background color\")\n    self.palettize_greenTxt.SetToolTipString(\"Green value of the palette's background color\")\n    self.palettize_blueLbl.SetToolTipString(\"Blue value of the palette's background color\")\n    self.palettize_blueTxt.SetToolTipString(\"Blue value of the palette's background color\")\n    self.palettize_alphaLbl.SetToolTipString(\"Alpha value of the palette's background color\")\n    self.palettize_alphaTxt.SetToolTipString(\"Alpha value of the palette's background color\")\n    self.palettize_color_sizer_staticbox.SetToolTipString(\"Palette's background color\")\n    self.palettize_marginLbl.SetToolTipString('Specifies the amount of margin to apply to all textures that are placed within a palette image')\n    self.palettize_marginTxt.SetToolTipString('Specifies the amount of margin to apply to all textures that are placed within a palette image')\n    self.palettize_coverageLbl.SetToolTipString('Fraction of the area in the texture image that is actually used')\n    self.palettize_coverageTxt.SetToolTipString('Fraction of the area in the texture image that is actually used')\n    self.palettize_saveTxaLbl.SetToolTipString('Attributes (.txa) file')\n    self.palettize_saveTxaTxt.SetToolTipString('Attributes (.txa) file')\n    self.palettize_loadTxaBtn.SetToolTipString('Choose attributes file (.txa)')\n    self.palettize_saveTxaBtn.SetToolTipString('Save current attributes to the .txa file')\n    self.toolComboBox.SetSelection(0)\n    self.batch_panel.SetMinSize((2000, 608))\n    self.batchTree.SetMinSize((2000, 524))\n    self.loadBatchButton.SetMinSize((-1, 23))\n    self.saveBatchButton.SetMinSize((-1, 23))\n    self.sortBatchButton.SetMinSize((-1, 23))\n    self.changePathsButton.SetMinSize((-1, 23))\n    self.editSelBatchButton.SetMinSize((-1, 23))\n    self.removeSelBatchButton.SetMinSize((-1, 23))\n    self.removeAllBatchButton.SetMinSize((-1, 23))\n    self.console_panel.SetMinSize((2000, 1000))\n    self.consoleOutputTxt.SetMinSize((2000, 1000))\n    self.consoleOutputTxt.SetBackgroundColour(wx.Colour(192, 192, 192))\n    self.consoleOutputTxt.SetToolTipString('maya2egg console output appears here when batch process is running')\n    self.consoleOutputTxt.Enable(True)\n    self.runBatchButton.SetMinSize((-1, 23))\n    self.clearConsoleButton.SetMinSize((-1, 23))\n    self.runPviewButton.SetMinSize((-1, 23))\n    self.ignoreModDates.SetValue(True)\n    self.pandaPathTxt.SetMinSize((200, 21))\n    self.loadPandaPathBtn.SetMinSize((-1, 23))\n    self.pandaPathTxt.SetBackgroundColour(wx.Colour(192, 192, 192))\n    self.ignoreModDates.SetToolTipString('Use this check box to export all the mb files regardless if they have been modified since the last export')\n    self.pandaPathTxt.SetToolTipString('Select the particular installed version of Panda3D, if not chosen the first entry in the system path is used')\n    self.main_panel.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_3DFACE))\n    self.simple_panel.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_3DFACE))\n    self.SetStatusText('Welcome to Panda3D Tools GUI')",
            "def __set_properties(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.SetTitle('Panda3D Tools GUI')\n    self.simple_exportDestTxt.SetMinSize((230, 21))\n    self.simple_mayaFileTxt.SetMinSize((230, 21))\n    self.simple_mayaVerComboBox.SetSelection(9)\n    self.simple_animOptChoice.SetSelection(1)\n    self.statusBar.SetStatusWidths([-1])\n    self.simple_mayaFileBtn.SetMinSize((-1, 23))\n    self.simple_exportDestBtn.SetMinSize((-1, 23))\n    self.simple_runExportBtn.SetMinSize((-1, 23))\n    self.batchItemNameTxt.SetMinSize((210, 21))\n    self.addToBatchBtn.SetMinSize((-1, 23))\n    self.m2e_mayaFileTxt.SetMinSize((230, 21))\n    self.m2e_exportDestTxt.SetMinSize((230, 21))\n    self.m2e_mayaVerComboBox.SetSelection(1)\n    self.m2e_mayaUnitsComboBox.SetSelection(1)\n    self.m2e_pandaUnitsComboBox.SetSelection(1)\n    self.m2e_subrootsTxt.SetMinSize((235, 21))\n    self.m2e_subsetsTxt.SetMinSize((235, 21))\n    self.m2e_excludesTxt.SetMinSize((235, 21))\n    self.m2e_animOptChoice.SetSelection(1)\n    self.m2e_charNameTxt.SetMinSize((283, 21))\n    self.m2e_copyTexPathTxt.SetMinSize((218, 21))\n    self.m2e_pathReplaceTxt.SetMinSize((218, 21))\n    self.m2e_mayaFileBtn.SetMinSize((-1, 23))\n    self.m2e_exportDestBtn.SetMinSize((-1, 23))\n    self.m2e_copyTexPathBtn.SetMinSize((-1, 23))\n    self.m2e_pathReplaceBtn.SetMinSize((-1, 23))\n    self.m2e_startFrameSpin.SetMinSize((-1, 21))\n    self.m2e_endFrameSpin.SetMinSize((-1, 21))\n    self.m2e_frameRateInSpin.SetMinSize((-1, 21))\n    self.m2e_frameRateOutSpin.SetMinSize((-1, 21))\n    self.m2e_mayaFileLbl.SetToolTipString('Maya file to be exported')\n    self.m2e_mayaFileTxt.SetToolTipString('Maya file to be exported')\n    self.m2e_mayaFileBtn.SetToolTipString('Select a maya file to be exported')\n    self.m2e_exportDestLbl.SetToolTipString('Destination of the exported file')\n    self.m2e_exportDestTxt.SetToolTipString('Destination of the exported file')\n    self.m2e_exportDestBtn.SetToolTipString('Select the destination of the exported file')\n    self.m2e_mayaVerLbl.SetToolTipString('Version of the maya exporter to use, must match version of *.mb file')\n    self.m2e_mayaVerComboBox.SetToolTipString('Version of the maya exporter to use, must match version of *.mb file')\n    self.m2e_mayaUnitsLbl.SetToolTipString('The units of the input Maya file')\n    self.m2e_mayaUnitsComboBox.SetToolTipString('defaults to centimeters')\n    self.m2e_pandaUnitsLbl.SetToolTipString('The units of the output egg file')\n    self.m2e_pandaUnitsComboBox.SetToolTipString('defaults to centimeters')\n    self.m2e_backfaceChk.SetToolTipString('Enable/Disable backface rendering of polygons in the egg file (default is off)')\n    self.m2e_polygonOutputChk.SetToolTipString('Generate polygon output only. Tesselate all NURBS surfaces to polygons via the built-in Maya tesselator')\n    self.m2e_tbnallChk.SetToolTipString('Calculate the tangents and binormals for all texture coordinate sets (for normal maps, etc)')\n    self.m2e_subrootsChk.SetToolTipString('Export specified subroots of the geometry in the Maya file to be converted')\n    self.m2e_subrootsTxt.SetToolTipString('Export specified subroots of the geometry in the Maya file to be converted')\n    self.m2e_subsetsChk.SetToolTipString('Export specified subsets of the geometry in the Maya file to be converted')\n    self.m2e_subsetsTxt.SetToolTipString('Export specified subsets of the geometry in the Maya file to be converted')\n    self.m2e_excludesChk.SetToolTipString('Exclude specified subsets of the geometry in the Maya file to be converted')\n    self.m2e_excludesTxt.SetToolTipString('Exclude specified subsets of the geometry in the Maya file to be converted')\n    self.m2e_animOptChoice.SetToolTipString('Specifies how animation from the Maya file is converted to egg, if at all')\n    self.m2e_startFrameChk.SetToolTipString('Starting frame of animation to exctract. For pose, this is the one frame of animation to extract')\n    self.m2e_endFrameChk.SetToolTipString('Ending frame of animation to exctract')\n    self.m2e_frameRateInChk.SetToolTipString('Frame rate (frames per second) of the input Maya file')\n    self.m2e_frameRateOutChk.SetToolTipString('Frame rate (frames per second) of the generated animation file. If this is specified, the animation speed is scaled by the appropriate factor based on the frame rate of the input file')\n    self.m2e_charNameChk.SetToolTipString('Name of the animation character. This should match between all of the model files and all of the channel files for a particular model and its associated channels')\n    self.m2e_legacyShaderChk.SetToolTipString('Turn off modern (Phong) shader generation and treat all shaders as if they were Lamberts (legacy)')\n    self.m2e_copyTexChk.SetToolTipString('Copy the textures to a textures sub directory relative to the written out egg file')\n    self.m2e_copyTexPathTxt.SetToolTipString('Copy the textures to a textures sub directory relative to the written out egg file')\n    self.m2e_copyTexPathBtn.SetToolTipString('Specify texture directory')\n    self.m2e_pathReplaceChk.SetToolTipString('Remap prefixes for texture and external reference paths')\n    self.m2e_pathReplaceTxt.SetToolTipString('Remap prefixes for texture and external reference paths. Ex: orig_prefix=replacement_prefix')\n    self.m2e_pathReplaceBtn.SetToolTipString('Replace path prefixes for all Maya2Egg commands for selected batch commands')\n    self.e2b_useCurrEggChk.SetValue(0)\n    self.e2b_useCurrEggChk.Enable(True)\n    self.e2b_eggFileTxt.SetMinSize((230, 21))\n    self.e2b_exportDestTxt.SetMinSize((230, 21))\n    self.egg2bam_panel.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_3DFACE))\n    self.e2b_eggFileBtn.SetMinSize((-1, 23))\n    self.e2b_exportDestBtn.SetMinSize((-1, 23))\n    self.e2b_bamBatchOutputBtn.SetMinSize((-1, 23))\n    self.e2b_bamBatchOutputLbl.SetToolTipString(\"Generate and add to batch bam2egg commands from currently selected batch items' outputs\")\n    self.e2b_bamBatchOutputBtn.SetToolTipString(\"Generate and add to batch bam2egg commands from currently selected batch items' outputs\")\n    self.e2b_eggFileLbl.SetToolTipString('Input egg file to be converted')\n    self.e2b_eggFileTxt.SetToolTipString('Input egg file to be converted')\n    self.e2b_eggFileBtn.SetToolTipString('Select an input egg file to be converted')\n    self.e2b_exportDestLbl.SetToolTipString('Destination of the exported file')\n    self.e2b_exportDestTxt.SetToolTipString('Destination of the exported file')\n    self.e2b_exportDestBtn.SetToolTipString('Select the destination of the exported file')\n    self.e2b_useCurrEggChk.SetToolTipString('Use output from Maya2Egg panel as the input file')\n    self.e2b_flattenChk.SetToolTipString('Flatten the egg hierarchy after it is loaded (unnecessary nodes are eliminated)')\n    self.e2b_embedTexChk.SetToolTipString('Record texture data directly in the bam file, instead of storing a reference to the texture elsewhere on disk')\n    self.eggRename_panel.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_3DFACE))\n    self.rename_eggFilesTree.SetMinSize((230, 120))\n    self.rename_exportDirTxt.SetMinSize((230, 21))\n    self.rename_exportFileTxt.SetMinSize((230, 21))\n    self.rename_stripPrefixTxt.SetMinSize((260, 21))\n    self.rename_addEggBtn.SetMinSize((-1, 23))\n    self.rename_addFromBatchBtn.SetMinSize((-1, 23))\n    self.rename_removeEggBtn.SetMinSize((-1, 23))\n    self.rename_removeAllEggsBtn.SetMinSize((-1, 23))\n    self.rename_exportDirBtn.SetMinSize((-1, 23))\n    self.rename_exportFileBtn.SetMinSize((-1, 23))\n    self.eggOptChar_panel.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_3DFACE))\n    self.optchar_eggFilesTree.SetMinSize((230, 120))\n    self.optchar_exportDirTxt.SetMinSize((230, 21))\n    self.optchar_exportFileTxt.SetMinSize((230, 21))\n    self.optchar_keepJointsTxt.SetMinSize((245, 21))\n    self.optchar_dropJointsTxt.SetMinSize((245, 21))\n    self.optchar_exposeJointsTxt.SetMinSize((245, 21))\n    self.optchar_flagGeometryTxt.SetMinSize((245, 21))\n    self.optchar_addEggBtn.SetMinSize((-1, 23))\n    self.optchar_addFromBatchBtn.SetMinSize((-1, 23))\n    self.optchar_removeEggBtn.SetMinSize((-1, 23))\n    self.optchar_removeAllEggsBtn.SetMinSize((-1, 23))\n    self.optchar_exportDirBtn.SetMinSize((-1, 23))\n    self.optchar_exportFileBtn.SetMinSize((-1, 23))\n    self.optchar_exportInPlaceChk.SetToolTipString('Input egg files will be rewritten in place with the results (original input files are lost)')\n    self.optchar_keepAllJointsChk.SetToolTipString('Keep all joints in the character, except those named explicitily by drop')\n    self.optchar_keepJointsChk.SetToolTipString(\"Keep the specified joints in the character, even if they don't appear to be needed by the animation\")\n    self.optchar_dropJointsChk.SetToolTipString('Remove the specified joints in the character, even if they appear to be needed by the animation')\n    self.optchar_exposeJointsChk.SetToolTipString('Expose the specified joints in the character by flagging them with a DCS attribute, so each one can be found in the scene graph when the character is loaded and object can be parented to it')\n    self.optchar_flagGeometryChk.SetToolTipString('Assign the indicated name to the geometry within the given nodes. This will make the geometry visible as a node in the resulting character model when loaded in the scene graph')\n    self.optchar_dartChoice.SetToolTipString('Change the dart value in the input eggs')\n    self.eggPalettize_panel.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_3DFACE))\n    self.palettize_eggFilesTree.SetMinSize((230, 120))\n    self.palettize_exportDirTxt.SetMinSize((230, 21))\n    self.palettize_exportFileTxt.SetMinSize((230, 21))\n    self.palettize_exportTexTxt.SetMinSize((230, 21))\n    self.palettize_saveTxaTxt.SetMinSize((230, 21))\n    self.palettize_imageTypeChoice.SetSelection(2)\n    self.palettize_marginTxt.SetValue(2)\n    self.palettize_sizeWidthTxt.SetMinSize((60, 21))\n    self.palettize_sizeHeightTxt.SetMinSize((60, 21))\n    self.palettize_redTxt.SetMinSize((60, 21))\n    self.palettize_greenTxt.SetMinSize((60, 21))\n    self.palettize_blueTxt.SetMinSize((60, 21))\n    self.palettize_alphaTxt.SetMinSize((60, 21))\n    self.palettize_marginTxt.SetMinSize((-1, 21))\n    self.palettize_coverageTxt.SetMinSize((-1, 21))\n    self.palettize_addEggBtn.SetMinSize((-1, 23))\n    self.palettize_addFromBatchBtn.SetMinSize((-1, 23))\n    self.palettize_removeEggBtn.SetMinSize((-1, 23))\n    self.palettize_removeAllEggsBtn.SetMinSize((-1, 23))\n    self.palettize_exportDirBtn.SetMinSize((-1, 23))\n    self.palettize_exportFileBtn.SetMinSize((-1, 23))\n    self.palettize_exportTexBtn.SetMinSize((-1, 23))\n    self.palettize_saveTxaBtn.SetMinSize((-1, 23))\n    self.palettize_loadTxaBtn.SetMinSize((-1, 23))\n    self.palettize_exportInPlaceChk.SetToolTipString('Input egg files will be rewritten in place with the results (original input files are lost)')\n    self.palettize_exportDirLbl.SetToolTipString('Destination directory for the exported files')\n    self.palettize_exportDirTxt.SetToolTipString('Destination directory for the exported files')\n    self.palettize_exportDirBtn.SetToolTipString('Select the destination directory for the exported files')\n    self.palettize_exportFileLbl.SetToolTipString('Destination of the exported file')\n    self.palettize_exportFileTxt.SetToolTipString('Destination of the exported file')\n    self.palettize_exportFileBtn.SetToolTipString('Select the destination of the exported file')\n    self.palettize_exportTexLbl.SetToolTipString('Destination folder of the exported textures')\n    self.palettize_exportTexTxt.SetToolTipString('Destination folder of the exported textures')\n    self.palettize_exportTexBtn.SetToolTipString('Select the destination folder of the exported textures')\n    self.palettize_addEggBtn.SetToolTipString('Add an egg file/s to be exported')\n    self.palettize_addFromBatchBtn.SetToolTipString('Add egg file/s to be exported from the batch list')\n    self.palettize_removeEggBtn.SetToolTipString('Remove the selected egg file')\n    self.palettize_removeAllEggsBtn.SetToolTipString('Remove all egg files')\n    self.palettize_sizeLbl.SetToolTipString('Specifies the size of the palette images to be created')\n    self.palettize_sizeWidthTxt.SetToolTipString('Width of the palette images to be created')\n    self.palettize_sizeHeightTxt.SetToolTipString('Height of the palette images to be created')\n    self.palettize_powerOf2Chk.SetToolTipString('Specifies whether texures should be forced to a power of two size when they are placed within a palette')\n    self.palettize_imageTypeLbl.SetToolTipString('Image type of each generated texture palette')\n    self.palettize_imageTypeChoice.SetToolTipString('Image type of each generated texture palette')\n    self.palettize_colorLbl.SetToolTipString(\"Color of the palette's background\")\n    self.palettize_redLbl.SetToolTipString(\"Red value of the palette's background color\")\n    self.palettize_redTxt.SetToolTipString(\"Red value of the palette's background color\")\n    self.palettize_greenLbl.SetToolTipString(\"Green value of the palette's background color\")\n    self.palettize_greenTxt.SetToolTipString(\"Green value of the palette's background color\")\n    self.palettize_blueLbl.SetToolTipString(\"Blue value of the palette's background color\")\n    self.palettize_blueTxt.SetToolTipString(\"Blue value of the palette's background color\")\n    self.palettize_alphaLbl.SetToolTipString(\"Alpha value of the palette's background color\")\n    self.palettize_alphaTxt.SetToolTipString(\"Alpha value of the palette's background color\")\n    self.palettize_color_sizer_staticbox.SetToolTipString(\"Palette's background color\")\n    self.palettize_marginLbl.SetToolTipString('Specifies the amount of margin to apply to all textures that are placed within a palette image')\n    self.palettize_marginTxt.SetToolTipString('Specifies the amount of margin to apply to all textures that are placed within a palette image')\n    self.palettize_coverageLbl.SetToolTipString('Fraction of the area in the texture image that is actually used')\n    self.palettize_coverageTxt.SetToolTipString('Fraction of the area in the texture image that is actually used')\n    self.palettize_saveTxaLbl.SetToolTipString('Attributes (.txa) file')\n    self.palettize_saveTxaTxt.SetToolTipString('Attributes (.txa) file')\n    self.palettize_loadTxaBtn.SetToolTipString('Choose attributes file (.txa)')\n    self.palettize_saveTxaBtn.SetToolTipString('Save current attributes to the .txa file')\n    self.toolComboBox.SetSelection(0)\n    self.batch_panel.SetMinSize((2000, 608))\n    self.batchTree.SetMinSize((2000, 524))\n    self.loadBatchButton.SetMinSize((-1, 23))\n    self.saveBatchButton.SetMinSize((-1, 23))\n    self.sortBatchButton.SetMinSize((-1, 23))\n    self.changePathsButton.SetMinSize((-1, 23))\n    self.editSelBatchButton.SetMinSize((-1, 23))\n    self.removeSelBatchButton.SetMinSize((-1, 23))\n    self.removeAllBatchButton.SetMinSize((-1, 23))\n    self.console_panel.SetMinSize((2000, 1000))\n    self.consoleOutputTxt.SetMinSize((2000, 1000))\n    self.consoleOutputTxt.SetBackgroundColour(wx.Colour(192, 192, 192))\n    self.consoleOutputTxt.SetToolTipString('maya2egg console output appears here when batch process is running')\n    self.consoleOutputTxt.Enable(True)\n    self.runBatchButton.SetMinSize((-1, 23))\n    self.clearConsoleButton.SetMinSize((-1, 23))\n    self.runPviewButton.SetMinSize((-1, 23))\n    self.ignoreModDates.SetValue(True)\n    self.pandaPathTxt.SetMinSize((200, 21))\n    self.loadPandaPathBtn.SetMinSize((-1, 23))\n    self.pandaPathTxt.SetBackgroundColour(wx.Colour(192, 192, 192))\n    self.ignoreModDates.SetToolTipString('Use this check box to export all the mb files regardless if they have been modified since the last export')\n    self.pandaPathTxt.SetToolTipString('Select the particular installed version of Panda3D, if not chosen the first entry in the system path is used')\n    self.main_panel.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_3DFACE))\n    self.simple_panel.SetBackgroundColour(wx.SystemSettings_GetColour(wx.SYS_COLOUR_3DFACE))\n    self.SetStatusText('Welcome to Panda3D Tools GUI')"
        ]
    },
    {
        "func_name": "__do_layout",
        "original": "def __do_layout(self):\n    tab_panel_sizer = wx.BoxSizer(wx.HORIZONTAL)\n    self.simple_options_sizer_staticbox.Lower()\n    simple_sizer = wx.FlexGridSizer(1, 1, 0, 0)\n    simple_options_static_sizer = wx.StaticBoxSizer(self.simple_options_sizer_staticbox, wx.VERTICAL)\n    file_flex_grid_sizer = wx.FlexGridSizer(3, 3, 0, 0)\n    file_flex_grid_sizer.Add(self.simple_mayaFileLbl, -1, wx.TOP, 5)\n    file_flex_grid_sizer.Add(self.simple_mayaFileTxt, -1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.simple_mayaFileBtn, -1, 0, 0)\n    file_flex_grid_sizer.Add(self.simple_exportDestLbl, -1, wx.TOP, 5)\n    file_flex_grid_sizer.Add(self.simple_exportDestTxt, -1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.simple_exportDestBtn, -1, 0, 0)\n    file_flex_grid_sizer.Add(self.simple_mayaVerLbl, 1, wx.TOP, 5)\n    file_flex_grid_sizer.Add(self.simple_mayaVerComboBox, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.simple_runExportBtn, -1, 0, 0)\n    simple_options_static_sizer.Add(file_flex_grid_sizer)\n    simple_options_static_sizer.Add(self.simple_animOptChoice)\n    self.simple_options_panel.SetSizer(simple_options_static_sizer)\n    simple_sizer.Add(self.simple_options_panel)\n    self.simple_panel.SetSizer(simple_sizer)\n    main_sizer = wx.FlexGridSizer(4, 1, 0, 0)\n    top_sizer = wx.FlexGridSizer(1, 2, 0, 0)\n    main_sizer.Add(top_sizer, 0, wx.EXPAND, 0)\n    top_left_sizer = wx.FlexGridSizer(3, 1, 0, 0)\n    top_right_sizer = wx.FlexGridSizer(3, 1, 0, 0)\n    top_sizer.Add(top_left_sizer, 0, wx.ALL | wx.EXPAND, 5)\n    top_sizer.Add(top_right_sizer, 0, wx.ALL | wx.EXPAND, 5)\n    top_left_sizer.Add(self.toolComboBox, 0, wx.ALL, 5)\n    self.tool_options_sizer_staticbox.Lower()\n    self.tool_options_static_sizer = wx.StaticBoxSizer(self.tool_options_sizer_staticbox, wx.VERTICAL)\n    maya2egg_grid_sizer = wx.FlexGridSizer(8, 1, 0, 0)\n    file_flex_grid_sizer = wx.FlexGridSizer(2, 3, 0, 0)\n    file_flex_grid_sizer.Add(self.m2e_mayaFileLbl, 1, wx.TOP, 5)\n    file_flex_grid_sizer.Add(self.m2e_mayaFileTxt, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.m2e_mayaFileBtn, 1, 0, 0)\n    file_flex_grid_sizer.Add(self.m2e_exportDestLbl, 1, wx.TOP, 5)\n    file_flex_grid_sizer.Add(self.m2e_exportDestTxt, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.m2e_exportDestBtn, 1, 0, 0)\n    maya2egg_grid_sizer.Add(file_flex_grid_sizer, 1, wx.ALL, 0)\n    maya_ver_sizer = wx.FlexGridSizer(1, 2, 0, 0)\n    maya_ver_sizer.Add(self.m2e_mayaVerLbl, 1, wx.TOP | wx.RIGHT, 3)\n    maya_ver_sizer.Add(self.m2e_mayaVerComboBox, 1, wx.LEFT, 3)\n    maya2egg_grid_sizer.Add(maya_ver_sizer, 1, wx.TOP, 3)\n    self.maya2egg_panel.SetSizer(maya2egg_grid_sizer)\n    self.tool_options_static_sizer.Add(self.maya2egg_panel, 1, wx.ALL | wx.EXPAND, 0)\n    self.m2e_options_panel_sizer_staticbox.Lower()\n    general_options_static_sizer = wx.StaticBoxSizer(self.m2e_options_panel_sizer_staticbox, wx.VERTICAL)\n    general_options_grid_sizer = wx.FlexGridSizer(6, 1, 0, 0)\n    units_sizer = wx.FlexGridSizer(1, 4, 0, 0)\n    units_sizer.Add(self.m2e_mayaUnitsLbl, 1, wx.ALL, 3)\n    units_sizer.Add(self.m2e_mayaUnitsComboBox, 1, wx.RIGHT, 6)\n    units_sizer.Add(self.m2e_pandaUnitsLbl, 1, wx.ALL, 3)\n    units_sizer.Add(self.m2e_pandaUnitsComboBox, 1, wx.ALL, 0)\n    general_options_grid_sizer.Add(units_sizer)\n    general_options_grid_sizer.Add(self.m2e_backfaceChk, 1, wx.ALL, 3)\n    general_options_grid_sizer.Add(self.m2e_polygonOutputChk, 1, wx.ALL, 3)\n    general_options_grid_sizer.Add(self.m2e_tbnallChk, 1, wx.ALL, 3)\n    subroots_sizer = wx.FlexGridSizer(3, 2, 0, 0)\n    subroots_sizer.Add(self.m2e_subrootsChk, 1, wx.ALL, 3)\n    subroots_sizer.Add(self.m2e_subrootsTxt, 1, wx.LEFT, 1)\n    subroots_sizer.Add(self.m2e_subsetsChk, 1, wx.ALL, 3)\n    subroots_sizer.Add(self.m2e_subsetsTxt, 1, wx.LEFT, 1)\n    subroots_sizer.Add(self.m2e_excludesChk, 1, wx.ALL, 3)\n    subroots_sizer.Add(self.m2e_excludesTxt, 1, wx.LEFT, 1)\n    general_options_grid_sizer.Add(subroots_sizer, 1, wx.ALL, 0)\n    general_options_static_sizer.Add(general_options_grid_sizer)\n    self.m2e_options_panel.SetSizer(general_options_static_sizer)\n    maya2egg_grid_sizer.Add(self.m2e_options_panel, 1, wx.TOP | wx.EXPAND, 10)\n    self.m2e_anim_options_sizer_staticbox.Lower()\n    animation_options_static_sizer = wx.StaticBoxSizer(self.m2e_anim_options_sizer_staticbox, wx.VERTICAL)\n    animation_options_grid_sizer = wx.FlexGridSizer(6, 1, 0, 0)\n    animation_options_grid_sizer.Add(self.m2e_animOptChoice, 1, wx.BOTTOM, 3)\n    frames_grid_sizer = wx.FlexGridSizer(4, 2, 0, 0)\n    frames_grid_sizer.Add(self.m2e_startFrameChk, 0, wx.ALL, 3)\n    frames_grid_sizer.Add(self.m2e_startFrameSpin, 0, 0, 0)\n    frames_grid_sizer.Add(self.m2e_endFrameChk, 0, wx.ALL, 3)\n    frames_grid_sizer.Add(self.m2e_endFrameSpin, 0, 0, 0)\n    frames_grid_sizer.Add(self.m2e_frameRateInChk, 0, wx.ALL, 3)\n    frames_grid_sizer.Add(self.m2e_frameRateInSpin, 0, 0, 0)\n    frames_grid_sizer.Add(self.m2e_frameRateOutChk, 0, wx.ALL, 3)\n    frames_grid_sizer.Add(self.m2e_frameRateOutSpin, 0, 0, 0)\n    animation_options_grid_sizer.Add(frames_grid_sizer, 1, wx.ALL, 0)\n    names_grid_sizer = wx.FlexGridSizer(1, 2, 0, 0)\n    names_grid_sizer.Add(self.m2e_charNameChk, 1, wx.ALL, 3)\n    names_grid_sizer.Add(self.m2e_charNameTxt, 1, wx.ALL, 0)\n    animation_options_grid_sizer.Add(names_grid_sizer, 1, wx.ALL, 0)\n    animation_options_static_sizer.Add(animation_options_grid_sizer)\n    self.m2e_anim_options_panel.SetSizer(animation_options_static_sizer)\n    maya2egg_grid_sizer.Add(self.m2e_anim_options_panel, 1, wx.TOP | wx.EXPAND, 10)\n    self.m2e_tex_options_sizer_staticbox.Lower()\n    tex_options_static_sizer = wx.StaticBoxSizer(self.m2e_tex_options_sizer_staticbox, wx.VERTICAL)\n    tex_options_grid_sizer = wx.FlexGridSizer(2, 1, 0, 0)\n    tex_options_grid_sizer.Add(self.m2e_legacyShaderChk, 1, wx.ALL, 3)\n    copytex_sizer = wx.FlexGridSizer(2, 3, 0, 0)\n    copytex_sizer.Add(self.m2e_copyTexChk, 1, wx.ALL, 3)\n    copytex_sizer.Add(self.m2e_copyTexPathTxt, 1, wx.TOP, 1)\n    copytex_sizer.Add(self.m2e_copyTexPathBtn, 1, wx.ALL, 0)\n    copytex_sizer.Add(self.m2e_pathReplaceChk, 1, wx.ALL, 3)\n    copytex_sizer.Add(self.m2e_pathReplaceTxt, 1, wx.TOP, 1)\n    copytex_sizer.Add(self.m2e_pathReplaceBtn, 1, wx.ALL, 0)\n    tex_options_grid_sizer.Add(copytex_sizer, 1, wx.ALL, 0)\n    tex_options_static_sizer.Add(tex_options_grid_sizer)\n    self.m2e_tex_options_panel.SetSizer(tex_options_static_sizer)\n    maya2egg_grid_sizer.Add(self.m2e_tex_options_panel, 1, wx.TOP | wx.EXPAND, 10)\n    self.tool_options_panel.SetSizer(self.tool_options_static_sizer)\n    top_left_sizer.Add(self.tool_options_panel, 1, wx.ALL | wx.EXPAND, 0)\n    batch_item_grid_sizer = wx.FlexGridSizer(1, 3, 0, 0)\n    batch_item_grid_sizer.Add(self.batchItemNameLbl, -1, wx.ALL, 4)\n    batch_item_grid_sizer.Add(self.batchItemNameTxt, -1, wx.ALL, 1)\n    batch_item_grid_sizer.Add(self.addToBatchBtn, -1, wx.LEFT, 5)\n    top_left_sizer.Add(batch_item_grid_sizer, 1, wx.TOP, 6)\n    egg2bam_grid_sizer = wx.FlexGridSizer(8, 1, 0, 0)\n    file_flex_grid_sizer = wx.FlexGridSizer(2, 3, 0, 0)\n    file_flex_grid_sizer.Add(self.e2b_eggFileLbl, 1, wx.TOP, 5)\n    file_flex_grid_sizer.Add(self.e2b_eggFileTxt, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.e2b_eggFileBtn, 1, 0, 0)\n    file_flex_grid_sizer.Add(self.e2b_exportDestLbl, 1, wx.TOP, 5)\n    file_flex_grid_sizer.Add(self.e2b_exportDestTxt, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.e2b_exportDestBtn, 1, 0, 0)\n    egg2bam_grid_sizer.Add(file_flex_grid_sizer, 1, wx.ALL, 0)\n    self.egg2bam_panel.SetSizer(egg2bam_grid_sizer)\n    self.tool_options_static_sizer.Add(self.egg2bam_panel, 1, wx.ALL, 0)\n    bam_batch_sizer = wx.FlexGridSizer(1, 2, 0, 0)\n    bam_batch_sizer.Add(self.e2b_bamBatchOutputLbl, 1, wx.TOP, 4)\n    bam_batch_sizer.Add(self.e2b_bamBatchOutputBtn, 1, wx.LEFT, 3)\n    egg2bam_grid_sizer.Add(bam_batch_sizer, 1, wx.TOP | wx.ALIGN_RIGHT, 5)\n    self.e2b_options_sizer_staticbox.Lower()\n    e2b_options_static_sizer = wx.StaticBoxSizer(self.e2b_options_sizer_staticbox, wx.VERTICAL)\n    e2b_options_grid_sizer = wx.FlexGridSizer(6, 1, 0, 0)\n    e2b_options_grid_sizer.Add(self.e2b_useCurrEggChk, 1, wx.ALL, 3)\n    e2b_options_grid_sizer.Add(self.e2b_flattenChk, 1, wx.ALL, 3)\n    e2b_options_grid_sizer.Add(self.e2b_embedTexChk, 1, wx.ALL, 3)\n    e2b_options_static_sizer.Add(e2b_options_grid_sizer)\n    self.e2b_options_panel.SetSizer(e2b_options_static_sizer)\n    egg2bam_grid_sizer.Add(self.e2b_options_panel, 1, wx.TOP | wx.EXPAND, 10)\n    eggRename_grid_sizer = wx.FlexGridSizer(8, 1, 0, 0)\n    file_flex_grid_sizer = wx.FlexGridSizer(4, 3, 0, 0)\n    file_flex_grid_sizer.Add(self.rename_eggFilesLbl, 1, wx.TOP, 5)\n    file_flex_grid_sizer.Add(self.rename_eggFilesTree, 1, wx.ALL, 1)\n    eggfiles_grid_sizer = wx.FlexGridSizer(4, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.rename_addEggBtn, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.rename_addFromBatchBtn, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.rename_removeEggBtn, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.rename_removeAllEggsBtn, 1, 0, 0)\n    file_flex_grid_sizer.Add(eggfiles_grid_sizer, 1, 0, 0)\n    file_flex_grid_sizer.Add(self.rename_exportDestLbl, 1, wx.TOP, 0)\n    file_flex_grid_sizer.Add(self.rename_exportInPlaceChk, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add((10, 2), 0, 0)\n    file_flex_grid_sizer.Add(self.rename_exportDirLbl, 1, wx.TOP | wx.ALIGN_RIGHT, 3)\n    file_flex_grid_sizer.Add(self.rename_exportDirTxt, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.rename_exportDirBtn, 1, 0, 0)\n    file_flex_grid_sizer.Add(self.rename_exportFileLbl, 1, wx.TOP | wx.ALIGN_RIGHT, 3)\n    file_flex_grid_sizer.Add(self.rename_exportFileTxt, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.rename_exportFileBtn, 1, 0, 0)\n    eggRename_grid_sizer.Add(file_flex_grid_sizer, 1, wx.ALL, 0)\n    self.eggRename_panel.SetSizer(eggRename_grid_sizer)\n    self.tool_options_static_sizer.Add(self.eggRename_panel, 1, wx.ALL | wx.EXPAND, 0)\n    self.rename_options_sizer_staticbox.Lower()\n    rename_options_static_sizer = wx.StaticBoxSizer(self.rename_options_sizer_staticbox, wx.VERTICAL)\n    rename_options_grid_sizer = wx.FlexGridSizer(6, 1, 0, 0)\n    prefix_sizer = wx.FlexGridSizer(2, 2, 0, 0)\n    prefix_sizer.Add(self.rename_stripPrefixChk, 1, wx.ALL, 3)\n    prefix_sizer.Add(self.rename_stripPrefixTxt, 1, wx.LEFT, 2)\n    rename_options_grid_sizer.Add(prefix_sizer, 1, wx.ALL, 0)\n    rename_options_static_sizer.Add(rename_options_grid_sizer)\n    self.rename_options_panel.SetSizer(rename_options_static_sizer)\n    eggRename_grid_sizer.Add(self.rename_options_panel, 1, wx.TOP | wx.EXPAND, 10)\n    eggOptChar_grid_sizer = wx.FlexGridSizer(8, 1, 0, 0)\n    file_flex_grid_sizer = wx.FlexGridSizer(4, 3, 0, 0)\n    file_flex_grid_sizer.Add(self.optchar_eggFilesLbl, 1, wx.TOP, 5)\n    file_flex_grid_sizer.Add(self.optchar_eggFilesTree, 1, wx.ALL, 1)\n    eggfiles_grid_sizer = wx.FlexGridSizer(4, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.optchar_addEggBtn, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.optchar_addFromBatchBtn, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.optchar_removeEggBtn, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.optchar_removeAllEggsBtn, 1, 0, 0)\n    file_flex_grid_sizer.Add(eggfiles_grid_sizer, 1, 0, 0)\n    file_flex_grid_sizer.Add(self.optchar_exportDestLbl, 1, wx.TOP, 0)\n    file_flex_grid_sizer.Add(self.optchar_exportInPlaceChk, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add((10, 2), 0, 0)\n    file_flex_grid_sizer.Add(self.optchar_exportDirLbl, 1, wx.TOP | wx.ALIGN_RIGHT, 3)\n    file_flex_grid_sizer.Add(self.optchar_exportDirTxt, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.optchar_exportDirBtn, 1, 0, 0)\n    file_flex_grid_sizer.Add(self.optchar_exportFileLbl, 1, wx.TOP | wx.ALIGN_RIGHT, 3)\n    file_flex_grid_sizer.Add(self.optchar_exportFileTxt, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.optchar_exportFileBtn, 1, 0, 0)\n    eggOptChar_grid_sizer.Add(file_flex_grid_sizer, 1, wx.ALL, 0)\n    self.eggOptChar_panel.SetSizer(eggOptChar_grid_sizer)\n    self.tool_options_static_sizer.Add(self.eggOptChar_panel, 1, wx.ALL | wx.EXPAND, 0)\n    self.optchar_options_sizer_staticbox.Lower()\n    optchar_options_static_sizer = wx.StaticBoxSizer(self.optchar_options_sizer_staticbox, wx.VERTICAL)\n    optchar_options_grid_sizer = wx.FlexGridSizer(6, 1, 0, 0)\n    joint_options_sizer = wx.FlexGridSizer(4, 2, 0, 0)\n    joint_options_sizer.Add(self.optchar_keepAllJointsChk, 1, wx.ALL, 3)\n    joint_options_sizer.Add((10, 0), 0, 0)\n    joint_options_sizer.Add(self.optchar_keepJointsChk, 1, wx.ALL, 3)\n    joint_options_sizer.Add(self.optchar_keepJointsTxt, 1, wx.LEFT, 2)\n    joint_options_sizer.Add(self.optchar_dropJointsChk, 1, wx.ALL, 3)\n    joint_options_sizer.Add(self.optchar_dropJointsTxt, 1, wx.LEFT, 2)\n    joint_options_sizer.Add(self.optchar_exposeJointsChk, 1, wx.ALL, 3)\n    joint_options_sizer.Add(self.optchar_exposeJointsTxt, 1, wx.LEFT, 2)\n    joint_options_sizer.Add(self.optchar_flagGeometryChk, 1, wx.ALL, 3)\n    joint_options_sizer.Add(self.optchar_flagGeometryTxt, 1, wx.LEFT, 2)\n    optchar_options_grid_sizer.Add(joint_options_sizer, 1, wx.ALL, 0)\n    optchar_options_grid_sizer.Add(self.optchar_dartChoice, 1, wx.ALL, 0)\n    optchar_options_static_sizer.Add(optchar_options_grid_sizer)\n    self.optchar_options_panel.SetSizer(optchar_options_static_sizer)\n    eggOptChar_grid_sizer.Add(self.optchar_options_panel, 1, wx.TOP | wx.EXPAND, 10)\n    eggPalettize_grid_sizer = wx.FlexGridSizer(8, 1, 0, 0)\n    file_flex_grid_sizer = wx.FlexGridSizer(5, 3, 0, 0)\n    file_flex_grid_sizer.Add(self.palettize_eggFilesLbl, 1, wx.TOP, 5)\n    file_flex_grid_sizer.Add(self.palettize_eggFilesTree, 1, wx.ALL, 1)\n    eggfiles_grid_sizer = wx.FlexGridSizer(4, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.palettize_addEggBtn, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.palettize_addFromBatchBtn, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.palettize_removeEggBtn, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.palettize_removeAllEggsBtn, 1, 0, 0)\n    file_flex_grid_sizer.Add(eggfiles_grid_sizer, 1, 0, 0)\n    file_flex_grid_sizer.Add(self.palettize_exportDestLbl, 1, wx.TOP, 0)\n    file_flex_grid_sizer.Add(self.palettize_exportInPlaceChk, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add((10, 2), 0, 0)\n    file_flex_grid_sizer.Add(self.palettize_exportDirLbl, 1, wx.TOP | wx.ALIGN_RIGHT, 3)\n    file_flex_grid_sizer.Add(self.palettize_exportDirTxt, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.palettize_exportDirBtn, 1, 0, 0)\n    file_flex_grid_sizer.Add(self.palettize_exportFileLbl, 1, wx.TOP | wx.ALIGN_RIGHT, 3)\n    file_flex_grid_sizer.Add(self.palettize_exportFileTxt, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.palettize_exportFileBtn, 1, 0, 0)\n    file_flex_grid_sizer.Add(self.palettize_exportTexLbl, 1, wx.TOP | wx.ALIGN_RIGHT, 3)\n    file_flex_grid_sizer.Add(self.palettize_exportTexTxt, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.palettize_exportTexBtn, 1, 0, 0)\n    eggPalettize_grid_sizer.Add(file_flex_grid_sizer, 1, wx.ALL, 0)\n    self.eggPalettize_panel.SetSizer(eggPalettize_grid_sizer)\n    self.tool_options_static_sizer.Add(self.eggPalettize_panel, 1, wx.ALL | wx.EXPAND, 0)\n    self.palettize_options_sizer_staticbox.Lower()\n    palettize_options_static_sizer = wx.StaticBoxSizer(self.palettize_options_sizer_staticbox, wx.VERTICAL)\n    palettize_options_grid_sizer = wx.FlexGridSizer(6, 1, 0, 0)\n    save_flex_grid_sizer = wx.FlexGridSizer(2, 3, 0, 0)\n    save_flex_grid_sizer.Add(self.palettize_saveTxaLbl, 0, wx.TOP, 3)\n    save_flex_grid_sizer.Add(self.palettize_saveTxaTxt, 0, wx.ALL, 1)\n    save_flex_grid_sizer.Add(self.palettize_loadTxaBtn, 0, 0, 0)\n    save_flex_grid_sizer.Add((10, 2), 0, 0)\n    save_flex_grid_sizer.Add((10, 2), 0, 0)\n    save_flex_grid_sizer.Add(self.palettize_saveTxaBtn, 0, 0, 0)\n    palettize_options_grid_sizer.Add(save_flex_grid_sizer, 1, wx.TOP, 6)\n    txa_grid_sizer = wx.FlexGridSizer(4, 2, 0, 0)\n    palettize_size_sizer = wx.FlexGridSizer(1, 5, 0, 0)\n    palettize_size_sizer.Add(self.palettize_sizeWidthTxt, 0, 0, 0)\n    palettize_size_sizer.Add(self.palettize_sizeByLbl, 0, wx.TOP, 3)\n    palettize_size_sizer.Add(self.palettize_sizeHeightTxt, 0, wx.RIGHT, 10)\n    palettize_size_sizer.Add(self.palettize_powerOf2Chk, 1, wx.ALL, 4)\n    txa_grid_sizer.Add(self.palettize_sizeLbl, 0, wx.TOP | wx.ALIGN_RIGHT, 3)\n    txa_grid_sizer.Add(palettize_size_sizer, 0, wx.ALL, 1)\n    txa_grid_sizer.Add(self.palettize_imageTypeLbl, 1, wx.TOP | wx.ALIGN_RIGHT, 16)\n    txa_grid_sizer.Add(self.palettize_imageTypeChoice, 1, wx.ALL, 0)\n    self.palettize_color_sizer_staticbox.Lower()\n    color_static_sizer = wx.StaticBoxSizer(self.palettize_color_sizer_staticbox, wx.HORIZONTAL)\n    color_flex_grid_sizer = wx.FlexGridSizer(1, 8, 0, 0)\n    color_flex_grid_sizer.Add(self.palettize_redLbl, 0, wx.TOP, 3)\n    color_flex_grid_sizer.Add(self.palettize_redTxt, 0, wx.RIGHT, 6)\n    color_flex_grid_sizer.Add(self.palettize_greenLbl, 0, wx.TOP, 3)\n    color_flex_grid_sizer.Add(self.palettize_greenTxt, 0, wx.RIGHT, 6)\n    color_flex_grid_sizer.Add(self.palettize_blueLbl, 0, wx.TOP, 3)\n    color_flex_grid_sizer.Add(self.palettize_blueTxt, 0, wx.RIGHT, 6)\n    color_flex_grid_sizer.Add(self.palettize_alphaLbl, 0, wx.TOP, 3)\n    color_flex_grid_sizer.Add(self.palettize_alphaTxt, 0, wx.RIGHT, 6)\n    color_static_sizer.Add(color_flex_grid_sizer, 1, 0, 0)\n    txa_grid_sizer.Add(self.palettize_colorLbl, 1, wx.TOP | wx.ALIGN_RIGHT, 13)\n    txa_grid_sizer.Add(color_static_sizer, 1, wx.ALL, 0)\n    txa_grid_sizer.Add(self.palettize_marginLbl, 1, wx.TOP | wx.ALIGN_RIGHT, 8)\n    txa_grid_sizer.Add(self.palettize_marginTxt, 1, wx.TOP, 5)\n    txa_grid_sizer.Add(self.palettize_coverageLbl, 1, wx.TOP | wx.ALIGN_RIGHT, 8)\n    txa_grid_sizer.Add(self.palettize_coverageTxt, 1, wx.TOP, 5)\n    palettize_options_grid_sizer.Add(txa_grid_sizer, 1, wx.ALL, 0)\n    palettize_options_static_sizer.Add(palettize_options_grid_sizer)\n    self.palettize_options_panel.SetSizer(palettize_options_static_sizer)\n    eggPalettize_grid_sizer.Add(self.palettize_options_panel, 1, wx.TOP | wx.EXPAND, 10)\n    self.batch_static_sizer_staticbox.Lower()\n    batch_static_sizer = wx.StaticBoxSizer(self.batch_static_sizer_staticbox, wx.VERTICAL)\n    batch_grid_sizer = wx.FlexGridSizer(3, 1, 0, 0)\n    batch_buttons_sizer = wx.FlexGridSizer(1, 6, 0, 0)\n    batch_buttons_sizer.Add(self.loadBatchButton, 1, wx.ALL, 2)\n    batch_buttons_sizer.Add(self.saveBatchButton, 1, wx.ALL, 2)\n    batch_buttons_sizer.Add(self.sortBatchButton, 1, wx.ALL, 2)\n    batch_buttons_sizer.Add(self.changePathsButton, 1, wx.ALL, 2)\n    batch_buttons_sizer.Add((25, 0), 0, 0)\n    batch_grid_sizer.Add(batch_buttons_sizer, 1, wx.ALIGN_LEFT, 0)\n    batch_grid_sizer.Add(self.batchTree, 1, wx.ALL | wx.ALIGN_LEFT | wx.EXPAND, 2)\n    batch_controls_sizer = wx.FlexGridSizer(1, 3, 0, 0)\n    batch_controls_sizer.Add(self.editSelBatchButton, 1, wx.ALL, 2)\n    batch_controls_sizer.Add(self.removeSelBatchButton, 1, wx.ALL, 2)\n    batch_controls_sizer.Add(self.removeAllBatchButton, 1, wx.ALL, 2)\n    batch_grid_sizer.Add(batch_controls_sizer, 1, wx.ALIGN_LEFT, 0)\n    batch_static_sizer.Add(batch_grid_sizer, 1, wx.EXPAND)\n    self.batch_panel.SetSizer(batch_static_sizer)\n    top_right_sizer.Add(self.batch_panel, 1, wx.ALIGN_TOP | wx.EXPAND, 0)\n    self.console_static_sizer_staticbox.Lower()\n    console_static_sizer = wx.StaticBoxSizer(self.console_static_sizer_staticbox, wx.VERTICAL)\n    console_grid_sizer = wx.FlexGridSizer(2, 1, 0, 0)\n    console_controls_sizer = wx.BoxSizer(wx.HORIZONTAL)\n    console_buttons_sizer = wx.FlexGridSizer(1, 6, 0, 0)\n    console_buttons_sizer.Add(self.runBatchButton, 1, wx.ALL, 2)\n    console_buttons_sizer.Add(self.clearConsoleButton, 1, wx.ALL, 2)\n    console_buttons_sizer.Add(self.runPviewButton, 1, wx.ALL, 2)\n    console_controls_sizer.Add(console_buttons_sizer)\n    console_options_sizer = wx.FlexGridSizer(2, 1, 0, 0)\n    console_options_sizer.Add(self.ignoreModDates, 0, wx.ALL, 0)\n    panda_dir_sizer = wx.BoxSizer(wx.HORIZONTAL)\n    panda_dir_sizer.Add(self.pathLbl, 0, wx.TOP, 4)\n    panda_dir_sizer.Add(self.pandaPathTxt, 0, wx.TOP, 1)\n    panda_dir_sizer.Add(self.loadPandaPathBtn, 0, wx.ALL, 0)\n    console_options_sizer.Add(panda_dir_sizer, 0, 0, 0)\n    console_controls_sizer.Add(console_options_sizer, 0, wx.LEFT | wx.ALIGN_RIGHT, 25)\n    main_sizer.Add(self.console_panel, -1, wx.ALIGN_TOP | wx.EXPAND | wx.RIGHT | wx.BOTTOM, 5)\n    self.console_panel.SetSizer(console_static_sizer)\n    console_grid_sizer.Add(console_controls_sizer, 1, wx.ALIGN_LEFT, 0)\n    console_grid_sizer.Add(self.consoleOutputTxt, 1, wx.ALIGN_LEFT | wx.EXPAND | wx.TOP | wx.BOTTOM, 3)\n    console_static_sizer.Add(console_grid_sizer, 1, wx.EXPAND)\n    self.main_panel.SetSizer(main_sizer)\n    self.tab_panel.AddPage(self.simple_panel, 'Simple Mode')\n    self.tab_panel.AddPage(self.main_panel, 'Advanced Mode')\n    tab_panel_sizer.Add(self.tab_panel, 1, wx.EXPAND, 0)\n    self.SetSizer(tab_panel_sizer)\n    tab_panel_sizer.Fit(self)\n    self.SetSize((WINDOW_WIDTH, WINDOW_HEIGHT))\n    self.Layout()",
        "mutated": [
            "def __do_layout(self):\n    if False:\n        i = 10\n    tab_panel_sizer = wx.BoxSizer(wx.HORIZONTAL)\n    self.simple_options_sizer_staticbox.Lower()\n    simple_sizer = wx.FlexGridSizer(1, 1, 0, 0)\n    simple_options_static_sizer = wx.StaticBoxSizer(self.simple_options_sizer_staticbox, wx.VERTICAL)\n    file_flex_grid_sizer = wx.FlexGridSizer(3, 3, 0, 0)\n    file_flex_grid_sizer.Add(self.simple_mayaFileLbl, -1, wx.TOP, 5)\n    file_flex_grid_sizer.Add(self.simple_mayaFileTxt, -1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.simple_mayaFileBtn, -1, 0, 0)\n    file_flex_grid_sizer.Add(self.simple_exportDestLbl, -1, wx.TOP, 5)\n    file_flex_grid_sizer.Add(self.simple_exportDestTxt, -1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.simple_exportDestBtn, -1, 0, 0)\n    file_flex_grid_sizer.Add(self.simple_mayaVerLbl, 1, wx.TOP, 5)\n    file_flex_grid_sizer.Add(self.simple_mayaVerComboBox, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.simple_runExportBtn, -1, 0, 0)\n    simple_options_static_sizer.Add(file_flex_grid_sizer)\n    simple_options_static_sizer.Add(self.simple_animOptChoice)\n    self.simple_options_panel.SetSizer(simple_options_static_sizer)\n    simple_sizer.Add(self.simple_options_panel)\n    self.simple_panel.SetSizer(simple_sizer)\n    main_sizer = wx.FlexGridSizer(4, 1, 0, 0)\n    top_sizer = wx.FlexGridSizer(1, 2, 0, 0)\n    main_sizer.Add(top_sizer, 0, wx.EXPAND, 0)\n    top_left_sizer = wx.FlexGridSizer(3, 1, 0, 0)\n    top_right_sizer = wx.FlexGridSizer(3, 1, 0, 0)\n    top_sizer.Add(top_left_sizer, 0, wx.ALL | wx.EXPAND, 5)\n    top_sizer.Add(top_right_sizer, 0, wx.ALL | wx.EXPAND, 5)\n    top_left_sizer.Add(self.toolComboBox, 0, wx.ALL, 5)\n    self.tool_options_sizer_staticbox.Lower()\n    self.tool_options_static_sizer = wx.StaticBoxSizer(self.tool_options_sizer_staticbox, wx.VERTICAL)\n    maya2egg_grid_sizer = wx.FlexGridSizer(8, 1, 0, 0)\n    file_flex_grid_sizer = wx.FlexGridSizer(2, 3, 0, 0)\n    file_flex_grid_sizer.Add(self.m2e_mayaFileLbl, 1, wx.TOP, 5)\n    file_flex_grid_sizer.Add(self.m2e_mayaFileTxt, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.m2e_mayaFileBtn, 1, 0, 0)\n    file_flex_grid_sizer.Add(self.m2e_exportDestLbl, 1, wx.TOP, 5)\n    file_flex_grid_sizer.Add(self.m2e_exportDestTxt, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.m2e_exportDestBtn, 1, 0, 0)\n    maya2egg_grid_sizer.Add(file_flex_grid_sizer, 1, wx.ALL, 0)\n    maya_ver_sizer = wx.FlexGridSizer(1, 2, 0, 0)\n    maya_ver_sizer.Add(self.m2e_mayaVerLbl, 1, wx.TOP | wx.RIGHT, 3)\n    maya_ver_sizer.Add(self.m2e_mayaVerComboBox, 1, wx.LEFT, 3)\n    maya2egg_grid_sizer.Add(maya_ver_sizer, 1, wx.TOP, 3)\n    self.maya2egg_panel.SetSizer(maya2egg_grid_sizer)\n    self.tool_options_static_sizer.Add(self.maya2egg_panel, 1, wx.ALL | wx.EXPAND, 0)\n    self.m2e_options_panel_sizer_staticbox.Lower()\n    general_options_static_sizer = wx.StaticBoxSizer(self.m2e_options_panel_sizer_staticbox, wx.VERTICAL)\n    general_options_grid_sizer = wx.FlexGridSizer(6, 1, 0, 0)\n    units_sizer = wx.FlexGridSizer(1, 4, 0, 0)\n    units_sizer.Add(self.m2e_mayaUnitsLbl, 1, wx.ALL, 3)\n    units_sizer.Add(self.m2e_mayaUnitsComboBox, 1, wx.RIGHT, 6)\n    units_sizer.Add(self.m2e_pandaUnitsLbl, 1, wx.ALL, 3)\n    units_sizer.Add(self.m2e_pandaUnitsComboBox, 1, wx.ALL, 0)\n    general_options_grid_sizer.Add(units_sizer)\n    general_options_grid_sizer.Add(self.m2e_backfaceChk, 1, wx.ALL, 3)\n    general_options_grid_sizer.Add(self.m2e_polygonOutputChk, 1, wx.ALL, 3)\n    general_options_grid_sizer.Add(self.m2e_tbnallChk, 1, wx.ALL, 3)\n    subroots_sizer = wx.FlexGridSizer(3, 2, 0, 0)\n    subroots_sizer.Add(self.m2e_subrootsChk, 1, wx.ALL, 3)\n    subroots_sizer.Add(self.m2e_subrootsTxt, 1, wx.LEFT, 1)\n    subroots_sizer.Add(self.m2e_subsetsChk, 1, wx.ALL, 3)\n    subroots_sizer.Add(self.m2e_subsetsTxt, 1, wx.LEFT, 1)\n    subroots_sizer.Add(self.m2e_excludesChk, 1, wx.ALL, 3)\n    subroots_sizer.Add(self.m2e_excludesTxt, 1, wx.LEFT, 1)\n    general_options_grid_sizer.Add(subroots_sizer, 1, wx.ALL, 0)\n    general_options_static_sizer.Add(general_options_grid_sizer)\n    self.m2e_options_panel.SetSizer(general_options_static_sizer)\n    maya2egg_grid_sizer.Add(self.m2e_options_panel, 1, wx.TOP | wx.EXPAND, 10)\n    self.m2e_anim_options_sizer_staticbox.Lower()\n    animation_options_static_sizer = wx.StaticBoxSizer(self.m2e_anim_options_sizer_staticbox, wx.VERTICAL)\n    animation_options_grid_sizer = wx.FlexGridSizer(6, 1, 0, 0)\n    animation_options_grid_sizer.Add(self.m2e_animOptChoice, 1, wx.BOTTOM, 3)\n    frames_grid_sizer = wx.FlexGridSizer(4, 2, 0, 0)\n    frames_grid_sizer.Add(self.m2e_startFrameChk, 0, wx.ALL, 3)\n    frames_grid_sizer.Add(self.m2e_startFrameSpin, 0, 0, 0)\n    frames_grid_sizer.Add(self.m2e_endFrameChk, 0, wx.ALL, 3)\n    frames_grid_sizer.Add(self.m2e_endFrameSpin, 0, 0, 0)\n    frames_grid_sizer.Add(self.m2e_frameRateInChk, 0, wx.ALL, 3)\n    frames_grid_sizer.Add(self.m2e_frameRateInSpin, 0, 0, 0)\n    frames_grid_sizer.Add(self.m2e_frameRateOutChk, 0, wx.ALL, 3)\n    frames_grid_sizer.Add(self.m2e_frameRateOutSpin, 0, 0, 0)\n    animation_options_grid_sizer.Add(frames_grid_sizer, 1, wx.ALL, 0)\n    names_grid_sizer = wx.FlexGridSizer(1, 2, 0, 0)\n    names_grid_sizer.Add(self.m2e_charNameChk, 1, wx.ALL, 3)\n    names_grid_sizer.Add(self.m2e_charNameTxt, 1, wx.ALL, 0)\n    animation_options_grid_sizer.Add(names_grid_sizer, 1, wx.ALL, 0)\n    animation_options_static_sizer.Add(animation_options_grid_sizer)\n    self.m2e_anim_options_panel.SetSizer(animation_options_static_sizer)\n    maya2egg_grid_sizer.Add(self.m2e_anim_options_panel, 1, wx.TOP | wx.EXPAND, 10)\n    self.m2e_tex_options_sizer_staticbox.Lower()\n    tex_options_static_sizer = wx.StaticBoxSizer(self.m2e_tex_options_sizer_staticbox, wx.VERTICAL)\n    tex_options_grid_sizer = wx.FlexGridSizer(2, 1, 0, 0)\n    tex_options_grid_sizer.Add(self.m2e_legacyShaderChk, 1, wx.ALL, 3)\n    copytex_sizer = wx.FlexGridSizer(2, 3, 0, 0)\n    copytex_sizer.Add(self.m2e_copyTexChk, 1, wx.ALL, 3)\n    copytex_sizer.Add(self.m2e_copyTexPathTxt, 1, wx.TOP, 1)\n    copytex_sizer.Add(self.m2e_copyTexPathBtn, 1, wx.ALL, 0)\n    copytex_sizer.Add(self.m2e_pathReplaceChk, 1, wx.ALL, 3)\n    copytex_sizer.Add(self.m2e_pathReplaceTxt, 1, wx.TOP, 1)\n    copytex_sizer.Add(self.m2e_pathReplaceBtn, 1, wx.ALL, 0)\n    tex_options_grid_sizer.Add(copytex_sizer, 1, wx.ALL, 0)\n    tex_options_static_sizer.Add(tex_options_grid_sizer)\n    self.m2e_tex_options_panel.SetSizer(tex_options_static_sizer)\n    maya2egg_grid_sizer.Add(self.m2e_tex_options_panel, 1, wx.TOP | wx.EXPAND, 10)\n    self.tool_options_panel.SetSizer(self.tool_options_static_sizer)\n    top_left_sizer.Add(self.tool_options_panel, 1, wx.ALL | wx.EXPAND, 0)\n    batch_item_grid_sizer = wx.FlexGridSizer(1, 3, 0, 0)\n    batch_item_grid_sizer.Add(self.batchItemNameLbl, -1, wx.ALL, 4)\n    batch_item_grid_sizer.Add(self.batchItemNameTxt, -1, wx.ALL, 1)\n    batch_item_grid_sizer.Add(self.addToBatchBtn, -1, wx.LEFT, 5)\n    top_left_sizer.Add(batch_item_grid_sizer, 1, wx.TOP, 6)\n    egg2bam_grid_sizer = wx.FlexGridSizer(8, 1, 0, 0)\n    file_flex_grid_sizer = wx.FlexGridSizer(2, 3, 0, 0)\n    file_flex_grid_sizer.Add(self.e2b_eggFileLbl, 1, wx.TOP, 5)\n    file_flex_grid_sizer.Add(self.e2b_eggFileTxt, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.e2b_eggFileBtn, 1, 0, 0)\n    file_flex_grid_sizer.Add(self.e2b_exportDestLbl, 1, wx.TOP, 5)\n    file_flex_grid_sizer.Add(self.e2b_exportDestTxt, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.e2b_exportDestBtn, 1, 0, 0)\n    egg2bam_grid_sizer.Add(file_flex_grid_sizer, 1, wx.ALL, 0)\n    self.egg2bam_panel.SetSizer(egg2bam_grid_sizer)\n    self.tool_options_static_sizer.Add(self.egg2bam_panel, 1, wx.ALL, 0)\n    bam_batch_sizer = wx.FlexGridSizer(1, 2, 0, 0)\n    bam_batch_sizer.Add(self.e2b_bamBatchOutputLbl, 1, wx.TOP, 4)\n    bam_batch_sizer.Add(self.e2b_bamBatchOutputBtn, 1, wx.LEFT, 3)\n    egg2bam_grid_sizer.Add(bam_batch_sizer, 1, wx.TOP | wx.ALIGN_RIGHT, 5)\n    self.e2b_options_sizer_staticbox.Lower()\n    e2b_options_static_sizer = wx.StaticBoxSizer(self.e2b_options_sizer_staticbox, wx.VERTICAL)\n    e2b_options_grid_sizer = wx.FlexGridSizer(6, 1, 0, 0)\n    e2b_options_grid_sizer.Add(self.e2b_useCurrEggChk, 1, wx.ALL, 3)\n    e2b_options_grid_sizer.Add(self.e2b_flattenChk, 1, wx.ALL, 3)\n    e2b_options_grid_sizer.Add(self.e2b_embedTexChk, 1, wx.ALL, 3)\n    e2b_options_static_sizer.Add(e2b_options_grid_sizer)\n    self.e2b_options_panel.SetSizer(e2b_options_static_sizer)\n    egg2bam_grid_sizer.Add(self.e2b_options_panel, 1, wx.TOP | wx.EXPAND, 10)\n    eggRename_grid_sizer = wx.FlexGridSizer(8, 1, 0, 0)\n    file_flex_grid_sizer = wx.FlexGridSizer(4, 3, 0, 0)\n    file_flex_grid_sizer.Add(self.rename_eggFilesLbl, 1, wx.TOP, 5)\n    file_flex_grid_sizer.Add(self.rename_eggFilesTree, 1, wx.ALL, 1)\n    eggfiles_grid_sizer = wx.FlexGridSizer(4, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.rename_addEggBtn, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.rename_addFromBatchBtn, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.rename_removeEggBtn, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.rename_removeAllEggsBtn, 1, 0, 0)\n    file_flex_grid_sizer.Add(eggfiles_grid_sizer, 1, 0, 0)\n    file_flex_grid_sizer.Add(self.rename_exportDestLbl, 1, wx.TOP, 0)\n    file_flex_grid_sizer.Add(self.rename_exportInPlaceChk, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add((10, 2), 0, 0)\n    file_flex_grid_sizer.Add(self.rename_exportDirLbl, 1, wx.TOP | wx.ALIGN_RIGHT, 3)\n    file_flex_grid_sizer.Add(self.rename_exportDirTxt, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.rename_exportDirBtn, 1, 0, 0)\n    file_flex_grid_sizer.Add(self.rename_exportFileLbl, 1, wx.TOP | wx.ALIGN_RIGHT, 3)\n    file_flex_grid_sizer.Add(self.rename_exportFileTxt, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.rename_exportFileBtn, 1, 0, 0)\n    eggRename_grid_sizer.Add(file_flex_grid_sizer, 1, wx.ALL, 0)\n    self.eggRename_panel.SetSizer(eggRename_grid_sizer)\n    self.tool_options_static_sizer.Add(self.eggRename_panel, 1, wx.ALL | wx.EXPAND, 0)\n    self.rename_options_sizer_staticbox.Lower()\n    rename_options_static_sizer = wx.StaticBoxSizer(self.rename_options_sizer_staticbox, wx.VERTICAL)\n    rename_options_grid_sizer = wx.FlexGridSizer(6, 1, 0, 0)\n    prefix_sizer = wx.FlexGridSizer(2, 2, 0, 0)\n    prefix_sizer.Add(self.rename_stripPrefixChk, 1, wx.ALL, 3)\n    prefix_sizer.Add(self.rename_stripPrefixTxt, 1, wx.LEFT, 2)\n    rename_options_grid_sizer.Add(prefix_sizer, 1, wx.ALL, 0)\n    rename_options_static_sizer.Add(rename_options_grid_sizer)\n    self.rename_options_panel.SetSizer(rename_options_static_sizer)\n    eggRename_grid_sizer.Add(self.rename_options_panel, 1, wx.TOP | wx.EXPAND, 10)\n    eggOptChar_grid_sizer = wx.FlexGridSizer(8, 1, 0, 0)\n    file_flex_grid_sizer = wx.FlexGridSizer(4, 3, 0, 0)\n    file_flex_grid_sizer.Add(self.optchar_eggFilesLbl, 1, wx.TOP, 5)\n    file_flex_grid_sizer.Add(self.optchar_eggFilesTree, 1, wx.ALL, 1)\n    eggfiles_grid_sizer = wx.FlexGridSizer(4, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.optchar_addEggBtn, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.optchar_addFromBatchBtn, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.optchar_removeEggBtn, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.optchar_removeAllEggsBtn, 1, 0, 0)\n    file_flex_grid_sizer.Add(eggfiles_grid_sizer, 1, 0, 0)\n    file_flex_grid_sizer.Add(self.optchar_exportDestLbl, 1, wx.TOP, 0)\n    file_flex_grid_sizer.Add(self.optchar_exportInPlaceChk, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add((10, 2), 0, 0)\n    file_flex_grid_sizer.Add(self.optchar_exportDirLbl, 1, wx.TOP | wx.ALIGN_RIGHT, 3)\n    file_flex_grid_sizer.Add(self.optchar_exportDirTxt, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.optchar_exportDirBtn, 1, 0, 0)\n    file_flex_grid_sizer.Add(self.optchar_exportFileLbl, 1, wx.TOP | wx.ALIGN_RIGHT, 3)\n    file_flex_grid_sizer.Add(self.optchar_exportFileTxt, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.optchar_exportFileBtn, 1, 0, 0)\n    eggOptChar_grid_sizer.Add(file_flex_grid_sizer, 1, wx.ALL, 0)\n    self.eggOptChar_panel.SetSizer(eggOptChar_grid_sizer)\n    self.tool_options_static_sizer.Add(self.eggOptChar_panel, 1, wx.ALL | wx.EXPAND, 0)\n    self.optchar_options_sizer_staticbox.Lower()\n    optchar_options_static_sizer = wx.StaticBoxSizer(self.optchar_options_sizer_staticbox, wx.VERTICAL)\n    optchar_options_grid_sizer = wx.FlexGridSizer(6, 1, 0, 0)\n    joint_options_sizer = wx.FlexGridSizer(4, 2, 0, 0)\n    joint_options_sizer.Add(self.optchar_keepAllJointsChk, 1, wx.ALL, 3)\n    joint_options_sizer.Add((10, 0), 0, 0)\n    joint_options_sizer.Add(self.optchar_keepJointsChk, 1, wx.ALL, 3)\n    joint_options_sizer.Add(self.optchar_keepJointsTxt, 1, wx.LEFT, 2)\n    joint_options_sizer.Add(self.optchar_dropJointsChk, 1, wx.ALL, 3)\n    joint_options_sizer.Add(self.optchar_dropJointsTxt, 1, wx.LEFT, 2)\n    joint_options_sizer.Add(self.optchar_exposeJointsChk, 1, wx.ALL, 3)\n    joint_options_sizer.Add(self.optchar_exposeJointsTxt, 1, wx.LEFT, 2)\n    joint_options_sizer.Add(self.optchar_flagGeometryChk, 1, wx.ALL, 3)\n    joint_options_sizer.Add(self.optchar_flagGeometryTxt, 1, wx.LEFT, 2)\n    optchar_options_grid_sizer.Add(joint_options_sizer, 1, wx.ALL, 0)\n    optchar_options_grid_sizer.Add(self.optchar_dartChoice, 1, wx.ALL, 0)\n    optchar_options_static_sizer.Add(optchar_options_grid_sizer)\n    self.optchar_options_panel.SetSizer(optchar_options_static_sizer)\n    eggOptChar_grid_sizer.Add(self.optchar_options_panel, 1, wx.TOP | wx.EXPAND, 10)\n    eggPalettize_grid_sizer = wx.FlexGridSizer(8, 1, 0, 0)\n    file_flex_grid_sizer = wx.FlexGridSizer(5, 3, 0, 0)\n    file_flex_grid_sizer.Add(self.palettize_eggFilesLbl, 1, wx.TOP, 5)\n    file_flex_grid_sizer.Add(self.palettize_eggFilesTree, 1, wx.ALL, 1)\n    eggfiles_grid_sizer = wx.FlexGridSizer(4, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.palettize_addEggBtn, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.palettize_addFromBatchBtn, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.palettize_removeEggBtn, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.palettize_removeAllEggsBtn, 1, 0, 0)\n    file_flex_grid_sizer.Add(eggfiles_grid_sizer, 1, 0, 0)\n    file_flex_grid_sizer.Add(self.palettize_exportDestLbl, 1, wx.TOP, 0)\n    file_flex_grid_sizer.Add(self.palettize_exportInPlaceChk, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add((10, 2), 0, 0)\n    file_flex_grid_sizer.Add(self.palettize_exportDirLbl, 1, wx.TOP | wx.ALIGN_RIGHT, 3)\n    file_flex_grid_sizer.Add(self.palettize_exportDirTxt, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.palettize_exportDirBtn, 1, 0, 0)\n    file_flex_grid_sizer.Add(self.palettize_exportFileLbl, 1, wx.TOP | wx.ALIGN_RIGHT, 3)\n    file_flex_grid_sizer.Add(self.palettize_exportFileTxt, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.palettize_exportFileBtn, 1, 0, 0)\n    file_flex_grid_sizer.Add(self.palettize_exportTexLbl, 1, wx.TOP | wx.ALIGN_RIGHT, 3)\n    file_flex_grid_sizer.Add(self.palettize_exportTexTxt, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.palettize_exportTexBtn, 1, 0, 0)\n    eggPalettize_grid_sizer.Add(file_flex_grid_sizer, 1, wx.ALL, 0)\n    self.eggPalettize_panel.SetSizer(eggPalettize_grid_sizer)\n    self.tool_options_static_sizer.Add(self.eggPalettize_panel, 1, wx.ALL | wx.EXPAND, 0)\n    self.palettize_options_sizer_staticbox.Lower()\n    palettize_options_static_sizer = wx.StaticBoxSizer(self.palettize_options_sizer_staticbox, wx.VERTICAL)\n    palettize_options_grid_sizer = wx.FlexGridSizer(6, 1, 0, 0)\n    save_flex_grid_sizer = wx.FlexGridSizer(2, 3, 0, 0)\n    save_flex_grid_sizer.Add(self.palettize_saveTxaLbl, 0, wx.TOP, 3)\n    save_flex_grid_sizer.Add(self.palettize_saveTxaTxt, 0, wx.ALL, 1)\n    save_flex_grid_sizer.Add(self.palettize_loadTxaBtn, 0, 0, 0)\n    save_flex_grid_sizer.Add((10, 2), 0, 0)\n    save_flex_grid_sizer.Add((10, 2), 0, 0)\n    save_flex_grid_sizer.Add(self.palettize_saveTxaBtn, 0, 0, 0)\n    palettize_options_grid_sizer.Add(save_flex_grid_sizer, 1, wx.TOP, 6)\n    txa_grid_sizer = wx.FlexGridSizer(4, 2, 0, 0)\n    palettize_size_sizer = wx.FlexGridSizer(1, 5, 0, 0)\n    palettize_size_sizer.Add(self.palettize_sizeWidthTxt, 0, 0, 0)\n    palettize_size_sizer.Add(self.palettize_sizeByLbl, 0, wx.TOP, 3)\n    palettize_size_sizer.Add(self.palettize_sizeHeightTxt, 0, wx.RIGHT, 10)\n    palettize_size_sizer.Add(self.palettize_powerOf2Chk, 1, wx.ALL, 4)\n    txa_grid_sizer.Add(self.palettize_sizeLbl, 0, wx.TOP | wx.ALIGN_RIGHT, 3)\n    txa_grid_sizer.Add(palettize_size_sizer, 0, wx.ALL, 1)\n    txa_grid_sizer.Add(self.palettize_imageTypeLbl, 1, wx.TOP | wx.ALIGN_RIGHT, 16)\n    txa_grid_sizer.Add(self.palettize_imageTypeChoice, 1, wx.ALL, 0)\n    self.palettize_color_sizer_staticbox.Lower()\n    color_static_sizer = wx.StaticBoxSizer(self.palettize_color_sizer_staticbox, wx.HORIZONTAL)\n    color_flex_grid_sizer = wx.FlexGridSizer(1, 8, 0, 0)\n    color_flex_grid_sizer.Add(self.palettize_redLbl, 0, wx.TOP, 3)\n    color_flex_grid_sizer.Add(self.palettize_redTxt, 0, wx.RIGHT, 6)\n    color_flex_grid_sizer.Add(self.palettize_greenLbl, 0, wx.TOP, 3)\n    color_flex_grid_sizer.Add(self.palettize_greenTxt, 0, wx.RIGHT, 6)\n    color_flex_grid_sizer.Add(self.palettize_blueLbl, 0, wx.TOP, 3)\n    color_flex_grid_sizer.Add(self.palettize_blueTxt, 0, wx.RIGHT, 6)\n    color_flex_grid_sizer.Add(self.palettize_alphaLbl, 0, wx.TOP, 3)\n    color_flex_grid_sizer.Add(self.palettize_alphaTxt, 0, wx.RIGHT, 6)\n    color_static_sizer.Add(color_flex_grid_sizer, 1, 0, 0)\n    txa_grid_sizer.Add(self.palettize_colorLbl, 1, wx.TOP | wx.ALIGN_RIGHT, 13)\n    txa_grid_sizer.Add(color_static_sizer, 1, wx.ALL, 0)\n    txa_grid_sizer.Add(self.palettize_marginLbl, 1, wx.TOP | wx.ALIGN_RIGHT, 8)\n    txa_grid_sizer.Add(self.palettize_marginTxt, 1, wx.TOP, 5)\n    txa_grid_sizer.Add(self.palettize_coverageLbl, 1, wx.TOP | wx.ALIGN_RIGHT, 8)\n    txa_grid_sizer.Add(self.palettize_coverageTxt, 1, wx.TOP, 5)\n    palettize_options_grid_sizer.Add(txa_grid_sizer, 1, wx.ALL, 0)\n    palettize_options_static_sizer.Add(palettize_options_grid_sizer)\n    self.palettize_options_panel.SetSizer(palettize_options_static_sizer)\n    eggPalettize_grid_sizer.Add(self.palettize_options_panel, 1, wx.TOP | wx.EXPAND, 10)\n    self.batch_static_sizer_staticbox.Lower()\n    batch_static_sizer = wx.StaticBoxSizer(self.batch_static_sizer_staticbox, wx.VERTICAL)\n    batch_grid_sizer = wx.FlexGridSizer(3, 1, 0, 0)\n    batch_buttons_sizer = wx.FlexGridSizer(1, 6, 0, 0)\n    batch_buttons_sizer.Add(self.loadBatchButton, 1, wx.ALL, 2)\n    batch_buttons_sizer.Add(self.saveBatchButton, 1, wx.ALL, 2)\n    batch_buttons_sizer.Add(self.sortBatchButton, 1, wx.ALL, 2)\n    batch_buttons_sizer.Add(self.changePathsButton, 1, wx.ALL, 2)\n    batch_buttons_sizer.Add((25, 0), 0, 0)\n    batch_grid_sizer.Add(batch_buttons_sizer, 1, wx.ALIGN_LEFT, 0)\n    batch_grid_sizer.Add(self.batchTree, 1, wx.ALL | wx.ALIGN_LEFT | wx.EXPAND, 2)\n    batch_controls_sizer = wx.FlexGridSizer(1, 3, 0, 0)\n    batch_controls_sizer.Add(self.editSelBatchButton, 1, wx.ALL, 2)\n    batch_controls_sizer.Add(self.removeSelBatchButton, 1, wx.ALL, 2)\n    batch_controls_sizer.Add(self.removeAllBatchButton, 1, wx.ALL, 2)\n    batch_grid_sizer.Add(batch_controls_sizer, 1, wx.ALIGN_LEFT, 0)\n    batch_static_sizer.Add(batch_grid_sizer, 1, wx.EXPAND)\n    self.batch_panel.SetSizer(batch_static_sizer)\n    top_right_sizer.Add(self.batch_panel, 1, wx.ALIGN_TOP | wx.EXPAND, 0)\n    self.console_static_sizer_staticbox.Lower()\n    console_static_sizer = wx.StaticBoxSizer(self.console_static_sizer_staticbox, wx.VERTICAL)\n    console_grid_sizer = wx.FlexGridSizer(2, 1, 0, 0)\n    console_controls_sizer = wx.BoxSizer(wx.HORIZONTAL)\n    console_buttons_sizer = wx.FlexGridSizer(1, 6, 0, 0)\n    console_buttons_sizer.Add(self.runBatchButton, 1, wx.ALL, 2)\n    console_buttons_sizer.Add(self.clearConsoleButton, 1, wx.ALL, 2)\n    console_buttons_sizer.Add(self.runPviewButton, 1, wx.ALL, 2)\n    console_controls_sizer.Add(console_buttons_sizer)\n    console_options_sizer = wx.FlexGridSizer(2, 1, 0, 0)\n    console_options_sizer.Add(self.ignoreModDates, 0, wx.ALL, 0)\n    panda_dir_sizer = wx.BoxSizer(wx.HORIZONTAL)\n    panda_dir_sizer.Add(self.pathLbl, 0, wx.TOP, 4)\n    panda_dir_sizer.Add(self.pandaPathTxt, 0, wx.TOP, 1)\n    panda_dir_sizer.Add(self.loadPandaPathBtn, 0, wx.ALL, 0)\n    console_options_sizer.Add(panda_dir_sizer, 0, 0, 0)\n    console_controls_sizer.Add(console_options_sizer, 0, wx.LEFT | wx.ALIGN_RIGHT, 25)\n    main_sizer.Add(self.console_panel, -1, wx.ALIGN_TOP | wx.EXPAND | wx.RIGHT | wx.BOTTOM, 5)\n    self.console_panel.SetSizer(console_static_sizer)\n    console_grid_sizer.Add(console_controls_sizer, 1, wx.ALIGN_LEFT, 0)\n    console_grid_sizer.Add(self.consoleOutputTxt, 1, wx.ALIGN_LEFT | wx.EXPAND | wx.TOP | wx.BOTTOM, 3)\n    console_static_sizer.Add(console_grid_sizer, 1, wx.EXPAND)\n    self.main_panel.SetSizer(main_sizer)\n    self.tab_panel.AddPage(self.simple_panel, 'Simple Mode')\n    self.tab_panel.AddPage(self.main_panel, 'Advanced Mode')\n    tab_panel_sizer.Add(self.tab_panel, 1, wx.EXPAND, 0)\n    self.SetSizer(tab_panel_sizer)\n    tab_panel_sizer.Fit(self)\n    self.SetSize((WINDOW_WIDTH, WINDOW_HEIGHT))\n    self.Layout()",
            "def __do_layout(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    tab_panel_sizer = wx.BoxSizer(wx.HORIZONTAL)\n    self.simple_options_sizer_staticbox.Lower()\n    simple_sizer = wx.FlexGridSizer(1, 1, 0, 0)\n    simple_options_static_sizer = wx.StaticBoxSizer(self.simple_options_sizer_staticbox, wx.VERTICAL)\n    file_flex_grid_sizer = wx.FlexGridSizer(3, 3, 0, 0)\n    file_flex_grid_sizer.Add(self.simple_mayaFileLbl, -1, wx.TOP, 5)\n    file_flex_grid_sizer.Add(self.simple_mayaFileTxt, -1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.simple_mayaFileBtn, -1, 0, 0)\n    file_flex_grid_sizer.Add(self.simple_exportDestLbl, -1, wx.TOP, 5)\n    file_flex_grid_sizer.Add(self.simple_exportDestTxt, -1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.simple_exportDestBtn, -1, 0, 0)\n    file_flex_grid_sizer.Add(self.simple_mayaVerLbl, 1, wx.TOP, 5)\n    file_flex_grid_sizer.Add(self.simple_mayaVerComboBox, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.simple_runExportBtn, -1, 0, 0)\n    simple_options_static_sizer.Add(file_flex_grid_sizer)\n    simple_options_static_sizer.Add(self.simple_animOptChoice)\n    self.simple_options_panel.SetSizer(simple_options_static_sizer)\n    simple_sizer.Add(self.simple_options_panel)\n    self.simple_panel.SetSizer(simple_sizer)\n    main_sizer = wx.FlexGridSizer(4, 1, 0, 0)\n    top_sizer = wx.FlexGridSizer(1, 2, 0, 0)\n    main_sizer.Add(top_sizer, 0, wx.EXPAND, 0)\n    top_left_sizer = wx.FlexGridSizer(3, 1, 0, 0)\n    top_right_sizer = wx.FlexGridSizer(3, 1, 0, 0)\n    top_sizer.Add(top_left_sizer, 0, wx.ALL | wx.EXPAND, 5)\n    top_sizer.Add(top_right_sizer, 0, wx.ALL | wx.EXPAND, 5)\n    top_left_sizer.Add(self.toolComboBox, 0, wx.ALL, 5)\n    self.tool_options_sizer_staticbox.Lower()\n    self.tool_options_static_sizer = wx.StaticBoxSizer(self.tool_options_sizer_staticbox, wx.VERTICAL)\n    maya2egg_grid_sizer = wx.FlexGridSizer(8, 1, 0, 0)\n    file_flex_grid_sizer = wx.FlexGridSizer(2, 3, 0, 0)\n    file_flex_grid_sizer.Add(self.m2e_mayaFileLbl, 1, wx.TOP, 5)\n    file_flex_grid_sizer.Add(self.m2e_mayaFileTxt, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.m2e_mayaFileBtn, 1, 0, 0)\n    file_flex_grid_sizer.Add(self.m2e_exportDestLbl, 1, wx.TOP, 5)\n    file_flex_grid_sizer.Add(self.m2e_exportDestTxt, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.m2e_exportDestBtn, 1, 0, 0)\n    maya2egg_grid_sizer.Add(file_flex_grid_sizer, 1, wx.ALL, 0)\n    maya_ver_sizer = wx.FlexGridSizer(1, 2, 0, 0)\n    maya_ver_sizer.Add(self.m2e_mayaVerLbl, 1, wx.TOP | wx.RIGHT, 3)\n    maya_ver_sizer.Add(self.m2e_mayaVerComboBox, 1, wx.LEFT, 3)\n    maya2egg_grid_sizer.Add(maya_ver_sizer, 1, wx.TOP, 3)\n    self.maya2egg_panel.SetSizer(maya2egg_grid_sizer)\n    self.tool_options_static_sizer.Add(self.maya2egg_panel, 1, wx.ALL | wx.EXPAND, 0)\n    self.m2e_options_panel_sizer_staticbox.Lower()\n    general_options_static_sizer = wx.StaticBoxSizer(self.m2e_options_panel_sizer_staticbox, wx.VERTICAL)\n    general_options_grid_sizer = wx.FlexGridSizer(6, 1, 0, 0)\n    units_sizer = wx.FlexGridSizer(1, 4, 0, 0)\n    units_sizer.Add(self.m2e_mayaUnitsLbl, 1, wx.ALL, 3)\n    units_sizer.Add(self.m2e_mayaUnitsComboBox, 1, wx.RIGHT, 6)\n    units_sizer.Add(self.m2e_pandaUnitsLbl, 1, wx.ALL, 3)\n    units_sizer.Add(self.m2e_pandaUnitsComboBox, 1, wx.ALL, 0)\n    general_options_grid_sizer.Add(units_sizer)\n    general_options_grid_sizer.Add(self.m2e_backfaceChk, 1, wx.ALL, 3)\n    general_options_grid_sizer.Add(self.m2e_polygonOutputChk, 1, wx.ALL, 3)\n    general_options_grid_sizer.Add(self.m2e_tbnallChk, 1, wx.ALL, 3)\n    subroots_sizer = wx.FlexGridSizer(3, 2, 0, 0)\n    subroots_sizer.Add(self.m2e_subrootsChk, 1, wx.ALL, 3)\n    subroots_sizer.Add(self.m2e_subrootsTxt, 1, wx.LEFT, 1)\n    subroots_sizer.Add(self.m2e_subsetsChk, 1, wx.ALL, 3)\n    subroots_sizer.Add(self.m2e_subsetsTxt, 1, wx.LEFT, 1)\n    subroots_sizer.Add(self.m2e_excludesChk, 1, wx.ALL, 3)\n    subroots_sizer.Add(self.m2e_excludesTxt, 1, wx.LEFT, 1)\n    general_options_grid_sizer.Add(subroots_sizer, 1, wx.ALL, 0)\n    general_options_static_sizer.Add(general_options_grid_sizer)\n    self.m2e_options_panel.SetSizer(general_options_static_sizer)\n    maya2egg_grid_sizer.Add(self.m2e_options_panel, 1, wx.TOP | wx.EXPAND, 10)\n    self.m2e_anim_options_sizer_staticbox.Lower()\n    animation_options_static_sizer = wx.StaticBoxSizer(self.m2e_anim_options_sizer_staticbox, wx.VERTICAL)\n    animation_options_grid_sizer = wx.FlexGridSizer(6, 1, 0, 0)\n    animation_options_grid_sizer.Add(self.m2e_animOptChoice, 1, wx.BOTTOM, 3)\n    frames_grid_sizer = wx.FlexGridSizer(4, 2, 0, 0)\n    frames_grid_sizer.Add(self.m2e_startFrameChk, 0, wx.ALL, 3)\n    frames_grid_sizer.Add(self.m2e_startFrameSpin, 0, 0, 0)\n    frames_grid_sizer.Add(self.m2e_endFrameChk, 0, wx.ALL, 3)\n    frames_grid_sizer.Add(self.m2e_endFrameSpin, 0, 0, 0)\n    frames_grid_sizer.Add(self.m2e_frameRateInChk, 0, wx.ALL, 3)\n    frames_grid_sizer.Add(self.m2e_frameRateInSpin, 0, 0, 0)\n    frames_grid_sizer.Add(self.m2e_frameRateOutChk, 0, wx.ALL, 3)\n    frames_grid_sizer.Add(self.m2e_frameRateOutSpin, 0, 0, 0)\n    animation_options_grid_sizer.Add(frames_grid_sizer, 1, wx.ALL, 0)\n    names_grid_sizer = wx.FlexGridSizer(1, 2, 0, 0)\n    names_grid_sizer.Add(self.m2e_charNameChk, 1, wx.ALL, 3)\n    names_grid_sizer.Add(self.m2e_charNameTxt, 1, wx.ALL, 0)\n    animation_options_grid_sizer.Add(names_grid_sizer, 1, wx.ALL, 0)\n    animation_options_static_sizer.Add(animation_options_grid_sizer)\n    self.m2e_anim_options_panel.SetSizer(animation_options_static_sizer)\n    maya2egg_grid_sizer.Add(self.m2e_anim_options_panel, 1, wx.TOP | wx.EXPAND, 10)\n    self.m2e_tex_options_sizer_staticbox.Lower()\n    tex_options_static_sizer = wx.StaticBoxSizer(self.m2e_tex_options_sizer_staticbox, wx.VERTICAL)\n    tex_options_grid_sizer = wx.FlexGridSizer(2, 1, 0, 0)\n    tex_options_grid_sizer.Add(self.m2e_legacyShaderChk, 1, wx.ALL, 3)\n    copytex_sizer = wx.FlexGridSizer(2, 3, 0, 0)\n    copytex_sizer.Add(self.m2e_copyTexChk, 1, wx.ALL, 3)\n    copytex_sizer.Add(self.m2e_copyTexPathTxt, 1, wx.TOP, 1)\n    copytex_sizer.Add(self.m2e_copyTexPathBtn, 1, wx.ALL, 0)\n    copytex_sizer.Add(self.m2e_pathReplaceChk, 1, wx.ALL, 3)\n    copytex_sizer.Add(self.m2e_pathReplaceTxt, 1, wx.TOP, 1)\n    copytex_sizer.Add(self.m2e_pathReplaceBtn, 1, wx.ALL, 0)\n    tex_options_grid_sizer.Add(copytex_sizer, 1, wx.ALL, 0)\n    tex_options_static_sizer.Add(tex_options_grid_sizer)\n    self.m2e_tex_options_panel.SetSizer(tex_options_static_sizer)\n    maya2egg_grid_sizer.Add(self.m2e_tex_options_panel, 1, wx.TOP | wx.EXPAND, 10)\n    self.tool_options_panel.SetSizer(self.tool_options_static_sizer)\n    top_left_sizer.Add(self.tool_options_panel, 1, wx.ALL | wx.EXPAND, 0)\n    batch_item_grid_sizer = wx.FlexGridSizer(1, 3, 0, 0)\n    batch_item_grid_sizer.Add(self.batchItemNameLbl, -1, wx.ALL, 4)\n    batch_item_grid_sizer.Add(self.batchItemNameTxt, -1, wx.ALL, 1)\n    batch_item_grid_sizer.Add(self.addToBatchBtn, -1, wx.LEFT, 5)\n    top_left_sizer.Add(batch_item_grid_sizer, 1, wx.TOP, 6)\n    egg2bam_grid_sizer = wx.FlexGridSizer(8, 1, 0, 0)\n    file_flex_grid_sizer = wx.FlexGridSizer(2, 3, 0, 0)\n    file_flex_grid_sizer.Add(self.e2b_eggFileLbl, 1, wx.TOP, 5)\n    file_flex_grid_sizer.Add(self.e2b_eggFileTxt, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.e2b_eggFileBtn, 1, 0, 0)\n    file_flex_grid_sizer.Add(self.e2b_exportDestLbl, 1, wx.TOP, 5)\n    file_flex_grid_sizer.Add(self.e2b_exportDestTxt, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.e2b_exportDestBtn, 1, 0, 0)\n    egg2bam_grid_sizer.Add(file_flex_grid_sizer, 1, wx.ALL, 0)\n    self.egg2bam_panel.SetSizer(egg2bam_grid_sizer)\n    self.tool_options_static_sizer.Add(self.egg2bam_panel, 1, wx.ALL, 0)\n    bam_batch_sizer = wx.FlexGridSizer(1, 2, 0, 0)\n    bam_batch_sizer.Add(self.e2b_bamBatchOutputLbl, 1, wx.TOP, 4)\n    bam_batch_sizer.Add(self.e2b_bamBatchOutputBtn, 1, wx.LEFT, 3)\n    egg2bam_grid_sizer.Add(bam_batch_sizer, 1, wx.TOP | wx.ALIGN_RIGHT, 5)\n    self.e2b_options_sizer_staticbox.Lower()\n    e2b_options_static_sizer = wx.StaticBoxSizer(self.e2b_options_sizer_staticbox, wx.VERTICAL)\n    e2b_options_grid_sizer = wx.FlexGridSizer(6, 1, 0, 0)\n    e2b_options_grid_sizer.Add(self.e2b_useCurrEggChk, 1, wx.ALL, 3)\n    e2b_options_grid_sizer.Add(self.e2b_flattenChk, 1, wx.ALL, 3)\n    e2b_options_grid_sizer.Add(self.e2b_embedTexChk, 1, wx.ALL, 3)\n    e2b_options_static_sizer.Add(e2b_options_grid_sizer)\n    self.e2b_options_panel.SetSizer(e2b_options_static_sizer)\n    egg2bam_grid_sizer.Add(self.e2b_options_panel, 1, wx.TOP | wx.EXPAND, 10)\n    eggRename_grid_sizer = wx.FlexGridSizer(8, 1, 0, 0)\n    file_flex_grid_sizer = wx.FlexGridSizer(4, 3, 0, 0)\n    file_flex_grid_sizer.Add(self.rename_eggFilesLbl, 1, wx.TOP, 5)\n    file_flex_grid_sizer.Add(self.rename_eggFilesTree, 1, wx.ALL, 1)\n    eggfiles_grid_sizer = wx.FlexGridSizer(4, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.rename_addEggBtn, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.rename_addFromBatchBtn, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.rename_removeEggBtn, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.rename_removeAllEggsBtn, 1, 0, 0)\n    file_flex_grid_sizer.Add(eggfiles_grid_sizer, 1, 0, 0)\n    file_flex_grid_sizer.Add(self.rename_exportDestLbl, 1, wx.TOP, 0)\n    file_flex_grid_sizer.Add(self.rename_exportInPlaceChk, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add((10, 2), 0, 0)\n    file_flex_grid_sizer.Add(self.rename_exportDirLbl, 1, wx.TOP | wx.ALIGN_RIGHT, 3)\n    file_flex_grid_sizer.Add(self.rename_exportDirTxt, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.rename_exportDirBtn, 1, 0, 0)\n    file_flex_grid_sizer.Add(self.rename_exportFileLbl, 1, wx.TOP | wx.ALIGN_RIGHT, 3)\n    file_flex_grid_sizer.Add(self.rename_exportFileTxt, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.rename_exportFileBtn, 1, 0, 0)\n    eggRename_grid_sizer.Add(file_flex_grid_sizer, 1, wx.ALL, 0)\n    self.eggRename_panel.SetSizer(eggRename_grid_sizer)\n    self.tool_options_static_sizer.Add(self.eggRename_panel, 1, wx.ALL | wx.EXPAND, 0)\n    self.rename_options_sizer_staticbox.Lower()\n    rename_options_static_sizer = wx.StaticBoxSizer(self.rename_options_sizer_staticbox, wx.VERTICAL)\n    rename_options_grid_sizer = wx.FlexGridSizer(6, 1, 0, 0)\n    prefix_sizer = wx.FlexGridSizer(2, 2, 0, 0)\n    prefix_sizer.Add(self.rename_stripPrefixChk, 1, wx.ALL, 3)\n    prefix_sizer.Add(self.rename_stripPrefixTxt, 1, wx.LEFT, 2)\n    rename_options_grid_sizer.Add(prefix_sizer, 1, wx.ALL, 0)\n    rename_options_static_sizer.Add(rename_options_grid_sizer)\n    self.rename_options_panel.SetSizer(rename_options_static_sizer)\n    eggRename_grid_sizer.Add(self.rename_options_panel, 1, wx.TOP | wx.EXPAND, 10)\n    eggOptChar_grid_sizer = wx.FlexGridSizer(8, 1, 0, 0)\n    file_flex_grid_sizer = wx.FlexGridSizer(4, 3, 0, 0)\n    file_flex_grid_sizer.Add(self.optchar_eggFilesLbl, 1, wx.TOP, 5)\n    file_flex_grid_sizer.Add(self.optchar_eggFilesTree, 1, wx.ALL, 1)\n    eggfiles_grid_sizer = wx.FlexGridSizer(4, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.optchar_addEggBtn, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.optchar_addFromBatchBtn, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.optchar_removeEggBtn, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.optchar_removeAllEggsBtn, 1, 0, 0)\n    file_flex_grid_sizer.Add(eggfiles_grid_sizer, 1, 0, 0)\n    file_flex_grid_sizer.Add(self.optchar_exportDestLbl, 1, wx.TOP, 0)\n    file_flex_grid_sizer.Add(self.optchar_exportInPlaceChk, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add((10, 2), 0, 0)\n    file_flex_grid_sizer.Add(self.optchar_exportDirLbl, 1, wx.TOP | wx.ALIGN_RIGHT, 3)\n    file_flex_grid_sizer.Add(self.optchar_exportDirTxt, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.optchar_exportDirBtn, 1, 0, 0)\n    file_flex_grid_sizer.Add(self.optchar_exportFileLbl, 1, wx.TOP | wx.ALIGN_RIGHT, 3)\n    file_flex_grid_sizer.Add(self.optchar_exportFileTxt, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.optchar_exportFileBtn, 1, 0, 0)\n    eggOptChar_grid_sizer.Add(file_flex_grid_sizer, 1, wx.ALL, 0)\n    self.eggOptChar_panel.SetSizer(eggOptChar_grid_sizer)\n    self.tool_options_static_sizer.Add(self.eggOptChar_panel, 1, wx.ALL | wx.EXPAND, 0)\n    self.optchar_options_sizer_staticbox.Lower()\n    optchar_options_static_sizer = wx.StaticBoxSizer(self.optchar_options_sizer_staticbox, wx.VERTICAL)\n    optchar_options_grid_sizer = wx.FlexGridSizer(6, 1, 0, 0)\n    joint_options_sizer = wx.FlexGridSizer(4, 2, 0, 0)\n    joint_options_sizer.Add(self.optchar_keepAllJointsChk, 1, wx.ALL, 3)\n    joint_options_sizer.Add((10, 0), 0, 0)\n    joint_options_sizer.Add(self.optchar_keepJointsChk, 1, wx.ALL, 3)\n    joint_options_sizer.Add(self.optchar_keepJointsTxt, 1, wx.LEFT, 2)\n    joint_options_sizer.Add(self.optchar_dropJointsChk, 1, wx.ALL, 3)\n    joint_options_sizer.Add(self.optchar_dropJointsTxt, 1, wx.LEFT, 2)\n    joint_options_sizer.Add(self.optchar_exposeJointsChk, 1, wx.ALL, 3)\n    joint_options_sizer.Add(self.optchar_exposeJointsTxt, 1, wx.LEFT, 2)\n    joint_options_sizer.Add(self.optchar_flagGeometryChk, 1, wx.ALL, 3)\n    joint_options_sizer.Add(self.optchar_flagGeometryTxt, 1, wx.LEFT, 2)\n    optchar_options_grid_sizer.Add(joint_options_sizer, 1, wx.ALL, 0)\n    optchar_options_grid_sizer.Add(self.optchar_dartChoice, 1, wx.ALL, 0)\n    optchar_options_static_sizer.Add(optchar_options_grid_sizer)\n    self.optchar_options_panel.SetSizer(optchar_options_static_sizer)\n    eggOptChar_grid_sizer.Add(self.optchar_options_panel, 1, wx.TOP | wx.EXPAND, 10)\n    eggPalettize_grid_sizer = wx.FlexGridSizer(8, 1, 0, 0)\n    file_flex_grid_sizer = wx.FlexGridSizer(5, 3, 0, 0)\n    file_flex_grid_sizer.Add(self.palettize_eggFilesLbl, 1, wx.TOP, 5)\n    file_flex_grid_sizer.Add(self.palettize_eggFilesTree, 1, wx.ALL, 1)\n    eggfiles_grid_sizer = wx.FlexGridSizer(4, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.palettize_addEggBtn, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.palettize_addFromBatchBtn, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.palettize_removeEggBtn, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.palettize_removeAllEggsBtn, 1, 0, 0)\n    file_flex_grid_sizer.Add(eggfiles_grid_sizer, 1, 0, 0)\n    file_flex_grid_sizer.Add(self.palettize_exportDestLbl, 1, wx.TOP, 0)\n    file_flex_grid_sizer.Add(self.palettize_exportInPlaceChk, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add((10, 2), 0, 0)\n    file_flex_grid_sizer.Add(self.palettize_exportDirLbl, 1, wx.TOP | wx.ALIGN_RIGHT, 3)\n    file_flex_grid_sizer.Add(self.palettize_exportDirTxt, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.palettize_exportDirBtn, 1, 0, 0)\n    file_flex_grid_sizer.Add(self.palettize_exportFileLbl, 1, wx.TOP | wx.ALIGN_RIGHT, 3)\n    file_flex_grid_sizer.Add(self.palettize_exportFileTxt, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.palettize_exportFileBtn, 1, 0, 0)\n    file_flex_grid_sizer.Add(self.palettize_exportTexLbl, 1, wx.TOP | wx.ALIGN_RIGHT, 3)\n    file_flex_grid_sizer.Add(self.palettize_exportTexTxt, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.palettize_exportTexBtn, 1, 0, 0)\n    eggPalettize_grid_sizer.Add(file_flex_grid_sizer, 1, wx.ALL, 0)\n    self.eggPalettize_panel.SetSizer(eggPalettize_grid_sizer)\n    self.tool_options_static_sizer.Add(self.eggPalettize_panel, 1, wx.ALL | wx.EXPAND, 0)\n    self.palettize_options_sizer_staticbox.Lower()\n    palettize_options_static_sizer = wx.StaticBoxSizer(self.palettize_options_sizer_staticbox, wx.VERTICAL)\n    palettize_options_grid_sizer = wx.FlexGridSizer(6, 1, 0, 0)\n    save_flex_grid_sizer = wx.FlexGridSizer(2, 3, 0, 0)\n    save_flex_grid_sizer.Add(self.palettize_saveTxaLbl, 0, wx.TOP, 3)\n    save_flex_grid_sizer.Add(self.palettize_saveTxaTxt, 0, wx.ALL, 1)\n    save_flex_grid_sizer.Add(self.palettize_loadTxaBtn, 0, 0, 0)\n    save_flex_grid_sizer.Add((10, 2), 0, 0)\n    save_flex_grid_sizer.Add((10, 2), 0, 0)\n    save_flex_grid_sizer.Add(self.palettize_saveTxaBtn, 0, 0, 0)\n    palettize_options_grid_sizer.Add(save_flex_grid_sizer, 1, wx.TOP, 6)\n    txa_grid_sizer = wx.FlexGridSizer(4, 2, 0, 0)\n    palettize_size_sizer = wx.FlexGridSizer(1, 5, 0, 0)\n    palettize_size_sizer.Add(self.palettize_sizeWidthTxt, 0, 0, 0)\n    palettize_size_sizer.Add(self.palettize_sizeByLbl, 0, wx.TOP, 3)\n    palettize_size_sizer.Add(self.palettize_sizeHeightTxt, 0, wx.RIGHT, 10)\n    palettize_size_sizer.Add(self.palettize_powerOf2Chk, 1, wx.ALL, 4)\n    txa_grid_sizer.Add(self.palettize_sizeLbl, 0, wx.TOP | wx.ALIGN_RIGHT, 3)\n    txa_grid_sizer.Add(palettize_size_sizer, 0, wx.ALL, 1)\n    txa_grid_sizer.Add(self.palettize_imageTypeLbl, 1, wx.TOP | wx.ALIGN_RIGHT, 16)\n    txa_grid_sizer.Add(self.palettize_imageTypeChoice, 1, wx.ALL, 0)\n    self.palettize_color_sizer_staticbox.Lower()\n    color_static_sizer = wx.StaticBoxSizer(self.palettize_color_sizer_staticbox, wx.HORIZONTAL)\n    color_flex_grid_sizer = wx.FlexGridSizer(1, 8, 0, 0)\n    color_flex_grid_sizer.Add(self.palettize_redLbl, 0, wx.TOP, 3)\n    color_flex_grid_sizer.Add(self.palettize_redTxt, 0, wx.RIGHT, 6)\n    color_flex_grid_sizer.Add(self.palettize_greenLbl, 0, wx.TOP, 3)\n    color_flex_grid_sizer.Add(self.palettize_greenTxt, 0, wx.RIGHT, 6)\n    color_flex_grid_sizer.Add(self.palettize_blueLbl, 0, wx.TOP, 3)\n    color_flex_grid_sizer.Add(self.palettize_blueTxt, 0, wx.RIGHT, 6)\n    color_flex_grid_sizer.Add(self.palettize_alphaLbl, 0, wx.TOP, 3)\n    color_flex_grid_sizer.Add(self.palettize_alphaTxt, 0, wx.RIGHT, 6)\n    color_static_sizer.Add(color_flex_grid_sizer, 1, 0, 0)\n    txa_grid_sizer.Add(self.palettize_colorLbl, 1, wx.TOP | wx.ALIGN_RIGHT, 13)\n    txa_grid_sizer.Add(color_static_sizer, 1, wx.ALL, 0)\n    txa_grid_sizer.Add(self.palettize_marginLbl, 1, wx.TOP | wx.ALIGN_RIGHT, 8)\n    txa_grid_sizer.Add(self.palettize_marginTxt, 1, wx.TOP, 5)\n    txa_grid_sizer.Add(self.palettize_coverageLbl, 1, wx.TOP | wx.ALIGN_RIGHT, 8)\n    txa_grid_sizer.Add(self.palettize_coverageTxt, 1, wx.TOP, 5)\n    palettize_options_grid_sizer.Add(txa_grid_sizer, 1, wx.ALL, 0)\n    palettize_options_static_sizer.Add(palettize_options_grid_sizer)\n    self.palettize_options_panel.SetSizer(palettize_options_static_sizer)\n    eggPalettize_grid_sizer.Add(self.palettize_options_panel, 1, wx.TOP | wx.EXPAND, 10)\n    self.batch_static_sizer_staticbox.Lower()\n    batch_static_sizer = wx.StaticBoxSizer(self.batch_static_sizer_staticbox, wx.VERTICAL)\n    batch_grid_sizer = wx.FlexGridSizer(3, 1, 0, 0)\n    batch_buttons_sizer = wx.FlexGridSizer(1, 6, 0, 0)\n    batch_buttons_sizer.Add(self.loadBatchButton, 1, wx.ALL, 2)\n    batch_buttons_sizer.Add(self.saveBatchButton, 1, wx.ALL, 2)\n    batch_buttons_sizer.Add(self.sortBatchButton, 1, wx.ALL, 2)\n    batch_buttons_sizer.Add(self.changePathsButton, 1, wx.ALL, 2)\n    batch_buttons_sizer.Add((25, 0), 0, 0)\n    batch_grid_sizer.Add(batch_buttons_sizer, 1, wx.ALIGN_LEFT, 0)\n    batch_grid_sizer.Add(self.batchTree, 1, wx.ALL | wx.ALIGN_LEFT | wx.EXPAND, 2)\n    batch_controls_sizer = wx.FlexGridSizer(1, 3, 0, 0)\n    batch_controls_sizer.Add(self.editSelBatchButton, 1, wx.ALL, 2)\n    batch_controls_sizer.Add(self.removeSelBatchButton, 1, wx.ALL, 2)\n    batch_controls_sizer.Add(self.removeAllBatchButton, 1, wx.ALL, 2)\n    batch_grid_sizer.Add(batch_controls_sizer, 1, wx.ALIGN_LEFT, 0)\n    batch_static_sizer.Add(batch_grid_sizer, 1, wx.EXPAND)\n    self.batch_panel.SetSizer(batch_static_sizer)\n    top_right_sizer.Add(self.batch_panel, 1, wx.ALIGN_TOP | wx.EXPAND, 0)\n    self.console_static_sizer_staticbox.Lower()\n    console_static_sizer = wx.StaticBoxSizer(self.console_static_sizer_staticbox, wx.VERTICAL)\n    console_grid_sizer = wx.FlexGridSizer(2, 1, 0, 0)\n    console_controls_sizer = wx.BoxSizer(wx.HORIZONTAL)\n    console_buttons_sizer = wx.FlexGridSizer(1, 6, 0, 0)\n    console_buttons_sizer.Add(self.runBatchButton, 1, wx.ALL, 2)\n    console_buttons_sizer.Add(self.clearConsoleButton, 1, wx.ALL, 2)\n    console_buttons_sizer.Add(self.runPviewButton, 1, wx.ALL, 2)\n    console_controls_sizer.Add(console_buttons_sizer)\n    console_options_sizer = wx.FlexGridSizer(2, 1, 0, 0)\n    console_options_sizer.Add(self.ignoreModDates, 0, wx.ALL, 0)\n    panda_dir_sizer = wx.BoxSizer(wx.HORIZONTAL)\n    panda_dir_sizer.Add(self.pathLbl, 0, wx.TOP, 4)\n    panda_dir_sizer.Add(self.pandaPathTxt, 0, wx.TOP, 1)\n    panda_dir_sizer.Add(self.loadPandaPathBtn, 0, wx.ALL, 0)\n    console_options_sizer.Add(panda_dir_sizer, 0, 0, 0)\n    console_controls_sizer.Add(console_options_sizer, 0, wx.LEFT | wx.ALIGN_RIGHT, 25)\n    main_sizer.Add(self.console_panel, -1, wx.ALIGN_TOP | wx.EXPAND | wx.RIGHT | wx.BOTTOM, 5)\n    self.console_panel.SetSizer(console_static_sizer)\n    console_grid_sizer.Add(console_controls_sizer, 1, wx.ALIGN_LEFT, 0)\n    console_grid_sizer.Add(self.consoleOutputTxt, 1, wx.ALIGN_LEFT | wx.EXPAND | wx.TOP | wx.BOTTOM, 3)\n    console_static_sizer.Add(console_grid_sizer, 1, wx.EXPAND)\n    self.main_panel.SetSizer(main_sizer)\n    self.tab_panel.AddPage(self.simple_panel, 'Simple Mode')\n    self.tab_panel.AddPage(self.main_panel, 'Advanced Mode')\n    tab_panel_sizer.Add(self.tab_panel, 1, wx.EXPAND, 0)\n    self.SetSizer(tab_panel_sizer)\n    tab_panel_sizer.Fit(self)\n    self.SetSize((WINDOW_WIDTH, WINDOW_HEIGHT))\n    self.Layout()",
            "def __do_layout(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    tab_panel_sizer = wx.BoxSizer(wx.HORIZONTAL)\n    self.simple_options_sizer_staticbox.Lower()\n    simple_sizer = wx.FlexGridSizer(1, 1, 0, 0)\n    simple_options_static_sizer = wx.StaticBoxSizer(self.simple_options_sizer_staticbox, wx.VERTICAL)\n    file_flex_grid_sizer = wx.FlexGridSizer(3, 3, 0, 0)\n    file_flex_grid_sizer.Add(self.simple_mayaFileLbl, -1, wx.TOP, 5)\n    file_flex_grid_sizer.Add(self.simple_mayaFileTxt, -1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.simple_mayaFileBtn, -1, 0, 0)\n    file_flex_grid_sizer.Add(self.simple_exportDestLbl, -1, wx.TOP, 5)\n    file_flex_grid_sizer.Add(self.simple_exportDestTxt, -1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.simple_exportDestBtn, -1, 0, 0)\n    file_flex_grid_sizer.Add(self.simple_mayaVerLbl, 1, wx.TOP, 5)\n    file_flex_grid_sizer.Add(self.simple_mayaVerComboBox, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.simple_runExportBtn, -1, 0, 0)\n    simple_options_static_sizer.Add(file_flex_grid_sizer)\n    simple_options_static_sizer.Add(self.simple_animOptChoice)\n    self.simple_options_panel.SetSizer(simple_options_static_sizer)\n    simple_sizer.Add(self.simple_options_panel)\n    self.simple_panel.SetSizer(simple_sizer)\n    main_sizer = wx.FlexGridSizer(4, 1, 0, 0)\n    top_sizer = wx.FlexGridSizer(1, 2, 0, 0)\n    main_sizer.Add(top_sizer, 0, wx.EXPAND, 0)\n    top_left_sizer = wx.FlexGridSizer(3, 1, 0, 0)\n    top_right_sizer = wx.FlexGridSizer(3, 1, 0, 0)\n    top_sizer.Add(top_left_sizer, 0, wx.ALL | wx.EXPAND, 5)\n    top_sizer.Add(top_right_sizer, 0, wx.ALL | wx.EXPAND, 5)\n    top_left_sizer.Add(self.toolComboBox, 0, wx.ALL, 5)\n    self.tool_options_sizer_staticbox.Lower()\n    self.tool_options_static_sizer = wx.StaticBoxSizer(self.tool_options_sizer_staticbox, wx.VERTICAL)\n    maya2egg_grid_sizer = wx.FlexGridSizer(8, 1, 0, 0)\n    file_flex_grid_sizer = wx.FlexGridSizer(2, 3, 0, 0)\n    file_flex_grid_sizer.Add(self.m2e_mayaFileLbl, 1, wx.TOP, 5)\n    file_flex_grid_sizer.Add(self.m2e_mayaFileTxt, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.m2e_mayaFileBtn, 1, 0, 0)\n    file_flex_grid_sizer.Add(self.m2e_exportDestLbl, 1, wx.TOP, 5)\n    file_flex_grid_sizer.Add(self.m2e_exportDestTxt, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.m2e_exportDestBtn, 1, 0, 0)\n    maya2egg_grid_sizer.Add(file_flex_grid_sizer, 1, wx.ALL, 0)\n    maya_ver_sizer = wx.FlexGridSizer(1, 2, 0, 0)\n    maya_ver_sizer.Add(self.m2e_mayaVerLbl, 1, wx.TOP | wx.RIGHT, 3)\n    maya_ver_sizer.Add(self.m2e_mayaVerComboBox, 1, wx.LEFT, 3)\n    maya2egg_grid_sizer.Add(maya_ver_sizer, 1, wx.TOP, 3)\n    self.maya2egg_panel.SetSizer(maya2egg_grid_sizer)\n    self.tool_options_static_sizer.Add(self.maya2egg_panel, 1, wx.ALL | wx.EXPAND, 0)\n    self.m2e_options_panel_sizer_staticbox.Lower()\n    general_options_static_sizer = wx.StaticBoxSizer(self.m2e_options_panel_sizer_staticbox, wx.VERTICAL)\n    general_options_grid_sizer = wx.FlexGridSizer(6, 1, 0, 0)\n    units_sizer = wx.FlexGridSizer(1, 4, 0, 0)\n    units_sizer.Add(self.m2e_mayaUnitsLbl, 1, wx.ALL, 3)\n    units_sizer.Add(self.m2e_mayaUnitsComboBox, 1, wx.RIGHT, 6)\n    units_sizer.Add(self.m2e_pandaUnitsLbl, 1, wx.ALL, 3)\n    units_sizer.Add(self.m2e_pandaUnitsComboBox, 1, wx.ALL, 0)\n    general_options_grid_sizer.Add(units_sizer)\n    general_options_grid_sizer.Add(self.m2e_backfaceChk, 1, wx.ALL, 3)\n    general_options_grid_sizer.Add(self.m2e_polygonOutputChk, 1, wx.ALL, 3)\n    general_options_grid_sizer.Add(self.m2e_tbnallChk, 1, wx.ALL, 3)\n    subroots_sizer = wx.FlexGridSizer(3, 2, 0, 0)\n    subroots_sizer.Add(self.m2e_subrootsChk, 1, wx.ALL, 3)\n    subroots_sizer.Add(self.m2e_subrootsTxt, 1, wx.LEFT, 1)\n    subroots_sizer.Add(self.m2e_subsetsChk, 1, wx.ALL, 3)\n    subroots_sizer.Add(self.m2e_subsetsTxt, 1, wx.LEFT, 1)\n    subroots_sizer.Add(self.m2e_excludesChk, 1, wx.ALL, 3)\n    subroots_sizer.Add(self.m2e_excludesTxt, 1, wx.LEFT, 1)\n    general_options_grid_sizer.Add(subroots_sizer, 1, wx.ALL, 0)\n    general_options_static_sizer.Add(general_options_grid_sizer)\n    self.m2e_options_panel.SetSizer(general_options_static_sizer)\n    maya2egg_grid_sizer.Add(self.m2e_options_panel, 1, wx.TOP | wx.EXPAND, 10)\n    self.m2e_anim_options_sizer_staticbox.Lower()\n    animation_options_static_sizer = wx.StaticBoxSizer(self.m2e_anim_options_sizer_staticbox, wx.VERTICAL)\n    animation_options_grid_sizer = wx.FlexGridSizer(6, 1, 0, 0)\n    animation_options_grid_sizer.Add(self.m2e_animOptChoice, 1, wx.BOTTOM, 3)\n    frames_grid_sizer = wx.FlexGridSizer(4, 2, 0, 0)\n    frames_grid_sizer.Add(self.m2e_startFrameChk, 0, wx.ALL, 3)\n    frames_grid_sizer.Add(self.m2e_startFrameSpin, 0, 0, 0)\n    frames_grid_sizer.Add(self.m2e_endFrameChk, 0, wx.ALL, 3)\n    frames_grid_sizer.Add(self.m2e_endFrameSpin, 0, 0, 0)\n    frames_grid_sizer.Add(self.m2e_frameRateInChk, 0, wx.ALL, 3)\n    frames_grid_sizer.Add(self.m2e_frameRateInSpin, 0, 0, 0)\n    frames_grid_sizer.Add(self.m2e_frameRateOutChk, 0, wx.ALL, 3)\n    frames_grid_sizer.Add(self.m2e_frameRateOutSpin, 0, 0, 0)\n    animation_options_grid_sizer.Add(frames_grid_sizer, 1, wx.ALL, 0)\n    names_grid_sizer = wx.FlexGridSizer(1, 2, 0, 0)\n    names_grid_sizer.Add(self.m2e_charNameChk, 1, wx.ALL, 3)\n    names_grid_sizer.Add(self.m2e_charNameTxt, 1, wx.ALL, 0)\n    animation_options_grid_sizer.Add(names_grid_sizer, 1, wx.ALL, 0)\n    animation_options_static_sizer.Add(animation_options_grid_sizer)\n    self.m2e_anim_options_panel.SetSizer(animation_options_static_sizer)\n    maya2egg_grid_sizer.Add(self.m2e_anim_options_panel, 1, wx.TOP | wx.EXPAND, 10)\n    self.m2e_tex_options_sizer_staticbox.Lower()\n    tex_options_static_sizer = wx.StaticBoxSizer(self.m2e_tex_options_sizer_staticbox, wx.VERTICAL)\n    tex_options_grid_sizer = wx.FlexGridSizer(2, 1, 0, 0)\n    tex_options_grid_sizer.Add(self.m2e_legacyShaderChk, 1, wx.ALL, 3)\n    copytex_sizer = wx.FlexGridSizer(2, 3, 0, 0)\n    copytex_sizer.Add(self.m2e_copyTexChk, 1, wx.ALL, 3)\n    copytex_sizer.Add(self.m2e_copyTexPathTxt, 1, wx.TOP, 1)\n    copytex_sizer.Add(self.m2e_copyTexPathBtn, 1, wx.ALL, 0)\n    copytex_sizer.Add(self.m2e_pathReplaceChk, 1, wx.ALL, 3)\n    copytex_sizer.Add(self.m2e_pathReplaceTxt, 1, wx.TOP, 1)\n    copytex_sizer.Add(self.m2e_pathReplaceBtn, 1, wx.ALL, 0)\n    tex_options_grid_sizer.Add(copytex_sizer, 1, wx.ALL, 0)\n    tex_options_static_sizer.Add(tex_options_grid_sizer)\n    self.m2e_tex_options_panel.SetSizer(tex_options_static_sizer)\n    maya2egg_grid_sizer.Add(self.m2e_tex_options_panel, 1, wx.TOP | wx.EXPAND, 10)\n    self.tool_options_panel.SetSizer(self.tool_options_static_sizer)\n    top_left_sizer.Add(self.tool_options_panel, 1, wx.ALL | wx.EXPAND, 0)\n    batch_item_grid_sizer = wx.FlexGridSizer(1, 3, 0, 0)\n    batch_item_grid_sizer.Add(self.batchItemNameLbl, -1, wx.ALL, 4)\n    batch_item_grid_sizer.Add(self.batchItemNameTxt, -1, wx.ALL, 1)\n    batch_item_grid_sizer.Add(self.addToBatchBtn, -1, wx.LEFT, 5)\n    top_left_sizer.Add(batch_item_grid_sizer, 1, wx.TOP, 6)\n    egg2bam_grid_sizer = wx.FlexGridSizer(8, 1, 0, 0)\n    file_flex_grid_sizer = wx.FlexGridSizer(2, 3, 0, 0)\n    file_flex_grid_sizer.Add(self.e2b_eggFileLbl, 1, wx.TOP, 5)\n    file_flex_grid_sizer.Add(self.e2b_eggFileTxt, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.e2b_eggFileBtn, 1, 0, 0)\n    file_flex_grid_sizer.Add(self.e2b_exportDestLbl, 1, wx.TOP, 5)\n    file_flex_grid_sizer.Add(self.e2b_exportDestTxt, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.e2b_exportDestBtn, 1, 0, 0)\n    egg2bam_grid_sizer.Add(file_flex_grid_sizer, 1, wx.ALL, 0)\n    self.egg2bam_panel.SetSizer(egg2bam_grid_sizer)\n    self.tool_options_static_sizer.Add(self.egg2bam_panel, 1, wx.ALL, 0)\n    bam_batch_sizer = wx.FlexGridSizer(1, 2, 0, 0)\n    bam_batch_sizer.Add(self.e2b_bamBatchOutputLbl, 1, wx.TOP, 4)\n    bam_batch_sizer.Add(self.e2b_bamBatchOutputBtn, 1, wx.LEFT, 3)\n    egg2bam_grid_sizer.Add(bam_batch_sizer, 1, wx.TOP | wx.ALIGN_RIGHT, 5)\n    self.e2b_options_sizer_staticbox.Lower()\n    e2b_options_static_sizer = wx.StaticBoxSizer(self.e2b_options_sizer_staticbox, wx.VERTICAL)\n    e2b_options_grid_sizer = wx.FlexGridSizer(6, 1, 0, 0)\n    e2b_options_grid_sizer.Add(self.e2b_useCurrEggChk, 1, wx.ALL, 3)\n    e2b_options_grid_sizer.Add(self.e2b_flattenChk, 1, wx.ALL, 3)\n    e2b_options_grid_sizer.Add(self.e2b_embedTexChk, 1, wx.ALL, 3)\n    e2b_options_static_sizer.Add(e2b_options_grid_sizer)\n    self.e2b_options_panel.SetSizer(e2b_options_static_sizer)\n    egg2bam_grid_sizer.Add(self.e2b_options_panel, 1, wx.TOP | wx.EXPAND, 10)\n    eggRename_grid_sizer = wx.FlexGridSizer(8, 1, 0, 0)\n    file_flex_grid_sizer = wx.FlexGridSizer(4, 3, 0, 0)\n    file_flex_grid_sizer.Add(self.rename_eggFilesLbl, 1, wx.TOP, 5)\n    file_flex_grid_sizer.Add(self.rename_eggFilesTree, 1, wx.ALL, 1)\n    eggfiles_grid_sizer = wx.FlexGridSizer(4, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.rename_addEggBtn, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.rename_addFromBatchBtn, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.rename_removeEggBtn, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.rename_removeAllEggsBtn, 1, 0, 0)\n    file_flex_grid_sizer.Add(eggfiles_grid_sizer, 1, 0, 0)\n    file_flex_grid_sizer.Add(self.rename_exportDestLbl, 1, wx.TOP, 0)\n    file_flex_grid_sizer.Add(self.rename_exportInPlaceChk, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add((10, 2), 0, 0)\n    file_flex_grid_sizer.Add(self.rename_exportDirLbl, 1, wx.TOP | wx.ALIGN_RIGHT, 3)\n    file_flex_grid_sizer.Add(self.rename_exportDirTxt, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.rename_exportDirBtn, 1, 0, 0)\n    file_flex_grid_sizer.Add(self.rename_exportFileLbl, 1, wx.TOP | wx.ALIGN_RIGHT, 3)\n    file_flex_grid_sizer.Add(self.rename_exportFileTxt, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.rename_exportFileBtn, 1, 0, 0)\n    eggRename_grid_sizer.Add(file_flex_grid_sizer, 1, wx.ALL, 0)\n    self.eggRename_panel.SetSizer(eggRename_grid_sizer)\n    self.tool_options_static_sizer.Add(self.eggRename_panel, 1, wx.ALL | wx.EXPAND, 0)\n    self.rename_options_sizer_staticbox.Lower()\n    rename_options_static_sizer = wx.StaticBoxSizer(self.rename_options_sizer_staticbox, wx.VERTICAL)\n    rename_options_grid_sizer = wx.FlexGridSizer(6, 1, 0, 0)\n    prefix_sizer = wx.FlexGridSizer(2, 2, 0, 0)\n    prefix_sizer.Add(self.rename_stripPrefixChk, 1, wx.ALL, 3)\n    prefix_sizer.Add(self.rename_stripPrefixTxt, 1, wx.LEFT, 2)\n    rename_options_grid_sizer.Add(prefix_sizer, 1, wx.ALL, 0)\n    rename_options_static_sizer.Add(rename_options_grid_sizer)\n    self.rename_options_panel.SetSizer(rename_options_static_sizer)\n    eggRename_grid_sizer.Add(self.rename_options_panel, 1, wx.TOP | wx.EXPAND, 10)\n    eggOptChar_grid_sizer = wx.FlexGridSizer(8, 1, 0, 0)\n    file_flex_grid_sizer = wx.FlexGridSizer(4, 3, 0, 0)\n    file_flex_grid_sizer.Add(self.optchar_eggFilesLbl, 1, wx.TOP, 5)\n    file_flex_grid_sizer.Add(self.optchar_eggFilesTree, 1, wx.ALL, 1)\n    eggfiles_grid_sizer = wx.FlexGridSizer(4, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.optchar_addEggBtn, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.optchar_addFromBatchBtn, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.optchar_removeEggBtn, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.optchar_removeAllEggsBtn, 1, 0, 0)\n    file_flex_grid_sizer.Add(eggfiles_grid_sizer, 1, 0, 0)\n    file_flex_grid_sizer.Add(self.optchar_exportDestLbl, 1, wx.TOP, 0)\n    file_flex_grid_sizer.Add(self.optchar_exportInPlaceChk, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add((10, 2), 0, 0)\n    file_flex_grid_sizer.Add(self.optchar_exportDirLbl, 1, wx.TOP | wx.ALIGN_RIGHT, 3)\n    file_flex_grid_sizer.Add(self.optchar_exportDirTxt, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.optchar_exportDirBtn, 1, 0, 0)\n    file_flex_grid_sizer.Add(self.optchar_exportFileLbl, 1, wx.TOP | wx.ALIGN_RIGHT, 3)\n    file_flex_grid_sizer.Add(self.optchar_exportFileTxt, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.optchar_exportFileBtn, 1, 0, 0)\n    eggOptChar_grid_sizer.Add(file_flex_grid_sizer, 1, wx.ALL, 0)\n    self.eggOptChar_panel.SetSizer(eggOptChar_grid_sizer)\n    self.tool_options_static_sizer.Add(self.eggOptChar_panel, 1, wx.ALL | wx.EXPAND, 0)\n    self.optchar_options_sizer_staticbox.Lower()\n    optchar_options_static_sizer = wx.StaticBoxSizer(self.optchar_options_sizer_staticbox, wx.VERTICAL)\n    optchar_options_grid_sizer = wx.FlexGridSizer(6, 1, 0, 0)\n    joint_options_sizer = wx.FlexGridSizer(4, 2, 0, 0)\n    joint_options_sizer.Add(self.optchar_keepAllJointsChk, 1, wx.ALL, 3)\n    joint_options_sizer.Add((10, 0), 0, 0)\n    joint_options_sizer.Add(self.optchar_keepJointsChk, 1, wx.ALL, 3)\n    joint_options_sizer.Add(self.optchar_keepJointsTxt, 1, wx.LEFT, 2)\n    joint_options_sizer.Add(self.optchar_dropJointsChk, 1, wx.ALL, 3)\n    joint_options_sizer.Add(self.optchar_dropJointsTxt, 1, wx.LEFT, 2)\n    joint_options_sizer.Add(self.optchar_exposeJointsChk, 1, wx.ALL, 3)\n    joint_options_sizer.Add(self.optchar_exposeJointsTxt, 1, wx.LEFT, 2)\n    joint_options_sizer.Add(self.optchar_flagGeometryChk, 1, wx.ALL, 3)\n    joint_options_sizer.Add(self.optchar_flagGeometryTxt, 1, wx.LEFT, 2)\n    optchar_options_grid_sizer.Add(joint_options_sizer, 1, wx.ALL, 0)\n    optchar_options_grid_sizer.Add(self.optchar_dartChoice, 1, wx.ALL, 0)\n    optchar_options_static_sizer.Add(optchar_options_grid_sizer)\n    self.optchar_options_panel.SetSizer(optchar_options_static_sizer)\n    eggOptChar_grid_sizer.Add(self.optchar_options_panel, 1, wx.TOP | wx.EXPAND, 10)\n    eggPalettize_grid_sizer = wx.FlexGridSizer(8, 1, 0, 0)\n    file_flex_grid_sizer = wx.FlexGridSizer(5, 3, 0, 0)\n    file_flex_grid_sizer.Add(self.palettize_eggFilesLbl, 1, wx.TOP, 5)\n    file_flex_grid_sizer.Add(self.palettize_eggFilesTree, 1, wx.ALL, 1)\n    eggfiles_grid_sizer = wx.FlexGridSizer(4, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.palettize_addEggBtn, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.palettize_addFromBatchBtn, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.palettize_removeEggBtn, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.palettize_removeAllEggsBtn, 1, 0, 0)\n    file_flex_grid_sizer.Add(eggfiles_grid_sizer, 1, 0, 0)\n    file_flex_grid_sizer.Add(self.palettize_exportDestLbl, 1, wx.TOP, 0)\n    file_flex_grid_sizer.Add(self.palettize_exportInPlaceChk, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add((10, 2), 0, 0)\n    file_flex_grid_sizer.Add(self.palettize_exportDirLbl, 1, wx.TOP | wx.ALIGN_RIGHT, 3)\n    file_flex_grid_sizer.Add(self.palettize_exportDirTxt, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.palettize_exportDirBtn, 1, 0, 0)\n    file_flex_grid_sizer.Add(self.palettize_exportFileLbl, 1, wx.TOP | wx.ALIGN_RIGHT, 3)\n    file_flex_grid_sizer.Add(self.palettize_exportFileTxt, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.palettize_exportFileBtn, 1, 0, 0)\n    file_flex_grid_sizer.Add(self.palettize_exportTexLbl, 1, wx.TOP | wx.ALIGN_RIGHT, 3)\n    file_flex_grid_sizer.Add(self.palettize_exportTexTxt, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.palettize_exportTexBtn, 1, 0, 0)\n    eggPalettize_grid_sizer.Add(file_flex_grid_sizer, 1, wx.ALL, 0)\n    self.eggPalettize_panel.SetSizer(eggPalettize_grid_sizer)\n    self.tool_options_static_sizer.Add(self.eggPalettize_panel, 1, wx.ALL | wx.EXPAND, 0)\n    self.palettize_options_sizer_staticbox.Lower()\n    palettize_options_static_sizer = wx.StaticBoxSizer(self.palettize_options_sizer_staticbox, wx.VERTICAL)\n    palettize_options_grid_sizer = wx.FlexGridSizer(6, 1, 0, 0)\n    save_flex_grid_sizer = wx.FlexGridSizer(2, 3, 0, 0)\n    save_flex_grid_sizer.Add(self.palettize_saveTxaLbl, 0, wx.TOP, 3)\n    save_flex_grid_sizer.Add(self.palettize_saveTxaTxt, 0, wx.ALL, 1)\n    save_flex_grid_sizer.Add(self.palettize_loadTxaBtn, 0, 0, 0)\n    save_flex_grid_sizer.Add((10, 2), 0, 0)\n    save_flex_grid_sizer.Add((10, 2), 0, 0)\n    save_flex_grid_sizer.Add(self.palettize_saveTxaBtn, 0, 0, 0)\n    palettize_options_grid_sizer.Add(save_flex_grid_sizer, 1, wx.TOP, 6)\n    txa_grid_sizer = wx.FlexGridSizer(4, 2, 0, 0)\n    palettize_size_sizer = wx.FlexGridSizer(1, 5, 0, 0)\n    palettize_size_sizer.Add(self.palettize_sizeWidthTxt, 0, 0, 0)\n    palettize_size_sizer.Add(self.palettize_sizeByLbl, 0, wx.TOP, 3)\n    palettize_size_sizer.Add(self.palettize_sizeHeightTxt, 0, wx.RIGHT, 10)\n    palettize_size_sizer.Add(self.palettize_powerOf2Chk, 1, wx.ALL, 4)\n    txa_grid_sizer.Add(self.palettize_sizeLbl, 0, wx.TOP | wx.ALIGN_RIGHT, 3)\n    txa_grid_sizer.Add(palettize_size_sizer, 0, wx.ALL, 1)\n    txa_grid_sizer.Add(self.palettize_imageTypeLbl, 1, wx.TOP | wx.ALIGN_RIGHT, 16)\n    txa_grid_sizer.Add(self.palettize_imageTypeChoice, 1, wx.ALL, 0)\n    self.palettize_color_sizer_staticbox.Lower()\n    color_static_sizer = wx.StaticBoxSizer(self.palettize_color_sizer_staticbox, wx.HORIZONTAL)\n    color_flex_grid_sizer = wx.FlexGridSizer(1, 8, 0, 0)\n    color_flex_grid_sizer.Add(self.palettize_redLbl, 0, wx.TOP, 3)\n    color_flex_grid_sizer.Add(self.palettize_redTxt, 0, wx.RIGHT, 6)\n    color_flex_grid_sizer.Add(self.palettize_greenLbl, 0, wx.TOP, 3)\n    color_flex_grid_sizer.Add(self.palettize_greenTxt, 0, wx.RIGHT, 6)\n    color_flex_grid_sizer.Add(self.palettize_blueLbl, 0, wx.TOP, 3)\n    color_flex_grid_sizer.Add(self.palettize_blueTxt, 0, wx.RIGHT, 6)\n    color_flex_grid_sizer.Add(self.palettize_alphaLbl, 0, wx.TOP, 3)\n    color_flex_grid_sizer.Add(self.palettize_alphaTxt, 0, wx.RIGHT, 6)\n    color_static_sizer.Add(color_flex_grid_sizer, 1, 0, 0)\n    txa_grid_sizer.Add(self.palettize_colorLbl, 1, wx.TOP | wx.ALIGN_RIGHT, 13)\n    txa_grid_sizer.Add(color_static_sizer, 1, wx.ALL, 0)\n    txa_grid_sizer.Add(self.palettize_marginLbl, 1, wx.TOP | wx.ALIGN_RIGHT, 8)\n    txa_grid_sizer.Add(self.palettize_marginTxt, 1, wx.TOP, 5)\n    txa_grid_sizer.Add(self.palettize_coverageLbl, 1, wx.TOP | wx.ALIGN_RIGHT, 8)\n    txa_grid_sizer.Add(self.palettize_coverageTxt, 1, wx.TOP, 5)\n    palettize_options_grid_sizer.Add(txa_grid_sizer, 1, wx.ALL, 0)\n    palettize_options_static_sizer.Add(palettize_options_grid_sizer)\n    self.palettize_options_panel.SetSizer(palettize_options_static_sizer)\n    eggPalettize_grid_sizer.Add(self.palettize_options_panel, 1, wx.TOP | wx.EXPAND, 10)\n    self.batch_static_sizer_staticbox.Lower()\n    batch_static_sizer = wx.StaticBoxSizer(self.batch_static_sizer_staticbox, wx.VERTICAL)\n    batch_grid_sizer = wx.FlexGridSizer(3, 1, 0, 0)\n    batch_buttons_sizer = wx.FlexGridSizer(1, 6, 0, 0)\n    batch_buttons_sizer.Add(self.loadBatchButton, 1, wx.ALL, 2)\n    batch_buttons_sizer.Add(self.saveBatchButton, 1, wx.ALL, 2)\n    batch_buttons_sizer.Add(self.sortBatchButton, 1, wx.ALL, 2)\n    batch_buttons_sizer.Add(self.changePathsButton, 1, wx.ALL, 2)\n    batch_buttons_sizer.Add((25, 0), 0, 0)\n    batch_grid_sizer.Add(batch_buttons_sizer, 1, wx.ALIGN_LEFT, 0)\n    batch_grid_sizer.Add(self.batchTree, 1, wx.ALL | wx.ALIGN_LEFT | wx.EXPAND, 2)\n    batch_controls_sizer = wx.FlexGridSizer(1, 3, 0, 0)\n    batch_controls_sizer.Add(self.editSelBatchButton, 1, wx.ALL, 2)\n    batch_controls_sizer.Add(self.removeSelBatchButton, 1, wx.ALL, 2)\n    batch_controls_sizer.Add(self.removeAllBatchButton, 1, wx.ALL, 2)\n    batch_grid_sizer.Add(batch_controls_sizer, 1, wx.ALIGN_LEFT, 0)\n    batch_static_sizer.Add(batch_grid_sizer, 1, wx.EXPAND)\n    self.batch_panel.SetSizer(batch_static_sizer)\n    top_right_sizer.Add(self.batch_panel, 1, wx.ALIGN_TOP | wx.EXPAND, 0)\n    self.console_static_sizer_staticbox.Lower()\n    console_static_sizer = wx.StaticBoxSizer(self.console_static_sizer_staticbox, wx.VERTICAL)\n    console_grid_sizer = wx.FlexGridSizer(2, 1, 0, 0)\n    console_controls_sizer = wx.BoxSizer(wx.HORIZONTAL)\n    console_buttons_sizer = wx.FlexGridSizer(1, 6, 0, 0)\n    console_buttons_sizer.Add(self.runBatchButton, 1, wx.ALL, 2)\n    console_buttons_sizer.Add(self.clearConsoleButton, 1, wx.ALL, 2)\n    console_buttons_sizer.Add(self.runPviewButton, 1, wx.ALL, 2)\n    console_controls_sizer.Add(console_buttons_sizer)\n    console_options_sizer = wx.FlexGridSizer(2, 1, 0, 0)\n    console_options_sizer.Add(self.ignoreModDates, 0, wx.ALL, 0)\n    panda_dir_sizer = wx.BoxSizer(wx.HORIZONTAL)\n    panda_dir_sizer.Add(self.pathLbl, 0, wx.TOP, 4)\n    panda_dir_sizer.Add(self.pandaPathTxt, 0, wx.TOP, 1)\n    panda_dir_sizer.Add(self.loadPandaPathBtn, 0, wx.ALL, 0)\n    console_options_sizer.Add(panda_dir_sizer, 0, 0, 0)\n    console_controls_sizer.Add(console_options_sizer, 0, wx.LEFT | wx.ALIGN_RIGHT, 25)\n    main_sizer.Add(self.console_panel, -1, wx.ALIGN_TOP | wx.EXPAND | wx.RIGHT | wx.BOTTOM, 5)\n    self.console_panel.SetSizer(console_static_sizer)\n    console_grid_sizer.Add(console_controls_sizer, 1, wx.ALIGN_LEFT, 0)\n    console_grid_sizer.Add(self.consoleOutputTxt, 1, wx.ALIGN_LEFT | wx.EXPAND | wx.TOP | wx.BOTTOM, 3)\n    console_static_sizer.Add(console_grid_sizer, 1, wx.EXPAND)\n    self.main_panel.SetSizer(main_sizer)\n    self.tab_panel.AddPage(self.simple_panel, 'Simple Mode')\n    self.tab_panel.AddPage(self.main_panel, 'Advanced Mode')\n    tab_panel_sizer.Add(self.tab_panel, 1, wx.EXPAND, 0)\n    self.SetSizer(tab_panel_sizer)\n    tab_panel_sizer.Fit(self)\n    self.SetSize((WINDOW_WIDTH, WINDOW_HEIGHT))\n    self.Layout()",
            "def __do_layout(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    tab_panel_sizer = wx.BoxSizer(wx.HORIZONTAL)\n    self.simple_options_sizer_staticbox.Lower()\n    simple_sizer = wx.FlexGridSizer(1, 1, 0, 0)\n    simple_options_static_sizer = wx.StaticBoxSizer(self.simple_options_sizer_staticbox, wx.VERTICAL)\n    file_flex_grid_sizer = wx.FlexGridSizer(3, 3, 0, 0)\n    file_flex_grid_sizer.Add(self.simple_mayaFileLbl, -1, wx.TOP, 5)\n    file_flex_grid_sizer.Add(self.simple_mayaFileTxt, -1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.simple_mayaFileBtn, -1, 0, 0)\n    file_flex_grid_sizer.Add(self.simple_exportDestLbl, -1, wx.TOP, 5)\n    file_flex_grid_sizer.Add(self.simple_exportDestTxt, -1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.simple_exportDestBtn, -1, 0, 0)\n    file_flex_grid_sizer.Add(self.simple_mayaVerLbl, 1, wx.TOP, 5)\n    file_flex_grid_sizer.Add(self.simple_mayaVerComboBox, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.simple_runExportBtn, -1, 0, 0)\n    simple_options_static_sizer.Add(file_flex_grid_sizer)\n    simple_options_static_sizer.Add(self.simple_animOptChoice)\n    self.simple_options_panel.SetSizer(simple_options_static_sizer)\n    simple_sizer.Add(self.simple_options_panel)\n    self.simple_panel.SetSizer(simple_sizer)\n    main_sizer = wx.FlexGridSizer(4, 1, 0, 0)\n    top_sizer = wx.FlexGridSizer(1, 2, 0, 0)\n    main_sizer.Add(top_sizer, 0, wx.EXPAND, 0)\n    top_left_sizer = wx.FlexGridSizer(3, 1, 0, 0)\n    top_right_sizer = wx.FlexGridSizer(3, 1, 0, 0)\n    top_sizer.Add(top_left_sizer, 0, wx.ALL | wx.EXPAND, 5)\n    top_sizer.Add(top_right_sizer, 0, wx.ALL | wx.EXPAND, 5)\n    top_left_sizer.Add(self.toolComboBox, 0, wx.ALL, 5)\n    self.tool_options_sizer_staticbox.Lower()\n    self.tool_options_static_sizer = wx.StaticBoxSizer(self.tool_options_sizer_staticbox, wx.VERTICAL)\n    maya2egg_grid_sizer = wx.FlexGridSizer(8, 1, 0, 0)\n    file_flex_grid_sizer = wx.FlexGridSizer(2, 3, 0, 0)\n    file_flex_grid_sizer.Add(self.m2e_mayaFileLbl, 1, wx.TOP, 5)\n    file_flex_grid_sizer.Add(self.m2e_mayaFileTxt, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.m2e_mayaFileBtn, 1, 0, 0)\n    file_flex_grid_sizer.Add(self.m2e_exportDestLbl, 1, wx.TOP, 5)\n    file_flex_grid_sizer.Add(self.m2e_exportDestTxt, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.m2e_exportDestBtn, 1, 0, 0)\n    maya2egg_grid_sizer.Add(file_flex_grid_sizer, 1, wx.ALL, 0)\n    maya_ver_sizer = wx.FlexGridSizer(1, 2, 0, 0)\n    maya_ver_sizer.Add(self.m2e_mayaVerLbl, 1, wx.TOP | wx.RIGHT, 3)\n    maya_ver_sizer.Add(self.m2e_mayaVerComboBox, 1, wx.LEFT, 3)\n    maya2egg_grid_sizer.Add(maya_ver_sizer, 1, wx.TOP, 3)\n    self.maya2egg_panel.SetSizer(maya2egg_grid_sizer)\n    self.tool_options_static_sizer.Add(self.maya2egg_panel, 1, wx.ALL | wx.EXPAND, 0)\n    self.m2e_options_panel_sizer_staticbox.Lower()\n    general_options_static_sizer = wx.StaticBoxSizer(self.m2e_options_panel_sizer_staticbox, wx.VERTICAL)\n    general_options_grid_sizer = wx.FlexGridSizer(6, 1, 0, 0)\n    units_sizer = wx.FlexGridSizer(1, 4, 0, 0)\n    units_sizer.Add(self.m2e_mayaUnitsLbl, 1, wx.ALL, 3)\n    units_sizer.Add(self.m2e_mayaUnitsComboBox, 1, wx.RIGHT, 6)\n    units_sizer.Add(self.m2e_pandaUnitsLbl, 1, wx.ALL, 3)\n    units_sizer.Add(self.m2e_pandaUnitsComboBox, 1, wx.ALL, 0)\n    general_options_grid_sizer.Add(units_sizer)\n    general_options_grid_sizer.Add(self.m2e_backfaceChk, 1, wx.ALL, 3)\n    general_options_grid_sizer.Add(self.m2e_polygonOutputChk, 1, wx.ALL, 3)\n    general_options_grid_sizer.Add(self.m2e_tbnallChk, 1, wx.ALL, 3)\n    subroots_sizer = wx.FlexGridSizer(3, 2, 0, 0)\n    subroots_sizer.Add(self.m2e_subrootsChk, 1, wx.ALL, 3)\n    subroots_sizer.Add(self.m2e_subrootsTxt, 1, wx.LEFT, 1)\n    subroots_sizer.Add(self.m2e_subsetsChk, 1, wx.ALL, 3)\n    subroots_sizer.Add(self.m2e_subsetsTxt, 1, wx.LEFT, 1)\n    subroots_sizer.Add(self.m2e_excludesChk, 1, wx.ALL, 3)\n    subroots_sizer.Add(self.m2e_excludesTxt, 1, wx.LEFT, 1)\n    general_options_grid_sizer.Add(subroots_sizer, 1, wx.ALL, 0)\n    general_options_static_sizer.Add(general_options_grid_sizer)\n    self.m2e_options_panel.SetSizer(general_options_static_sizer)\n    maya2egg_grid_sizer.Add(self.m2e_options_panel, 1, wx.TOP | wx.EXPAND, 10)\n    self.m2e_anim_options_sizer_staticbox.Lower()\n    animation_options_static_sizer = wx.StaticBoxSizer(self.m2e_anim_options_sizer_staticbox, wx.VERTICAL)\n    animation_options_grid_sizer = wx.FlexGridSizer(6, 1, 0, 0)\n    animation_options_grid_sizer.Add(self.m2e_animOptChoice, 1, wx.BOTTOM, 3)\n    frames_grid_sizer = wx.FlexGridSizer(4, 2, 0, 0)\n    frames_grid_sizer.Add(self.m2e_startFrameChk, 0, wx.ALL, 3)\n    frames_grid_sizer.Add(self.m2e_startFrameSpin, 0, 0, 0)\n    frames_grid_sizer.Add(self.m2e_endFrameChk, 0, wx.ALL, 3)\n    frames_grid_sizer.Add(self.m2e_endFrameSpin, 0, 0, 0)\n    frames_grid_sizer.Add(self.m2e_frameRateInChk, 0, wx.ALL, 3)\n    frames_grid_sizer.Add(self.m2e_frameRateInSpin, 0, 0, 0)\n    frames_grid_sizer.Add(self.m2e_frameRateOutChk, 0, wx.ALL, 3)\n    frames_grid_sizer.Add(self.m2e_frameRateOutSpin, 0, 0, 0)\n    animation_options_grid_sizer.Add(frames_grid_sizer, 1, wx.ALL, 0)\n    names_grid_sizer = wx.FlexGridSizer(1, 2, 0, 0)\n    names_grid_sizer.Add(self.m2e_charNameChk, 1, wx.ALL, 3)\n    names_grid_sizer.Add(self.m2e_charNameTxt, 1, wx.ALL, 0)\n    animation_options_grid_sizer.Add(names_grid_sizer, 1, wx.ALL, 0)\n    animation_options_static_sizer.Add(animation_options_grid_sizer)\n    self.m2e_anim_options_panel.SetSizer(animation_options_static_sizer)\n    maya2egg_grid_sizer.Add(self.m2e_anim_options_panel, 1, wx.TOP | wx.EXPAND, 10)\n    self.m2e_tex_options_sizer_staticbox.Lower()\n    tex_options_static_sizer = wx.StaticBoxSizer(self.m2e_tex_options_sizer_staticbox, wx.VERTICAL)\n    tex_options_grid_sizer = wx.FlexGridSizer(2, 1, 0, 0)\n    tex_options_grid_sizer.Add(self.m2e_legacyShaderChk, 1, wx.ALL, 3)\n    copytex_sizer = wx.FlexGridSizer(2, 3, 0, 0)\n    copytex_sizer.Add(self.m2e_copyTexChk, 1, wx.ALL, 3)\n    copytex_sizer.Add(self.m2e_copyTexPathTxt, 1, wx.TOP, 1)\n    copytex_sizer.Add(self.m2e_copyTexPathBtn, 1, wx.ALL, 0)\n    copytex_sizer.Add(self.m2e_pathReplaceChk, 1, wx.ALL, 3)\n    copytex_sizer.Add(self.m2e_pathReplaceTxt, 1, wx.TOP, 1)\n    copytex_sizer.Add(self.m2e_pathReplaceBtn, 1, wx.ALL, 0)\n    tex_options_grid_sizer.Add(copytex_sizer, 1, wx.ALL, 0)\n    tex_options_static_sizer.Add(tex_options_grid_sizer)\n    self.m2e_tex_options_panel.SetSizer(tex_options_static_sizer)\n    maya2egg_grid_sizer.Add(self.m2e_tex_options_panel, 1, wx.TOP | wx.EXPAND, 10)\n    self.tool_options_panel.SetSizer(self.tool_options_static_sizer)\n    top_left_sizer.Add(self.tool_options_panel, 1, wx.ALL | wx.EXPAND, 0)\n    batch_item_grid_sizer = wx.FlexGridSizer(1, 3, 0, 0)\n    batch_item_grid_sizer.Add(self.batchItemNameLbl, -1, wx.ALL, 4)\n    batch_item_grid_sizer.Add(self.batchItemNameTxt, -1, wx.ALL, 1)\n    batch_item_grid_sizer.Add(self.addToBatchBtn, -1, wx.LEFT, 5)\n    top_left_sizer.Add(batch_item_grid_sizer, 1, wx.TOP, 6)\n    egg2bam_grid_sizer = wx.FlexGridSizer(8, 1, 0, 0)\n    file_flex_grid_sizer = wx.FlexGridSizer(2, 3, 0, 0)\n    file_flex_grid_sizer.Add(self.e2b_eggFileLbl, 1, wx.TOP, 5)\n    file_flex_grid_sizer.Add(self.e2b_eggFileTxt, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.e2b_eggFileBtn, 1, 0, 0)\n    file_flex_grid_sizer.Add(self.e2b_exportDestLbl, 1, wx.TOP, 5)\n    file_flex_grid_sizer.Add(self.e2b_exportDestTxt, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.e2b_exportDestBtn, 1, 0, 0)\n    egg2bam_grid_sizer.Add(file_flex_grid_sizer, 1, wx.ALL, 0)\n    self.egg2bam_panel.SetSizer(egg2bam_grid_sizer)\n    self.tool_options_static_sizer.Add(self.egg2bam_panel, 1, wx.ALL, 0)\n    bam_batch_sizer = wx.FlexGridSizer(1, 2, 0, 0)\n    bam_batch_sizer.Add(self.e2b_bamBatchOutputLbl, 1, wx.TOP, 4)\n    bam_batch_sizer.Add(self.e2b_bamBatchOutputBtn, 1, wx.LEFT, 3)\n    egg2bam_grid_sizer.Add(bam_batch_sizer, 1, wx.TOP | wx.ALIGN_RIGHT, 5)\n    self.e2b_options_sizer_staticbox.Lower()\n    e2b_options_static_sizer = wx.StaticBoxSizer(self.e2b_options_sizer_staticbox, wx.VERTICAL)\n    e2b_options_grid_sizer = wx.FlexGridSizer(6, 1, 0, 0)\n    e2b_options_grid_sizer.Add(self.e2b_useCurrEggChk, 1, wx.ALL, 3)\n    e2b_options_grid_sizer.Add(self.e2b_flattenChk, 1, wx.ALL, 3)\n    e2b_options_grid_sizer.Add(self.e2b_embedTexChk, 1, wx.ALL, 3)\n    e2b_options_static_sizer.Add(e2b_options_grid_sizer)\n    self.e2b_options_panel.SetSizer(e2b_options_static_sizer)\n    egg2bam_grid_sizer.Add(self.e2b_options_panel, 1, wx.TOP | wx.EXPAND, 10)\n    eggRename_grid_sizer = wx.FlexGridSizer(8, 1, 0, 0)\n    file_flex_grid_sizer = wx.FlexGridSizer(4, 3, 0, 0)\n    file_flex_grid_sizer.Add(self.rename_eggFilesLbl, 1, wx.TOP, 5)\n    file_flex_grid_sizer.Add(self.rename_eggFilesTree, 1, wx.ALL, 1)\n    eggfiles_grid_sizer = wx.FlexGridSizer(4, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.rename_addEggBtn, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.rename_addFromBatchBtn, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.rename_removeEggBtn, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.rename_removeAllEggsBtn, 1, 0, 0)\n    file_flex_grid_sizer.Add(eggfiles_grid_sizer, 1, 0, 0)\n    file_flex_grid_sizer.Add(self.rename_exportDestLbl, 1, wx.TOP, 0)\n    file_flex_grid_sizer.Add(self.rename_exportInPlaceChk, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add((10, 2), 0, 0)\n    file_flex_grid_sizer.Add(self.rename_exportDirLbl, 1, wx.TOP | wx.ALIGN_RIGHT, 3)\n    file_flex_grid_sizer.Add(self.rename_exportDirTxt, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.rename_exportDirBtn, 1, 0, 0)\n    file_flex_grid_sizer.Add(self.rename_exportFileLbl, 1, wx.TOP | wx.ALIGN_RIGHT, 3)\n    file_flex_grid_sizer.Add(self.rename_exportFileTxt, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.rename_exportFileBtn, 1, 0, 0)\n    eggRename_grid_sizer.Add(file_flex_grid_sizer, 1, wx.ALL, 0)\n    self.eggRename_panel.SetSizer(eggRename_grid_sizer)\n    self.tool_options_static_sizer.Add(self.eggRename_panel, 1, wx.ALL | wx.EXPAND, 0)\n    self.rename_options_sizer_staticbox.Lower()\n    rename_options_static_sizer = wx.StaticBoxSizer(self.rename_options_sizer_staticbox, wx.VERTICAL)\n    rename_options_grid_sizer = wx.FlexGridSizer(6, 1, 0, 0)\n    prefix_sizer = wx.FlexGridSizer(2, 2, 0, 0)\n    prefix_sizer.Add(self.rename_stripPrefixChk, 1, wx.ALL, 3)\n    prefix_sizer.Add(self.rename_stripPrefixTxt, 1, wx.LEFT, 2)\n    rename_options_grid_sizer.Add(prefix_sizer, 1, wx.ALL, 0)\n    rename_options_static_sizer.Add(rename_options_grid_sizer)\n    self.rename_options_panel.SetSizer(rename_options_static_sizer)\n    eggRename_grid_sizer.Add(self.rename_options_panel, 1, wx.TOP | wx.EXPAND, 10)\n    eggOptChar_grid_sizer = wx.FlexGridSizer(8, 1, 0, 0)\n    file_flex_grid_sizer = wx.FlexGridSizer(4, 3, 0, 0)\n    file_flex_grid_sizer.Add(self.optchar_eggFilesLbl, 1, wx.TOP, 5)\n    file_flex_grid_sizer.Add(self.optchar_eggFilesTree, 1, wx.ALL, 1)\n    eggfiles_grid_sizer = wx.FlexGridSizer(4, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.optchar_addEggBtn, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.optchar_addFromBatchBtn, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.optchar_removeEggBtn, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.optchar_removeAllEggsBtn, 1, 0, 0)\n    file_flex_grid_sizer.Add(eggfiles_grid_sizer, 1, 0, 0)\n    file_flex_grid_sizer.Add(self.optchar_exportDestLbl, 1, wx.TOP, 0)\n    file_flex_grid_sizer.Add(self.optchar_exportInPlaceChk, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add((10, 2), 0, 0)\n    file_flex_grid_sizer.Add(self.optchar_exportDirLbl, 1, wx.TOP | wx.ALIGN_RIGHT, 3)\n    file_flex_grid_sizer.Add(self.optchar_exportDirTxt, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.optchar_exportDirBtn, 1, 0, 0)\n    file_flex_grid_sizer.Add(self.optchar_exportFileLbl, 1, wx.TOP | wx.ALIGN_RIGHT, 3)\n    file_flex_grid_sizer.Add(self.optchar_exportFileTxt, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.optchar_exportFileBtn, 1, 0, 0)\n    eggOptChar_grid_sizer.Add(file_flex_grid_sizer, 1, wx.ALL, 0)\n    self.eggOptChar_panel.SetSizer(eggOptChar_grid_sizer)\n    self.tool_options_static_sizer.Add(self.eggOptChar_panel, 1, wx.ALL | wx.EXPAND, 0)\n    self.optchar_options_sizer_staticbox.Lower()\n    optchar_options_static_sizer = wx.StaticBoxSizer(self.optchar_options_sizer_staticbox, wx.VERTICAL)\n    optchar_options_grid_sizer = wx.FlexGridSizer(6, 1, 0, 0)\n    joint_options_sizer = wx.FlexGridSizer(4, 2, 0, 0)\n    joint_options_sizer.Add(self.optchar_keepAllJointsChk, 1, wx.ALL, 3)\n    joint_options_sizer.Add((10, 0), 0, 0)\n    joint_options_sizer.Add(self.optchar_keepJointsChk, 1, wx.ALL, 3)\n    joint_options_sizer.Add(self.optchar_keepJointsTxt, 1, wx.LEFT, 2)\n    joint_options_sizer.Add(self.optchar_dropJointsChk, 1, wx.ALL, 3)\n    joint_options_sizer.Add(self.optchar_dropJointsTxt, 1, wx.LEFT, 2)\n    joint_options_sizer.Add(self.optchar_exposeJointsChk, 1, wx.ALL, 3)\n    joint_options_sizer.Add(self.optchar_exposeJointsTxt, 1, wx.LEFT, 2)\n    joint_options_sizer.Add(self.optchar_flagGeometryChk, 1, wx.ALL, 3)\n    joint_options_sizer.Add(self.optchar_flagGeometryTxt, 1, wx.LEFT, 2)\n    optchar_options_grid_sizer.Add(joint_options_sizer, 1, wx.ALL, 0)\n    optchar_options_grid_sizer.Add(self.optchar_dartChoice, 1, wx.ALL, 0)\n    optchar_options_static_sizer.Add(optchar_options_grid_sizer)\n    self.optchar_options_panel.SetSizer(optchar_options_static_sizer)\n    eggOptChar_grid_sizer.Add(self.optchar_options_panel, 1, wx.TOP | wx.EXPAND, 10)\n    eggPalettize_grid_sizer = wx.FlexGridSizer(8, 1, 0, 0)\n    file_flex_grid_sizer = wx.FlexGridSizer(5, 3, 0, 0)\n    file_flex_grid_sizer.Add(self.palettize_eggFilesLbl, 1, wx.TOP, 5)\n    file_flex_grid_sizer.Add(self.palettize_eggFilesTree, 1, wx.ALL, 1)\n    eggfiles_grid_sizer = wx.FlexGridSizer(4, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.palettize_addEggBtn, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.palettize_addFromBatchBtn, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.palettize_removeEggBtn, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.palettize_removeAllEggsBtn, 1, 0, 0)\n    file_flex_grid_sizer.Add(eggfiles_grid_sizer, 1, 0, 0)\n    file_flex_grid_sizer.Add(self.palettize_exportDestLbl, 1, wx.TOP, 0)\n    file_flex_grid_sizer.Add(self.palettize_exportInPlaceChk, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add((10, 2), 0, 0)\n    file_flex_grid_sizer.Add(self.palettize_exportDirLbl, 1, wx.TOP | wx.ALIGN_RIGHT, 3)\n    file_flex_grid_sizer.Add(self.palettize_exportDirTxt, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.palettize_exportDirBtn, 1, 0, 0)\n    file_flex_grid_sizer.Add(self.palettize_exportFileLbl, 1, wx.TOP | wx.ALIGN_RIGHT, 3)\n    file_flex_grid_sizer.Add(self.palettize_exportFileTxt, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.palettize_exportFileBtn, 1, 0, 0)\n    file_flex_grid_sizer.Add(self.palettize_exportTexLbl, 1, wx.TOP | wx.ALIGN_RIGHT, 3)\n    file_flex_grid_sizer.Add(self.palettize_exportTexTxt, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.palettize_exportTexBtn, 1, 0, 0)\n    eggPalettize_grid_sizer.Add(file_flex_grid_sizer, 1, wx.ALL, 0)\n    self.eggPalettize_panel.SetSizer(eggPalettize_grid_sizer)\n    self.tool_options_static_sizer.Add(self.eggPalettize_panel, 1, wx.ALL | wx.EXPAND, 0)\n    self.palettize_options_sizer_staticbox.Lower()\n    palettize_options_static_sizer = wx.StaticBoxSizer(self.palettize_options_sizer_staticbox, wx.VERTICAL)\n    palettize_options_grid_sizer = wx.FlexGridSizer(6, 1, 0, 0)\n    save_flex_grid_sizer = wx.FlexGridSizer(2, 3, 0, 0)\n    save_flex_grid_sizer.Add(self.palettize_saveTxaLbl, 0, wx.TOP, 3)\n    save_flex_grid_sizer.Add(self.palettize_saveTxaTxt, 0, wx.ALL, 1)\n    save_flex_grid_sizer.Add(self.palettize_loadTxaBtn, 0, 0, 0)\n    save_flex_grid_sizer.Add((10, 2), 0, 0)\n    save_flex_grid_sizer.Add((10, 2), 0, 0)\n    save_flex_grid_sizer.Add(self.palettize_saveTxaBtn, 0, 0, 0)\n    palettize_options_grid_sizer.Add(save_flex_grid_sizer, 1, wx.TOP, 6)\n    txa_grid_sizer = wx.FlexGridSizer(4, 2, 0, 0)\n    palettize_size_sizer = wx.FlexGridSizer(1, 5, 0, 0)\n    palettize_size_sizer.Add(self.palettize_sizeWidthTxt, 0, 0, 0)\n    palettize_size_sizer.Add(self.palettize_sizeByLbl, 0, wx.TOP, 3)\n    palettize_size_sizer.Add(self.palettize_sizeHeightTxt, 0, wx.RIGHT, 10)\n    palettize_size_sizer.Add(self.palettize_powerOf2Chk, 1, wx.ALL, 4)\n    txa_grid_sizer.Add(self.palettize_sizeLbl, 0, wx.TOP | wx.ALIGN_RIGHT, 3)\n    txa_grid_sizer.Add(palettize_size_sizer, 0, wx.ALL, 1)\n    txa_grid_sizer.Add(self.palettize_imageTypeLbl, 1, wx.TOP | wx.ALIGN_RIGHT, 16)\n    txa_grid_sizer.Add(self.palettize_imageTypeChoice, 1, wx.ALL, 0)\n    self.palettize_color_sizer_staticbox.Lower()\n    color_static_sizer = wx.StaticBoxSizer(self.palettize_color_sizer_staticbox, wx.HORIZONTAL)\n    color_flex_grid_sizer = wx.FlexGridSizer(1, 8, 0, 0)\n    color_flex_grid_sizer.Add(self.palettize_redLbl, 0, wx.TOP, 3)\n    color_flex_grid_sizer.Add(self.palettize_redTxt, 0, wx.RIGHT, 6)\n    color_flex_grid_sizer.Add(self.palettize_greenLbl, 0, wx.TOP, 3)\n    color_flex_grid_sizer.Add(self.palettize_greenTxt, 0, wx.RIGHT, 6)\n    color_flex_grid_sizer.Add(self.palettize_blueLbl, 0, wx.TOP, 3)\n    color_flex_grid_sizer.Add(self.palettize_blueTxt, 0, wx.RIGHT, 6)\n    color_flex_grid_sizer.Add(self.palettize_alphaLbl, 0, wx.TOP, 3)\n    color_flex_grid_sizer.Add(self.palettize_alphaTxt, 0, wx.RIGHT, 6)\n    color_static_sizer.Add(color_flex_grid_sizer, 1, 0, 0)\n    txa_grid_sizer.Add(self.palettize_colorLbl, 1, wx.TOP | wx.ALIGN_RIGHT, 13)\n    txa_grid_sizer.Add(color_static_sizer, 1, wx.ALL, 0)\n    txa_grid_sizer.Add(self.palettize_marginLbl, 1, wx.TOP | wx.ALIGN_RIGHT, 8)\n    txa_grid_sizer.Add(self.palettize_marginTxt, 1, wx.TOP, 5)\n    txa_grid_sizer.Add(self.palettize_coverageLbl, 1, wx.TOP | wx.ALIGN_RIGHT, 8)\n    txa_grid_sizer.Add(self.palettize_coverageTxt, 1, wx.TOP, 5)\n    palettize_options_grid_sizer.Add(txa_grid_sizer, 1, wx.ALL, 0)\n    palettize_options_static_sizer.Add(palettize_options_grid_sizer)\n    self.palettize_options_panel.SetSizer(palettize_options_static_sizer)\n    eggPalettize_grid_sizer.Add(self.palettize_options_panel, 1, wx.TOP | wx.EXPAND, 10)\n    self.batch_static_sizer_staticbox.Lower()\n    batch_static_sizer = wx.StaticBoxSizer(self.batch_static_sizer_staticbox, wx.VERTICAL)\n    batch_grid_sizer = wx.FlexGridSizer(3, 1, 0, 0)\n    batch_buttons_sizer = wx.FlexGridSizer(1, 6, 0, 0)\n    batch_buttons_sizer.Add(self.loadBatchButton, 1, wx.ALL, 2)\n    batch_buttons_sizer.Add(self.saveBatchButton, 1, wx.ALL, 2)\n    batch_buttons_sizer.Add(self.sortBatchButton, 1, wx.ALL, 2)\n    batch_buttons_sizer.Add(self.changePathsButton, 1, wx.ALL, 2)\n    batch_buttons_sizer.Add((25, 0), 0, 0)\n    batch_grid_sizer.Add(batch_buttons_sizer, 1, wx.ALIGN_LEFT, 0)\n    batch_grid_sizer.Add(self.batchTree, 1, wx.ALL | wx.ALIGN_LEFT | wx.EXPAND, 2)\n    batch_controls_sizer = wx.FlexGridSizer(1, 3, 0, 0)\n    batch_controls_sizer.Add(self.editSelBatchButton, 1, wx.ALL, 2)\n    batch_controls_sizer.Add(self.removeSelBatchButton, 1, wx.ALL, 2)\n    batch_controls_sizer.Add(self.removeAllBatchButton, 1, wx.ALL, 2)\n    batch_grid_sizer.Add(batch_controls_sizer, 1, wx.ALIGN_LEFT, 0)\n    batch_static_sizer.Add(batch_grid_sizer, 1, wx.EXPAND)\n    self.batch_panel.SetSizer(batch_static_sizer)\n    top_right_sizer.Add(self.batch_panel, 1, wx.ALIGN_TOP | wx.EXPAND, 0)\n    self.console_static_sizer_staticbox.Lower()\n    console_static_sizer = wx.StaticBoxSizer(self.console_static_sizer_staticbox, wx.VERTICAL)\n    console_grid_sizer = wx.FlexGridSizer(2, 1, 0, 0)\n    console_controls_sizer = wx.BoxSizer(wx.HORIZONTAL)\n    console_buttons_sizer = wx.FlexGridSizer(1, 6, 0, 0)\n    console_buttons_sizer.Add(self.runBatchButton, 1, wx.ALL, 2)\n    console_buttons_sizer.Add(self.clearConsoleButton, 1, wx.ALL, 2)\n    console_buttons_sizer.Add(self.runPviewButton, 1, wx.ALL, 2)\n    console_controls_sizer.Add(console_buttons_sizer)\n    console_options_sizer = wx.FlexGridSizer(2, 1, 0, 0)\n    console_options_sizer.Add(self.ignoreModDates, 0, wx.ALL, 0)\n    panda_dir_sizer = wx.BoxSizer(wx.HORIZONTAL)\n    panda_dir_sizer.Add(self.pathLbl, 0, wx.TOP, 4)\n    panda_dir_sizer.Add(self.pandaPathTxt, 0, wx.TOP, 1)\n    panda_dir_sizer.Add(self.loadPandaPathBtn, 0, wx.ALL, 0)\n    console_options_sizer.Add(panda_dir_sizer, 0, 0, 0)\n    console_controls_sizer.Add(console_options_sizer, 0, wx.LEFT | wx.ALIGN_RIGHT, 25)\n    main_sizer.Add(self.console_panel, -1, wx.ALIGN_TOP | wx.EXPAND | wx.RIGHT | wx.BOTTOM, 5)\n    self.console_panel.SetSizer(console_static_sizer)\n    console_grid_sizer.Add(console_controls_sizer, 1, wx.ALIGN_LEFT, 0)\n    console_grid_sizer.Add(self.consoleOutputTxt, 1, wx.ALIGN_LEFT | wx.EXPAND | wx.TOP | wx.BOTTOM, 3)\n    console_static_sizer.Add(console_grid_sizer, 1, wx.EXPAND)\n    self.main_panel.SetSizer(main_sizer)\n    self.tab_panel.AddPage(self.simple_panel, 'Simple Mode')\n    self.tab_panel.AddPage(self.main_panel, 'Advanced Mode')\n    tab_panel_sizer.Add(self.tab_panel, 1, wx.EXPAND, 0)\n    self.SetSizer(tab_panel_sizer)\n    tab_panel_sizer.Fit(self)\n    self.SetSize((WINDOW_WIDTH, WINDOW_HEIGHT))\n    self.Layout()",
            "def __do_layout(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    tab_panel_sizer = wx.BoxSizer(wx.HORIZONTAL)\n    self.simple_options_sizer_staticbox.Lower()\n    simple_sizer = wx.FlexGridSizer(1, 1, 0, 0)\n    simple_options_static_sizer = wx.StaticBoxSizer(self.simple_options_sizer_staticbox, wx.VERTICAL)\n    file_flex_grid_sizer = wx.FlexGridSizer(3, 3, 0, 0)\n    file_flex_grid_sizer.Add(self.simple_mayaFileLbl, -1, wx.TOP, 5)\n    file_flex_grid_sizer.Add(self.simple_mayaFileTxt, -1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.simple_mayaFileBtn, -1, 0, 0)\n    file_flex_grid_sizer.Add(self.simple_exportDestLbl, -1, wx.TOP, 5)\n    file_flex_grid_sizer.Add(self.simple_exportDestTxt, -1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.simple_exportDestBtn, -1, 0, 0)\n    file_flex_grid_sizer.Add(self.simple_mayaVerLbl, 1, wx.TOP, 5)\n    file_flex_grid_sizer.Add(self.simple_mayaVerComboBox, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.simple_runExportBtn, -1, 0, 0)\n    simple_options_static_sizer.Add(file_flex_grid_sizer)\n    simple_options_static_sizer.Add(self.simple_animOptChoice)\n    self.simple_options_panel.SetSizer(simple_options_static_sizer)\n    simple_sizer.Add(self.simple_options_panel)\n    self.simple_panel.SetSizer(simple_sizer)\n    main_sizer = wx.FlexGridSizer(4, 1, 0, 0)\n    top_sizer = wx.FlexGridSizer(1, 2, 0, 0)\n    main_sizer.Add(top_sizer, 0, wx.EXPAND, 0)\n    top_left_sizer = wx.FlexGridSizer(3, 1, 0, 0)\n    top_right_sizer = wx.FlexGridSizer(3, 1, 0, 0)\n    top_sizer.Add(top_left_sizer, 0, wx.ALL | wx.EXPAND, 5)\n    top_sizer.Add(top_right_sizer, 0, wx.ALL | wx.EXPAND, 5)\n    top_left_sizer.Add(self.toolComboBox, 0, wx.ALL, 5)\n    self.tool_options_sizer_staticbox.Lower()\n    self.tool_options_static_sizer = wx.StaticBoxSizer(self.tool_options_sizer_staticbox, wx.VERTICAL)\n    maya2egg_grid_sizer = wx.FlexGridSizer(8, 1, 0, 0)\n    file_flex_grid_sizer = wx.FlexGridSizer(2, 3, 0, 0)\n    file_flex_grid_sizer.Add(self.m2e_mayaFileLbl, 1, wx.TOP, 5)\n    file_flex_grid_sizer.Add(self.m2e_mayaFileTxt, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.m2e_mayaFileBtn, 1, 0, 0)\n    file_flex_grid_sizer.Add(self.m2e_exportDestLbl, 1, wx.TOP, 5)\n    file_flex_grid_sizer.Add(self.m2e_exportDestTxt, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.m2e_exportDestBtn, 1, 0, 0)\n    maya2egg_grid_sizer.Add(file_flex_grid_sizer, 1, wx.ALL, 0)\n    maya_ver_sizer = wx.FlexGridSizer(1, 2, 0, 0)\n    maya_ver_sizer.Add(self.m2e_mayaVerLbl, 1, wx.TOP | wx.RIGHT, 3)\n    maya_ver_sizer.Add(self.m2e_mayaVerComboBox, 1, wx.LEFT, 3)\n    maya2egg_grid_sizer.Add(maya_ver_sizer, 1, wx.TOP, 3)\n    self.maya2egg_panel.SetSizer(maya2egg_grid_sizer)\n    self.tool_options_static_sizer.Add(self.maya2egg_panel, 1, wx.ALL | wx.EXPAND, 0)\n    self.m2e_options_panel_sizer_staticbox.Lower()\n    general_options_static_sizer = wx.StaticBoxSizer(self.m2e_options_panel_sizer_staticbox, wx.VERTICAL)\n    general_options_grid_sizer = wx.FlexGridSizer(6, 1, 0, 0)\n    units_sizer = wx.FlexGridSizer(1, 4, 0, 0)\n    units_sizer.Add(self.m2e_mayaUnitsLbl, 1, wx.ALL, 3)\n    units_sizer.Add(self.m2e_mayaUnitsComboBox, 1, wx.RIGHT, 6)\n    units_sizer.Add(self.m2e_pandaUnitsLbl, 1, wx.ALL, 3)\n    units_sizer.Add(self.m2e_pandaUnitsComboBox, 1, wx.ALL, 0)\n    general_options_grid_sizer.Add(units_sizer)\n    general_options_grid_sizer.Add(self.m2e_backfaceChk, 1, wx.ALL, 3)\n    general_options_grid_sizer.Add(self.m2e_polygonOutputChk, 1, wx.ALL, 3)\n    general_options_grid_sizer.Add(self.m2e_tbnallChk, 1, wx.ALL, 3)\n    subroots_sizer = wx.FlexGridSizer(3, 2, 0, 0)\n    subroots_sizer.Add(self.m2e_subrootsChk, 1, wx.ALL, 3)\n    subroots_sizer.Add(self.m2e_subrootsTxt, 1, wx.LEFT, 1)\n    subroots_sizer.Add(self.m2e_subsetsChk, 1, wx.ALL, 3)\n    subroots_sizer.Add(self.m2e_subsetsTxt, 1, wx.LEFT, 1)\n    subroots_sizer.Add(self.m2e_excludesChk, 1, wx.ALL, 3)\n    subroots_sizer.Add(self.m2e_excludesTxt, 1, wx.LEFT, 1)\n    general_options_grid_sizer.Add(subroots_sizer, 1, wx.ALL, 0)\n    general_options_static_sizer.Add(general_options_grid_sizer)\n    self.m2e_options_panel.SetSizer(general_options_static_sizer)\n    maya2egg_grid_sizer.Add(self.m2e_options_panel, 1, wx.TOP | wx.EXPAND, 10)\n    self.m2e_anim_options_sizer_staticbox.Lower()\n    animation_options_static_sizer = wx.StaticBoxSizer(self.m2e_anim_options_sizer_staticbox, wx.VERTICAL)\n    animation_options_grid_sizer = wx.FlexGridSizer(6, 1, 0, 0)\n    animation_options_grid_sizer.Add(self.m2e_animOptChoice, 1, wx.BOTTOM, 3)\n    frames_grid_sizer = wx.FlexGridSizer(4, 2, 0, 0)\n    frames_grid_sizer.Add(self.m2e_startFrameChk, 0, wx.ALL, 3)\n    frames_grid_sizer.Add(self.m2e_startFrameSpin, 0, 0, 0)\n    frames_grid_sizer.Add(self.m2e_endFrameChk, 0, wx.ALL, 3)\n    frames_grid_sizer.Add(self.m2e_endFrameSpin, 0, 0, 0)\n    frames_grid_sizer.Add(self.m2e_frameRateInChk, 0, wx.ALL, 3)\n    frames_grid_sizer.Add(self.m2e_frameRateInSpin, 0, 0, 0)\n    frames_grid_sizer.Add(self.m2e_frameRateOutChk, 0, wx.ALL, 3)\n    frames_grid_sizer.Add(self.m2e_frameRateOutSpin, 0, 0, 0)\n    animation_options_grid_sizer.Add(frames_grid_sizer, 1, wx.ALL, 0)\n    names_grid_sizer = wx.FlexGridSizer(1, 2, 0, 0)\n    names_grid_sizer.Add(self.m2e_charNameChk, 1, wx.ALL, 3)\n    names_grid_sizer.Add(self.m2e_charNameTxt, 1, wx.ALL, 0)\n    animation_options_grid_sizer.Add(names_grid_sizer, 1, wx.ALL, 0)\n    animation_options_static_sizer.Add(animation_options_grid_sizer)\n    self.m2e_anim_options_panel.SetSizer(animation_options_static_sizer)\n    maya2egg_grid_sizer.Add(self.m2e_anim_options_panel, 1, wx.TOP | wx.EXPAND, 10)\n    self.m2e_tex_options_sizer_staticbox.Lower()\n    tex_options_static_sizer = wx.StaticBoxSizer(self.m2e_tex_options_sizer_staticbox, wx.VERTICAL)\n    tex_options_grid_sizer = wx.FlexGridSizer(2, 1, 0, 0)\n    tex_options_grid_sizer.Add(self.m2e_legacyShaderChk, 1, wx.ALL, 3)\n    copytex_sizer = wx.FlexGridSizer(2, 3, 0, 0)\n    copytex_sizer.Add(self.m2e_copyTexChk, 1, wx.ALL, 3)\n    copytex_sizer.Add(self.m2e_copyTexPathTxt, 1, wx.TOP, 1)\n    copytex_sizer.Add(self.m2e_copyTexPathBtn, 1, wx.ALL, 0)\n    copytex_sizer.Add(self.m2e_pathReplaceChk, 1, wx.ALL, 3)\n    copytex_sizer.Add(self.m2e_pathReplaceTxt, 1, wx.TOP, 1)\n    copytex_sizer.Add(self.m2e_pathReplaceBtn, 1, wx.ALL, 0)\n    tex_options_grid_sizer.Add(copytex_sizer, 1, wx.ALL, 0)\n    tex_options_static_sizer.Add(tex_options_grid_sizer)\n    self.m2e_tex_options_panel.SetSizer(tex_options_static_sizer)\n    maya2egg_grid_sizer.Add(self.m2e_tex_options_panel, 1, wx.TOP | wx.EXPAND, 10)\n    self.tool_options_panel.SetSizer(self.tool_options_static_sizer)\n    top_left_sizer.Add(self.tool_options_panel, 1, wx.ALL | wx.EXPAND, 0)\n    batch_item_grid_sizer = wx.FlexGridSizer(1, 3, 0, 0)\n    batch_item_grid_sizer.Add(self.batchItemNameLbl, -1, wx.ALL, 4)\n    batch_item_grid_sizer.Add(self.batchItemNameTxt, -1, wx.ALL, 1)\n    batch_item_grid_sizer.Add(self.addToBatchBtn, -1, wx.LEFT, 5)\n    top_left_sizer.Add(batch_item_grid_sizer, 1, wx.TOP, 6)\n    egg2bam_grid_sizer = wx.FlexGridSizer(8, 1, 0, 0)\n    file_flex_grid_sizer = wx.FlexGridSizer(2, 3, 0, 0)\n    file_flex_grid_sizer.Add(self.e2b_eggFileLbl, 1, wx.TOP, 5)\n    file_flex_grid_sizer.Add(self.e2b_eggFileTxt, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.e2b_eggFileBtn, 1, 0, 0)\n    file_flex_grid_sizer.Add(self.e2b_exportDestLbl, 1, wx.TOP, 5)\n    file_flex_grid_sizer.Add(self.e2b_exportDestTxt, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.e2b_exportDestBtn, 1, 0, 0)\n    egg2bam_grid_sizer.Add(file_flex_grid_sizer, 1, wx.ALL, 0)\n    self.egg2bam_panel.SetSizer(egg2bam_grid_sizer)\n    self.tool_options_static_sizer.Add(self.egg2bam_panel, 1, wx.ALL, 0)\n    bam_batch_sizer = wx.FlexGridSizer(1, 2, 0, 0)\n    bam_batch_sizer.Add(self.e2b_bamBatchOutputLbl, 1, wx.TOP, 4)\n    bam_batch_sizer.Add(self.e2b_bamBatchOutputBtn, 1, wx.LEFT, 3)\n    egg2bam_grid_sizer.Add(bam_batch_sizer, 1, wx.TOP | wx.ALIGN_RIGHT, 5)\n    self.e2b_options_sizer_staticbox.Lower()\n    e2b_options_static_sizer = wx.StaticBoxSizer(self.e2b_options_sizer_staticbox, wx.VERTICAL)\n    e2b_options_grid_sizer = wx.FlexGridSizer(6, 1, 0, 0)\n    e2b_options_grid_sizer.Add(self.e2b_useCurrEggChk, 1, wx.ALL, 3)\n    e2b_options_grid_sizer.Add(self.e2b_flattenChk, 1, wx.ALL, 3)\n    e2b_options_grid_sizer.Add(self.e2b_embedTexChk, 1, wx.ALL, 3)\n    e2b_options_static_sizer.Add(e2b_options_grid_sizer)\n    self.e2b_options_panel.SetSizer(e2b_options_static_sizer)\n    egg2bam_grid_sizer.Add(self.e2b_options_panel, 1, wx.TOP | wx.EXPAND, 10)\n    eggRename_grid_sizer = wx.FlexGridSizer(8, 1, 0, 0)\n    file_flex_grid_sizer = wx.FlexGridSizer(4, 3, 0, 0)\n    file_flex_grid_sizer.Add(self.rename_eggFilesLbl, 1, wx.TOP, 5)\n    file_flex_grid_sizer.Add(self.rename_eggFilesTree, 1, wx.ALL, 1)\n    eggfiles_grid_sizer = wx.FlexGridSizer(4, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.rename_addEggBtn, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.rename_addFromBatchBtn, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.rename_removeEggBtn, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.rename_removeAllEggsBtn, 1, 0, 0)\n    file_flex_grid_sizer.Add(eggfiles_grid_sizer, 1, 0, 0)\n    file_flex_grid_sizer.Add(self.rename_exportDestLbl, 1, wx.TOP, 0)\n    file_flex_grid_sizer.Add(self.rename_exportInPlaceChk, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add((10, 2), 0, 0)\n    file_flex_grid_sizer.Add(self.rename_exportDirLbl, 1, wx.TOP | wx.ALIGN_RIGHT, 3)\n    file_flex_grid_sizer.Add(self.rename_exportDirTxt, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.rename_exportDirBtn, 1, 0, 0)\n    file_flex_grid_sizer.Add(self.rename_exportFileLbl, 1, wx.TOP | wx.ALIGN_RIGHT, 3)\n    file_flex_grid_sizer.Add(self.rename_exportFileTxt, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.rename_exportFileBtn, 1, 0, 0)\n    eggRename_grid_sizer.Add(file_flex_grid_sizer, 1, wx.ALL, 0)\n    self.eggRename_panel.SetSizer(eggRename_grid_sizer)\n    self.tool_options_static_sizer.Add(self.eggRename_panel, 1, wx.ALL | wx.EXPAND, 0)\n    self.rename_options_sizer_staticbox.Lower()\n    rename_options_static_sizer = wx.StaticBoxSizer(self.rename_options_sizer_staticbox, wx.VERTICAL)\n    rename_options_grid_sizer = wx.FlexGridSizer(6, 1, 0, 0)\n    prefix_sizer = wx.FlexGridSizer(2, 2, 0, 0)\n    prefix_sizer.Add(self.rename_stripPrefixChk, 1, wx.ALL, 3)\n    prefix_sizer.Add(self.rename_stripPrefixTxt, 1, wx.LEFT, 2)\n    rename_options_grid_sizer.Add(prefix_sizer, 1, wx.ALL, 0)\n    rename_options_static_sizer.Add(rename_options_grid_sizer)\n    self.rename_options_panel.SetSizer(rename_options_static_sizer)\n    eggRename_grid_sizer.Add(self.rename_options_panel, 1, wx.TOP | wx.EXPAND, 10)\n    eggOptChar_grid_sizer = wx.FlexGridSizer(8, 1, 0, 0)\n    file_flex_grid_sizer = wx.FlexGridSizer(4, 3, 0, 0)\n    file_flex_grid_sizer.Add(self.optchar_eggFilesLbl, 1, wx.TOP, 5)\n    file_flex_grid_sizer.Add(self.optchar_eggFilesTree, 1, wx.ALL, 1)\n    eggfiles_grid_sizer = wx.FlexGridSizer(4, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.optchar_addEggBtn, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.optchar_addFromBatchBtn, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.optchar_removeEggBtn, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.optchar_removeAllEggsBtn, 1, 0, 0)\n    file_flex_grid_sizer.Add(eggfiles_grid_sizer, 1, 0, 0)\n    file_flex_grid_sizer.Add(self.optchar_exportDestLbl, 1, wx.TOP, 0)\n    file_flex_grid_sizer.Add(self.optchar_exportInPlaceChk, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add((10, 2), 0, 0)\n    file_flex_grid_sizer.Add(self.optchar_exportDirLbl, 1, wx.TOP | wx.ALIGN_RIGHT, 3)\n    file_flex_grid_sizer.Add(self.optchar_exportDirTxt, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.optchar_exportDirBtn, 1, 0, 0)\n    file_flex_grid_sizer.Add(self.optchar_exportFileLbl, 1, wx.TOP | wx.ALIGN_RIGHT, 3)\n    file_flex_grid_sizer.Add(self.optchar_exportFileTxt, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.optchar_exportFileBtn, 1, 0, 0)\n    eggOptChar_grid_sizer.Add(file_flex_grid_sizer, 1, wx.ALL, 0)\n    self.eggOptChar_panel.SetSizer(eggOptChar_grid_sizer)\n    self.tool_options_static_sizer.Add(self.eggOptChar_panel, 1, wx.ALL | wx.EXPAND, 0)\n    self.optchar_options_sizer_staticbox.Lower()\n    optchar_options_static_sizer = wx.StaticBoxSizer(self.optchar_options_sizer_staticbox, wx.VERTICAL)\n    optchar_options_grid_sizer = wx.FlexGridSizer(6, 1, 0, 0)\n    joint_options_sizer = wx.FlexGridSizer(4, 2, 0, 0)\n    joint_options_sizer.Add(self.optchar_keepAllJointsChk, 1, wx.ALL, 3)\n    joint_options_sizer.Add((10, 0), 0, 0)\n    joint_options_sizer.Add(self.optchar_keepJointsChk, 1, wx.ALL, 3)\n    joint_options_sizer.Add(self.optchar_keepJointsTxt, 1, wx.LEFT, 2)\n    joint_options_sizer.Add(self.optchar_dropJointsChk, 1, wx.ALL, 3)\n    joint_options_sizer.Add(self.optchar_dropJointsTxt, 1, wx.LEFT, 2)\n    joint_options_sizer.Add(self.optchar_exposeJointsChk, 1, wx.ALL, 3)\n    joint_options_sizer.Add(self.optchar_exposeJointsTxt, 1, wx.LEFT, 2)\n    joint_options_sizer.Add(self.optchar_flagGeometryChk, 1, wx.ALL, 3)\n    joint_options_sizer.Add(self.optchar_flagGeometryTxt, 1, wx.LEFT, 2)\n    optchar_options_grid_sizer.Add(joint_options_sizer, 1, wx.ALL, 0)\n    optchar_options_grid_sizer.Add(self.optchar_dartChoice, 1, wx.ALL, 0)\n    optchar_options_static_sizer.Add(optchar_options_grid_sizer)\n    self.optchar_options_panel.SetSizer(optchar_options_static_sizer)\n    eggOptChar_grid_sizer.Add(self.optchar_options_panel, 1, wx.TOP | wx.EXPAND, 10)\n    eggPalettize_grid_sizer = wx.FlexGridSizer(8, 1, 0, 0)\n    file_flex_grid_sizer = wx.FlexGridSizer(5, 3, 0, 0)\n    file_flex_grid_sizer.Add(self.palettize_eggFilesLbl, 1, wx.TOP, 5)\n    file_flex_grid_sizer.Add(self.palettize_eggFilesTree, 1, wx.ALL, 1)\n    eggfiles_grid_sizer = wx.FlexGridSizer(4, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.palettize_addEggBtn, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.palettize_addFromBatchBtn, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.palettize_removeEggBtn, 1, 0, 0)\n    eggfiles_grid_sizer.Add(self.palettize_removeAllEggsBtn, 1, 0, 0)\n    file_flex_grid_sizer.Add(eggfiles_grid_sizer, 1, 0, 0)\n    file_flex_grid_sizer.Add(self.palettize_exportDestLbl, 1, wx.TOP, 0)\n    file_flex_grid_sizer.Add(self.palettize_exportInPlaceChk, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add((10, 2), 0, 0)\n    file_flex_grid_sizer.Add(self.palettize_exportDirLbl, 1, wx.TOP | wx.ALIGN_RIGHT, 3)\n    file_flex_grid_sizer.Add(self.palettize_exportDirTxt, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.palettize_exportDirBtn, 1, 0, 0)\n    file_flex_grid_sizer.Add(self.palettize_exportFileLbl, 1, wx.TOP | wx.ALIGN_RIGHT, 3)\n    file_flex_grid_sizer.Add(self.palettize_exportFileTxt, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.palettize_exportFileBtn, 1, 0, 0)\n    file_flex_grid_sizer.Add(self.palettize_exportTexLbl, 1, wx.TOP | wx.ALIGN_RIGHT, 3)\n    file_flex_grid_sizer.Add(self.palettize_exportTexTxt, 1, wx.ALL, 1)\n    file_flex_grid_sizer.Add(self.palettize_exportTexBtn, 1, 0, 0)\n    eggPalettize_grid_sizer.Add(file_flex_grid_sizer, 1, wx.ALL, 0)\n    self.eggPalettize_panel.SetSizer(eggPalettize_grid_sizer)\n    self.tool_options_static_sizer.Add(self.eggPalettize_panel, 1, wx.ALL | wx.EXPAND, 0)\n    self.palettize_options_sizer_staticbox.Lower()\n    palettize_options_static_sizer = wx.StaticBoxSizer(self.palettize_options_sizer_staticbox, wx.VERTICAL)\n    palettize_options_grid_sizer = wx.FlexGridSizer(6, 1, 0, 0)\n    save_flex_grid_sizer = wx.FlexGridSizer(2, 3, 0, 0)\n    save_flex_grid_sizer.Add(self.palettize_saveTxaLbl, 0, wx.TOP, 3)\n    save_flex_grid_sizer.Add(self.palettize_saveTxaTxt, 0, wx.ALL, 1)\n    save_flex_grid_sizer.Add(self.palettize_loadTxaBtn, 0, 0, 0)\n    save_flex_grid_sizer.Add((10, 2), 0, 0)\n    save_flex_grid_sizer.Add((10, 2), 0, 0)\n    save_flex_grid_sizer.Add(self.palettize_saveTxaBtn, 0, 0, 0)\n    palettize_options_grid_sizer.Add(save_flex_grid_sizer, 1, wx.TOP, 6)\n    txa_grid_sizer = wx.FlexGridSizer(4, 2, 0, 0)\n    palettize_size_sizer = wx.FlexGridSizer(1, 5, 0, 0)\n    palettize_size_sizer.Add(self.palettize_sizeWidthTxt, 0, 0, 0)\n    palettize_size_sizer.Add(self.palettize_sizeByLbl, 0, wx.TOP, 3)\n    palettize_size_sizer.Add(self.palettize_sizeHeightTxt, 0, wx.RIGHT, 10)\n    palettize_size_sizer.Add(self.palettize_powerOf2Chk, 1, wx.ALL, 4)\n    txa_grid_sizer.Add(self.palettize_sizeLbl, 0, wx.TOP | wx.ALIGN_RIGHT, 3)\n    txa_grid_sizer.Add(palettize_size_sizer, 0, wx.ALL, 1)\n    txa_grid_sizer.Add(self.palettize_imageTypeLbl, 1, wx.TOP | wx.ALIGN_RIGHT, 16)\n    txa_grid_sizer.Add(self.palettize_imageTypeChoice, 1, wx.ALL, 0)\n    self.palettize_color_sizer_staticbox.Lower()\n    color_static_sizer = wx.StaticBoxSizer(self.palettize_color_sizer_staticbox, wx.HORIZONTAL)\n    color_flex_grid_sizer = wx.FlexGridSizer(1, 8, 0, 0)\n    color_flex_grid_sizer.Add(self.palettize_redLbl, 0, wx.TOP, 3)\n    color_flex_grid_sizer.Add(self.palettize_redTxt, 0, wx.RIGHT, 6)\n    color_flex_grid_sizer.Add(self.palettize_greenLbl, 0, wx.TOP, 3)\n    color_flex_grid_sizer.Add(self.palettize_greenTxt, 0, wx.RIGHT, 6)\n    color_flex_grid_sizer.Add(self.palettize_blueLbl, 0, wx.TOP, 3)\n    color_flex_grid_sizer.Add(self.palettize_blueTxt, 0, wx.RIGHT, 6)\n    color_flex_grid_sizer.Add(self.palettize_alphaLbl, 0, wx.TOP, 3)\n    color_flex_grid_sizer.Add(self.palettize_alphaTxt, 0, wx.RIGHT, 6)\n    color_static_sizer.Add(color_flex_grid_sizer, 1, 0, 0)\n    txa_grid_sizer.Add(self.palettize_colorLbl, 1, wx.TOP | wx.ALIGN_RIGHT, 13)\n    txa_grid_sizer.Add(color_static_sizer, 1, wx.ALL, 0)\n    txa_grid_sizer.Add(self.palettize_marginLbl, 1, wx.TOP | wx.ALIGN_RIGHT, 8)\n    txa_grid_sizer.Add(self.palettize_marginTxt, 1, wx.TOP, 5)\n    txa_grid_sizer.Add(self.palettize_coverageLbl, 1, wx.TOP | wx.ALIGN_RIGHT, 8)\n    txa_grid_sizer.Add(self.palettize_coverageTxt, 1, wx.TOP, 5)\n    palettize_options_grid_sizer.Add(txa_grid_sizer, 1, wx.ALL, 0)\n    palettize_options_static_sizer.Add(palettize_options_grid_sizer)\n    self.palettize_options_panel.SetSizer(palettize_options_static_sizer)\n    eggPalettize_grid_sizer.Add(self.palettize_options_panel, 1, wx.TOP | wx.EXPAND, 10)\n    self.batch_static_sizer_staticbox.Lower()\n    batch_static_sizer = wx.StaticBoxSizer(self.batch_static_sizer_staticbox, wx.VERTICAL)\n    batch_grid_sizer = wx.FlexGridSizer(3, 1, 0, 0)\n    batch_buttons_sizer = wx.FlexGridSizer(1, 6, 0, 0)\n    batch_buttons_sizer.Add(self.loadBatchButton, 1, wx.ALL, 2)\n    batch_buttons_sizer.Add(self.saveBatchButton, 1, wx.ALL, 2)\n    batch_buttons_sizer.Add(self.sortBatchButton, 1, wx.ALL, 2)\n    batch_buttons_sizer.Add(self.changePathsButton, 1, wx.ALL, 2)\n    batch_buttons_sizer.Add((25, 0), 0, 0)\n    batch_grid_sizer.Add(batch_buttons_sizer, 1, wx.ALIGN_LEFT, 0)\n    batch_grid_sizer.Add(self.batchTree, 1, wx.ALL | wx.ALIGN_LEFT | wx.EXPAND, 2)\n    batch_controls_sizer = wx.FlexGridSizer(1, 3, 0, 0)\n    batch_controls_sizer.Add(self.editSelBatchButton, 1, wx.ALL, 2)\n    batch_controls_sizer.Add(self.removeSelBatchButton, 1, wx.ALL, 2)\n    batch_controls_sizer.Add(self.removeAllBatchButton, 1, wx.ALL, 2)\n    batch_grid_sizer.Add(batch_controls_sizer, 1, wx.ALIGN_LEFT, 0)\n    batch_static_sizer.Add(batch_grid_sizer, 1, wx.EXPAND)\n    self.batch_panel.SetSizer(batch_static_sizer)\n    top_right_sizer.Add(self.batch_panel, 1, wx.ALIGN_TOP | wx.EXPAND, 0)\n    self.console_static_sizer_staticbox.Lower()\n    console_static_sizer = wx.StaticBoxSizer(self.console_static_sizer_staticbox, wx.VERTICAL)\n    console_grid_sizer = wx.FlexGridSizer(2, 1, 0, 0)\n    console_controls_sizer = wx.BoxSizer(wx.HORIZONTAL)\n    console_buttons_sizer = wx.FlexGridSizer(1, 6, 0, 0)\n    console_buttons_sizer.Add(self.runBatchButton, 1, wx.ALL, 2)\n    console_buttons_sizer.Add(self.clearConsoleButton, 1, wx.ALL, 2)\n    console_buttons_sizer.Add(self.runPviewButton, 1, wx.ALL, 2)\n    console_controls_sizer.Add(console_buttons_sizer)\n    console_options_sizer = wx.FlexGridSizer(2, 1, 0, 0)\n    console_options_sizer.Add(self.ignoreModDates, 0, wx.ALL, 0)\n    panda_dir_sizer = wx.BoxSizer(wx.HORIZONTAL)\n    panda_dir_sizer.Add(self.pathLbl, 0, wx.TOP, 4)\n    panda_dir_sizer.Add(self.pandaPathTxt, 0, wx.TOP, 1)\n    panda_dir_sizer.Add(self.loadPandaPathBtn, 0, wx.ALL, 0)\n    console_options_sizer.Add(panda_dir_sizer, 0, 0, 0)\n    console_controls_sizer.Add(console_options_sizer, 0, wx.LEFT | wx.ALIGN_RIGHT, 25)\n    main_sizer.Add(self.console_panel, -1, wx.ALIGN_TOP | wx.EXPAND | wx.RIGHT | wx.BOTTOM, 5)\n    self.console_panel.SetSizer(console_static_sizer)\n    console_grid_sizer.Add(console_controls_sizer, 1, wx.ALIGN_LEFT, 0)\n    console_grid_sizer.Add(self.consoleOutputTxt, 1, wx.ALIGN_LEFT | wx.EXPAND | wx.TOP | wx.BOTTOM, 3)\n    console_static_sizer.Add(console_grid_sizer, 1, wx.EXPAND)\n    self.main_panel.SetSizer(main_sizer)\n    self.tab_panel.AddPage(self.simple_panel, 'Simple Mode')\n    self.tab_panel.AddPage(self.main_panel, 'Advanced Mode')\n    tab_panel_sizer.Add(self.tab_panel, 1, wx.EXPAND, 0)\n    self.SetSizer(tab_panel_sizer)\n    tab_panel_sizer.Fit(self)\n    self.SetSize((WINDOW_WIDTH, WINDOW_HEIGHT))\n    self.Layout()"
        ]
    },
    {
        "func_name": "ShowInitialEnv",
        "original": "def ShowInitialEnv(self):\n    self.consoleOutputTxt.AppendText(WELCOME_MSG)\n    self.pandaPathDir = DEFAULT_PANDA_DIR\n    self.consoleOutputTxt.AppendText('\\nPanda initial path: ' + self.pandaPathDir)\n    self.consoleOutputTxt.AppendText('\\nIf this is not correct please use the Path options to change.')\n    self.m2e_mayaVerComboBox.SetSelection(len(MAYA_VERSIONS) - 1)\n    self.consoleOutputTxt.AppendText('\\nUsing Maya Version ' + MAYA_VERSIONS[len(MAYA_VERSIONS) - 1])\n    self.consoleOutputTxt.AppendText('\\nIf this is not correct please use the Path options to change.')\n    self.pandaPathTxt.SetValue(self.pandaPathDir)\n    self.egg2bam_panel.Show(False)\n    self.eggRename_panel.Show(False)\n    self.eggOptChar_panel.Show(False)\n    self.eggPalettize_panel.Show(False)\n    self.former = 'maya2egg'\n    self.current = 'maya2egg'\n    self.main_panel.Layout()",
        "mutated": [
            "def ShowInitialEnv(self):\n    if False:\n        i = 10\n    self.consoleOutputTxt.AppendText(WELCOME_MSG)\n    self.pandaPathDir = DEFAULT_PANDA_DIR\n    self.consoleOutputTxt.AppendText('\\nPanda initial path: ' + self.pandaPathDir)\n    self.consoleOutputTxt.AppendText('\\nIf this is not correct please use the Path options to change.')\n    self.m2e_mayaVerComboBox.SetSelection(len(MAYA_VERSIONS) - 1)\n    self.consoleOutputTxt.AppendText('\\nUsing Maya Version ' + MAYA_VERSIONS[len(MAYA_VERSIONS) - 1])\n    self.consoleOutputTxt.AppendText('\\nIf this is not correct please use the Path options to change.')\n    self.pandaPathTxt.SetValue(self.pandaPathDir)\n    self.egg2bam_panel.Show(False)\n    self.eggRename_panel.Show(False)\n    self.eggOptChar_panel.Show(False)\n    self.eggPalettize_panel.Show(False)\n    self.former = 'maya2egg'\n    self.current = 'maya2egg'\n    self.main_panel.Layout()",
            "def ShowInitialEnv(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.consoleOutputTxt.AppendText(WELCOME_MSG)\n    self.pandaPathDir = DEFAULT_PANDA_DIR\n    self.consoleOutputTxt.AppendText('\\nPanda initial path: ' + self.pandaPathDir)\n    self.consoleOutputTxt.AppendText('\\nIf this is not correct please use the Path options to change.')\n    self.m2e_mayaVerComboBox.SetSelection(len(MAYA_VERSIONS) - 1)\n    self.consoleOutputTxt.AppendText('\\nUsing Maya Version ' + MAYA_VERSIONS[len(MAYA_VERSIONS) - 1])\n    self.consoleOutputTxt.AppendText('\\nIf this is not correct please use the Path options to change.')\n    self.pandaPathTxt.SetValue(self.pandaPathDir)\n    self.egg2bam_panel.Show(False)\n    self.eggRename_panel.Show(False)\n    self.eggOptChar_panel.Show(False)\n    self.eggPalettize_panel.Show(False)\n    self.former = 'maya2egg'\n    self.current = 'maya2egg'\n    self.main_panel.Layout()",
            "def ShowInitialEnv(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.consoleOutputTxt.AppendText(WELCOME_MSG)\n    self.pandaPathDir = DEFAULT_PANDA_DIR\n    self.consoleOutputTxt.AppendText('\\nPanda initial path: ' + self.pandaPathDir)\n    self.consoleOutputTxt.AppendText('\\nIf this is not correct please use the Path options to change.')\n    self.m2e_mayaVerComboBox.SetSelection(len(MAYA_VERSIONS) - 1)\n    self.consoleOutputTxt.AppendText('\\nUsing Maya Version ' + MAYA_VERSIONS[len(MAYA_VERSIONS) - 1])\n    self.consoleOutputTxt.AppendText('\\nIf this is not correct please use the Path options to change.')\n    self.pandaPathTxt.SetValue(self.pandaPathDir)\n    self.egg2bam_panel.Show(False)\n    self.eggRename_panel.Show(False)\n    self.eggOptChar_panel.Show(False)\n    self.eggPalettize_panel.Show(False)\n    self.former = 'maya2egg'\n    self.current = 'maya2egg'\n    self.main_panel.Layout()",
            "def ShowInitialEnv(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.consoleOutputTxt.AppendText(WELCOME_MSG)\n    self.pandaPathDir = DEFAULT_PANDA_DIR\n    self.consoleOutputTxt.AppendText('\\nPanda initial path: ' + self.pandaPathDir)\n    self.consoleOutputTxt.AppendText('\\nIf this is not correct please use the Path options to change.')\n    self.m2e_mayaVerComboBox.SetSelection(len(MAYA_VERSIONS) - 1)\n    self.consoleOutputTxt.AppendText('\\nUsing Maya Version ' + MAYA_VERSIONS[len(MAYA_VERSIONS) - 1])\n    self.consoleOutputTxt.AppendText('\\nIf this is not correct please use the Path options to change.')\n    self.pandaPathTxt.SetValue(self.pandaPathDir)\n    self.egg2bam_panel.Show(False)\n    self.eggRename_panel.Show(False)\n    self.eggOptChar_panel.Show(False)\n    self.eggPalettize_panel.Show(False)\n    self.former = 'maya2egg'\n    self.current = 'maya2egg'\n    self.main_panel.Layout()",
            "def ShowInitialEnv(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.consoleOutputTxt.AppendText(WELCOME_MSG)\n    self.pandaPathDir = DEFAULT_PANDA_DIR\n    self.consoleOutputTxt.AppendText('\\nPanda initial path: ' + self.pandaPathDir)\n    self.consoleOutputTxt.AppendText('\\nIf this is not correct please use the Path options to change.')\n    self.m2e_mayaVerComboBox.SetSelection(len(MAYA_VERSIONS) - 1)\n    self.consoleOutputTxt.AppendText('\\nUsing Maya Version ' + MAYA_VERSIONS[len(MAYA_VERSIONS) - 1])\n    self.consoleOutputTxt.AppendText('\\nIf this is not correct please use the Path options to change.')\n    self.pandaPathTxt.SetValue(self.pandaPathDir)\n    self.egg2bam_panel.Show(False)\n    self.eggRename_panel.Show(False)\n    self.eggOptChar_panel.Show(False)\n    self.eggPalettize_panel.Show(False)\n    self.former = 'maya2egg'\n    self.current = 'maya2egg'\n    self.main_panel.Layout()"
        ]
    },
    {
        "func_name": "OnTool",
        "original": "def OnTool(self, e):\n    self.former = self.current\n    self.current = self.toolComboBox.GetValue()\n    if self.former == 'maya2egg':\n        self.maya2egg_panel.Show(False)\n    if self.former == 'egg2bam':\n        self.egg2bam_panel.Show(False)\n    if self.former == 'egg-rename':\n        self.eggRename_panel.Show(False)\n    if self.former == 'egg-optchar':\n        self.eggOptChar_panel.Show(False)\n    if self.former == 'egg-palettize':\n        self.eggPalettize_panel.Show(False)\n    if self.current == 'maya2egg':\n        self.maya2egg_panel.Show(True)\n    if self.current == 'egg2bam':\n        self.egg2bam_panel.Show(True)\n    if self.current == 'egg-rename':\n        self.eggRename_panel.Show(True)\n    if self.current == 'egg-optchar':\n        self.eggOptChar_panel.Show(True)\n    if self.current == 'egg-palettize':\n        self.eggPalettize_panel.Show(True)\n    self.batchItemNameTxt.SetValue('')\n    self.main_panel.Layout()",
        "mutated": [
            "def OnTool(self, e):\n    if False:\n        i = 10\n    self.former = self.current\n    self.current = self.toolComboBox.GetValue()\n    if self.former == 'maya2egg':\n        self.maya2egg_panel.Show(False)\n    if self.former == 'egg2bam':\n        self.egg2bam_panel.Show(False)\n    if self.former == 'egg-rename':\n        self.eggRename_panel.Show(False)\n    if self.former == 'egg-optchar':\n        self.eggOptChar_panel.Show(False)\n    if self.former == 'egg-palettize':\n        self.eggPalettize_panel.Show(False)\n    if self.current == 'maya2egg':\n        self.maya2egg_panel.Show(True)\n    if self.current == 'egg2bam':\n        self.egg2bam_panel.Show(True)\n    if self.current == 'egg-rename':\n        self.eggRename_panel.Show(True)\n    if self.current == 'egg-optchar':\n        self.eggOptChar_panel.Show(True)\n    if self.current == 'egg-palettize':\n        self.eggPalettize_panel.Show(True)\n    self.batchItemNameTxt.SetValue('')\n    self.main_panel.Layout()",
            "def OnTool(self, e):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.former = self.current\n    self.current = self.toolComboBox.GetValue()\n    if self.former == 'maya2egg':\n        self.maya2egg_panel.Show(False)\n    if self.former == 'egg2bam':\n        self.egg2bam_panel.Show(False)\n    if self.former == 'egg-rename':\n        self.eggRename_panel.Show(False)\n    if self.former == 'egg-optchar':\n        self.eggOptChar_panel.Show(False)\n    if self.former == 'egg-palettize':\n        self.eggPalettize_panel.Show(False)\n    if self.current == 'maya2egg':\n        self.maya2egg_panel.Show(True)\n    if self.current == 'egg2bam':\n        self.egg2bam_panel.Show(True)\n    if self.current == 'egg-rename':\n        self.eggRename_panel.Show(True)\n    if self.current == 'egg-optchar':\n        self.eggOptChar_panel.Show(True)\n    if self.current == 'egg-palettize':\n        self.eggPalettize_panel.Show(True)\n    self.batchItemNameTxt.SetValue('')\n    self.main_panel.Layout()",
            "def OnTool(self, e):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.former = self.current\n    self.current = self.toolComboBox.GetValue()\n    if self.former == 'maya2egg':\n        self.maya2egg_panel.Show(False)\n    if self.former == 'egg2bam':\n        self.egg2bam_panel.Show(False)\n    if self.former == 'egg-rename':\n        self.eggRename_panel.Show(False)\n    if self.former == 'egg-optchar':\n        self.eggOptChar_panel.Show(False)\n    if self.former == 'egg-palettize':\n        self.eggPalettize_panel.Show(False)\n    if self.current == 'maya2egg':\n        self.maya2egg_panel.Show(True)\n    if self.current == 'egg2bam':\n        self.egg2bam_panel.Show(True)\n    if self.current == 'egg-rename':\n        self.eggRename_panel.Show(True)\n    if self.current == 'egg-optchar':\n        self.eggOptChar_panel.Show(True)\n    if self.current == 'egg-palettize':\n        self.eggPalettize_panel.Show(True)\n    self.batchItemNameTxt.SetValue('')\n    self.main_panel.Layout()",
            "def OnTool(self, e):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.former = self.current\n    self.current = self.toolComboBox.GetValue()\n    if self.former == 'maya2egg':\n        self.maya2egg_panel.Show(False)\n    if self.former == 'egg2bam':\n        self.egg2bam_panel.Show(False)\n    if self.former == 'egg-rename':\n        self.eggRename_panel.Show(False)\n    if self.former == 'egg-optchar':\n        self.eggOptChar_panel.Show(False)\n    if self.former == 'egg-palettize':\n        self.eggPalettize_panel.Show(False)\n    if self.current == 'maya2egg':\n        self.maya2egg_panel.Show(True)\n    if self.current == 'egg2bam':\n        self.egg2bam_panel.Show(True)\n    if self.current == 'egg-rename':\n        self.eggRename_panel.Show(True)\n    if self.current == 'egg-optchar':\n        self.eggOptChar_panel.Show(True)\n    if self.current == 'egg-palettize':\n        self.eggPalettize_panel.Show(True)\n    self.batchItemNameTxt.SetValue('')\n    self.main_panel.Layout()",
            "def OnTool(self, e):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.former = self.current\n    self.current = self.toolComboBox.GetValue()\n    if self.former == 'maya2egg':\n        self.maya2egg_panel.Show(False)\n    if self.former == 'egg2bam':\n        self.egg2bam_panel.Show(False)\n    if self.former == 'egg-rename':\n        self.eggRename_panel.Show(False)\n    if self.former == 'egg-optchar':\n        self.eggOptChar_panel.Show(False)\n    if self.former == 'egg-palettize':\n        self.eggPalettize_panel.Show(False)\n    if self.current == 'maya2egg':\n        self.maya2egg_panel.Show(True)\n    if self.current == 'egg2bam':\n        self.egg2bam_panel.Show(True)\n    if self.current == 'egg-rename':\n        self.eggRename_panel.Show(True)\n    if self.current == 'egg-optchar':\n        self.eggOptChar_panel.Show(True)\n    if self.current == 'egg-palettize':\n        self.eggPalettize_panel.Show(True)\n    self.batchItemNameTxt.SetValue('')\n    self.main_panel.Layout()"
        ]
    },
    {
        "func_name": "_addBook",
        "original": "def _addBook(filename):\n    if not self.help.AddBook(filename):\n        wx.MessageBox('Unable to open: ' + filename, 'Error', wx.OK | wx.ICON_EXCLAMATION)",
        "mutated": [
            "def _addBook(filename):\n    if False:\n        i = 10\n    if not self.help.AddBook(filename):\n        wx.MessageBox('Unable to open: ' + filename, 'Error', wx.OK | wx.ICON_EXCLAMATION)",
            "def _addBook(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not self.help.AddBook(filename):\n        wx.MessageBox('Unable to open: ' + filename, 'Error', wx.OK | wx.ICON_EXCLAMATION)",
            "def _addBook(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not self.help.AddBook(filename):\n        wx.MessageBox('Unable to open: ' + filename, 'Error', wx.OK | wx.ICON_EXCLAMATION)",
            "def _addBook(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not self.help.AddBook(filename):\n        wx.MessageBox('Unable to open: ' + filename, 'Error', wx.OK | wx.ICON_EXCLAMATION)",
            "def _addBook(filename):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not self.help.AddBook(filename):\n        wx.MessageBox('Unable to open: ' + filename, 'Error', wx.OK | wx.ICON_EXCLAMATION)"
        ]
    },
    {
        "func_name": "OnShowHelp",
        "original": "def OnShowHelp(self, event):\n\n    def _addBook(filename):\n        if not self.help.AddBook(filename):\n            wx.MessageBox('Unable to open: ' + filename, 'Error', wx.OK | wx.ICON_EXCLAMATION)\n    self.help = wx.html.HtmlHelpController()\n    _addBook('helpfiles/help.hhp')\n    self.help.DisplayContents()",
        "mutated": [
            "def OnShowHelp(self, event):\n    if False:\n        i = 10\n\n    def _addBook(filename):\n        if not self.help.AddBook(filename):\n            wx.MessageBox('Unable to open: ' + filename, 'Error', wx.OK | wx.ICON_EXCLAMATION)\n    self.help = wx.html.HtmlHelpController()\n    _addBook('helpfiles/help.hhp')\n    self.help.DisplayContents()",
            "def OnShowHelp(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    def _addBook(filename):\n        if not self.help.AddBook(filename):\n            wx.MessageBox('Unable to open: ' + filename, 'Error', wx.OK | wx.ICON_EXCLAMATION)\n    self.help = wx.html.HtmlHelpController()\n    _addBook('helpfiles/help.hhp')\n    self.help.DisplayContents()",
            "def OnShowHelp(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    def _addBook(filename):\n        if not self.help.AddBook(filename):\n            wx.MessageBox('Unable to open: ' + filename, 'Error', wx.OK | wx.ICON_EXCLAMATION)\n    self.help = wx.html.HtmlHelpController()\n    _addBook('helpfiles/help.hhp')\n    self.help.DisplayContents()",
            "def OnShowHelp(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    def _addBook(filename):\n        if not self.help.AddBook(filename):\n            wx.MessageBox('Unable to open: ' + filename, 'Error', wx.OK | wx.ICON_EXCLAMATION)\n    self.help = wx.html.HtmlHelpController()\n    _addBook('helpfiles/help.hhp')\n    self.help.DisplayContents()",
            "def OnShowHelp(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    def _addBook(filename):\n        if not self.help.AddBook(filename):\n            wx.MessageBox('Unable to open: ' + filename, 'Error', wx.OK | wx.ICON_EXCLAMATION)\n    self.help = wx.html.HtmlHelpController()\n    _addBook('helpfiles/help.hhp')\n    self.help.DisplayContents()"
        ]
    },
    {
        "func_name": "OnPandaPathChoose",
        "original": "def OnPandaPathChoose(self, event):\n    dlg = wx.DirDialog(self, 'Choose your Panda directory:')\n    if dlg.ShowModal() == wx.ID_OK:\n        self.pandaPathTxt.SetValue(dlg.GetPath())\n    dlg.Destroy()",
        "mutated": [
            "def OnPandaPathChoose(self, event):\n    if False:\n        i = 10\n    dlg = wx.DirDialog(self, 'Choose your Panda directory:')\n    if dlg.ShowModal() == wx.ID_OK:\n        self.pandaPathTxt.SetValue(dlg.GetPath())\n    dlg.Destroy()",
            "def OnPandaPathChoose(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    dlg = wx.DirDialog(self, 'Choose your Panda directory:')\n    if dlg.ShowModal() == wx.ID_OK:\n        self.pandaPathTxt.SetValue(dlg.GetPath())\n    dlg.Destroy()",
            "def OnPandaPathChoose(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    dlg = wx.DirDialog(self, 'Choose your Panda directory:')\n    if dlg.ShowModal() == wx.ID_OK:\n        self.pandaPathTxt.SetValue(dlg.GetPath())\n    dlg.Destroy()",
            "def OnPandaPathChoose(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    dlg = wx.DirDialog(self, 'Choose your Panda directory:')\n    if dlg.ShowModal() == wx.ID_OK:\n        self.pandaPathTxt.SetValue(dlg.GetPath())\n    dlg.Destroy()",
            "def OnPandaPathChoose(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    dlg = wx.DirDialog(self, 'Choose your Panda directory:')\n    if dlg.ShowModal() == wx.ID_OK:\n        self.pandaPathTxt.SetValue(dlg.GetPath())\n    dlg.Destroy()"
        ]
    },
    {
        "func_name": "OnMayaVerChoose",
        "original": "def OnMayaVerChoose(self, event):\n    event.Skip()",
        "mutated": [
            "def OnMayaVerChoose(self, event):\n    if False:\n        i = 10\n    event.Skip()",
            "def OnMayaVerChoose(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    event.Skip()",
            "def OnMayaVerChoose(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    event.Skip()",
            "def OnMayaVerChoose(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    event.Skip()",
            "def OnMayaVerChoose(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    event.Skip()"
        ]
    },
    {
        "func_name": "OnSimpleExport",
        "original": "def OnSimpleExport(self, e):\n    finput = self.simple_mayaFileTxt.GetValue()\n    foutput = self.simple_exportDestTxt.GetValue()\n    if finput == '' or foutput == '':\n        dlg = wx.MessageDialog(self, 'Both an input and output file must be present to perform the export', 'ERROR', wx.OK)\n        dlg.ShowModal()\n        dlg.Destroy()\n        return\n    item = {}\n    item['cmd'] = 'maya2egg' + self.simple_mayaVerComboBox.GetStringSelection()\n    item['finput'] = str(finput)\n    item['foutput'] = str(foutput)\n    item['args'] = {'a': self.simple_animOptChoice.GetStringSelection()}\n    self.outdlg.Show()\n    self.RunCommand(self.BuildCommand(item), False)",
        "mutated": [
            "def OnSimpleExport(self, e):\n    if False:\n        i = 10\n    finput = self.simple_mayaFileTxt.GetValue()\n    foutput = self.simple_exportDestTxt.GetValue()\n    if finput == '' or foutput == '':\n        dlg = wx.MessageDialog(self, 'Both an input and output file must be present to perform the export', 'ERROR', wx.OK)\n        dlg.ShowModal()\n        dlg.Destroy()\n        return\n    item = {}\n    item['cmd'] = 'maya2egg' + self.simple_mayaVerComboBox.GetStringSelection()\n    item['finput'] = str(finput)\n    item['foutput'] = str(foutput)\n    item['args'] = {'a': self.simple_animOptChoice.GetStringSelection()}\n    self.outdlg.Show()\n    self.RunCommand(self.BuildCommand(item), False)",
            "def OnSimpleExport(self, e):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    finput = self.simple_mayaFileTxt.GetValue()\n    foutput = self.simple_exportDestTxt.GetValue()\n    if finput == '' or foutput == '':\n        dlg = wx.MessageDialog(self, 'Both an input and output file must be present to perform the export', 'ERROR', wx.OK)\n        dlg.ShowModal()\n        dlg.Destroy()\n        return\n    item = {}\n    item['cmd'] = 'maya2egg' + self.simple_mayaVerComboBox.GetStringSelection()\n    item['finput'] = str(finput)\n    item['foutput'] = str(foutput)\n    item['args'] = {'a': self.simple_animOptChoice.GetStringSelection()}\n    self.outdlg.Show()\n    self.RunCommand(self.BuildCommand(item), False)",
            "def OnSimpleExport(self, e):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    finput = self.simple_mayaFileTxt.GetValue()\n    foutput = self.simple_exportDestTxt.GetValue()\n    if finput == '' or foutput == '':\n        dlg = wx.MessageDialog(self, 'Both an input and output file must be present to perform the export', 'ERROR', wx.OK)\n        dlg.ShowModal()\n        dlg.Destroy()\n        return\n    item = {}\n    item['cmd'] = 'maya2egg' + self.simple_mayaVerComboBox.GetStringSelection()\n    item['finput'] = str(finput)\n    item['foutput'] = str(foutput)\n    item['args'] = {'a': self.simple_animOptChoice.GetStringSelection()}\n    self.outdlg.Show()\n    self.RunCommand(self.BuildCommand(item), False)",
            "def OnSimpleExport(self, e):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    finput = self.simple_mayaFileTxt.GetValue()\n    foutput = self.simple_exportDestTxt.GetValue()\n    if finput == '' or foutput == '':\n        dlg = wx.MessageDialog(self, 'Both an input and output file must be present to perform the export', 'ERROR', wx.OK)\n        dlg.ShowModal()\n        dlg.Destroy()\n        return\n    item = {}\n    item['cmd'] = 'maya2egg' + self.simple_mayaVerComboBox.GetStringSelection()\n    item['finput'] = str(finput)\n    item['foutput'] = str(foutput)\n    item['args'] = {'a': self.simple_animOptChoice.GetStringSelection()}\n    self.outdlg.Show()\n    self.RunCommand(self.BuildCommand(item), False)",
            "def OnSimpleExport(self, e):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    finput = self.simple_mayaFileTxt.GetValue()\n    foutput = self.simple_exportDestTxt.GetValue()\n    if finput == '' or foutput == '':\n        dlg = wx.MessageDialog(self, 'Both an input and output file must be present to perform the export', 'ERROR', wx.OK)\n        dlg.ShowModal()\n        dlg.Destroy()\n        return\n    item = {}\n    item['cmd'] = 'maya2egg' + self.simple_mayaVerComboBox.GetStringSelection()\n    item['finput'] = str(finput)\n    item['foutput'] = str(foutput)\n    item['args'] = {'a': self.simple_animOptChoice.GetStringSelection()}\n    self.outdlg.Show()\n    self.RunCommand(self.BuildCommand(item), False)"
        ]
    },
    {
        "func_name": "OnSimpleMayaFile",
        "original": "def OnSimpleMayaFile(self, e):\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose a location and filename', dirname, '', '*.mb', wx.OPEN)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        self.simple_mayaFileTxt.SetValue(os.path.join(dirname + os.sep, filename))\n    dlg.Destroy()",
        "mutated": [
            "def OnSimpleMayaFile(self, e):\n    if False:\n        i = 10\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose a location and filename', dirname, '', '*.mb', wx.OPEN)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        self.simple_mayaFileTxt.SetValue(os.path.join(dirname + os.sep, filename))\n    dlg.Destroy()",
            "def OnSimpleMayaFile(self, e):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose a location and filename', dirname, '', '*.mb', wx.OPEN)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        self.simple_mayaFileTxt.SetValue(os.path.join(dirname + os.sep, filename))\n    dlg.Destroy()",
            "def OnSimpleMayaFile(self, e):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose a location and filename', dirname, '', '*.mb', wx.OPEN)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        self.simple_mayaFileTxt.SetValue(os.path.join(dirname + os.sep, filename))\n    dlg.Destroy()",
            "def OnSimpleMayaFile(self, e):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose a location and filename', dirname, '', '*.mb', wx.OPEN)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        self.simple_mayaFileTxt.SetValue(os.path.join(dirname + os.sep, filename))\n    dlg.Destroy()",
            "def OnSimpleMayaFile(self, e):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose a location and filename', dirname, '', '*.mb', wx.OPEN)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        self.simple_mayaFileTxt.SetValue(os.path.join(dirname + os.sep, filename))\n    dlg.Destroy()"
        ]
    },
    {
        "func_name": "OnSimpleExportDest",
        "original": "def OnSimpleExportDest(self, e):\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose a location and filename', dirname, '', '*.egg', wx.SAVE)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        self.simple_exportDestTxt.SetValue(os.path.join(dirname + os.sep, filename))\n    dlg.Destroy()",
        "mutated": [
            "def OnSimpleExportDest(self, e):\n    if False:\n        i = 10\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose a location and filename', dirname, '', '*.egg', wx.SAVE)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        self.simple_exportDestTxt.SetValue(os.path.join(dirname + os.sep, filename))\n    dlg.Destroy()",
            "def OnSimpleExportDest(self, e):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose a location and filename', dirname, '', '*.egg', wx.SAVE)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        self.simple_exportDestTxt.SetValue(os.path.join(dirname + os.sep, filename))\n    dlg.Destroy()",
            "def OnSimpleExportDest(self, e):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose a location and filename', dirname, '', '*.egg', wx.SAVE)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        self.simple_exportDestTxt.SetValue(os.path.join(dirname + os.sep, filename))\n    dlg.Destroy()",
            "def OnSimpleExportDest(self, e):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose a location and filename', dirname, '', '*.egg', wx.SAVE)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        self.simple_exportDestTxt.SetValue(os.path.join(dirname + os.sep, filename))\n    dlg.Destroy()",
            "def OnSimpleExportDest(self, e):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose a location and filename', dirname, '', '*.egg', wx.SAVE)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        self.simple_exportDestTxt.SetValue(os.path.join(dirname + os.sep, filename))\n    dlg.Destroy()"
        ]
    },
    {
        "func_name": "OnMaya2EggMayaFile",
        "original": "def OnMaya2EggMayaFile(self, event):\n    filename = ''\n    if self.m2e_mayaFileTxt.GetValue() != '':\n        self.srcProjectFolder = ''\n        for item in self.m2e_mayaFileTxt.GetValue().split('\\\\'):\n            self.srcProjectFolder += item + '\\\\'\n        self.srcProjectFolder = self.srcProjectFolder.split(item + '\\\\')[0]\n    dlg = wx.FileDialog(self, 'Choose an Egg file to load', self.srcProjectFolder, '', '*.mb', wx.OPEN)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        self.srcProjectFolder = dlg.GetDirectory()\n        self.m2e_mayaFileTxt.SetValue(os.path.join(self.srcProjectFolder + os.sep, filename))\n    dlg.Destroy()\n    self.statusBar.SetStatusText('Current Scene File is: ' + self.srcProjectFolder + os.sep + filename)",
        "mutated": [
            "def OnMaya2EggMayaFile(self, event):\n    if False:\n        i = 10\n    filename = ''\n    if self.m2e_mayaFileTxt.GetValue() != '':\n        self.srcProjectFolder = ''\n        for item in self.m2e_mayaFileTxt.GetValue().split('\\\\'):\n            self.srcProjectFolder += item + '\\\\'\n        self.srcProjectFolder = self.srcProjectFolder.split(item + '\\\\')[0]\n    dlg = wx.FileDialog(self, 'Choose an Egg file to load', self.srcProjectFolder, '', '*.mb', wx.OPEN)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        self.srcProjectFolder = dlg.GetDirectory()\n        self.m2e_mayaFileTxt.SetValue(os.path.join(self.srcProjectFolder + os.sep, filename))\n    dlg.Destroy()\n    self.statusBar.SetStatusText('Current Scene File is: ' + self.srcProjectFolder + os.sep + filename)",
            "def OnMaya2EggMayaFile(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    filename = ''\n    if self.m2e_mayaFileTxt.GetValue() != '':\n        self.srcProjectFolder = ''\n        for item in self.m2e_mayaFileTxt.GetValue().split('\\\\'):\n            self.srcProjectFolder += item + '\\\\'\n        self.srcProjectFolder = self.srcProjectFolder.split(item + '\\\\')[0]\n    dlg = wx.FileDialog(self, 'Choose an Egg file to load', self.srcProjectFolder, '', '*.mb', wx.OPEN)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        self.srcProjectFolder = dlg.GetDirectory()\n        self.m2e_mayaFileTxt.SetValue(os.path.join(self.srcProjectFolder + os.sep, filename))\n    dlg.Destroy()\n    self.statusBar.SetStatusText('Current Scene File is: ' + self.srcProjectFolder + os.sep + filename)",
            "def OnMaya2EggMayaFile(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    filename = ''\n    if self.m2e_mayaFileTxt.GetValue() != '':\n        self.srcProjectFolder = ''\n        for item in self.m2e_mayaFileTxt.GetValue().split('\\\\'):\n            self.srcProjectFolder += item + '\\\\'\n        self.srcProjectFolder = self.srcProjectFolder.split(item + '\\\\')[0]\n    dlg = wx.FileDialog(self, 'Choose an Egg file to load', self.srcProjectFolder, '', '*.mb', wx.OPEN)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        self.srcProjectFolder = dlg.GetDirectory()\n        self.m2e_mayaFileTxt.SetValue(os.path.join(self.srcProjectFolder + os.sep, filename))\n    dlg.Destroy()\n    self.statusBar.SetStatusText('Current Scene File is: ' + self.srcProjectFolder + os.sep + filename)",
            "def OnMaya2EggMayaFile(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    filename = ''\n    if self.m2e_mayaFileTxt.GetValue() != '':\n        self.srcProjectFolder = ''\n        for item in self.m2e_mayaFileTxt.GetValue().split('\\\\'):\n            self.srcProjectFolder += item + '\\\\'\n        self.srcProjectFolder = self.srcProjectFolder.split(item + '\\\\')[0]\n    dlg = wx.FileDialog(self, 'Choose an Egg file to load', self.srcProjectFolder, '', '*.mb', wx.OPEN)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        self.srcProjectFolder = dlg.GetDirectory()\n        self.m2e_mayaFileTxt.SetValue(os.path.join(self.srcProjectFolder + os.sep, filename))\n    dlg.Destroy()\n    self.statusBar.SetStatusText('Current Scene File is: ' + self.srcProjectFolder + os.sep + filename)",
            "def OnMaya2EggMayaFile(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    filename = ''\n    if self.m2e_mayaFileTxt.GetValue() != '':\n        self.srcProjectFolder = ''\n        for item in self.m2e_mayaFileTxt.GetValue().split('\\\\'):\n            self.srcProjectFolder += item + '\\\\'\n        self.srcProjectFolder = self.srcProjectFolder.split(item + '\\\\')[0]\n    dlg = wx.FileDialog(self, 'Choose an Egg file to load', self.srcProjectFolder, '', '*.mb', wx.OPEN)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        self.srcProjectFolder = dlg.GetDirectory()\n        self.m2e_mayaFileTxt.SetValue(os.path.join(self.srcProjectFolder + os.sep, filename))\n    dlg.Destroy()\n    self.statusBar.SetStatusText('Current Scene File is: ' + self.srcProjectFolder + os.sep + filename)"
        ]
    },
    {
        "func_name": "OnMaya2EggExportDest",
        "original": "def OnMaya2EggExportDest(self, event):\n    filename = ''\n    if self.m2e_exportDestTxt.GetValue() != '':\n        self.destProjectFolder = ''\n        for item in self.m2e_exportDestTxt.GetValue().split('\\\\'):\n            self.destProjectFolder += item + '\\\\'\n        self.destProjectFolder = self.destProjectFolder.split(item + '\\\\')[0]\n    dlg = wx.FileDialog(self, 'Choose an Egg file to load', self.destProjectFolder, '', '*.egg', wx.SAVE)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        self.destProjectFolder = dlg.GetDirectory()\n        self.m2e_exportDestTxt.SetValue(os.path.join(self.destProjectFolder + os.sep, filename))\n    dlg.Destroy()\n    if self.batchItemNameTxt.GetValue() == '' and len(filename) > 4:\n        self.batchItemNameTxt.SetValue(filename[:-4])\n    self.statusBar.SetStatusText('Current Egg File is: ' + self.destProjectFolder + os.sep + filename)",
        "mutated": [
            "def OnMaya2EggExportDest(self, event):\n    if False:\n        i = 10\n    filename = ''\n    if self.m2e_exportDestTxt.GetValue() != '':\n        self.destProjectFolder = ''\n        for item in self.m2e_exportDestTxt.GetValue().split('\\\\'):\n            self.destProjectFolder += item + '\\\\'\n        self.destProjectFolder = self.destProjectFolder.split(item + '\\\\')[0]\n    dlg = wx.FileDialog(self, 'Choose an Egg file to load', self.destProjectFolder, '', '*.egg', wx.SAVE)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        self.destProjectFolder = dlg.GetDirectory()\n        self.m2e_exportDestTxt.SetValue(os.path.join(self.destProjectFolder + os.sep, filename))\n    dlg.Destroy()\n    if self.batchItemNameTxt.GetValue() == '' and len(filename) > 4:\n        self.batchItemNameTxt.SetValue(filename[:-4])\n    self.statusBar.SetStatusText('Current Egg File is: ' + self.destProjectFolder + os.sep + filename)",
            "def OnMaya2EggExportDest(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    filename = ''\n    if self.m2e_exportDestTxt.GetValue() != '':\n        self.destProjectFolder = ''\n        for item in self.m2e_exportDestTxt.GetValue().split('\\\\'):\n            self.destProjectFolder += item + '\\\\'\n        self.destProjectFolder = self.destProjectFolder.split(item + '\\\\')[0]\n    dlg = wx.FileDialog(self, 'Choose an Egg file to load', self.destProjectFolder, '', '*.egg', wx.SAVE)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        self.destProjectFolder = dlg.GetDirectory()\n        self.m2e_exportDestTxt.SetValue(os.path.join(self.destProjectFolder + os.sep, filename))\n    dlg.Destroy()\n    if self.batchItemNameTxt.GetValue() == '' and len(filename) > 4:\n        self.batchItemNameTxt.SetValue(filename[:-4])\n    self.statusBar.SetStatusText('Current Egg File is: ' + self.destProjectFolder + os.sep + filename)",
            "def OnMaya2EggExportDest(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    filename = ''\n    if self.m2e_exportDestTxt.GetValue() != '':\n        self.destProjectFolder = ''\n        for item in self.m2e_exportDestTxt.GetValue().split('\\\\'):\n            self.destProjectFolder += item + '\\\\'\n        self.destProjectFolder = self.destProjectFolder.split(item + '\\\\')[0]\n    dlg = wx.FileDialog(self, 'Choose an Egg file to load', self.destProjectFolder, '', '*.egg', wx.SAVE)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        self.destProjectFolder = dlg.GetDirectory()\n        self.m2e_exportDestTxt.SetValue(os.path.join(self.destProjectFolder + os.sep, filename))\n    dlg.Destroy()\n    if self.batchItemNameTxt.GetValue() == '' and len(filename) > 4:\n        self.batchItemNameTxt.SetValue(filename[:-4])\n    self.statusBar.SetStatusText('Current Egg File is: ' + self.destProjectFolder + os.sep + filename)",
            "def OnMaya2EggExportDest(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    filename = ''\n    if self.m2e_exportDestTxt.GetValue() != '':\n        self.destProjectFolder = ''\n        for item in self.m2e_exportDestTxt.GetValue().split('\\\\'):\n            self.destProjectFolder += item + '\\\\'\n        self.destProjectFolder = self.destProjectFolder.split(item + '\\\\')[0]\n    dlg = wx.FileDialog(self, 'Choose an Egg file to load', self.destProjectFolder, '', '*.egg', wx.SAVE)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        self.destProjectFolder = dlg.GetDirectory()\n        self.m2e_exportDestTxt.SetValue(os.path.join(self.destProjectFolder + os.sep, filename))\n    dlg.Destroy()\n    if self.batchItemNameTxt.GetValue() == '' and len(filename) > 4:\n        self.batchItemNameTxt.SetValue(filename[:-4])\n    self.statusBar.SetStatusText('Current Egg File is: ' + self.destProjectFolder + os.sep + filename)",
            "def OnMaya2EggExportDest(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    filename = ''\n    if self.m2e_exportDestTxt.GetValue() != '':\n        self.destProjectFolder = ''\n        for item in self.m2e_exportDestTxt.GetValue().split('\\\\'):\n            self.destProjectFolder += item + '\\\\'\n        self.destProjectFolder = self.destProjectFolder.split(item + '\\\\')[0]\n    dlg = wx.FileDialog(self, 'Choose an Egg file to load', self.destProjectFolder, '', '*.egg', wx.SAVE)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        self.destProjectFolder = dlg.GetDirectory()\n        self.m2e_exportDestTxt.SetValue(os.path.join(self.destProjectFolder + os.sep, filename))\n    dlg.Destroy()\n    if self.batchItemNameTxt.GetValue() == '' and len(filename) > 4:\n        self.batchItemNameTxt.SetValue(filename[:-4])\n    self.statusBar.SetStatusText('Current Egg File is: ' + self.destProjectFolder + os.sep + filename)"
        ]
    },
    {
        "func_name": "OnMaya2EggAnimOpt",
        "original": "def OnMaya2EggAnimOpt(self, event):\n    if self.m2e_animOptChoice.GetStringSelection() == 'none':\n        self.m2e_startFrameChk.SetValue(0)\n        self.m2e_endFrameChk.SetValue(0)\n        self.m2e_frameRateInChk.SetValue(0)\n        self.m2e_frameRateOutChk.SetValue(0)\n        self.m2e_charNameChk.SetValue(0)",
        "mutated": [
            "def OnMaya2EggAnimOpt(self, event):\n    if False:\n        i = 10\n    if self.m2e_animOptChoice.GetStringSelection() == 'none':\n        self.m2e_startFrameChk.SetValue(0)\n        self.m2e_endFrameChk.SetValue(0)\n        self.m2e_frameRateInChk.SetValue(0)\n        self.m2e_frameRateOutChk.SetValue(0)\n        self.m2e_charNameChk.SetValue(0)",
            "def OnMaya2EggAnimOpt(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if self.m2e_animOptChoice.GetStringSelection() == 'none':\n        self.m2e_startFrameChk.SetValue(0)\n        self.m2e_endFrameChk.SetValue(0)\n        self.m2e_frameRateInChk.SetValue(0)\n        self.m2e_frameRateOutChk.SetValue(0)\n        self.m2e_charNameChk.SetValue(0)",
            "def OnMaya2EggAnimOpt(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if self.m2e_animOptChoice.GetStringSelection() == 'none':\n        self.m2e_startFrameChk.SetValue(0)\n        self.m2e_endFrameChk.SetValue(0)\n        self.m2e_frameRateInChk.SetValue(0)\n        self.m2e_frameRateOutChk.SetValue(0)\n        self.m2e_charNameChk.SetValue(0)",
            "def OnMaya2EggAnimOpt(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if self.m2e_animOptChoice.GetStringSelection() == 'none':\n        self.m2e_startFrameChk.SetValue(0)\n        self.m2e_endFrameChk.SetValue(0)\n        self.m2e_frameRateInChk.SetValue(0)\n        self.m2e_frameRateOutChk.SetValue(0)\n        self.m2e_charNameChk.SetValue(0)",
            "def OnMaya2EggAnimOpt(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if self.m2e_animOptChoice.GetStringSelection() == 'none':\n        self.m2e_startFrameChk.SetValue(0)\n        self.m2e_endFrameChk.SetValue(0)\n        self.m2e_frameRateInChk.SetValue(0)\n        self.m2e_frameRateOutChk.SetValue(0)\n        self.m2e_charNameChk.SetValue(0)"
        ]
    },
    {
        "func_name": "OnMaya2EggCopyTexPath",
        "original": "def OnMaya2EggCopyTexPath(self, event):\n    dirname = self.destProjectFolder\n    if self.m2e_copyTexPathTxt.GetValue() != '':\n        dirname = ''\n        for item in self.m2e_copyTexPathTxt.GetValue().split('\\\\'):\n            dirname += item + '\\\\'\n        dirname = dirname.split(item + '\\\\')[0]\n    dlg = wx.DirDialog(self, 'Choose your output directory:', dirname)\n    if dlg.ShowModal() == wx.ID_OK:\n        self.m2e_copyTexPathTxt.SetValue(dlg.GetPath())\n    dlg.Destroy()",
        "mutated": [
            "def OnMaya2EggCopyTexPath(self, event):\n    if False:\n        i = 10\n    dirname = self.destProjectFolder\n    if self.m2e_copyTexPathTxt.GetValue() != '':\n        dirname = ''\n        for item in self.m2e_copyTexPathTxt.GetValue().split('\\\\'):\n            dirname += item + '\\\\'\n        dirname = dirname.split(item + '\\\\')[0]\n    dlg = wx.DirDialog(self, 'Choose your output directory:', dirname)\n    if dlg.ShowModal() == wx.ID_OK:\n        self.m2e_copyTexPathTxt.SetValue(dlg.GetPath())\n    dlg.Destroy()",
            "def OnMaya2EggCopyTexPath(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    dirname = self.destProjectFolder\n    if self.m2e_copyTexPathTxt.GetValue() != '':\n        dirname = ''\n        for item in self.m2e_copyTexPathTxt.GetValue().split('\\\\'):\n            dirname += item + '\\\\'\n        dirname = dirname.split(item + '\\\\')[0]\n    dlg = wx.DirDialog(self, 'Choose your output directory:', dirname)\n    if dlg.ShowModal() == wx.ID_OK:\n        self.m2e_copyTexPathTxt.SetValue(dlg.GetPath())\n    dlg.Destroy()",
            "def OnMaya2EggCopyTexPath(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    dirname = self.destProjectFolder\n    if self.m2e_copyTexPathTxt.GetValue() != '':\n        dirname = ''\n        for item in self.m2e_copyTexPathTxt.GetValue().split('\\\\'):\n            dirname += item + '\\\\'\n        dirname = dirname.split(item + '\\\\')[0]\n    dlg = wx.DirDialog(self, 'Choose your output directory:', dirname)\n    if dlg.ShowModal() == wx.ID_OK:\n        self.m2e_copyTexPathTxt.SetValue(dlg.GetPath())\n    dlg.Destroy()",
            "def OnMaya2EggCopyTexPath(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    dirname = self.destProjectFolder\n    if self.m2e_copyTexPathTxt.GetValue() != '':\n        dirname = ''\n        for item in self.m2e_copyTexPathTxt.GetValue().split('\\\\'):\n            dirname += item + '\\\\'\n        dirname = dirname.split(item + '\\\\')[0]\n    dlg = wx.DirDialog(self, 'Choose your output directory:', dirname)\n    if dlg.ShowModal() == wx.ID_OK:\n        self.m2e_copyTexPathTxt.SetValue(dlg.GetPath())\n    dlg.Destroy()",
            "def OnMaya2EggCopyTexPath(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    dirname = self.destProjectFolder\n    if self.m2e_copyTexPathTxt.GetValue() != '':\n        dirname = ''\n        for item in self.m2e_copyTexPathTxt.GetValue().split('\\\\'):\n            dirname += item + '\\\\'\n        dirname = dirname.split(item + '\\\\')[0]\n    dlg = wx.DirDialog(self, 'Choose your output directory:', dirname)\n    if dlg.ShowModal() == wx.ID_OK:\n        self.m2e_copyTexPathTxt.SetValue(dlg.GetPath())\n    dlg.Destroy()"
        ]
    },
    {
        "func_name": "OnMaya2EggPathReplace",
        "original": "def OnMaya2EggPathReplace(self, event):\n    batchList = self.GetSelectedBatchList()\n    for batchItem in batchList:\n        if batchItem['cmd'].count('maya2egg'):\n            if self.m2e_pathReplaceChk.GetValue():\n                batchItem['args']['pr'] = self.m2e_pathReplaceTxt.GetValue()\n            elif batchItem['args'].has_key('pr'):\n                del batchItem['args']['pr']\n    self.UpdateBatchDisplay()",
        "mutated": [
            "def OnMaya2EggPathReplace(self, event):\n    if False:\n        i = 10\n    batchList = self.GetSelectedBatchList()\n    for batchItem in batchList:\n        if batchItem['cmd'].count('maya2egg'):\n            if self.m2e_pathReplaceChk.GetValue():\n                batchItem['args']['pr'] = self.m2e_pathReplaceTxt.GetValue()\n            elif batchItem['args'].has_key('pr'):\n                del batchItem['args']['pr']\n    self.UpdateBatchDisplay()",
            "def OnMaya2EggPathReplace(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    batchList = self.GetSelectedBatchList()\n    for batchItem in batchList:\n        if batchItem['cmd'].count('maya2egg'):\n            if self.m2e_pathReplaceChk.GetValue():\n                batchItem['args']['pr'] = self.m2e_pathReplaceTxt.GetValue()\n            elif batchItem['args'].has_key('pr'):\n                del batchItem['args']['pr']\n    self.UpdateBatchDisplay()",
            "def OnMaya2EggPathReplace(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    batchList = self.GetSelectedBatchList()\n    for batchItem in batchList:\n        if batchItem['cmd'].count('maya2egg'):\n            if self.m2e_pathReplaceChk.GetValue():\n                batchItem['args']['pr'] = self.m2e_pathReplaceTxt.GetValue()\n            elif batchItem['args'].has_key('pr'):\n                del batchItem['args']['pr']\n    self.UpdateBatchDisplay()",
            "def OnMaya2EggPathReplace(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    batchList = self.GetSelectedBatchList()\n    for batchItem in batchList:\n        if batchItem['cmd'].count('maya2egg'):\n            if self.m2e_pathReplaceChk.GetValue():\n                batchItem['args']['pr'] = self.m2e_pathReplaceTxt.GetValue()\n            elif batchItem['args'].has_key('pr'):\n                del batchItem['args']['pr']\n    self.UpdateBatchDisplay()",
            "def OnMaya2EggPathReplace(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    batchList = self.GetSelectedBatchList()\n    for batchItem in batchList:\n        if batchItem['cmd'].count('maya2egg'):\n            if self.m2e_pathReplaceChk.GetValue():\n                batchItem['args']['pr'] = self.m2e_pathReplaceTxt.GetValue()\n            elif batchItem['args'].has_key('pr'):\n                del batchItem['args']['pr']\n    self.UpdateBatchDisplay()"
        ]
    },
    {
        "func_name": "OnEgg2BamEggFile",
        "original": "def OnEgg2BamEggFile(self, event):\n    filename = ''\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose an Egg file to BAM', dirname, '', '*.egg', wx.OPEN)\n    if dlg.ShowModal() == wx.ID_OK:\n        self.filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        self.e2b_eggFileTxt.SetValue(os.path.join(dirname + os.sep, self.filename))\n    dlg.Destroy()",
        "mutated": [
            "def OnEgg2BamEggFile(self, event):\n    if False:\n        i = 10\n    filename = ''\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose an Egg file to BAM', dirname, '', '*.egg', wx.OPEN)\n    if dlg.ShowModal() == wx.ID_OK:\n        self.filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        self.e2b_eggFileTxt.SetValue(os.path.join(dirname + os.sep, self.filename))\n    dlg.Destroy()",
            "def OnEgg2BamEggFile(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    filename = ''\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose an Egg file to BAM', dirname, '', '*.egg', wx.OPEN)\n    if dlg.ShowModal() == wx.ID_OK:\n        self.filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        self.e2b_eggFileTxt.SetValue(os.path.join(dirname + os.sep, self.filename))\n    dlg.Destroy()",
            "def OnEgg2BamEggFile(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    filename = ''\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose an Egg file to BAM', dirname, '', '*.egg', wx.OPEN)\n    if dlg.ShowModal() == wx.ID_OK:\n        self.filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        self.e2b_eggFileTxt.SetValue(os.path.join(dirname + os.sep, self.filename))\n    dlg.Destroy()",
            "def OnEgg2BamEggFile(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    filename = ''\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose an Egg file to BAM', dirname, '', '*.egg', wx.OPEN)\n    if dlg.ShowModal() == wx.ID_OK:\n        self.filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        self.e2b_eggFileTxt.SetValue(os.path.join(dirname + os.sep, self.filename))\n    dlg.Destroy()",
            "def OnEgg2BamEggFile(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    filename = ''\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose an Egg file to BAM', dirname, '', '*.egg', wx.OPEN)\n    if dlg.ShowModal() == wx.ID_OK:\n        self.filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        self.e2b_eggFileTxt.SetValue(os.path.join(dirname + os.sep, self.filename))\n    dlg.Destroy()"
        ]
    },
    {
        "func_name": "OnEgg2BamExportDest",
        "original": "def OnEgg2BamExportDest(self, event):\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose an Egg file to load', dirname, '', '*.bam', wx.SAVE)\n    if dlg.ShowModal() == wx.ID_OK:\n        self.filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        self.e2b_exportDestTxt.SetValue(os.path.join(dirname + os.sep, self.filename))\n    dlg.Destroy()",
        "mutated": [
            "def OnEgg2BamExportDest(self, event):\n    if False:\n        i = 10\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose an Egg file to load', dirname, '', '*.bam', wx.SAVE)\n    if dlg.ShowModal() == wx.ID_OK:\n        self.filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        self.e2b_exportDestTxt.SetValue(os.path.join(dirname + os.sep, self.filename))\n    dlg.Destroy()",
            "def OnEgg2BamExportDest(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose an Egg file to load', dirname, '', '*.bam', wx.SAVE)\n    if dlg.ShowModal() == wx.ID_OK:\n        self.filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        self.e2b_exportDestTxt.SetValue(os.path.join(dirname + os.sep, self.filename))\n    dlg.Destroy()",
            "def OnEgg2BamExportDest(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose an Egg file to load', dirname, '', '*.bam', wx.SAVE)\n    if dlg.ShowModal() == wx.ID_OK:\n        self.filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        self.e2b_exportDestTxt.SetValue(os.path.join(dirname + os.sep, self.filename))\n    dlg.Destroy()",
            "def OnEgg2BamExportDest(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose an Egg file to load', dirname, '', '*.bam', wx.SAVE)\n    if dlg.ShowModal() == wx.ID_OK:\n        self.filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        self.e2b_exportDestTxt.SetValue(os.path.join(dirname + os.sep, self.filename))\n    dlg.Destroy()",
            "def OnEgg2BamExportDest(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose an Egg file to load', dirname, '', '*.bam', wx.SAVE)\n    if dlg.ShowModal() == wx.ID_OK:\n        self.filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        self.e2b_exportDestTxt.SetValue(os.path.join(dirname + os.sep, self.filename))\n    dlg.Destroy()"
        ]
    },
    {
        "func_name": "OnEgg2BamUseCurrEgg",
        "original": "def OnEgg2BamUseCurrEgg(self, event):\n    if not self.e2b_useCurrEggChk.GetValue():\n        self.e2b_eggFileTxt.Enable()\n        self.e2b_eggFileBtn.Enable()\n    else:\n        self.e2b_eggFileTxt.Disable()\n        self.e2b_eggFileBtn.Disable()",
        "mutated": [
            "def OnEgg2BamUseCurrEgg(self, event):\n    if False:\n        i = 10\n    if not self.e2b_useCurrEggChk.GetValue():\n        self.e2b_eggFileTxt.Enable()\n        self.e2b_eggFileBtn.Enable()\n    else:\n        self.e2b_eggFileTxt.Disable()\n        self.e2b_eggFileBtn.Disable()",
            "def OnEgg2BamUseCurrEgg(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not self.e2b_useCurrEggChk.GetValue():\n        self.e2b_eggFileTxt.Enable()\n        self.e2b_eggFileBtn.Enable()\n    else:\n        self.e2b_eggFileTxt.Disable()\n        self.e2b_eggFileBtn.Disable()",
            "def OnEgg2BamUseCurrEgg(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not self.e2b_useCurrEggChk.GetValue():\n        self.e2b_eggFileTxt.Enable()\n        self.e2b_eggFileBtn.Enable()\n    else:\n        self.e2b_eggFileTxt.Disable()\n        self.e2b_eggFileBtn.Disable()",
            "def OnEgg2BamUseCurrEgg(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not self.e2b_useCurrEggChk.GetValue():\n        self.e2b_eggFileTxt.Enable()\n        self.e2b_eggFileBtn.Enable()\n    else:\n        self.e2b_eggFileTxt.Disable()\n        self.e2b_eggFileBtn.Disable()",
            "def OnEgg2BamUseCurrEgg(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not self.e2b_useCurrEggChk.GetValue():\n        self.e2b_eggFileTxt.Enable()\n        self.e2b_eggFileBtn.Enable()\n    else:\n        self.e2b_eggFileTxt.Disable()\n        self.e2b_eggFileBtn.Disable()"
        ]
    },
    {
        "func_name": "OnEgg2BamBatchOutput",
        "original": "def OnEgg2BamBatchOutput(self, event):\n    for eggInfo in self.GetOutputFromBatch():\n        batchItemInfo = {}\n        batchItemInfo['cmd'] = 'egg2bam'\n        batchItemInfo['args'] = self.BuildEgg2BamArgs()\n        batchItemInfo['finput'] = str(eggInfo)\n        dirname = ''\n        for item in eggInfo.split('\\\\'):\n            dirname += item + '\\\\'\n        dirname = dirname.split(item + '\\\\')[0]\n        batchItemInfo['foutput'] = str(dirname + item[:-4] + '.bam')\n        batchItemInfo['label'] = item[:-4]\n        self.batchList.append(batchItemInfo)\n        self.AddToBatchDisplay(batchItemInfo)",
        "mutated": [
            "def OnEgg2BamBatchOutput(self, event):\n    if False:\n        i = 10\n    for eggInfo in self.GetOutputFromBatch():\n        batchItemInfo = {}\n        batchItemInfo['cmd'] = 'egg2bam'\n        batchItemInfo['args'] = self.BuildEgg2BamArgs()\n        batchItemInfo['finput'] = str(eggInfo)\n        dirname = ''\n        for item in eggInfo.split('\\\\'):\n            dirname += item + '\\\\'\n        dirname = dirname.split(item + '\\\\')[0]\n        batchItemInfo['foutput'] = str(dirname + item[:-4] + '.bam')\n        batchItemInfo['label'] = item[:-4]\n        self.batchList.append(batchItemInfo)\n        self.AddToBatchDisplay(batchItemInfo)",
            "def OnEgg2BamBatchOutput(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for eggInfo in self.GetOutputFromBatch():\n        batchItemInfo = {}\n        batchItemInfo['cmd'] = 'egg2bam'\n        batchItemInfo['args'] = self.BuildEgg2BamArgs()\n        batchItemInfo['finput'] = str(eggInfo)\n        dirname = ''\n        for item in eggInfo.split('\\\\'):\n            dirname += item + '\\\\'\n        dirname = dirname.split(item + '\\\\')[0]\n        batchItemInfo['foutput'] = str(dirname + item[:-4] + '.bam')\n        batchItemInfo['label'] = item[:-4]\n        self.batchList.append(batchItemInfo)\n        self.AddToBatchDisplay(batchItemInfo)",
            "def OnEgg2BamBatchOutput(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for eggInfo in self.GetOutputFromBatch():\n        batchItemInfo = {}\n        batchItemInfo['cmd'] = 'egg2bam'\n        batchItemInfo['args'] = self.BuildEgg2BamArgs()\n        batchItemInfo['finput'] = str(eggInfo)\n        dirname = ''\n        for item in eggInfo.split('\\\\'):\n            dirname += item + '\\\\'\n        dirname = dirname.split(item + '\\\\')[0]\n        batchItemInfo['foutput'] = str(dirname + item[:-4] + '.bam')\n        batchItemInfo['label'] = item[:-4]\n        self.batchList.append(batchItemInfo)\n        self.AddToBatchDisplay(batchItemInfo)",
            "def OnEgg2BamBatchOutput(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for eggInfo in self.GetOutputFromBatch():\n        batchItemInfo = {}\n        batchItemInfo['cmd'] = 'egg2bam'\n        batchItemInfo['args'] = self.BuildEgg2BamArgs()\n        batchItemInfo['finput'] = str(eggInfo)\n        dirname = ''\n        for item in eggInfo.split('\\\\'):\n            dirname += item + '\\\\'\n        dirname = dirname.split(item + '\\\\')[0]\n        batchItemInfo['foutput'] = str(dirname + item[:-4] + '.bam')\n        batchItemInfo['label'] = item[:-4]\n        self.batchList.append(batchItemInfo)\n        self.AddToBatchDisplay(batchItemInfo)",
            "def OnEgg2BamBatchOutput(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for eggInfo in self.GetOutputFromBatch():\n        batchItemInfo = {}\n        batchItemInfo['cmd'] = 'egg2bam'\n        batchItemInfo['args'] = self.BuildEgg2BamArgs()\n        batchItemInfo['finput'] = str(eggInfo)\n        dirname = ''\n        for item in eggInfo.split('\\\\'):\n            dirname += item + '\\\\'\n        dirname = dirname.split(item + '\\\\')[0]\n        batchItemInfo['foutput'] = str(dirname + item[:-4] + '.bam')\n        batchItemInfo['label'] = item[:-4]\n        self.batchList.append(batchItemInfo)\n        self.AddToBatchDisplay(batchItemInfo)"
        ]
    },
    {
        "func_name": "OnRenameAddEgg",
        "original": "def OnRenameAddEgg(self, event):\n    filename = ''\n    dirname = self.destProjectFolder\n    dlg = wx.FileDialog(self, 'Choose your input egg files', dirname, '', '*.egg', wx.MULTIPLE)\n    if dlg.ShowModal() == wx.ID_OK:\n        filenames = dlg.GetFilenames()\n        dirname = dlg.GetDirectory()\n        for filename in filenames:\n            eggInfo = os.path.join(dirname + os.sep, filename)\n            self.rename_eggList.append(eggInfo)\n            self.rename_eggFilesTree.AppendItem(self.rename_eggFilesRoot, str(len(self.rename_eggList)) + ' ' + eggInfo)\n            self.rename_eggFilesTree.ExpandAll()\n    dlg.Destroy()\n    self.statusBar.SetStatusText('The input egg File is: ' + dirname + os.sep + filename)\n    self.OnRenameInPlace(None)",
        "mutated": [
            "def OnRenameAddEgg(self, event):\n    if False:\n        i = 10\n    filename = ''\n    dirname = self.destProjectFolder\n    dlg = wx.FileDialog(self, 'Choose your input egg files', dirname, '', '*.egg', wx.MULTIPLE)\n    if dlg.ShowModal() == wx.ID_OK:\n        filenames = dlg.GetFilenames()\n        dirname = dlg.GetDirectory()\n        for filename in filenames:\n            eggInfo = os.path.join(dirname + os.sep, filename)\n            self.rename_eggList.append(eggInfo)\n            self.rename_eggFilesTree.AppendItem(self.rename_eggFilesRoot, str(len(self.rename_eggList)) + ' ' + eggInfo)\n            self.rename_eggFilesTree.ExpandAll()\n    dlg.Destroy()\n    self.statusBar.SetStatusText('The input egg File is: ' + dirname + os.sep + filename)\n    self.OnRenameInPlace(None)",
            "def OnRenameAddEgg(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    filename = ''\n    dirname = self.destProjectFolder\n    dlg = wx.FileDialog(self, 'Choose your input egg files', dirname, '', '*.egg', wx.MULTIPLE)\n    if dlg.ShowModal() == wx.ID_OK:\n        filenames = dlg.GetFilenames()\n        dirname = dlg.GetDirectory()\n        for filename in filenames:\n            eggInfo = os.path.join(dirname + os.sep, filename)\n            self.rename_eggList.append(eggInfo)\n            self.rename_eggFilesTree.AppendItem(self.rename_eggFilesRoot, str(len(self.rename_eggList)) + ' ' + eggInfo)\n            self.rename_eggFilesTree.ExpandAll()\n    dlg.Destroy()\n    self.statusBar.SetStatusText('The input egg File is: ' + dirname + os.sep + filename)\n    self.OnRenameInPlace(None)",
            "def OnRenameAddEgg(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    filename = ''\n    dirname = self.destProjectFolder\n    dlg = wx.FileDialog(self, 'Choose your input egg files', dirname, '', '*.egg', wx.MULTIPLE)\n    if dlg.ShowModal() == wx.ID_OK:\n        filenames = dlg.GetFilenames()\n        dirname = dlg.GetDirectory()\n        for filename in filenames:\n            eggInfo = os.path.join(dirname + os.sep, filename)\n            self.rename_eggList.append(eggInfo)\n            self.rename_eggFilesTree.AppendItem(self.rename_eggFilesRoot, str(len(self.rename_eggList)) + ' ' + eggInfo)\n            self.rename_eggFilesTree.ExpandAll()\n    dlg.Destroy()\n    self.statusBar.SetStatusText('The input egg File is: ' + dirname + os.sep + filename)\n    self.OnRenameInPlace(None)",
            "def OnRenameAddEgg(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    filename = ''\n    dirname = self.destProjectFolder\n    dlg = wx.FileDialog(self, 'Choose your input egg files', dirname, '', '*.egg', wx.MULTIPLE)\n    if dlg.ShowModal() == wx.ID_OK:\n        filenames = dlg.GetFilenames()\n        dirname = dlg.GetDirectory()\n        for filename in filenames:\n            eggInfo = os.path.join(dirname + os.sep, filename)\n            self.rename_eggList.append(eggInfo)\n            self.rename_eggFilesTree.AppendItem(self.rename_eggFilesRoot, str(len(self.rename_eggList)) + ' ' + eggInfo)\n            self.rename_eggFilesTree.ExpandAll()\n    dlg.Destroy()\n    self.statusBar.SetStatusText('The input egg File is: ' + dirname + os.sep + filename)\n    self.OnRenameInPlace(None)",
            "def OnRenameAddEgg(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    filename = ''\n    dirname = self.destProjectFolder\n    dlg = wx.FileDialog(self, 'Choose your input egg files', dirname, '', '*.egg', wx.MULTIPLE)\n    if dlg.ShowModal() == wx.ID_OK:\n        filenames = dlg.GetFilenames()\n        dirname = dlg.GetDirectory()\n        for filename in filenames:\n            eggInfo = os.path.join(dirname + os.sep, filename)\n            self.rename_eggList.append(eggInfo)\n            self.rename_eggFilesTree.AppendItem(self.rename_eggFilesRoot, str(len(self.rename_eggList)) + ' ' + eggInfo)\n            self.rename_eggFilesTree.ExpandAll()\n    dlg.Destroy()\n    self.statusBar.SetStatusText('The input egg File is: ' + dirname + os.sep + filename)\n    self.OnRenameInPlace(None)"
        ]
    },
    {
        "func_name": "OnRenameAddFromBatch",
        "original": "def OnRenameAddFromBatch(self, event):\n    for eggInfo in self.GetOutputFromBatch():\n        self.rename_eggList.append(eggInfo)\n        self.rename_eggFilesTree.AppendItem(self.rename_eggFilesRoot, str(len(self.rename_eggList)) + ' ' + eggInfo)\n        self.rename_eggFilesTree.ExpandAll()\n    self.OnRenameInPlace(None)",
        "mutated": [
            "def OnRenameAddFromBatch(self, event):\n    if False:\n        i = 10\n    for eggInfo in self.GetOutputFromBatch():\n        self.rename_eggList.append(eggInfo)\n        self.rename_eggFilesTree.AppendItem(self.rename_eggFilesRoot, str(len(self.rename_eggList)) + ' ' + eggInfo)\n        self.rename_eggFilesTree.ExpandAll()\n    self.OnRenameInPlace(None)",
            "def OnRenameAddFromBatch(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for eggInfo in self.GetOutputFromBatch():\n        self.rename_eggList.append(eggInfo)\n        self.rename_eggFilesTree.AppendItem(self.rename_eggFilesRoot, str(len(self.rename_eggList)) + ' ' + eggInfo)\n        self.rename_eggFilesTree.ExpandAll()\n    self.OnRenameInPlace(None)",
            "def OnRenameAddFromBatch(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for eggInfo in self.GetOutputFromBatch():\n        self.rename_eggList.append(eggInfo)\n        self.rename_eggFilesTree.AppendItem(self.rename_eggFilesRoot, str(len(self.rename_eggList)) + ' ' + eggInfo)\n        self.rename_eggFilesTree.ExpandAll()\n    self.OnRenameInPlace(None)",
            "def OnRenameAddFromBatch(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for eggInfo in self.GetOutputFromBatch():\n        self.rename_eggList.append(eggInfo)\n        self.rename_eggFilesTree.AppendItem(self.rename_eggFilesRoot, str(len(self.rename_eggList)) + ' ' + eggInfo)\n        self.rename_eggFilesTree.ExpandAll()\n    self.OnRenameInPlace(None)",
            "def OnRenameAddFromBatch(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for eggInfo in self.GetOutputFromBatch():\n        self.rename_eggList.append(eggInfo)\n        self.rename_eggFilesTree.AppendItem(self.rename_eggFilesRoot, str(len(self.rename_eggList)) + ' ' + eggInfo)\n        self.rename_eggFilesTree.ExpandAll()\n    self.OnRenameInPlace(None)"
        ]
    },
    {
        "func_name": "OnRenameRemoveEgg",
        "original": "def OnRenameRemoveEgg(self, event):\n    item = self.rename_eggFilesTree.GetSelection()\n    if item != self.rename_eggFilesRoot:\n        index = self.rename_eggFilesTree.GetItemText(item).split()[0]\n        index = int(index) - 1\n        self.rename_eggList.pop(index)\n        self.rename_eggFilesTree.Delete(item)\n        self.UpdateEggRenameDisplay()\n    self.OnRenameInPlace(None)",
        "mutated": [
            "def OnRenameRemoveEgg(self, event):\n    if False:\n        i = 10\n    item = self.rename_eggFilesTree.GetSelection()\n    if item != self.rename_eggFilesRoot:\n        index = self.rename_eggFilesTree.GetItemText(item).split()[0]\n        index = int(index) - 1\n        self.rename_eggList.pop(index)\n        self.rename_eggFilesTree.Delete(item)\n        self.UpdateEggRenameDisplay()\n    self.OnRenameInPlace(None)",
            "def OnRenameRemoveEgg(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    item = self.rename_eggFilesTree.GetSelection()\n    if item != self.rename_eggFilesRoot:\n        index = self.rename_eggFilesTree.GetItemText(item).split()[0]\n        index = int(index) - 1\n        self.rename_eggList.pop(index)\n        self.rename_eggFilesTree.Delete(item)\n        self.UpdateEggRenameDisplay()\n    self.OnRenameInPlace(None)",
            "def OnRenameRemoveEgg(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    item = self.rename_eggFilesTree.GetSelection()\n    if item != self.rename_eggFilesRoot:\n        index = self.rename_eggFilesTree.GetItemText(item).split()[0]\n        index = int(index) - 1\n        self.rename_eggList.pop(index)\n        self.rename_eggFilesTree.Delete(item)\n        self.UpdateEggRenameDisplay()\n    self.OnRenameInPlace(None)",
            "def OnRenameRemoveEgg(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    item = self.rename_eggFilesTree.GetSelection()\n    if item != self.rename_eggFilesRoot:\n        index = self.rename_eggFilesTree.GetItemText(item).split()[0]\n        index = int(index) - 1\n        self.rename_eggList.pop(index)\n        self.rename_eggFilesTree.Delete(item)\n        self.UpdateEggRenameDisplay()\n    self.OnRenameInPlace(None)",
            "def OnRenameRemoveEgg(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    item = self.rename_eggFilesTree.GetSelection()\n    if item != self.rename_eggFilesRoot:\n        index = self.rename_eggFilesTree.GetItemText(item).split()[0]\n        index = int(index) - 1\n        self.rename_eggList.pop(index)\n        self.rename_eggFilesTree.Delete(item)\n        self.UpdateEggRenameDisplay()\n    self.OnRenameInPlace(None)"
        ]
    },
    {
        "func_name": "OnRenameRemoveAllEggs",
        "original": "def OnRenameRemoveAllEggs(self, event):\n    self.rename_eggFilesTree.DeleteAllItems()\n    if self.rename_eggList != []:\n        self.rename_eggList = []\n    self.rename_eggFilesRoot = self.rename_eggFilesTree.AddRoot('Egg Files')\n    self.OnRenameInPlace(None)",
        "mutated": [
            "def OnRenameRemoveAllEggs(self, event):\n    if False:\n        i = 10\n    self.rename_eggFilesTree.DeleteAllItems()\n    if self.rename_eggList != []:\n        self.rename_eggList = []\n    self.rename_eggFilesRoot = self.rename_eggFilesTree.AddRoot('Egg Files')\n    self.OnRenameInPlace(None)",
            "def OnRenameRemoveAllEggs(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.rename_eggFilesTree.DeleteAllItems()\n    if self.rename_eggList != []:\n        self.rename_eggList = []\n    self.rename_eggFilesRoot = self.rename_eggFilesTree.AddRoot('Egg Files')\n    self.OnRenameInPlace(None)",
            "def OnRenameRemoveAllEggs(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.rename_eggFilesTree.DeleteAllItems()\n    if self.rename_eggList != []:\n        self.rename_eggList = []\n    self.rename_eggFilesRoot = self.rename_eggFilesTree.AddRoot('Egg Files')\n    self.OnRenameInPlace(None)",
            "def OnRenameRemoveAllEggs(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.rename_eggFilesTree.DeleteAllItems()\n    if self.rename_eggList != []:\n        self.rename_eggList = []\n    self.rename_eggFilesRoot = self.rename_eggFilesTree.AddRoot('Egg Files')\n    self.OnRenameInPlace(None)",
            "def OnRenameRemoveAllEggs(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.rename_eggFilesTree.DeleteAllItems()\n    if self.rename_eggList != []:\n        self.rename_eggList = []\n    self.rename_eggFilesRoot = self.rename_eggFilesTree.AddRoot('Egg Files')\n    self.OnRenameInPlace(None)"
        ]
    },
    {
        "func_name": "UpdateEggRenameDisplay",
        "original": "def UpdateEggRenameDisplay(self):\n    self.rename_eggFilesTree.DeleteAllItems()\n    self.rename_eggFilesRoot = self.rename_eggFilesTree.AddRoot('Egg Files')\n    index = 0\n    for item in self.rename_eggList:\n        index += 1\n        treeitem = item\n        self.rename_eggFilesTree.AppendItem(self.rename_eggFilesRoot, str(index) + ' ' + str(treeitem))\n    self.rename_eggFilesTree.ExpandAll()\n    self.OnRenameInPlace(None)",
        "mutated": [
            "def UpdateEggRenameDisplay(self):\n    if False:\n        i = 10\n    self.rename_eggFilesTree.DeleteAllItems()\n    self.rename_eggFilesRoot = self.rename_eggFilesTree.AddRoot('Egg Files')\n    index = 0\n    for item in self.rename_eggList:\n        index += 1\n        treeitem = item\n        self.rename_eggFilesTree.AppendItem(self.rename_eggFilesRoot, str(index) + ' ' + str(treeitem))\n    self.rename_eggFilesTree.ExpandAll()\n    self.OnRenameInPlace(None)",
            "def UpdateEggRenameDisplay(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.rename_eggFilesTree.DeleteAllItems()\n    self.rename_eggFilesRoot = self.rename_eggFilesTree.AddRoot('Egg Files')\n    index = 0\n    for item in self.rename_eggList:\n        index += 1\n        treeitem = item\n        self.rename_eggFilesTree.AppendItem(self.rename_eggFilesRoot, str(index) + ' ' + str(treeitem))\n    self.rename_eggFilesTree.ExpandAll()\n    self.OnRenameInPlace(None)",
            "def UpdateEggRenameDisplay(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.rename_eggFilesTree.DeleteAllItems()\n    self.rename_eggFilesRoot = self.rename_eggFilesTree.AddRoot('Egg Files')\n    index = 0\n    for item in self.rename_eggList:\n        index += 1\n        treeitem = item\n        self.rename_eggFilesTree.AppendItem(self.rename_eggFilesRoot, str(index) + ' ' + str(treeitem))\n    self.rename_eggFilesTree.ExpandAll()\n    self.OnRenameInPlace(None)",
            "def UpdateEggRenameDisplay(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.rename_eggFilesTree.DeleteAllItems()\n    self.rename_eggFilesRoot = self.rename_eggFilesTree.AddRoot('Egg Files')\n    index = 0\n    for item in self.rename_eggList:\n        index += 1\n        treeitem = item\n        self.rename_eggFilesTree.AppendItem(self.rename_eggFilesRoot, str(index) + ' ' + str(treeitem))\n    self.rename_eggFilesTree.ExpandAll()\n    self.OnRenameInPlace(None)",
            "def UpdateEggRenameDisplay(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.rename_eggFilesTree.DeleteAllItems()\n    self.rename_eggFilesRoot = self.rename_eggFilesTree.AddRoot('Egg Files')\n    index = 0\n    for item in self.rename_eggList:\n        index += 1\n        treeitem = item\n        self.rename_eggFilesTree.AppendItem(self.rename_eggFilesRoot, str(index) + ' ' + str(treeitem))\n    self.rename_eggFilesTree.ExpandAll()\n    self.OnRenameInPlace(None)"
        ]
    },
    {
        "func_name": "OnRenameInPlace",
        "original": "def OnRenameInPlace(self, event):\n    if self.rename_exportInPlaceChk.GetValue():\n        self.rename_exportDirTxt.SetValue('')\n        self.rename_exportDirTxt.Disable()\n        self.rename_exportDirBtn.Disable()\n        self.rename_exportFileTxt.SetValue('')\n        self.rename_exportFileTxt.Disable()\n        self.rename_exportFileBtn.Disable()\n    elif len(self.rename_eggList) > 1:\n        self.rename_exportDirTxt.Enable()\n        self.rename_exportDirBtn.Enable()\n        self.rename_exportFileTxt.Disable()\n        self.rename_exportFileBtn.Disable()\n    else:\n        self.rename_exportDirTxt.Enable()\n        self.rename_exportDirBtn.Enable()\n        self.rename_exportFileTxt.Enable()\n        self.rename_exportFileBtn.Enable()",
        "mutated": [
            "def OnRenameInPlace(self, event):\n    if False:\n        i = 10\n    if self.rename_exportInPlaceChk.GetValue():\n        self.rename_exportDirTxt.SetValue('')\n        self.rename_exportDirTxt.Disable()\n        self.rename_exportDirBtn.Disable()\n        self.rename_exportFileTxt.SetValue('')\n        self.rename_exportFileTxt.Disable()\n        self.rename_exportFileBtn.Disable()\n    elif len(self.rename_eggList) > 1:\n        self.rename_exportDirTxt.Enable()\n        self.rename_exportDirBtn.Enable()\n        self.rename_exportFileTxt.Disable()\n        self.rename_exportFileBtn.Disable()\n    else:\n        self.rename_exportDirTxt.Enable()\n        self.rename_exportDirBtn.Enable()\n        self.rename_exportFileTxt.Enable()\n        self.rename_exportFileBtn.Enable()",
            "def OnRenameInPlace(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if self.rename_exportInPlaceChk.GetValue():\n        self.rename_exportDirTxt.SetValue('')\n        self.rename_exportDirTxt.Disable()\n        self.rename_exportDirBtn.Disable()\n        self.rename_exportFileTxt.SetValue('')\n        self.rename_exportFileTxt.Disable()\n        self.rename_exportFileBtn.Disable()\n    elif len(self.rename_eggList) > 1:\n        self.rename_exportDirTxt.Enable()\n        self.rename_exportDirBtn.Enable()\n        self.rename_exportFileTxt.Disable()\n        self.rename_exportFileBtn.Disable()\n    else:\n        self.rename_exportDirTxt.Enable()\n        self.rename_exportDirBtn.Enable()\n        self.rename_exportFileTxt.Enable()\n        self.rename_exportFileBtn.Enable()",
            "def OnRenameInPlace(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if self.rename_exportInPlaceChk.GetValue():\n        self.rename_exportDirTxt.SetValue('')\n        self.rename_exportDirTxt.Disable()\n        self.rename_exportDirBtn.Disable()\n        self.rename_exportFileTxt.SetValue('')\n        self.rename_exportFileTxt.Disable()\n        self.rename_exportFileBtn.Disable()\n    elif len(self.rename_eggList) > 1:\n        self.rename_exportDirTxt.Enable()\n        self.rename_exportDirBtn.Enable()\n        self.rename_exportFileTxt.Disable()\n        self.rename_exportFileBtn.Disable()\n    else:\n        self.rename_exportDirTxt.Enable()\n        self.rename_exportDirBtn.Enable()\n        self.rename_exportFileTxt.Enable()\n        self.rename_exportFileBtn.Enable()",
            "def OnRenameInPlace(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if self.rename_exportInPlaceChk.GetValue():\n        self.rename_exportDirTxt.SetValue('')\n        self.rename_exportDirTxt.Disable()\n        self.rename_exportDirBtn.Disable()\n        self.rename_exportFileTxt.SetValue('')\n        self.rename_exportFileTxt.Disable()\n        self.rename_exportFileBtn.Disable()\n    elif len(self.rename_eggList) > 1:\n        self.rename_exportDirTxt.Enable()\n        self.rename_exportDirBtn.Enable()\n        self.rename_exportFileTxt.Disable()\n        self.rename_exportFileBtn.Disable()\n    else:\n        self.rename_exportDirTxt.Enable()\n        self.rename_exportDirBtn.Enable()\n        self.rename_exportFileTxt.Enable()\n        self.rename_exportFileBtn.Enable()",
            "def OnRenameInPlace(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if self.rename_exportInPlaceChk.GetValue():\n        self.rename_exportDirTxt.SetValue('')\n        self.rename_exportDirTxt.Disable()\n        self.rename_exportDirBtn.Disable()\n        self.rename_exportFileTxt.SetValue('')\n        self.rename_exportFileTxt.Disable()\n        self.rename_exportFileBtn.Disable()\n    elif len(self.rename_eggList) > 1:\n        self.rename_exportDirTxt.Enable()\n        self.rename_exportDirBtn.Enable()\n        self.rename_exportFileTxt.Disable()\n        self.rename_exportFileBtn.Disable()\n    else:\n        self.rename_exportDirTxt.Enable()\n        self.rename_exportDirBtn.Enable()\n        self.rename_exportFileTxt.Enable()\n        self.rename_exportFileBtn.Enable()"
        ]
    },
    {
        "func_name": "OnRenameExportFile",
        "original": "def OnRenameExportFile(self, event):\n    if self.rename_exportFileTxt.GetValue() != '':\n        self.destProjectFolder = ''\n        for item in self.rename_exportFileTxt.GetValue().split('\\\\'):\n            self.destProjectFolder += item + '\\\\'\n        self.destProjectFolder = self.destProjectFolder.split(item + '\\\\')[0]\n    dlg = wx.FileDialog(self, 'Choose a location and filename', self.destProjectFolder, '', '*.egg', wx.SAVE)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        self.destProjectFolder = dlg.GetDirectory()\n        self.rename_exportFileTxt.SetValue(os.path.join(self.destProjectFolder + os.sep, filename))\n    dlg.Destroy()",
        "mutated": [
            "def OnRenameExportFile(self, event):\n    if False:\n        i = 10\n    if self.rename_exportFileTxt.GetValue() != '':\n        self.destProjectFolder = ''\n        for item in self.rename_exportFileTxt.GetValue().split('\\\\'):\n            self.destProjectFolder += item + '\\\\'\n        self.destProjectFolder = self.destProjectFolder.split(item + '\\\\')[0]\n    dlg = wx.FileDialog(self, 'Choose a location and filename', self.destProjectFolder, '', '*.egg', wx.SAVE)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        self.destProjectFolder = dlg.GetDirectory()\n        self.rename_exportFileTxt.SetValue(os.path.join(self.destProjectFolder + os.sep, filename))\n    dlg.Destroy()",
            "def OnRenameExportFile(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if self.rename_exportFileTxt.GetValue() != '':\n        self.destProjectFolder = ''\n        for item in self.rename_exportFileTxt.GetValue().split('\\\\'):\n            self.destProjectFolder += item + '\\\\'\n        self.destProjectFolder = self.destProjectFolder.split(item + '\\\\')[0]\n    dlg = wx.FileDialog(self, 'Choose a location and filename', self.destProjectFolder, '', '*.egg', wx.SAVE)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        self.destProjectFolder = dlg.GetDirectory()\n        self.rename_exportFileTxt.SetValue(os.path.join(self.destProjectFolder + os.sep, filename))\n    dlg.Destroy()",
            "def OnRenameExportFile(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if self.rename_exportFileTxt.GetValue() != '':\n        self.destProjectFolder = ''\n        for item in self.rename_exportFileTxt.GetValue().split('\\\\'):\n            self.destProjectFolder += item + '\\\\'\n        self.destProjectFolder = self.destProjectFolder.split(item + '\\\\')[0]\n    dlg = wx.FileDialog(self, 'Choose a location and filename', self.destProjectFolder, '', '*.egg', wx.SAVE)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        self.destProjectFolder = dlg.GetDirectory()\n        self.rename_exportFileTxt.SetValue(os.path.join(self.destProjectFolder + os.sep, filename))\n    dlg.Destroy()",
            "def OnRenameExportFile(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if self.rename_exportFileTxt.GetValue() != '':\n        self.destProjectFolder = ''\n        for item in self.rename_exportFileTxt.GetValue().split('\\\\'):\n            self.destProjectFolder += item + '\\\\'\n        self.destProjectFolder = self.destProjectFolder.split(item + '\\\\')[0]\n    dlg = wx.FileDialog(self, 'Choose a location and filename', self.destProjectFolder, '', '*.egg', wx.SAVE)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        self.destProjectFolder = dlg.GetDirectory()\n        self.rename_exportFileTxt.SetValue(os.path.join(self.destProjectFolder + os.sep, filename))\n    dlg.Destroy()",
            "def OnRenameExportFile(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if self.rename_exportFileTxt.GetValue() != '':\n        self.destProjectFolder = ''\n        for item in self.rename_exportFileTxt.GetValue().split('\\\\'):\n            self.destProjectFolder += item + '\\\\'\n        self.destProjectFolder = self.destProjectFolder.split(item + '\\\\')[0]\n    dlg = wx.FileDialog(self, 'Choose a location and filename', self.destProjectFolder, '', '*.egg', wx.SAVE)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        self.destProjectFolder = dlg.GetDirectory()\n        self.rename_exportFileTxt.SetValue(os.path.join(self.destProjectFolder + os.sep, filename))\n    dlg.Destroy()"
        ]
    },
    {
        "func_name": "OnRenameExportDir",
        "original": "def OnRenameExportDir(self, event):\n    if self.rename_exportDirTxt.GetValue() != '':\n        self.destProjectFolder = self.rename_exportDirTxt.GetValue()\n    dlg = wx.DirDialog(self, 'Choose the output directory:', self.destProjectFolder)\n    if dlg.ShowModal() == wx.ID_OK:\n        self.destProjectFolder = dlg.GetPath()\n        self.rename_exportDirTxt.SetValue(dlg.GetPath())\n    dlg.Destroy()",
        "mutated": [
            "def OnRenameExportDir(self, event):\n    if False:\n        i = 10\n    if self.rename_exportDirTxt.GetValue() != '':\n        self.destProjectFolder = self.rename_exportDirTxt.GetValue()\n    dlg = wx.DirDialog(self, 'Choose the output directory:', self.destProjectFolder)\n    if dlg.ShowModal() == wx.ID_OK:\n        self.destProjectFolder = dlg.GetPath()\n        self.rename_exportDirTxt.SetValue(dlg.GetPath())\n    dlg.Destroy()",
            "def OnRenameExportDir(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if self.rename_exportDirTxt.GetValue() != '':\n        self.destProjectFolder = self.rename_exportDirTxt.GetValue()\n    dlg = wx.DirDialog(self, 'Choose the output directory:', self.destProjectFolder)\n    if dlg.ShowModal() == wx.ID_OK:\n        self.destProjectFolder = dlg.GetPath()\n        self.rename_exportDirTxt.SetValue(dlg.GetPath())\n    dlg.Destroy()",
            "def OnRenameExportDir(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if self.rename_exportDirTxt.GetValue() != '':\n        self.destProjectFolder = self.rename_exportDirTxt.GetValue()\n    dlg = wx.DirDialog(self, 'Choose the output directory:', self.destProjectFolder)\n    if dlg.ShowModal() == wx.ID_OK:\n        self.destProjectFolder = dlg.GetPath()\n        self.rename_exportDirTxt.SetValue(dlg.GetPath())\n    dlg.Destroy()",
            "def OnRenameExportDir(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if self.rename_exportDirTxt.GetValue() != '':\n        self.destProjectFolder = self.rename_exportDirTxt.GetValue()\n    dlg = wx.DirDialog(self, 'Choose the output directory:', self.destProjectFolder)\n    if dlg.ShowModal() == wx.ID_OK:\n        self.destProjectFolder = dlg.GetPath()\n        self.rename_exportDirTxt.SetValue(dlg.GetPath())\n    dlg.Destroy()",
            "def OnRenameExportDir(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if self.rename_exportDirTxt.GetValue() != '':\n        self.destProjectFolder = self.rename_exportDirTxt.GetValue()\n    dlg = wx.DirDialog(self, 'Choose the output directory:', self.destProjectFolder)\n    if dlg.ShowModal() == wx.ID_OK:\n        self.destProjectFolder = dlg.GetPath()\n        self.rename_exportDirTxt.SetValue(dlg.GetPath())\n    dlg.Destroy()"
        ]
    },
    {
        "func_name": "OnOptcharAddEgg",
        "original": "def OnOptcharAddEgg(self, event):\n    filename = ''\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose your input egg files', dirname, '', '*.egg', wx.MULTIPLE)\n    if dlg.ShowModal() == wx.ID_OK:\n        filenames = dlg.GetFilenames()\n        dirname = dlg.GetDirectory()\n        for filename in filenames:\n            eggInfo = os.path.join(dirname + os.sep, filename)\n            self.optchar_eggList.append(eggInfo)\n            self.optchar_eggFilesTree.AppendItem(self.optchar_eggFilesRoot, str(len(self.optchar_eggList)) + ' ' + eggInfo)\n            self.optchar_eggFilesTree.ExpandAll()\n    dlg.Destroy()\n    self.statusBar.SetStatusText('The input egg File is: ' + dirname + os.sep + filename)\n    self.OnOptcharInPlace(None)",
        "mutated": [
            "def OnOptcharAddEgg(self, event):\n    if False:\n        i = 10\n    filename = ''\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose your input egg files', dirname, '', '*.egg', wx.MULTIPLE)\n    if dlg.ShowModal() == wx.ID_OK:\n        filenames = dlg.GetFilenames()\n        dirname = dlg.GetDirectory()\n        for filename in filenames:\n            eggInfo = os.path.join(dirname + os.sep, filename)\n            self.optchar_eggList.append(eggInfo)\n            self.optchar_eggFilesTree.AppendItem(self.optchar_eggFilesRoot, str(len(self.optchar_eggList)) + ' ' + eggInfo)\n            self.optchar_eggFilesTree.ExpandAll()\n    dlg.Destroy()\n    self.statusBar.SetStatusText('The input egg File is: ' + dirname + os.sep + filename)\n    self.OnOptcharInPlace(None)",
            "def OnOptcharAddEgg(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    filename = ''\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose your input egg files', dirname, '', '*.egg', wx.MULTIPLE)\n    if dlg.ShowModal() == wx.ID_OK:\n        filenames = dlg.GetFilenames()\n        dirname = dlg.GetDirectory()\n        for filename in filenames:\n            eggInfo = os.path.join(dirname + os.sep, filename)\n            self.optchar_eggList.append(eggInfo)\n            self.optchar_eggFilesTree.AppendItem(self.optchar_eggFilesRoot, str(len(self.optchar_eggList)) + ' ' + eggInfo)\n            self.optchar_eggFilesTree.ExpandAll()\n    dlg.Destroy()\n    self.statusBar.SetStatusText('The input egg File is: ' + dirname + os.sep + filename)\n    self.OnOptcharInPlace(None)",
            "def OnOptcharAddEgg(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    filename = ''\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose your input egg files', dirname, '', '*.egg', wx.MULTIPLE)\n    if dlg.ShowModal() == wx.ID_OK:\n        filenames = dlg.GetFilenames()\n        dirname = dlg.GetDirectory()\n        for filename in filenames:\n            eggInfo = os.path.join(dirname + os.sep, filename)\n            self.optchar_eggList.append(eggInfo)\n            self.optchar_eggFilesTree.AppendItem(self.optchar_eggFilesRoot, str(len(self.optchar_eggList)) + ' ' + eggInfo)\n            self.optchar_eggFilesTree.ExpandAll()\n    dlg.Destroy()\n    self.statusBar.SetStatusText('The input egg File is: ' + dirname + os.sep + filename)\n    self.OnOptcharInPlace(None)",
            "def OnOptcharAddEgg(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    filename = ''\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose your input egg files', dirname, '', '*.egg', wx.MULTIPLE)\n    if dlg.ShowModal() == wx.ID_OK:\n        filenames = dlg.GetFilenames()\n        dirname = dlg.GetDirectory()\n        for filename in filenames:\n            eggInfo = os.path.join(dirname + os.sep, filename)\n            self.optchar_eggList.append(eggInfo)\n            self.optchar_eggFilesTree.AppendItem(self.optchar_eggFilesRoot, str(len(self.optchar_eggList)) + ' ' + eggInfo)\n            self.optchar_eggFilesTree.ExpandAll()\n    dlg.Destroy()\n    self.statusBar.SetStatusText('The input egg File is: ' + dirname + os.sep + filename)\n    self.OnOptcharInPlace(None)",
            "def OnOptcharAddEgg(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    filename = ''\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose your input egg files', dirname, '', '*.egg', wx.MULTIPLE)\n    if dlg.ShowModal() == wx.ID_OK:\n        filenames = dlg.GetFilenames()\n        dirname = dlg.GetDirectory()\n        for filename in filenames:\n            eggInfo = os.path.join(dirname + os.sep, filename)\n            self.optchar_eggList.append(eggInfo)\n            self.optchar_eggFilesTree.AppendItem(self.optchar_eggFilesRoot, str(len(self.optchar_eggList)) + ' ' + eggInfo)\n            self.optchar_eggFilesTree.ExpandAll()\n    dlg.Destroy()\n    self.statusBar.SetStatusText('The input egg File is: ' + dirname + os.sep + filename)\n    self.OnOptcharInPlace(None)"
        ]
    },
    {
        "func_name": "OnOptcharAddFromBatch",
        "original": "def OnOptcharAddFromBatch(self, event):\n    for eggInfo in self.GetOutputFromBatch():\n        self.optchar_eggList.append(eggInfo)\n        self.optchar_eggFilesTree.AppendItem(self.optchar_eggFilesRoot, str(len(self.optchar_eggList)) + ' ' + eggInfo)\n        self.optchar_eggFilesTree.ExpandAll()\n    self.OnOptcharInPlace(None)",
        "mutated": [
            "def OnOptcharAddFromBatch(self, event):\n    if False:\n        i = 10\n    for eggInfo in self.GetOutputFromBatch():\n        self.optchar_eggList.append(eggInfo)\n        self.optchar_eggFilesTree.AppendItem(self.optchar_eggFilesRoot, str(len(self.optchar_eggList)) + ' ' + eggInfo)\n        self.optchar_eggFilesTree.ExpandAll()\n    self.OnOptcharInPlace(None)",
            "def OnOptcharAddFromBatch(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for eggInfo in self.GetOutputFromBatch():\n        self.optchar_eggList.append(eggInfo)\n        self.optchar_eggFilesTree.AppendItem(self.optchar_eggFilesRoot, str(len(self.optchar_eggList)) + ' ' + eggInfo)\n        self.optchar_eggFilesTree.ExpandAll()\n    self.OnOptcharInPlace(None)",
            "def OnOptcharAddFromBatch(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for eggInfo in self.GetOutputFromBatch():\n        self.optchar_eggList.append(eggInfo)\n        self.optchar_eggFilesTree.AppendItem(self.optchar_eggFilesRoot, str(len(self.optchar_eggList)) + ' ' + eggInfo)\n        self.optchar_eggFilesTree.ExpandAll()\n    self.OnOptcharInPlace(None)",
            "def OnOptcharAddFromBatch(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for eggInfo in self.GetOutputFromBatch():\n        self.optchar_eggList.append(eggInfo)\n        self.optchar_eggFilesTree.AppendItem(self.optchar_eggFilesRoot, str(len(self.optchar_eggList)) + ' ' + eggInfo)\n        self.optchar_eggFilesTree.ExpandAll()\n    self.OnOptcharInPlace(None)",
            "def OnOptcharAddFromBatch(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for eggInfo in self.GetOutputFromBatch():\n        self.optchar_eggList.append(eggInfo)\n        self.optchar_eggFilesTree.AppendItem(self.optchar_eggFilesRoot, str(len(self.optchar_eggList)) + ' ' + eggInfo)\n        self.optchar_eggFilesTree.ExpandAll()\n    self.OnOptcharInPlace(None)"
        ]
    },
    {
        "func_name": "OnOptcharRemoveEgg",
        "original": "def OnOptcharRemoveEgg(self, event):\n    item = self.optchar_eggFilesTree.GetSelection()\n    if item != self.optchar_eggFilesRoot:\n        index = self.optchar_eggFilesTree.GetItemText(item).split()[0]\n        index = int(index) - 1\n        self.optchar_eggList.pop(index)\n        self.optchar_eggFilesTree.Delete(item)\n        self.UpdateEggOptcharDisplay()\n    self.OnOptcharInPlace(None)",
        "mutated": [
            "def OnOptcharRemoveEgg(self, event):\n    if False:\n        i = 10\n    item = self.optchar_eggFilesTree.GetSelection()\n    if item != self.optchar_eggFilesRoot:\n        index = self.optchar_eggFilesTree.GetItemText(item).split()[0]\n        index = int(index) - 1\n        self.optchar_eggList.pop(index)\n        self.optchar_eggFilesTree.Delete(item)\n        self.UpdateEggOptcharDisplay()\n    self.OnOptcharInPlace(None)",
            "def OnOptcharRemoveEgg(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    item = self.optchar_eggFilesTree.GetSelection()\n    if item != self.optchar_eggFilesRoot:\n        index = self.optchar_eggFilesTree.GetItemText(item).split()[0]\n        index = int(index) - 1\n        self.optchar_eggList.pop(index)\n        self.optchar_eggFilesTree.Delete(item)\n        self.UpdateEggOptcharDisplay()\n    self.OnOptcharInPlace(None)",
            "def OnOptcharRemoveEgg(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    item = self.optchar_eggFilesTree.GetSelection()\n    if item != self.optchar_eggFilesRoot:\n        index = self.optchar_eggFilesTree.GetItemText(item).split()[0]\n        index = int(index) - 1\n        self.optchar_eggList.pop(index)\n        self.optchar_eggFilesTree.Delete(item)\n        self.UpdateEggOptcharDisplay()\n    self.OnOptcharInPlace(None)",
            "def OnOptcharRemoveEgg(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    item = self.optchar_eggFilesTree.GetSelection()\n    if item != self.optchar_eggFilesRoot:\n        index = self.optchar_eggFilesTree.GetItemText(item).split()[0]\n        index = int(index) - 1\n        self.optchar_eggList.pop(index)\n        self.optchar_eggFilesTree.Delete(item)\n        self.UpdateEggOptcharDisplay()\n    self.OnOptcharInPlace(None)",
            "def OnOptcharRemoveEgg(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    item = self.optchar_eggFilesTree.GetSelection()\n    if item != self.optchar_eggFilesRoot:\n        index = self.optchar_eggFilesTree.GetItemText(item).split()[0]\n        index = int(index) - 1\n        self.optchar_eggList.pop(index)\n        self.optchar_eggFilesTree.Delete(item)\n        self.UpdateEggOptcharDisplay()\n    self.OnOptcharInPlace(None)"
        ]
    },
    {
        "func_name": "OnOptcharRemoveAllEggs",
        "original": "def OnOptcharRemoveAllEggs(self, event):\n    self.optchar_eggFilesTree.DeleteAllItems()\n    if self.optchar_eggList != []:\n        self.optchar_eggList = []\n    self.optchar_eggFilesRoot = self.optchar_eggFilesTree.AddRoot('Egg Files')\n    self.OnOptcharInPlace(None)",
        "mutated": [
            "def OnOptcharRemoveAllEggs(self, event):\n    if False:\n        i = 10\n    self.optchar_eggFilesTree.DeleteAllItems()\n    if self.optchar_eggList != []:\n        self.optchar_eggList = []\n    self.optchar_eggFilesRoot = self.optchar_eggFilesTree.AddRoot('Egg Files')\n    self.OnOptcharInPlace(None)",
            "def OnOptcharRemoveAllEggs(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.optchar_eggFilesTree.DeleteAllItems()\n    if self.optchar_eggList != []:\n        self.optchar_eggList = []\n    self.optchar_eggFilesRoot = self.optchar_eggFilesTree.AddRoot('Egg Files')\n    self.OnOptcharInPlace(None)",
            "def OnOptcharRemoveAllEggs(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.optchar_eggFilesTree.DeleteAllItems()\n    if self.optchar_eggList != []:\n        self.optchar_eggList = []\n    self.optchar_eggFilesRoot = self.optchar_eggFilesTree.AddRoot('Egg Files')\n    self.OnOptcharInPlace(None)",
            "def OnOptcharRemoveAllEggs(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.optchar_eggFilesTree.DeleteAllItems()\n    if self.optchar_eggList != []:\n        self.optchar_eggList = []\n    self.optchar_eggFilesRoot = self.optchar_eggFilesTree.AddRoot('Egg Files')\n    self.OnOptcharInPlace(None)",
            "def OnOptcharRemoveAllEggs(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.optchar_eggFilesTree.DeleteAllItems()\n    if self.optchar_eggList != []:\n        self.optchar_eggList = []\n    self.optchar_eggFilesRoot = self.optchar_eggFilesTree.AddRoot('Egg Files')\n    self.OnOptcharInPlace(None)"
        ]
    },
    {
        "func_name": "UpdateEggOptcharDisplay",
        "original": "def UpdateEggOptcharDisplay(self):\n    self.optchar_eggFilesTree.DeleteAllItems()\n    self.optchar_eggFilesRoot = self.optchar_eggFilesTree.AddRoot('Egg Files')\n    index = 0\n    for item in self.optchar_eggList:\n        index += 1\n        treeitem = item\n        self.optchar_eggFilesTree.AppendItem(self.optchar_eggFilesRoot, str(index) + ' ' + str(treeitem))\n    self.optchar_eggFilesTree.ExpandAll()\n    self.OnOptcharInPlace(None)",
        "mutated": [
            "def UpdateEggOptcharDisplay(self):\n    if False:\n        i = 10\n    self.optchar_eggFilesTree.DeleteAllItems()\n    self.optchar_eggFilesRoot = self.optchar_eggFilesTree.AddRoot('Egg Files')\n    index = 0\n    for item in self.optchar_eggList:\n        index += 1\n        treeitem = item\n        self.optchar_eggFilesTree.AppendItem(self.optchar_eggFilesRoot, str(index) + ' ' + str(treeitem))\n    self.optchar_eggFilesTree.ExpandAll()\n    self.OnOptcharInPlace(None)",
            "def UpdateEggOptcharDisplay(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.optchar_eggFilesTree.DeleteAllItems()\n    self.optchar_eggFilesRoot = self.optchar_eggFilesTree.AddRoot('Egg Files')\n    index = 0\n    for item in self.optchar_eggList:\n        index += 1\n        treeitem = item\n        self.optchar_eggFilesTree.AppendItem(self.optchar_eggFilesRoot, str(index) + ' ' + str(treeitem))\n    self.optchar_eggFilesTree.ExpandAll()\n    self.OnOptcharInPlace(None)",
            "def UpdateEggOptcharDisplay(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.optchar_eggFilesTree.DeleteAllItems()\n    self.optchar_eggFilesRoot = self.optchar_eggFilesTree.AddRoot('Egg Files')\n    index = 0\n    for item in self.optchar_eggList:\n        index += 1\n        treeitem = item\n        self.optchar_eggFilesTree.AppendItem(self.optchar_eggFilesRoot, str(index) + ' ' + str(treeitem))\n    self.optchar_eggFilesTree.ExpandAll()\n    self.OnOptcharInPlace(None)",
            "def UpdateEggOptcharDisplay(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.optchar_eggFilesTree.DeleteAllItems()\n    self.optchar_eggFilesRoot = self.optchar_eggFilesTree.AddRoot('Egg Files')\n    index = 0\n    for item in self.optchar_eggList:\n        index += 1\n        treeitem = item\n        self.optchar_eggFilesTree.AppendItem(self.optchar_eggFilesRoot, str(index) + ' ' + str(treeitem))\n    self.optchar_eggFilesTree.ExpandAll()\n    self.OnOptcharInPlace(None)",
            "def UpdateEggOptcharDisplay(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.optchar_eggFilesTree.DeleteAllItems()\n    self.optchar_eggFilesRoot = self.optchar_eggFilesTree.AddRoot('Egg Files')\n    index = 0\n    for item in self.optchar_eggList:\n        index += 1\n        treeitem = item\n        self.optchar_eggFilesTree.AppendItem(self.optchar_eggFilesRoot, str(index) + ' ' + str(treeitem))\n    self.optchar_eggFilesTree.ExpandAll()\n    self.OnOptcharInPlace(None)"
        ]
    },
    {
        "func_name": "OnOptcharInPlace",
        "original": "def OnOptcharInPlace(self, event):\n    if self.optchar_exportInPlaceChk.GetValue():\n        self.optchar_exportDirTxt.SetValue('')\n        self.optchar_exportDirTxt.Disable()\n        self.optchar_exportDirBtn.Disable()\n        self.optchar_exportFileTxt.SetValue('')\n        self.optchar_exportFileTxt.Disable()\n        self.optchar_exportFileBtn.Disable()\n    elif len(self.optchar_eggList) > 1:\n        self.optchar_exportDirTxt.Enable()\n        self.optchar_exportDirBtn.Enable()\n        self.optchar_exportFileTxt.Disable()\n        self.optchar_exportFileBtn.Disable()\n    else:\n        self.optchar_exportDirTxt.Enable()\n        self.optchar_exportDirBtn.Enable()\n        self.optchar_exportFileTxt.Enable()\n        self.optchar_exportFileBtn.Enable()",
        "mutated": [
            "def OnOptcharInPlace(self, event):\n    if False:\n        i = 10\n    if self.optchar_exportInPlaceChk.GetValue():\n        self.optchar_exportDirTxt.SetValue('')\n        self.optchar_exportDirTxt.Disable()\n        self.optchar_exportDirBtn.Disable()\n        self.optchar_exportFileTxt.SetValue('')\n        self.optchar_exportFileTxt.Disable()\n        self.optchar_exportFileBtn.Disable()\n    elif len(self.optchar_eggList) > 1:\n        self.optchar_exportDirTxt.Enable()\n        self.optchar_exportDirBtn.Enable()\n        self.optchar_exportFileTxt.Disable()\n        self.optchar_exportFileBtn.Disable()\n    else:\n        self.optchar_exportDirTxt.Enable()\n        self.optchar_exportDirBtn.Enable()\n        self.optchar_exportFileTxt.Enable()\n        self.optchar_exportFileBtn.Enable()",
            "def OnOptcharInPlace(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if self.optchar_exportInPlaceChk.GetValue():\n        self.optchar_exportDirTxt.SetValue('')\n        self.optchar_exportDirTxt.Disable()\n        self.optchar_exportDirBtn.Disable()\n        self.optchar_exportFileTxt.SetValue('')\n        self.optchar_exportFileTxt.Disable()\n        self.optchar_exportFileBtn.Disable()\n    elif len(self.optchar_eggList) > 1:\n        self.optchar_exportDirTxt.Enable()\n        self.optchar_exportDirBtn.Enable()\n        self.optchar_exportFileTxt.Disable()\n        self.optchar_exportFileBtn.Disable()\n    else:\n        self.optchar_exportDirTxt.Enable()\n        self.optchar_exportDirBtn.Enable()\n        self.optchar_exportFileTxt.Enable()\n        self.optchar_exportFileBtn.Enable()",
            "def OnOptcharInPlace(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if self.optchar_exportInPlaceChk.GetValue():\n        self.optchar_exportDirTxt.SetValue('')\n        self.optchar_exportDirTxt.Disable()\n        self.optchar_exportDirBtn.Disable()\n        self.optchar_exportFileTxt.SetValue('')\n        self.optchar_exportFileTxt.Disable()\n        self.optchar_exportFileBtn.Disable()\n    elif len(self.optchar_eggList) > 1:\n        self.optchar_exportDirTxt.Enable()\n        self.optchar_exportDirBtn.Enable()\n        self.optchar_exportFileTxt.Disable()\n        self.optchar_exportFileBtn.Disable()\n    else:\n        self.optchar_exportDirTxt.Enable()\n        self.optchar_exportDirBtn.Enable()\n        self.optchar_exportFileTxt.Enable()\n        self.optchar_exportFileBtn.Enable()",
            "def OnOptcharInPlace(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if self.optchar_exportInPlaceChk.GetValue():\n        self.optchar_exportDirTxt.SetValue('')\n        self.optchar_exportDirTxt.Disable()\n        self.optchar_exportDirBtn.Disable()\n        self.optchar_exportFileTxt.SetValue('')\n        self.optchar_exportFileTxt.Disable()\n        self.optchar_exportFileBtn.Disable()\n    elif len(self.optchar_eggList) > 1:\n        self.optchar_exportDirTxt.Enable()\n        self.optchar_exportDirBtn.Enable()\n        self.optchar_exportFileTxt.Disable()\n        self.optchar_exportFileBtn.Disable()\n    else:\n        self.optchar_exportDirTxt.Enable()\n        self.optchar_exportDirBtn.Enable()\n        self.optchar_exportFileTxt.Enable()\n        self.optchar_exportFileBtn.Enable()",
            "def OnOptcharInPlace(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if self.optchar_exportInPlaceChk.GetValue():\n        self.optchar_exportDirTxt.SetValue('')\n        self.optchar_exportDirTxt.Disable()\n        self.optchar_exportDirBtn.Disable()\n        self.optchar_exportFileTxt.SetValue('')\n        self.optchar_exportFileTxt.Disable()\n        self.optchar_exportFileBtn.Disable()\n    elif len(self.optchar_eggList) > 1:\n        self.optchar_exportDirTxt.Enable()\n        self.optchar_exportDirBtn.Enable()\n        self.optchar_exportFileTxt.Disable()\n        self.optchar_exportFileBtn.Disable()\n    else:\n        self.optchar_exportDirTxt.Enable()\n        self.optchar_exportDirBtn.Enable()\n        self.optchar_exportFileTxt.Enable()\n        self.optchar_exportFileBtn.Enable()"
        ]
    },
    {
        "func_name": "OnOptcharExportFile",
        "original": "def OnOptcharExportFile(self, event):\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose a location and filename', dirname, '', '*.egg', wx.SAVE)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        self.optchar_exportFileTxt.SetValue(os.path.join(dirname + os.sep, filename))\n    dlg.Destroy()",
        "mutated": [
            "def OnOptcharExportFile(self, event):\n    if False:\n        i = 10\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose a location and filename', dirname, '', '*.egg', wx.SAVE)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        self.optchar_exportFileTxt.SetValue(os.path.join(dirname + os.sep, filename))\n    dlg.Destroy()",
            "def OnOptcharExportFile(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose a location and filename', dirname, '', '*.egg', wx.SAVE)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        self.optchar_exportFileTxt.SetValue(os.path.join(dirname + os.sep, filename))\n    dlg.Destroy()",
            "def OnOptcharExportFile(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose a location and filename', dirname, '', '*.egg', wx.SAVE)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        self.optchar_exportFileTxt.SetValue(os.path.join(dirname + os.sep, filename))\n    dlg.Destroy()",
            "def OnOptcharExportFile(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose a location and filename', dirname, '', '*.egg', wx.SAVE)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        self.optchar_exportFileTxt.SetValue(os.path.join(dirname + os.sep, filename))\n    dlg.Destroy()",
            "def OnOptcharExportFile(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose a location and filename', dirname, '', '*.egg', wx.SAVE)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        self.optchar_exportFileTxt.SetValue(os.path.join(dirname + os.sep, filename))\n    dlg.Destroy()"
        ]
    },
    {
        "func_name": "OnOptcharExportDir",
        "original": "def OnOptcharExportDir(self, event):\n    dlg = wx.DirDialog(self, 'Choose the output directory:')\n    if dlg.ShowModal() == wx.ID_OK:\n        self.optchar_exportDirTxt.SetValue(dlg.GetPath())\n    dlg.Destroy()",
        "mutated": [
            "def OnOptcharExportDir(self, event):\n    if False:\n        i = 10\n    dlg = wx.DirDialog(self, 'Choose the output directory:')\n    if dlg.ShowModal() == wx.ID_OK:\n        self.optchar_exportDirTxt.SetValue(dlg.GetPath())\n    dlg.Destroy()",
            "def OnOptcharExportDir(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    dlg = wx.DirDialog(self, 'Choose the output directory:')\n    if dlg.ShowModal() == wx.ID_OK:\n        self.optchar_exportDirTxt.SetValue(dlg.GetPath())\n    dlg.Destroy()",
            "def OnOptcharExportDir(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    dlg = wx.DirDialog(self, 'Choose the output directory:')\n    if dlg.ShowModal() == wx.ID_OK:\n        self.optchar_exportDirTxt.SetValue(dlg.GetPath())\n    dlg.Destroy()",
            "def OnOptcharExportDir(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    dlg = wx.DirDialog(self, 'Choose the output directory:')\n    if dlg.ShowModal() == wx.ID_OK:\n        self.optchar_exportDirTxt.SetValue(dlg.GetPath())\n    dlg.Destroy()",
            "def OnOptcharExportDir(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    dlg = wx.DirDialog(self, 'Choose the output directory:')\n    if dlg.ShowModal() == wx.ID_OK:\n        self.optchar_exportDirTxt.SetValue(dlg.GetPath())\n    dlg.Destroy()"
        ]
    },
    {
        "func_name": "OnPalettizeAddEgg",
        "original": "def OnPalettizeAddEgg(self, e):\n    filename = ''\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose your input egg files', dirname, '', '*.egg', wx.MULTIPLE)\n    if dlg.ShowModal() == wx.ID_OK:\n        filenames = dlg.GetFilenames()\n        dirname = dlg.GetDirectory()\n        for filename in filenames:\n            eggInfo = os.path.join(dirname + os.sep, filename)\n            self.palettize_eggList.append(eggInfo)\n            self.palettize_eggFilesTree.AppendItem(self.palettize_eggFilesRoot, str(len(self.palettize_eggList)) + ' ' + eggInfo)\n            self.palettize_eggFilesTree.ExpandAll()\n    dlg.Destroy()\n    self.OnPalettizeInPlace(None)",
        "mutated": [
            "def OnPalettizeAddEgg(self, e):\n    if False:\n        i = 10\n    filename = ''\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose your input egg files', dirname, '', '*.egg', wx.MULTIPLE)\n    if dlg.ShowModal() == wx.ID_OK:\n        filenames = dlg.GetFilenames()\n        dirname = dlg.GetDirectory()\n        for filename in filenames:\n            eggInfo = os.path.join(dirname + os.sep, filename)\n            self.palettize_eggList.append(eggInfo)\n            self.palettize_eggFilesTree.AppendItem(self.palettize_eggFilesRoot, str(len(self.palettize_eggList)) + ' ' + eggInfo)\n            self.palettize_eggFilesTree.ExpandAll()\n    dlg.Destroy()\n    self.OnPalettizeInPlace(None)",
            "def OnPalettizeAddEgg(self, e):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    filename = ''\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose your input egg files', dirname, '', '*.egg', wx.MULTIPLE)\n    if dlg.ShowModal() == wx.ID_OK:\n        filenames = dlg.GetFilenames()\n        dirname = dlg.GetDirectory()\n        for filename in filenames:\n            eggInfo = os.path.join(dirname + os.sep, filename)\n            self.palettize_eggList.append(eggInfo)\n            self.palettize_eggFilesTree.AppendItem(self.palettize_eggFilesRoot, str(len(self.palettize_eggList)) + ' ' + eggInfo)\n            self.palettize_eggFilesTree.ExpandAll()\n    dlg.Destroy()\n    self.OnPalettizeInPlace(None)",
            "def OnPalettizeAddEgg(self, e):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    filename = ''\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose your input egg files', dirname, '', '*.egg', wx.MULTIPLE)\n    if dlg.ShowModal() == wx.ID_OK:\n        filenames = dlg.GetFilenames()\n        dirname = dlg.GetDirectory()\n        for filename in filenames:\n            eggInfo = os.path.join(dirname + os.sep, filename)\n            self.palettize_eggList.append(eggInfo)\n            self.palettize_eggFilesTree.AppendItem(self.palettize_eggFilesRoot, str(len(self.palettize_eggList)) + ' ' + eggInfo)\n            self.palettize_eggFilesTree.ExpandAll()\n    dlg.Destroy()\n    self.OnPalettizeInPlace(None)",
            "def OnPalettizeAddEgg(self, e):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    filename = ''\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose your input egg files', dirname, '', '*.egg', wx.MULTIPLE)\n    if dlg.ShowModal() == wx.ID_OK:\n        filenames = dlg.GetFilenames()\n        dirname = dlg.GetDirectory()\n        for filename in filenames:\n            eggInfo = os.path.join(dirname + os.sep, filename)\n            self.palettize_eggList.append(eggInfo)\n            self.palettize_eggFilesTree.AppendItem(self.palettize_eggFilesRoot, str(len(self.palettize_eggList)) + ' ' + eggInfo)\n            self.palettize_eggFilesTree.ExpandAll()\n    dlg.Destroy()\n    self.OnPalettizeInPlace(None)",
            "def OnPalettizeAddEgg(self, e):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    filename = ''\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose your input egg files', dirname, '', '*.egg', wx.MULTIPLE)\n    if dlg.ShowModal() == wx.ID_OK:\n        filenames = dlg.GetFilenames()\n        dirname = dlg.GetDirectory()\n        for filename in filenames:\n            eggInfo = os.path.join(dirname + os.sep, filename)\n            self.palettize_eggList.append(eggInfo)\n            self.palettize_eggFilesTree.AppendItem(self.palettize_eggFilesRoot, str(len(self.palettize_eggList)) + ' ' + eggInfo)\n            self.palettize_eggFilesTree.ExpandAll()\n    dlg.Destroy()\n    self.OnPalettizeInPlace(None)"
        ]
    },
    {
        "func_name": "OnPalettizeAddFromBatch",
        "original": "def OnPalettizeAddFromBatch(self, event):\n    for eggInfo in self.GetOutputFromBatch():\n        self.palettize_eggList.append(eggInfo)\n        self.palettize_eggFilesTree.AppendItem(self.palettize_eggFilesRoot, str(len(self.palettize_eggList)) + ' ' + eggInfo)\n        self.palettize_eggFilesTree.ExpandAll()\n    self.OnPalettizeInPlace(None)",
        "mutated": [
            "def OnPalettizeAddFromBatch(self, event):\n    if False:\n        i = 10\n    for eggInfo in self.GetOutputFromBatch():\n        self.palettize_eggList.append(eggInfo)\n        self.palettize_eggFilesTree.AppendItem(self.palettize_eggFilesRoot, str(len(self.palettize_eggList)) + ' ' + eggInfo)\n        self.palettize_eggFilesTree.ExpandAll()\n    self.OnPalettizeInPlace(None)",
            "def OnPalettizeAddFromBatch(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for eggInfo in self.GetOutputFromBatch():\n        self.palettize_eggList.append(eggInfo)\n        self.palettize_eggFilesTree.AppendItem(self.palettize_eggFilesRoot, str(len(self.palettize_eggList)) + ' ' + eggInfo)\n        self.palettize_eggFilesTree.ExpandAll()\n    self.OnPalettizeInPlace(None)",
            "def OnPalettizeAddFromBatch(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for eggInfo in self.GetOutputFromBatch():\n        self.palettize_eggList.append(eggInfo)\n        self.palettize_eggFilesTree.AppendItem(self.palettize_eggFilesRoot, str(len(self.palettize_eggList)) + ' ' + eggInfo)\n        self.palettize_eggFilesTree.ExpandAll()\n    self.OnPalettizeInPlace(None)",
            "def OnPalettizeAddFromBatch(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for eggInfo in self.GetOutputFromBatch():\n        self.palettize_eggList.append(eggInfo)\n        self.palettize_eggFilesTree.AppendItem(self.palettize_eggFilesRoot, str(len(self.palettize_eggList)) + ' ' + eggInfo)\n        self.palettize_eggFilesTree.ExpandAll()\n    self.OnPalettizeInPlace(None)",
            "def OnPalettizeAddFromBatch(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for eggInfo in self.GetOutputFromBatch():\n        self.palettize_eggList.append(eggInfo)\n        self.palettize_eggFilesTree.AppendItem(self.palettize_eggFilesRoot, str(len(self.palettize_eggList)) + ' ' + eggInfo)\n        self.palettize_eggFilesTree.ExpandAll()\n    self.OnPalettizeInPlace(None)"
        ]
    },
    {
        "func_name": "OnPalettizeRemoveEgg",
        "original": "def OnPalettizeRemoveEgg(self, e):\n    item = self.palettize_eggFilesTree.GetSelection()\n    if item != self.palettize_eggFilesRoot:\n        index = self.palettize_eggFilesTree.GetItemText(item)[0]\n        index = int(index) - 1\n        self.palettize_eggList.pop(index)\n        self.palettize_eggFilesTree.Delete(item)\n        self.UpdateEggPalettizeDisplay()\n    self.OnPalettizeInPlace(None)",
        "mutated": [
            "def OnPalettizeRemoveEgg(self, e):\n    if False:\n        i = 10\n    item = self.palettize_eggFilesTree.GetSelection()\n    if item != self.palettize_eggFilesRoot:\n        index = self.palettize_eggFilesTree.GetItemText(item)[0]\n        index = int(index) - 1\n        self.palettize_eggList.pop(index)\n        self.palettize_eggFilesTree.Delete(item)\n        self.UpdateEggPalettizeDisplay()\n    self.OnPalettizeInPlace(None)",
            "def OnPalettizeRemoveEgg(self, e):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    item = self.palettize_eggFilesTree.GetSelection()\n    if item != self.palettize_eggFilesRoot:\n        index = self.palettize_eggFilesTree.GetItemText(item)[0]\n        index = int(index) - 1\n        self.palettize_eggList.pop(index)\n        self.palettize_eggFilesTree.Delete(item)\n        self.UpdateEggPalettizeDisplay()\n    self.OnPalettizeInPlace(None)",
            "def OnPalettizeRemoveEgg(self, e):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    item = self.palettize_eggFilesTree.GetSelection()\n    if item != self.palettize_eggFilesRoot:\n        index = self.palettize_eggFilesTree.GetItemText(item)[0]\n        index = int(index) - 1\n        self.palettize_eggList.pop(index)\n        self.palettize_eggFilesTree.Delete(item)\n        self.UpdateEggPalettizeDisplay()\n    self.OnPalettizeInPlace(None)",
            "def OnPalettizeRemoveEgg(self, e):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    item = self.palettize_eggFilesTree.GetSelection()\n    if item != self.palettize_eggFilesRoot:\n        index = self.palettize_eggFilesTree.GetItemText(item)[0]\n        index = int(index) - 1\n        self.palettize_eggList.pop(index)\n        self.palettize_eggFilesTree.Delete(item)\n        self.UpdateEggPalettizeDisplay()\n    self.OnPalettizeInPlace(None)",
            "def OnPalettizeRemoveEgg(self, e):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    item = self.palettize_eggFilesTree.GetSelection()\n    if item != self.palettize_eggFilesRoot:\n        index = self.palettize_eggFilesTree.GetItemText(item)[0]\n        index = int(index) - 1\n        self.palettize_eggList.pop(index)\n        self.palettize_eggFilesTree.Delete(item)\n        self.UpdateEggPalettizeDisplay()\n    self.OnPalettizeInPlace(None)"
        ]
    },
    {
        "func_name": "OnPalettizeRemoveAllEggs",
        "original": "def OnPalettizeRemoveAllEggs(self, event):\n    self.palettize_eggFilesTree.DeleteAllItems()\n    if self.palettize_eggList != []:\n        self.palettize_eggList = []\n    self.palettize_eggFilesRoot = self.palettize_eggFilesTree.AddRoot('Egg Files')\n    self.OnPalettizeInPlace(None)",
        "mutated": [
            "def OnPalettizeRemoveAllEggs(self, event):\n    if False:\n        i = 10\n    self.palettize_eggFilesTree.DeleteAllItems()\n    if self.palettize_eggList != []:\n        self.palettize_eggList = []\n    self.palettize_eggFilesRoot = self.palettize_eggFilesTree.AddRoot('Egg Files')\n    self.OnPalettizeInPlace(None)",
            "def OnPalettizeRemoveAllEggs(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.palettize_eggFilesTree.DeleteAllItems()\n    if self.palettize_eggList != []:\n        self.palettize_eggList = []\n    self.palettize_eggFilesRoot = self.palettize_eggFilesTree.AddRoot('Egg Files')\n    self.OnPalettizeInPlace(None)",
            "def OnPalettizeRemoveAllEggs(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.palettize_eggFilesTree.DeleteAllItems()\n    if self.palettize_eggList != []:\n        self.palettize_eggList = []\n    self.palettize_eggFilesRoot = self.palettize_eggFilesTree.AddRoot('Egg Files')\n    self.OnPalettizeInPlace(None)",
            "def OnPalettizeRemoveAllEggs(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.palettize_eggFilesTree.DeleteAllItems()\n    if self.palettize_eggList != []:\n        self.palettize_eggList = []\n    self.palettize_eggFilesRoot = self.palettize_eggFilesTree.AddRoot('Egg Files')\n    self.OnPalettizeInPlace(None)",
            "def OnPalettizeRemoveAllEggs(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.palettize_eggFilesTree.DeleteAllItems()\n    if self.palettize_eggList != []:\n        self.palettize_eggList = []\n    self.palettize_eggFilesRoot = self.palettize_eggFilesTree.AddRoot('Egg Files')\n    self.OnPalettizeInPlace(None)"
        ]
    },
    {
        "func_name": "UpdateEggPalettizeDisplay",
        "original": "def UpdateEggPalettizeDisplay(self):\n    self.palettize_eggFilesTree.DeleteAllItems()\n    self.palettize_eggFilesRoot = self.palettize_eggFilesTree.AddRoot('Egg Files')\n    index = 0\n    for item in self.palettize_eggList:\n        index += 1\n        treeitem = item\n        self.palettize_eggFilesTree.AppendItem(self.palettize_eggFilesRoot, str(index) + ' ' + str(treeitem))\n    self.palettize_eggFilesTree.ExpandAll()\n    self.OnPalettizeInPlace(None)",
        "mutated": [
            "def UpdateEggPalettizeDisplay(self):\n    if False:\n        i = 10\n    self.palettize_eggFilesTree.DeleteAllItems()\n    self.palettize_eggFilesRoot = self.palettize_eggFilesTree.AddRoot('Egg Files')\n    index = 0\n    for item in self.palettize_eggList:\n        index += 1\n        treeitem = item\n        self.palettize_eggFilesTree.AppendItem(self.palettize_eggFilesRoot, str(index) + ' ' + str(treeitem))\n    self.palettize_eggFilesTree.ExpandAll()\n    self.OnPalettizeInPlace(None)",
            "def UpdateEggPalettizeDisplay(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.palettize_eggFilesTree.DeleteAllItems()\n    self.palettize_eggFilesRoot = self.palettize_eggFilesTree.AddRoot('Egg Files')\n    index = 0\n    for item in self.palettize_eggList:\n        index += 1\n        treeitem = item\n        self.palettize_eggFilesTree.AppendItem(self.palettize_eggFilesRoot, str(index) + ' ' + str(treeitem))\n    self.palettize_eggFilesTree.ExpandAll()\n    self.OnPalettizeInPlace(None)",
            "def UpdateEggPalettizeDisplay(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.palettize_eggFilesTree.DeleteAllItems()\n    self.palettize_eggFilesRoot = self.palettize_eggFilesTree.AddRoot('Egg Files')\n    index = 0\n    for item in self.palettize_eggList:\n        index += 1\n        treeitem = item\n        self.palettize_eggFilesTree.AppendItem(self.palettize_eggFilesRoot, str(index) + ' ' + str(treeitem))\n    self.palettize_eggFilesTree.ExpandAll()\n    self.OnPalettizeInPlace(None)",
            "def UpdateEggPalettizeDisplay(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.palettize_eggFilesTree.DeleteAllItems()\n    self.palettize_eggFilesRoot = self.palettize_eggFilesTree.AddRoot('Egg Files')\n    index = 0\n    for item in self.palettize_eggList:\n        index += 1\n        treeitem = item\n        self.palettize_eggFilesTree.AppendItem(self.palettize_eggFilesRoot, str(index) + ' ' + str(treeitem))\n    self.palettize_eggFilesTree.ExpandAll()\n    self.OnPalettizeInPlace(None)",
            "def UpdateEggPalettizeDisplay(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.palettize_eggFilesTree.DeleteAllItems()\n    self.palettize_eggFilesRoot = self.palettize_eggFilesTree.AddRoot('Egg Files')\n    index = 0\n    for item in self.palettize_eggList:\n        index += 1\n        treeitem = item\n        self.palettize_eggFilesTree.AppendItem(self.palettize_eggFilesRoot, str(index) + ' ' + str(treeitem))\n    self.palettize_eggFilesTree.ExpandAll()\n    self.OnPalettizeInPlace(None)"
        ]
    },
    {
        "func_name": "OnPalettizeInPlace",
        "original": "def OnPalettizeInPlace(self, event):\n    if self.palettize_exportInPlaceChk.GetValue():\n        self.palettize_exportDirTxt.SetValue('')\n        self.palettize_exportDirTxt.Disable()\n        self.palettize_exportDirBtn.Disable()\n        self.palettize_exportFileTxt.SetValue('')\n        self.palettize_exportFileTxt.Disable()\n        self.palettize_exportFileBtn.Disable()\n    elif len(self.palettize_eggList) > 1:\n        self.palettize_exportDirTxt.Enable()\n        self.palettize_exportDirBtn.Enable()\n        self.palettize_exportFileTxt.Disable()\n        self.palettize_exportFileBtn.Disable()\n    else:\n        self.palettize_exportDirTxt.Enable()\n        self.palettize_exportDirBtn.Enable()\n        self.palettize_exportFileTxt.Enable()\n        self.palettize_exportFileBtn.Enable()",
        "mutated": [
            "def OnPalettizeInPlace(self, event):\n    if False:\n        i = 10\n    if self.palettize_exportInPlaceChk.GetValue():\n        self.palettize_exportDirTxt.SetValue('')\n        self.palettize_exportDirTxt.Disable()\n        self.palettize_exportDirBtn.Disable()\n        self.palettize_exportFileTxt.SetValue('')\n        self.palettize_exportFileTxt.Disable()\n        self.palettize_exportFileBtn.Disable()\n    elif len(self.palettize_eggList) > 1:\n        self.palettize_exportDirTxt.Enable()\n        self.palettize_exportDirBtn.Enable()\n        self.palettize_exportFileTxt.Disable()\n        self.palettize_exportFileBtn.Disable()\n    else:\n        self.palettize_exportDirTxt.Enable()\n        self.palettize_exportDirBtn.Enable()\n        self.palettize_exportFileTxt.Enable()\n        self.palettize_exportFileBtn.Enable()",
            "def OnPalettizeInPlace(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if self.palettize_exportInPlaceChk.GetValue():\n        self.palettize_exportDirTxt.SetValue('')\n        self.palettize_exportDirTxt.Disable()\n        self.palettize_exportDirBtn.Disable()\n        self.palettize_exportFileTxt.SetValue('')\n        self.palettize_exportFileTxt.Disable()\n        self.palettize_exportFileBtn.Disable()\n    elif len(self.palettize_eggList) > 1:\n        self.palettize_exportDirTxt.Enable()\n        self.palettize_exportDirBtn.Enable()\n        self.palettize_exportFileTxt.Disable()\n        self.palettize_exportFileBtn.Disable()\n    else:\n        self.palettize_exportDirTxt.Enable()\n        self.palettize_exportDirBtn.Enable()\n        self.palettize_exportFileTxt.Enable()\n        self.palettize_exportFileBtn.Enable()",
            "def OnPalettizeInPlace(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if self.palettize_exportInPlaceChk.GetValue():\n        self.palettize_exportDirTxt.SetValue('')\n        self.palettize_exportDirTxt.Disable()\n        self.palettize_exportDirBtn.Disable()\n        self.palettize_exportFileTxt.SetValue('')\n        self.palettize_exportFileTxt.Disable()\n        self.palettize_exportFileBtn.Disable()\n    elif len(self.palettize_eggList) > 1:\n        self.palettize_exportDirTxt.Enable()\n        self.palettize_exportDirBtn.Enable()\n        self.palettize_exportFileTxt.Disable()\n        self.palettize_exportFileBtn.Disable()\n    else:\n        self.palettize_exportDirTxt.Enable()\n        self.palettize_exportDirBtn.Enable()\n        self.palettize_exportFileTxt.Enable()\n        self.palettize_exportFileBtn.Enable()",
            "def OnPalettizeInPlace(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if self.palettize_exportInPlaceChk.GetValue():\n        self.palettize_exportDirTxt.SetValue('')\n        self.palettize_exportDirTxt.Disable()\n        self.palettize_exportDirBtn.Disable()\n        self.palettize_exportFileTxt.SetValue('')\n        self.palettize_exportFileTxt.Disable()\n        self.palettize_exportFileBtn.Disable()\n    elif len(self.palettize_eggList) > 1:\n        self.palettize_exportDirTxt.Enable()\n        self.palettize_exportDirBtn.Enable()\n        self.palettize_exportFileTxt.Disable()\n        self.palettize_exportFileBtn.Disable()\n    else:\n        self.palettize_exportDirTxt.Enable()\n        self.palettize_exportDirBtn.Enable()\n        self.palettize_exportFileTxt.Enable()\n        self.palettize_exportFileBtn.Enable()",
            "def OnPalettizeInPlace(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if self.palettize_exportInPlaceChk.GetValue():\n        self.palettize_exportDirTxt.SetValue('')\n        self.palettize_exportDirTxt.Disable()\n        self.palettize_exportDirBtn.Disable()\n        self.palettize_exportFileTxt.SetValue('')\n        self.palettize_exportFileTxt.Disable()\n        self.palettize_exportFileBtn.Disable()\n    elif len(self.palettize_eggList) > 1:\n        self.palettize_exportDirTxt.Enable()\n        self.palettize_exportDirBtn.Enable()\n        self.palettize_exportFileTxt.Disable()\n        self.palettize_exportFileBtn.Disable()\n    else:\n        self.palettize_exportDirTxt.Enable()\n        self.palettize_exportDirBtn.Enable()\n        self.palettize_exportFileTxt.Enable()\n        self.palettize_exportFileBtn.Enable()"
        ]
    },
    {
        "func_name": "OnPalettizeExportFile",
        "original": "def OnPalettizeExportFile(self, event):\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose a location and filename', dirname, '', '*.egg', wx.SAVE)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        self.palettize_exportFileTxt.SetValue(os.path.join(dirname + os.sep, filename))\n    dlg.Destroy()",
        "mutated": [
            "def OnPalettizeExportFile(self, event):\n    if False:\n        i = 10\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose a location and filename', dirname, '', '*.egg', wx.SAVE)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        self.palettize_exportFileTxt.SetValue(os.path.join(dirname + os.sep, filename))\n    dlg.Destroy()",
            "def OnPalettizeExportFile(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose a location and filename', dirname, '', '*.egg', wx.SAVE)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        self.palettize_exportFileTxt.SetValue(os.path.join(dirname + os.sep, filename))\n    dlg.Destroy()",
            "def OnPalettizeExportFile(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose a location and filename', dirname, '', '*.egg', wx.SAVE)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        self.palettize_exportFileTxt.SetValue(os.path.join(dirname + os.sep, filename))\n    dlg.Destroy()",
            "def OnPalettizeExportFile(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose a location and filename', dirname, '', '*.egg', wx.SAVE)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        self.palettize_exportFileTxt.SetValue(os.path.join(dirname + os.sep, filename))\n    dlg.Destroy()",
            "def OnPalettizeExportFile(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose a location and filename', dirname, '', '*.egg', wx.SAVE)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        self.palettize_exportFileTxt.SetValue(os.path.join(dirname + os.sep, filename))\n    dlg.Destroy()"
        ]
    },
    {
        "func_name": "OnPalettizeExportDir",
        "original": "def OnPalettizeExportDir(self, event):\n    dlg = wx.DirDialog(self, 'Choose the output directory:')\n    if dlg.ShowModal() == wx.ID_OK:\n        self.palettize_exportDirTxt.SetValue(dlg.GetPath())\n    dlg.Destroy()",
        "mutated": [
            "def OnPalettizeExportDir(self, event):\n    if False:\n        i = 10\n    dlg = wx.DirDialog(self, 'Choose the output directory:')\n    if dlg.ShowModal() == wx.ID_OK:\n        self.palettize_exportDirTxt.SetValue(dlg.GetPath())\n    dlg.Destroy()",
            "def OnPalettizeExportDir(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    dlg = wx.DirDialog(self, 'Choose the output directory:')\n    if dlg.ShowModal() == wx.ID_OK:\n        self.palettize_exportDirTxt.SetValue(dlg.GetPath())\n    dlg.Destroy()",
            "def OnPalettizeExportDir(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    dlg = wx.DirDialog(self, 'Choose the output directory:')\n    if dlg.ShowModal() == wx.ID_OK:\n        self.palettize_exportDirTxt.SetValue(dlg.GetPath())\n    dlg.Destroy()",
            "def OnPalettizeExportDir(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    dlg = wx.DirDialog(self, 'Choose the output directory:')\n    if dlg.ShowModal() == wx.ID_OK:\n        self.palettize_exportDirTxt.SetValue(dlg.GetPath())\n    dlg.Destroy()",
            "def OnPalettizeExportDir(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    dlg = wx.DirDialog(self, 'Choose the output directory:')\n    if dlg.ShowModal() == wx.ID_OK:\n        self.palettize_exportDirTxt.SetValue(dlg.GetPath())\n    dlg.Destroy()"
        ]
    },
    {
        "func_name": "OnPalettizeExportTex",
        "original": "def OnPalettizeExportTex(self, event):\n    dlg = wx.DirDialog(self, 'Choose your Output Texture directory:')\n    if dlg.ShowModal() == wx.ID_OK:\n        self.palettize_exportTexTxt.SetValue(dlg.GetPath())\n    dlg.Destroy()",
        "mutated": [
            "def OnPalettizeExportTex(self, event):\n    if False:\n        i = 10\n    dlg = wx.DirDialog(self, 'Choose your Output Texture directory:')\n    if dlg.ShowModal() == wx.ID_OK:\n        self.palettize_exportTexTxt.SetValue(dlg.GetPath())\n    dlg.Destroy()",
            "def OnPalettizeExportTex(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    dlg = wx.DirDialog(self, 'Choose your Output Texture directory:')\n    if dlg.ShowModal() == wx.ID_OK:\n        self.palettize_exportTexTxt.SetValue(dlg.GetPath())\n    dlg.Destroy()",
            "def OnPalettizeExportTex(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    dlg = wx.DirDialog(self, 'Choose your Output Texture directory:')\n    if dlg.ShowModal() == wx.ID_OK:\n        self.palettize_exportTexTxt.SetValue(dlg.GetPath())\n    dlg.Destroy()",
            "def OnPalettizeExportTex(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    dlg = wx.DirDialog(self, 'Choose your Output Texture directory:')\n    if dlg.ShowModal() == wx.ID_OK:\n        self.palettize_exportTexTxt.SetValue(dlg.GetPath())\n    dlg.Destroy()",
            "def OnPalettizeExportTex(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    dlg = wx.DirDialog(self, 'Choose your Output Texture directory:')\n    if dlg.ShowModal() == wx.ID_OK:\n        self.palettize_exportTexTxt.SetValue(dlg.GetPath())\n    dlg.Destroy()"
        ]
    },
    {
        "func_name": "OnPalettizeLoadTxa",
        "original": "def OnPalettizeLoadTxa(self, event):\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose a .txa file to use', dirname, '', '*.txa', wx.OPEN)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        try:\n            self.txaExtraLines = []\n            txafile = open(dirname + os.sep + filename, 'r')\n            for line in txafile:\n                words = line.split()\n                if len(words):\n                    if words[0] == ':palette':\n                        self.palettize_sizeWidthTxt.SetValue(words[1])\n                        self.palettize_sizeHeightTxt.SetValue(words[2])\n                    elif words[0] == ':imagetype':\n                        self.palettize_imageTypeChoice.SetStringSelection(words[1])\n                    elif words[0] == ':powertwo':\n                        self.palettize_powerOf2Chk.SetValue(int(words[1]))\n                    elif words[0] == ':background':\n                        self.palettize_redTxt.SetValue(int(words[1]))\n                        self.palettize_greenTxt.SetValue(int(words[2]))\n                        self.palettize_blueTxt.SetValue(int(words[3]))\n                        self.palettize_alphaTxt.SetValue(int(words[4]))\n                    elif words[0] == ':margin':\n                        self.palettize_marginTxt.SetValue(int(words[1]))\n                    elif words[0] == ':coverage':\n                        self.palettize_coverageTxt.SetValue(words[1])\n                    else:\n                        self.txaExtraLines.append(line)\n            txafile.close()\n        except:\n            print('Error opening .txa file!')\n        self.palettize_saveTxaTxt.SetValue(os.path.join(dirname + os.sep, filename))\n    dlg.Destroy()",
        "mutated": [
            "def OnPalettizeLoadTxa(self, event):\n    if False:\n        i = 10\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose a .txa file to use', dirname, '', '*.txa', wx.OPEN)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        try:\n            self.txaExtraLines = []\n            txafile = open(dirname + os.sep + filename, 'r')\n            for line in txafile:\n                words = line.split()\n                if len(words):\n                    if words[0] == ':palette':\n                        self.palettize_sizeWidthTxt.SetValue(words[1])\n                        self.palettize_sizeHeightTxt.SetValue(words[2])\n                    elif words[0] == ':imagetype':\n                        self.palettize_imageTypeChoice.SetStringSelection(words[1])\n                    elif words[0] == ':powertwo':\n                        self.palettize_powerOf2Chk.SetValue(int(words[1]))\n                    elif words[0] == ':background':\n                        self.palettize_redTxt.SetValue(int(words[1]))\n                        self.palettize_greenTxt.SetValue(int(words[2]))\n                        self.palettize_blueTxt.SetValue(int(words[3]))\n                        self.palettize_alphaTxt.SetValue(int(words[4]))\n                    elif words[0] == ':margin':\n                        self.palettize_marginTxt.SetValue(int(words[1]))\n                    elif words[0] == ':coverage':\n                        self.palettize_coverageTxt.SetValue(words[1])\n                    else:\n                        self.txaExtraLines.append(line)\n            txafile.close()\n        except:\n            print('Error opening .txa file!')\n        self.palettize_saveTxaTxt.SetValue(os.path.join(dirname + os.sep, filename))\n    dlg.Destroy()",
            "def OnPalettizeLoadTxa(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose a .txa file to use', dirname, '', '*.txa', wx.OPEN)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        try:\n            self.txaExtraLines = []\n            txafile = open(dirname + os.sep + filename, 'r')\n            for line in txafile:\n                words = line.split()\n                if len(words):\n                    if words[0] == ':palette':\n                        self.palettize_sizeWidthTxt.SetValue(words[1])\n                        self.palettize_sizeHeightTxt.SetValue(words[2])\n                    elif words[0] == ':imagetype':\n                        self.palettize_imageTypeChoice.SetStringSelection(words[1])\n                    elif words[0] == ':powertwo':\n                        self.palettize_powerOf2Chk.SetValue(int(words[1]))\n                    elif words[0] == ':background':\n                        self.palettize_redTxt.SetValue(int(words[1]))\n                        self.palettize_greenTxt.SetValue(int(words[2]))\n                        self.palettize_blueTxt.SetValue(int(words[3]))\n                        self.palettize_alphaTxt.SetValue(int(words[4]))\n                    elif words[0] == ':margin':\n                        self.palettize_marginTxt.SetValue(int(words[1]))\n                    elif words[0] == ':coverage':\n                        self.palettize_coverageTxt.SetValue(words[1])\n                    else:\n                        self.txaExtraLines.append(line)\n            txafile.close()\n        except:\n            print('Error opening .txa file!')\n        self.palettize_saveTxaTxt.SetValue(os.path.join(dirname + os.sep, filename))\n    dlg.Destroy()",
            "def OnPalettizeLoadTxa(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose a .txa file to use', dirname, '', '*.txa', wx.OPEN)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        try:\n            self.txaExtraLines = []\n            txafile = open(dirname + os.sep + filename, 'r')\n            for line in txafile:\n                words = line.split()\n                if len(words):\n                    if words[0] == ':palette':\n                        self.palettize_sizeWidthTxt.SetValue(words[1])\n                        self.palettize_sizeHeightTxt.SetValue(words[2])\n                    elif words[0] == ':imagetype':\n                        self.palettize_imageTypeChoice.SetStringSelection(words[1])\n                    elif words[0] == ':powertwo':\n                        self.palettize_powerOf2Chk.SetValue(int(words[1]))\n                    elif words[0] == ':background':\n                        self.palettize_redTxt.SetValue(int(words[1]))\n                        self.palettize_greenTxt.SetValue(int(words[2]))\n                        self.palettize_blueTxt.SetValue(int(words[3]))\n                        self.palettize_alphaTxt.SetValue(int(words[4]))\n                    elif words[0] == ':margin':\n                        self.palettize_marginTxt.SetValue(int(words[1]))\n                    elif words[0] == ':coverage':\n                        self.palettize_coverageTxt.SetValue(words[1])\n                    else:\n                        self.txaExtraLines.append(line)\n            txafile.close()\n        except:\n            print('Error opening .txa file!')\n        self.palettize_saveTxaTxt.SetValue(os.path.join(dirname + os.sep, filename))\n    dlg.Destroy()",
            "def OnPalettizeLoadTxa(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose a .txa file to use', dirname, '', '*.txa', wx.OPEN)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        try:\n            self.txaExtraLines = []\n            txafile = open(dirname + os.sep + filename, 'r')\n            for line in txafile:\n                words = line.split()\n                if len(words):\n                    if words[0] == ':palette':\n                        self.palettize_sizeWidthTxt.SetValue(words[1])\n                        self.palettize_sizeHeightTxt.SetValue(words[2])\n                    elif words[0] == ':imagetype':\n                        self.palettize_imageTypeChoice.SetStringSelection(words[1])\n                    elif words[0] == ':powertwo':\n                        self.palettize_powerOf2Chk.SetValue(int(words[1]))\n                    elif words[0] == ':background':\n                        self.palettize_redTxt.SetValue(int(words[1]))\n                        self.palettize_greenTxt.SetValue(int(words[2]))\n                        self.palettize_blueTxt.SetValue(int(words[3]))\n                        self.palettize_alphaTxt.SetValue(int(words[4]))\n                    elif words[0] == ':margin':\n                        self.palettize_marginTxt.SetValue(int(words[1]))\n                    elif words[0] == ':coverage':\n                        self.palettize_coverageTxt.SetValue(words[1])\n                    else:\n                        self.txaExtraLines.append(line)\n            txafile.close()\n        except:\n            print('Error opening .txa file!')\n        self.palettize_saveTxaTxt.SetValue(os.path.join(dirname + os.sep, filename))\n    dlg.Destroy()",
            "def OnPalettizeLoadTxa(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose a .txa file to use', dirname, '', '*.txa', wx.OPEN)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        try:\n            self.txaExtraLines = []\n            txafile = open(dirname + os.sep + filename, 'r')\n            for line in txafile:\n                words = line.split()\n                if len(words):\n                    if words[0] == ':palette':\n                        self.palettize_sizeWidthTxt.SetValue(words[1])\n                        self.palettize_sizeHeightTxt.SetValue(words[2])\n                    elif words[0] == ':imagetype':\n                        self.palettize_imageTypeChoice.SetStringSelection(words[1])\n                    elif words[0] == ':powertwo':\n                        self.palettize_powerOf2Chk.SetValue(int(words[1]))\n                    elif words[0] == ':background':\n                        self.palettize_redTxt.SetValue(int(words[1]))\n                        self.palettize_greenTxt.SetValue(int(words[2]))\n                        self.palettize_blueTxt.SetValue(int(words[3]))\n                        self.palettize_alphaTxt.SetValue(int(words[4]))\n                    elif words[0] == ':margin':\n                        self.palettize_marginTxt.SetValue(int(words[1]))\n                    elif words[0] == ':coverage':\n                        self.palettize_coverageTxt.SetValue(words[1])\n                    else:\n                        self.txaExtraLines.append(line)\n            txafile.close()\n        except:\n            print('Error opening .txa file!')\n        self.palettize_saveTxaTxt.SetValue(os.path.join(dirname + os.sep, filename))\n    dlg.Destroy()"
        ]
    },
    {
        "func_name": "OnPalettizeSaveTxa",
        "original": "def OnPalettizeSaveTxa(self, event):\n    filename = ''\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose a location and filename', dirname, '', '*.txa', wx.SAVE)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        file = dirname + os.sep + filename\n        myfile = open(file, 'w')\n        mydata = {}\n        mydata = [':palette ']\n        mydata += str(str(self.palettize_sizeWidthTxt.GetValue()))\n        mydata += [' ']\n        mydata += str(str(self.palettize_sizeHeightTxt.GetValue()))\n        mydata += ['\\n:imagetype ']\n        mydata += [self.palettize_imageTypeChoice.GetStringSelection()]\n        mydata += ['\\n:powertwo ']\n        mydata += str(int(self.palettize_powerOf2Chk.GetValue()))\n        mydata += ['\\n:background ']\n        mydata += str(int(self.palettize_redTxt.GetValue()))\n        mydata += [' ']\n        mydata += str(int(self.palettize_greenTxt.GetValue()))\n        mydata += [' ']\n        mydata += str(int(self.palettize_blueTxt.GetValue()))\n        mydata += [' ']\n        mydata += str(int(self.palettize_alphaTxt.GetValue()))\n        mydata += ['\\n:margin ']\n        mydata += str(str(int(self.palettize_marginTxt.GetValue())))\n        mydata += ['\\n:coverage ']\n        mydata += str(str(self.palettize_coverageTxt.GetValue()))\n        mydata += ['\\n\\n']\n        for line in mydata:\n            myfile.writelines(line)\n        for line in self.txaExtraLines:\n            myfile.writelines(line)\n        myfile.close()\n        self.palettize_saveTxaTxt.SetValue(os.path.join(dirname + os.sep, filename))\n    dlg.Destroy()\n    self.statusBar.SetStatusText('The output Txa File is: ' + dirname + os.sep + filename)",
        "mutated": [
            "def OnPalettizeSaveTxa(self, event):\n    if False:\n        i = 10\n    filename = ''\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose a location and filename', dirname, '', '*.txa', wx.SAVE)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        file = dirname + os.sep + filename\n        myfile = open(file, 'w')\n        mydata = {}\n        mydata = [':palette ']\n        mydata += str(str(self.palettize_sizeWidthTxt.GetValue()))\n        mydata += [' ']\n        mydata += str(str(self.palettize_sizeHeightTxt.GetValue()))\n        mydata += ['\\n:imagetype ']\n        mydata += [self.palettize_imageTypeChoice.GetStringSelection()]\n        mydata += ['\\n:powertwo ']\n        mydata += str(int(self.palettize_powerOf2Chk.GetValue()))\n        mydata += ['\\n:background ']\n        mydata += str(int(self.palettize_redTxt.GetValue()))\n        mydata += [' ']\n        mydata += str(int(self.palettize_greenTxt.GetValue()))\n        mydata += [' ']\n        mydata += str(int(self.palettize_blueTxt.GetValue()))\n        mydata += [' ']\n        mydata += str(int(self.palettize_alphaTxt.GetValue()))\n        mydata += ['\\n:margin ']\n        mydata += str(str(int(self.palettize_marginTxt.GetValue())))\n        mydata += ['\\n:coverage ']\n        mydata += str(str(self.palettize_coverageTxt.GetValue()))\n        mydata += ['\\n\\n']\n        for line in mydata:\n            myfile.writelines(line)\n        for line in self.txaExtraLines:\n            myfile.writelines(line)\n        myfile.close()\n        self.palettize_saveTxaTxt.SetValue(os.path.join(dirname + os.sep, filename))\n    dlg.Destroy()\n    self.statusBar.SetStatusText('The output Txa File is: ' + dirname + os.sep + filename)",
            "def OnPalettizeSaveTxa(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    filename = ''\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose a location and filename', dirname, '', '*.txa', wx.SAVE)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        file = dirname + os.sep + filename\n        myfile = open(file, 'w')\n        mydata = {}\n        mydata = [':palette ']\n        mydata += str(str(self.palettize_sizeWidthTxt.GetValue()))\n        mydata += [' ']\n        mydata += str(str(self.palettize_sizeHeightTxt.GetValue()))\n        mydata += ['\\n:imagetype ']\n        mydata += [self.palettize_imageTypeChoice.GetStringSelection()]\n        mydata += ['\\n:powertwo ']\n        mydata += str(int(self.palettize_powerOf2Chk.GetValue()))\n        mydata += ['\\n:background ']\n        mydata += str(int(self.palettize_redTxt.GetValue()))\n        mydata += [' ']\n        mydata += str(int(self.palettize_greenTxt.GetValue()))\n        mydata += [' ']\n        mydata += str(int(self.palettize_blueTxt.GetValue()))\n        mydata += [' ']\n        mydata += str(int(self.palettize_alphaTxt.GetValue()))\n        mydata += ['\\n:margin ']\n        mydata += str(str(int(self.palettize_marginTxt.GetValue())))\n        mydata += ['\\n:coverage ']\n        mydata += str(str(self.palettize_coverageTxt.GetValue()))\n        mydata += ['\\n\\n']\n        for line in mydata:\n            myfile.writelines(line)\n        for line in self.txaExtraLines:\n            myfile.writelines(line)\n        myfile.close()\n        self.palettize_saveTxaTxt.SetValue(os.path.join(dirname + os.sep, filename))\n    dlg.Destroy()\n    self.statusBar.SetStatusText('The output Txa File is: ' + dirname + os.sep + filename)",
            "def OnPalettizeSaveTxa(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    filename = ''\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose a location and filename', dirname, '', '*.txa', wx.SAVE)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        file = dirname + os.sep + filename\n        myfile = open(file, 'w')\n        mydata = {}\n        mydata = [':palette ']\n        mydata += str(str(self.palettize_sizeWidthTxt.GetValue()))\n        mydata += [' ']\n        mydata += str(str(self.palettize_sizeHeightTxt.GetValue()))\n        mydata += ['\\n:imagetype ']\n        mydata += [self.palettize_imageTypeChoice.GetStringSelection()]\n        mydata += ['\\n:powertwo ']\n        mydata += str(int(self.palettize_powerOf2Chk.GetValue()))\n        mydata += ['\\n:background ']\n        mydata += str(int(self.palettize_redTxt.GetValue()))\n        mydata += [' ']\n        mydata += str(int(self.palettize_greenTxt.GetValue()))\n        mydata += [' ']\n        mydata += str(int(self.palettize_blueTxt.GetValue()))\n        mydata += [' ']\n        mydata += str(int(self.palettize_alphaTxt.GetValue()))\n        mydata += ['\\n:margin ']\n        mydata += str(str(int(self.palettize_marginTxt.GetValue())))\n        mydata += ['\\n:coverage ']\n        mydata += str(str(self.palettize_coverageTxt.GetValue()))\n        mydata += ['\\n\\n']\n        for line in mydata:\n            myfile.writelines(line)\n        for line in self.txaExtraLines:\n            myfile.writelines(line)\n        myfile.close()\n        self.palettize_saveTxaTxt.SetValue(os.path.join(dirname + os.sep, filename))\n    dlg.Destroy()\n    self.statusBar.SetStatusText('The output Txa File is: ' + dirname + os.sep + filename)",
            "def OnPalettizeSaveTxa(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    filename = ''\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose a location and filename', dirname, '', '*.txa', wx.SAVE)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        file = dirname + os.sep + filename\n        myfile = open(file, 'w')\n        mydata = {}\n        mydata = [':palette ']\n        mydata += str(str(self.palettize_sizeWidthTxt.GetValue()))\n        mydata += [' ']\n        mydata += str(str(self.palettize_sizeHeightTxt.GetValue()))\n        mydata += ['\\n:imagetype ']\n        mydata += [self.palettize_imageTypeChoice.GetStringSelection()]\n        mydata += ['\\n:powertwo ']\n        mydata += str(int(self.palettize_powerOf2Chk.GetValue()))\n        mydata += ['\\n:background ']\n        mydata += str(int(self.palettize_redTxt.GetValue()))\n        mydata += [' ']\n        mydata += str(int(self.palettize_greenTxt.GetValue()))\n        mydata += [' ']\n        mydata += str(int(self.palettize_blueTxt.GetValue()))\n        mydata += [' ']\n        mydata += str(int(self.palettize_alphaTxt.GetValue()))\n        mydata += ['\\n:margin ']\n        mydata += str(str(int(self.palettize_marginTxt.GetValue())))\n        mydata += ['\\n:coverage ']\n        mydata += str(str(self.palettize_coverageTxt.GetValue()))\n        mydata += ['\\n\\n']\n        for line in mydata:\n            myfile.writelines(line)\n        for line in self.txaExtraLines:\n            myfile.writelines(line)\n        myfile.close()\n        self.palettize_saveTxaTxt.SetValue(os.path.join(dirname + os.sep, filename))\n    dlg.Destroy()\n    self.statusBar.SetStatusText('The output Txa File is: ' + dirname + os.sep + filename)",
            "def OnPalettizeSaveTxa(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    filename = ''\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose a location and filename', dirname, '', '*.txa', wx.SAVE)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        file = dirname + os.sep + filename\n        myfile = open(file, 'w')\n        mydata = {}\n        mydata = [':palette ']\n        mydata += str(str(self.palettize_sizeWidthTxt.GetValue()))\n        mydata += [' ']\n        mydata += str(str(self.palettize_sizeHeightTxt.GetValue()))\n        mydata += ['\\n:imagetype ']\n        mydata += [self.palettize_imageTypeChoice.GetStringSelection()]\n        mydata += ['\\n:powertwo ']\n        mydata += str(int(self.palettize_powerOf2Chk.GetValue()))\n        mydata += ['\\n:background ']\n        mydata += str(int(self.palettize_redTxt.GetValue()))\n        mydata += [' ']\n        mydata += str(int(self.palettize_greenTxt.GetValue()))\n        mydata += [' ']\n        mydata += str(int(self.palettize_blueTxt.GetValue()))\n        mydata += [' ']\n        mydata += str(int(self.palettize_alphaTxt.GetValue()))\n        mydata += ['\\n:margin ']\n        mydata += str(str(int(self.palettize_marginTxt.GetValue())))\n        mydata += ['\\n:coverage ']\n        mydata += str(str(self.palettize_coverageTxt.GetValue()))\n        mydata += ['\\n\\n']\n        for line in mydata:\n            myfile.writelines(line)\n        for line in self.txaExtraLines:\n            myfile.writelines(line)\n        myfile.close()\n        self.palettize_saveTxaTxt.SetValue(os.path.join(dirname + os.sep, filename))\n    dlg.Destroy()\n    self.statusBar.SetStatusText('The output Txa File is: ' + dirname + os.sep + filename)"
        ]
    },
    {
        "func_name": "GetSelectedBatchList",
        "original": "def GetSelectedBatchList(self):\n    batchList = []\n    selectedItems = self.batchTree.GetSelections()\n    for item in selectedItems:\n        selectedItemIndex = int(self.batchTree.GetItemText(item).split()[0]) - 1\n        batchList.append(self.batchList[selectedItemIndex])\n    if not len(batchList):\n        batchList = self.batchList\n    return batchList",
        "mutated": [
            "def GetSelectedBatchList(self):\n    if False:\n        i = 10\n    batchList = []\n    selectedItems = self.batchTree.GetSelections()\n    for item in selectedItems:\n        selectedItemIndex = int(self.batchTree.GetItemText(item).split()[0]) - 1\n        batchList.append(self.batchList[selectedItemIndex])\n    if not len(batchList):\n        batchList = self.batchList\n    return batchList",
            "def GetSelectedBatchList(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    batchList = []\n    selectedItems = self.batchTree.GetSelections()\n    for item in selectedItems:\n        selectedItemIndex = int(self.batchTree.GetItemText(item).split()[0]) - 1\n        batchList.append(self.batchList[selectedItemIndex])\n    if not len(batchList):\n        batchList = self.batchList\n    return batchList",
            "def GetSelectedBatchList(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    batchList = []\n    selectedItems = self.batchTree.GetSelections()\n    for item in selectedItems:\n        selectedItemIndex = int(self.batchTree.GetItemText(item).split()[0]) - 1\n        batchList.append(self.batchList[selectedItemIndex])\n    if not len(batchList):\n        batchList = self.batchList\n    return batchList",
            "def GetSelectedBatchList(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    batchList = []\n    selectedItems = self.batchTree.GetSelections()\n    for item in selectedItems:\n        selectedItemIndex = int(self.batchTree.GetItemText(item).split()[0]) - 1\n        batchList.append(self.batchList[selectedItemIndex])\n    if not len(batchList):\n        batchList = self.batchList\n    return batchList",
            "def GetSelectedBatchList(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    batchList = []\n    selectedItems = self.batchTree.GetSelections()\n    for item in selectedItems:\n        selectedItemIndex = int(self.batchTree.GetItemText(item).split()[0]) - 1\n        batchList.append(self.batchList[selectedItemIndex])\n    if not len(batchList):\n        batchList = self.batchList\n    return batchList"
        ]
    },
    {
        "func_name": "GetOutputFromBatch",
        "original": "def GetOutputFromBatch(self, index=-1):\n    if index != -1:\n        batchList = [self.batchList[index]]\n    else:\n        batchList = self.GetSelectedBatchList()\n    outputFiles = []\n    for batchItem in batchList:\n        if batchItem['cmd'].count('maya2egg'):\n            outputFiles.append(batchItem['foutput'])\n        elif batchItem['cmd'] in ['egg-rename', 'egg-optchar', 'egg-palettize']:\n            if batchItem['args'].has_key('inplace'):\n                for filename in batchItem['finput'].split('|'):\n                    if filename:\n                        outputFiles.append(filename)\n            elif batchItem['args'].has_key('d'):\n                dirname = batchItem['args']['d']\n                if dirname[-1] != '\\\\':\n                    dirname += '\\\\'\n                for filename in batchItem['finput'].split('|'):\n                    if filename:\n                        for item in filename.split('\\\\'):\n                            pass\n                        filename = item\n                        outputFiles.append(dirname + filename)\n            else:\n                outputFiles.append(batchItem['foutput'])\n    return outputFiles",
        "mutated": [
            "def GetOutputFromBatch(self, index=-1):\n    if False:\n        i = 10\n    if index != -1:\n        batchList = [self.batchList[index]]\n    else:\n        batchList = self.GetSelectedBatchList()\n    outputFiles = []\n    for batchItem in batchList:\n        if batchItem['cmd'].count('maya2egg'):\n            outputFiles.append(batchItem['foutput'])\n        elif batchItem['cmd'] in ['egg-rename', 'egg-optchar', 'egg-palettize']:\n            if batchItem['args'].has_key('inplace'):\n                for filename in batchItem['finput'].split('|'):\n                    if filename:\n                        outputFiles.append(filename)\n            elif batchItem['args'].has_key('d'):\n                dirname = batchItem['args']['d']\n                if dirname[-1] != '\\\\':\n                    dirname += '\\\\'\n                for filename in batchItem['finput'].split('|'):\n                    if filename:\n                        for item in filename.split('\\\\'):\n                            pass\n                        filename = item\n                        outputFiles.append(dirname + filename)\n            else:\n                outputFiles.append(batchItem['foutput'])\n    return outputFiles",
            "def GetOutputFromBatch(self, index=-1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if index != -1:\n        batchList = [self.batchList[index]]\n    else:\n        batchList = self.GetSelectedBatchList()\n    outputFiles = []\n    for batchItem in batchList:\n        if batchItem['cmd'].count('maya2egg'):\n            outputFiles.append(batchItem['foutput'])\n        elif batchItem['cmd'] in ['egg-rename', 'egg-optchar', 'egg-palettize']:\n            if batchItem['args'].has_key('inplace'):\n                for filename in batchItem['finput'].split('|'):\n                    if filename:\n                        outputFiles.append(filename)\n            elif batchItem['args'].has_key('d'):\n                dirname = batchItem['args']['d']\n                if dirname[-1] != '\\\\':\n                    dirname += '\\\\'\n                for filename in batchItem['finput'].split('|'):\n                    if filename:\n                        for item in filename.split('\\\\'):\n                            pass\n                        filename = item\n                        outputFiles.append(dirname + filename)\n            else:\n                outputFiles.append(batchItem['foutput'])\n    return outputFiles",
            "def GetOutputFromBatch(self, index=-1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if index != -1:\n        batchList = [self.batchList[index]]\n    else:\n        batchList = self.GetSelectedBatchList()\n    outputFiles = []\n    for batchItem in batchList:\n        if batchItem['cmd'].count('maya2egg'):\n            outputFiles.append(batchItem['foutput'])\n        elif batchItem['cmd'] in ['egg-rename', 'egg-optchar', 'egg-palettize']:\n            if batchItem['args'].has_key('inplace'):\n                for filename in batchItem['finput'].split('|'):\n                    if filename:\n                        outputFiles.append(filename)\n            elif batchItem['args'].has_key('d'):\n                dirname = batchItem['args']['d']\n                if dirname[-1] != '\\\\':\n                    dirname += '\\\\'\n                for filename in batchItem['finput'].split('|'):\n                    if filename:\n                        for item in filename.split('\\\\'):\n                            pass\n                        filename = item\n                        outputFiles.append(dirname + filename)\n            else:\n                outputFiles.append(batchItem['foutput'])\n    return outputFiles",
            "def GetOutputFromBatch(self, index=-1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if index != -1:\n        batchList = [self.batchList[index]]\n    else:\n        batchList = self.GetSelectedBatchList()\n    outputFiles = []\n    for batchItem in batchList:\n        if batchItem['cmd'].count('maya2egg'):\n            outputFiles.append(batchItem['foutput'])\n        elif batchItem['cmd'] in ['egg-rename', 'egg-optchar', 'egg-palettize']:\n            if batchItem['args'].has_key('inplace'):\n                for filename in batchItem['finput'].split('|'):\n                    if filename:\n                        outputFiles.append(filename)\n            elif batchItem['args'].has_key('d'):\n                dirname = batchItem['args']['d']\n                if dirname[-1] != '\\\\':\n                    dirname += '\\\\'\n                for filename in batchItem['finput'].split('|'):\n                    if filename:\n                        for item in filename.split('\\\\'):\n                            pass\n                        filename = item\n                        outputFiles.append(dirname + filename)\n            else:\n                outputFiles.append(batchItem['foutput'])\n    return outputFiles",
            "def GetOutputFromBatch(self, index=-1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if index != -1:\n        batchList = [self.batchList[index]]\n    else:\n        batchList = self.GetSelectedBatchList()\n    outputFiles = []\n    for batchItem in batchList:\n        if batchItem['cmd'].count('maya2egg'):\n            outputFiles.append(batchItem['foutput'])\n        elif batchItem['cmd'] in ['egg-rename', 'egg-optchar', 'egg-palettize']:\n            if batchItem['args'].has_key('inplace'):\n                for filename in batchItem['finput'].split('|'):\n                    if filename:\n                        outputFiles.append(filename)\n            elif batchItem['args'].has_key('d'):\n                dirname = batchItem['args']['d']\n                if dirname[-1] != '\\\\':\n                    dirname += '\\\\'\n                for filename in batchItem['finput'].split('|'):\n                    if filename:\n                        for item in filename.split('\\\\'):\n                            pass\n                        filename = item\n                        outputFiles.append(dirname + filename)\n            else:\n                outputFiles.append(batchItem['foutput'])\n    return outputFiles"
        ]
    },
    {
        "func_name": "OnAddToBatch",
        "original": "def OnAddToBatch(self, event):\n    currTool = self.toolComboBox.GetValue()\n    if currTool == 'maya2egg':\n        self.addMaya2EggToBatch()\n        if self.m2e_addEgg2BamChk.GetValue():\n            self.e2b_eggFileTxt.SetValue(self.m2e_exportDestTxt.GetValue())\n            self.e2b_exportDestTxt.SetValue(self.m2e_exportDestTxt.GetValue()[:-3] + 'bam')\n            self.addEgg2BamToBatch()\n    elif currTool == 'egg2bam':\n        self.addEgg2BamToBatch()\n    elif currTool == 'egg-rename':\n        self.addEggRenameToBatch()\n    elif currTool == 'egg-optchar':\n        self.addEggOptcharToBatch()\n    elif currTool == 'egg-palettize':\n        self.addEggPalettizeToBatch()",
        "mutated": [
            "def OnAddToBatch(self, event):\n    if False:\n        i = 10\n    currTool = self.toolComboBox.GetValue()\n    if currTool == 'maya2egg':\n        self.addMaya2EggToBatch()\n        if self.m2e_addEgg2BamChk.GetValue():\n            self.e2b_eggFileTxt.SetValue(self.m2e_exportDestTxt.GetValue())\n            self.e2b_exportDestTxt.SetValue(self.m2e_exportDestTxt.GetValue()[:-3] + 'bam')\n            self.addEgg2BamToBatch()\n    elif currTool == 'egg2bam':\n        self.addEgg2BamToBatch()\n    elif currTool == 'egg-rename':\n        self.addEggRenameToBatch()\n    elif currTool == 'egg-optchar':\n        self.addEggOptcharToBatch()\n    elif currTool == 'egg-palettize':\n        self.addEggPalettizeToBatch()",
            "def OnAddToBatch(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    currTool = self.toolComboBox.GetValue()\n    if currTool == 'maya2egg':\n        self.addMaya2EggToBatch()\n        if self.m2e_addEgg2BamChk.GetValue():\n            self.e2b_eggFileTxt.SetValue(self.m2e_exportDestTxt.GetValue())\n            self.e2b_exportDestTxt.SetValue(self.m2e_exportDestTxt.GetValue()[:-3] + 'bam')\n            self.addEgg2BamToBatch()\n    elif currTool == 'egg2bam':\n        self.addEgg2BamToBatch()\n    elif currTool == 'egg-rename':\n        self.addEggRenameToBatch()\n    elif currTool == 'egg-optchar':\n        self.addEggOptcharToBatch()\n    elif currTool == 'egg-palettize':\n        self.addEggPalettizeToBatch()",
            "def OnAddToBatch(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    currTool = self.toolComboBox.GetValue()\n    if currTool == 'maya2egg':\n        self.addMaya2EggToBatch()\n        if self.m2e_addEgg2BamChk.GetValue():\n            self.e2b_eggFileTxt.SetValue(self.m2e_exportDestTxt.GetValue())\n            self.e2b_exportDestTxt.SetValue(self.m2e_exportDestTxt.GetValue()[:-3] + 'bam')\n            self.addEgg2BamToBatch()\n    elif currTool == 'egg2bam':\n        self.addEgg2BamToBatch()\n    elif currTool == 'egg-rename':\n        self.addEggRenameToBatch()\n    elif currTool == 'egg-optchar':\n        self.addEggOptcharToBatch()\n    elif currTool == 'egg-palettize':\n        self.addEggPalettizeToBatch()",
            "def OnAddToBatch(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    currTool = self.toolComboBox.GetValue()\n    if currTool == 'maya2egg':\n        self.addMaya2EggToBatch()\n        if self.m2e_addEgg2BamChk.GetValue():\n            self.e2b_eggFileTxt.SetValue(self.m2e_exportDestTxt.GetValue())\n            self.e2b_exportDestTxt.SetValue(self.m2e_exportDestTxt.GetValue()[:-3] + 'bam')\n            self.addEgg2BamToBatch()\n    elif currTool == 'egg2bam':\n        self.addEgg2BamToBatch()\n    elif currTool == 'egg-rename':\n        self.addEggRenameToBatch()\n    elif currTool == 'egg-optchar':\n        self.addEggOptcharToBatch()\n    elif currTool == 'egg-palettize':\n        self.addEggPalettizeToBatch()",
            "def OnAddToBatch(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    currTool = self.toolComboBox.GetValue()\n    if currTool == 'maya2egg':\n        self.addMaya2EggToBatch()\n        if self.m2e_addEgg2BamChk.GetValue():\n            self.e2b_eggFileTxt.SetValue(self.m2e_exportDestTxt.GetValue())\n            self.e2b_exportDestTxt.SetValue(self.m2e_exportDestTxt.GetValue()[:-3] + 'bam')\n            self.addEgg2BamToBatch()\n    elif currTool == 'egg2bam':\n        self.addEgg2BamToBatch()\n    elif currTool == 'egg-rename':\n        self.addEggRenameToBatch()\n    elif currTool == 'egg-optchar':\n        self.addEggOptcharToBatch()\n    elif currTool == 'egg-palettize':\n        self.addEggPalettizeToBatch()"
        ]
    },
    {
        "func_name": "addMaya2EggToBatch",
        "original": "def addMaya2EggToBatch(self, editItemIndex=-1):\n    finput = self.m2e_mayaFileTxt.GetValue()\n    foutput = self.m2e_exportDestTxt.GetValue()\n    if finput == '' or foutput == '':\n        dlg = wx.MessageDialog(self, 'Both an input and output file must be present to add an item to the batch queue', 'ERROR', wx.OK)\n        dlg.ShowModal()\n        dlg.Destroy()\n        return\n    batchItemInfo = {}\n    batchItemInfo['label'] = self.batchItemNameTxt.GetValue()\n    batchItemInfo['cmd'] = 'maya2egg' + self.m2e_mayaVerComboBox.GetStringSelection()\n    batchItemInfo['args'] = self.BuildMaya2EggArgs()\n    batchItemInfo['finput'] = str(finput)\n    batchItemInfo['foutput'] = str(foutput)\n    if editItemIndex >= 0:\n        self.batchList[editItemIndex] = batchItemInfo\n        self.UpdateBatchDisplay()\n    else:\n        self.batchList.append(batchItemInfo)\n        self.AddToBatchDisplay(batchItemInfo)",
        "mutated": [
            "def addMaya2EggToBatch(self, editItemIndex=-1):\n    if False:\n        i = 10\n    finput = self.m2e_mayaFileTxt.GetValue()\n    foutput = self.m2e_exportDestTxt.GetValue()\n    if finput == '' or foutput == '':\n        dlg = wx.MessageDialog(self, 'Both an input and output file must be present to add an item to the batch queue', 'ERROR', wx.OK)\n        dlg.ShowModal()\n        dlg.Destroy()\n        return\n    batchItemInfo = {}\n    batchItemInfo['label'] = self.batchItemNameTxt.GetValue()\n    batchItemInfo['cmd'] = 'maya2egg' + self.m2e_mayaVerComboBox.GetStringSelection()\n    batchItemInfo['args'] = self.BuildMaya2EggArgs()\n    batchItemInfo['finput'] = str(finput)\n    batchItemInfo['foutput'] = str(foutput)\n    if editItemIndex >= 0:\n        self.batchList[editItemIndex] = batchItemInfo\n        self.UpdateBatchDisplay()\n    else:\n        self.batchList.append(batchItemInfo)\n        self.AddToBatchDisplay(batchItemInfo)",
            "def addMaya2EggToBatch(self, editItemIndex=-1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    finput = self.m2e_mayaFileTxt.GetValue()\n    foutput = self.m2e_exportDestTxt.GetValue()\n    if finput == '' or foutput == '':\n        dlg = wx.MessageDialog(self, 'Both an input and output file must be present to add an item to the batch queue', 'ERROR', wx.OK)\n        dlg.ShowModal()\n        dlg.Destroy()\n        return\n    batchItemInfo = {}\n    batchItemInfo['label'] = self.batchItemNameTxt.GetValue()\n    batchItemInfo['cmd'] = 'maya2egg' + self.m2e_mayaVerComboBox.GetStringSelection()\n    batchItemInfo['args'] = self.BuildMaya2EggArgs()\n    batchItemInfo['finput'] = str(finput)\n    batchItemInfo['foutput'] = str(foutput)\n    if editItemIndex >= 0:\n        self.batchList[editItemIndex] = batchItemInfo\n        self.UpdateBatchDisplay()\n    else:\n        self.batchList.append(batchItemInfo)\n        self.AddToBatchDisplay(batchItemInfo)",
            "def addMaya2EggToBatch(self, editItemIndex=-1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    finput = self.m2e_mayaFileTxt.GetValue()\n    foutput = self.m2e_exportDestTxt.GetValue()\n    if finput == '' or foutput == '':\n        dlg = wx.MessageDialog(self, 'Both an input and output file must be present to add an item to the batch queue', 'ERROR', wx.OK)\n        dlg.ShowModal()\n        dlg.Destroy()\n        return\n    batchItemInfo = {}\n    batchItemInfo['label'] = self.batchItemNameTxt.GetValue()\n    batchItemInfo['cmd'] = 'maya2egg' + self.m2e_mayaVerComboBox.GetStringSelection()\n    batchItemInfo['args'] = self.BuildMaya2EggArgs()\n    batchItemInfo['finput'] = str(finput)\n    batchItemInfo['foutput'] = str(foutput)\n    if editItemIndex >= 0:\n        self.batchList[editItemIndex] = batchItemInfo\n        self.UpdateBatchDisplay()\n    else:\n        self.batchList.append(batchItemInfo)\n        self.AddToBatchDisplay(batchItemInfo)",
            "def addMaya2EggToBatch(self, editItemIndex=-1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    finput = self.m2e_mayaFileTxt.GetValue()\n    foutput = self.m2e_exportDestTxt.GetValue()\n    if finput == '' or foutput == '':\n        dlg = wx.MessageDialog(self, 'Both an input and output file must be present to add an item to the batch queue', 'ERROR', wx.OK)\n        dlg.ShowModal()\n        dlg.Destroy()\n        return\n    batchItemInfo = {}\n    batchItemInfo['label'] = self.batchItemNameTxt.GetValue()\n    batchItemInfo['cmd'] = 'maya2egg' + self.m2e_mayaVerComboBox.GetStringSelection()\n    batchItemInfo['args'] = self.BuildMaya2EggArgs()\n    batchItemInfo['finput'] = str(finput)\n    batchItemInfo['foutput'] = str(foutput)\n    if editItemIndex >= 0:\n        self.batchList[editItemIndex] = batchItemInfo\n        self.UpdateBatchDisplay()\n    else:\n        self.batchList.append(batchItemInfo)\n        self.AddToBatchDisplay(batchItemInfo)",
            "def addMaya2EggToBatch(self, editItemIndex=-1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    finput = self.m2e_mayaFileTxt.GetValue()\n    foutput = self.m2e_exportDestTxt.GetValue()\n    if finput == '' or foutput == '':\n        dlg = wx.MessageDialog(self, 'Both an input and output file must be present to add an item to the batch queue', 'ERROR', wx.OK)\n        dlg.ShowModal()\n        dlg.Destroy()\n        return\n    batchItemInfo = {}\n    batchItemInfo['label'] = self.batchItemNameTxt.GetValue()\n    batchItemInfo['cmd'] = 'maya2egg' + self.m2e_mayaVerComboBox.GetStringSelection()\n    batchItemInfo['args'] = self.BuildMaya2EggArgs()\n    batchItemInfo['finput'] = str(finput)\n    batchItemInfo['foutput'] = str(foutput)\n    if editItemIndex >= 0:\n        self.batchList[editItemIndex] = batchItemInfo\n        self.UpdateBatchDisplay()\n    else:\n        self.batchList.append(batchItemInfo)\n        self.AddToBatchDisplay(batchItemInfo)"
        ]
    },
    {
        "func_name": "addEgg2BamToBatch",
        "original": "def addEgg2BamToBatch(self, editItemIndex=-1):\n    finput = ''\n    if self.e2b_useCurrEggChk.GetValue():\n        finput = self.m2e_exportDestTxt.GetValue()\n    else:\n        finput = self.e2b_eggFileTxt.GetValue()\n    foutput = self.e2b_exportDestTxt.GetValue()\n    if finput == '' or foutput == '':\n        dlg = wx.MessageDialog(self, 'Both an input and output file must be present to add an item to the batch queue', 'ERROR', wx.OK)\n        dlg.ShowModal()\n        dlg.Destroy()\n        return\n    batchItemInfo = {}\n    batchItemInfo['label'] = self.batchItemNameTxt.GetValue()\n    batchItemInfo['cmd'] = 'egg2bam'\n    batchItemInfo['args'] = self.BuildEgg2BamArgs()\n    batchItemInfo['finput'] = str(finput)\n    batchItemInfo['foutput'] = str(foutput)\n    if editItemIndex >= 0:\n        self.batchList[editItemIndex] = batchItemInfo\n        self.UpdateBatchDisplay()\n    else:\n        self.batchList.append(batchItemInfo)\n        self.AddToBatchDisplay(batchItemInfo)",
        "mutated": [
            "def addEgg2BamToBatch(self, editItemIndex=-1):\n    if False:\n        i = 10\n    finput = ''\n    if self.e2b_useCurrEggChk.GetValue():\n        finput = self.m2e_exportDestTxt.GetValue()\n    else:\n        finput = self.e2b_eggFileTxt.GetValue()\n    foutput = self.e2b_exportDestTxt.GetValue()\n    if finput == '' or foutput == '':\n        dlg = wx.MessageDialog(self, 'Both an input and output file must be present to add an item to the batch queue', 'ERROR', wx.OK)\n        dlg.ShowModal()\n        dlg.Destroy()\n        return\n    batchItemInfo = {}\n    batchItemInfo['label'] = self.batchItemNameTxt.GetValue()\n    batchItemInfo['cmd'] = 'egg2bam'\n    batchItemInfo['args'] = self.BuildEgg2BamArgs()\n    batchItemInfo['finput'] = str(finput)\n    batchItemInfo['foutput'] = str(foutput)\n    if editItemIndex >= 0:\n        self.batchList[editItemIndex] = batchItemInfo\n        self.UpdateBatchDisplay()\n    else:\n        self.batchList.append(batchItemInfo)\n        self.AddToBatchDisplay(batchItemInfo)",
            "def addEgg2BamToBatch(self, editItemIndex=-1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    finput = ''\n    if self.e2b_useCurrEggChk.GetValue():\n        finput = self.m2e_exportDestTxt.GetValue()\n    else:\n        finput = self.e2b_eggFileTxt.GetValue()\n    foutput = self.e2b_exportDestTxt.GetValue()\n    if finput == '' or foutput == '':\n        dlg = wx.MessageDialog(self, 'Both an input and output file must be present to add an item to the batch queue', 'ERROR', wx.OK)\n        dlg.ShowModal()\n        dlg.Destroy()\n        return\n    batchItemInfo = {}\n    batchItemInfo['label'] = self.batchItemNameTxt.GetValue()\n    batchItemInfo['cmd'] = 'egg2bam'\n    batchItemInfo['args'] = self.BuildEgg2BamArgs()\n    batchItemInfo['finput'] = str(finput)\n    batchItemInfo['foutput'] = str(foutput)\n    if editItemIndex >= 0:\n        self.batchList[editItemIndex] = batchItemInfo\n        self.UpdateBatchDisplay()\n    else:\n        self.batchList.append(batchItemInfo)\n        self.AddToBatchDisplay(batchItemInfo)",
            "def addEgg2BamToBatch(self, editItemIndex=-1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    finput = ''\n    if self.e2b_useCurrEggChk.GetValue():\n        finput = self.m2e_exportDestTxt.GetValue()\n    else:\n        finput = self.e2b_eggFileTxt.GetValue()\n    foutput = self.e2b_exportDestTxt.GetValue()\n    if finput == '' or foutput == '':\n        dlg = wx.MessageDialog(self, 'Both an input and output file must be present to add an item to the batch queue', 'ERROR', wx.OK)\n        dlg.ShowModal()\n        dlg.Destroy()\n        return\n    batchItemInfo = {}\n    batchItemInfo['label'] = self.batchItemNameTxt.GetValue()\n    batchItemInfo['cmd'] = 'egg2bam'\n    batchItemInfo['args'] = self.BuildEgg2BamArgs()\n    batchItemInfo['finput'] = str(finput)\n    batchItemInfo['foutput'] = str(foutput)\n    if editItemIndex >= 0:\n        self.batchList[editItemIndex] = batchItemInfo\n        self.UpdateBatchDisplay()\n    else:\n        self.batchList.append(batchItemInfo)\n        self.AddToBatchDisplay(batchItemInfo)",
            "def addEgg2BamToBatch(self, editItemIndex=-1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    finput = ''\n    if self.e2b_useCurrEggChk.GetValue():\n        finput = self.m2e_exportDestTxt.GetValue()\n    else:\n        finput = self.e2b_eggFileTxt.GetValue()\n    foutput = self.e2b_exportDestTxt.GetValue()\n    if finput == '' or foutput == '':\n        dlg = wx.MessageDialog(self, 'Both an input and output file must be present to add an item to the batch queue', 'ERROR', wx.OK)\n        dlg.ShowModal()\n        dlg.Destroy()\n        return\n    batchItemInfo = {}\n    batchItemInfo['label'] = self.batchItemNameTxt.GetValue()\n    batchItemInfo['cmd'] = 'egg2bam'\n    batchItemInfo['args'] = self.BuildEgg2BamArgs()\n    batchItemInfo['finput'] = str(finput)\n    batchItemInfo['foutput'] = str(foutput)\n    if editItemIndex >= 0:\n        self.batchList[editItemIndex] = batchItemInfo\n        self.UpdateBatchDisplay()\n    else:\n        self.batchList.append(batchItemInfo)\n        self.AddToBatchDisplay(batchItemInfo)",
            "def addEgg2BamToBatch(self, editItemIndex=-1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    finput = ''\n    if self.e2b_useCurrEggChk.GetValue():\n        finput = self.m2e_exportDestTxt.GetValue()\n    else:\n        finput = self.e2b_eggFileTxt.GetValue()\n    foutput = self.e2b_exportDestTxt.GetValue()\n    if finput == '' or foutput == '':\n        dlg = wx.MessageDialog(self, 'Both an input and output file must be present to add an item to the batch queue', 'ERROR', wx.OK)\n        dlg.ShowModal()\n        dlg.Destroy()\n        return\n    batchItemInfo = {}\n    batchItemInfo['label'] = self.batchItemNameTxt.GetValue()\n    batchItemInfo['cmd'] = 'egg2bam'\n    batchItemInfo['args'] = self.BuildEgg2BamArgs()\n    batchItemInfo['finput'] = str(finput)\n    batchItemInfo['foutput'] = str(foutput)\n    if editItemIndex >= 0:\n        self.batchList[editItemIndex] = batchItemInfo\n        self.UpdateBatchDisplay()\n    else:\n        self.batchList.append(batchItemInfo)\n        self.AddToBatchDisplay(batchItemInfo)"
        ]
    },
    {
        "func_name": "addEggRenameToBatch",
        "original": "def addEggRenameToBatch(self, editItemIndex=-1):\n    finput = ''\n    if len(self.rename_eggList) == 0:\n        dlg = wx.MessageDialog(self, 'At least one input egg file must be present to add an item to the batch queue', 'ERROR', wx.OK)\n        dlg.ShowModal()\n        dlg.Destroy()\n        return\n    for file in self.rename_eggList:\n        finput += str(file) + '|'\n    foutput = self.rename_exportFileTxt.GetValue()\n    if not self.rename_exportInPlaceChk.GetValue():\n        if not self.rename_exportFileTxt.GetValue() and (not self.rename_exportDirTxt.GetValue()):\n            dlg = wx.MessageDialog(self, 'Export destination must be specified to add an item to the batch queue', 'ERROR', wx.OK)\n            dlg.ShowModal()\n            dlg.Destroy()\n            return\n    batchItemInfo = {}\n    batchItemInfo['label'] = self.batchItemNameTxt.GetValue()\n    batchItemInfo['cmd'] = 'egg-rename'\n    batchItemInfo['args'] = self.BuildEggRenameArgs()\n    batchItemInfo['finput'] = str(finput)\n    batchItemInfo['foutput'] = str(foutput)\n    if editItemIndex >= 0:\n        self.batchList[editItemIndex] = batchItemInfo\n        self.UpdateBatchDisplay()\n    else:\n        self.batchList.append(batchItemInfo)\n        self.AddToBatchDisplay(batchItemInfo)",
        "mutated": [
            "def addEggRenameToBatch(self, editItemIndex=-1):\n    if False:\n        i = 10\n    finput = ''\n    if len(self.rename_eggList) == 0:\n        dlg = wx.MessageDialog(self, 'At least one input egg file must be present to add an item to the batch queue', 'ERROR', wx.OK)\n        dlg.ShowModal()\n        dlg.Destroy()\n        return\n    for file in self.rename_eggList:\n        finput += str(file) + '|'\n    foutput = self.rename_exportFileTxt.GetValue()\n    if not self.rename_exportInPlaceChk.GetValue():\n        if not self.rename_exportFileTxt.GetValue() and (not self.rename_exportDirTxt.GetValue()):\n            dlg = wx.MessageDialog(self, 'Export destination must be specified to add an item to the batch queue', 'ERROR', wx.OK)\n            dlg.ShowModal()\n            dlg.Destroy()\n            return\n    batchItemInfo = {}\n    batchItemInfo['label'] = self.batchItemNameTxt.GetValue()\n    batchItemInfo['cmd'] = 'egg-rename'\n    batchItemInfo['args'] = self.BuildEggRenameArgs()\n    batchItemInfo['finput'] = str(finput)\n    batchItemInfo['foutput'] = str(foutput)\n    if editItemIndex >= 0:\n        self.batchList[editItemIndex] = batchItemInfo\n        self.UpdateBatchDisplay()\n    else:\n        self.batchList.append(batchItemInfo)\n        self.AddToBatchDisplay(batchItemInfo)",
            "def addEggRenameToBatch(self, editItemIndex=-1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    finput = ''\n    if len(self.rename_eggList) == 0:\n        dlg = wx.MessageDialog(self, 'At least one input egg file must be present to add an item to the batch queue', 'ERROR', wx.OK)\n        dlg.ShowModal()\n        dlg.Destroy()\n        return\n    for file in self.rename_eggList:\n        finput += str(file) + '|'\n    foutput = self.rename_exportFileTxt.GetValue()\n    if not self.rename_exportInPlaceChk.GetValue():\n        if not self.rename_exportFileTxt.GetValue() and (not self.rename_exportDirTxt.GetValue()):\n            dlg = wx.MessageDialog(self, 'Export destination must be specified to add an item to the batch queue', 'ERROR', wx.OK)\n            dlg.ShowModal()\n            dlg.Destroy()\n            return\n    batchItemInfo = {}\n    batchItemInfo['label'] = self.batchItemNameTxt.GetValue()\n    batchItemInfo['cmd'] = 'egg-rename'\n    batchItemInfo['args'] = self.BuildEggRenameArgs()\n    batchItemInfo['finput'] = str(finput)\n    batchItemInfo['foutput'] = str(foutput)\n    if editItemIndex >= 0:\n        self.batchList[editItemIndex] = batchItemInfo\n        self.UpdateBatchDisplay()\n    else:\n        self.batchList.append(batchItemInfo)\n        self.AddToBatchDisplay(batchItemInfo)",
            "def addEggRenameToBatch(self, editItemIndex=-1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    finput = ''\n    if len(self.rename_eggList) == 0:\n        dlg = wx.MessageDialog(self, 'At least one input egg file must be present to add an item to the batch queue', 'ERROR', wx.OK)\n        dlg.ShowModal()\n        dlg.Destroy()\n        return\n    for file in self.rename_eggList:\n        finput += str(file) + '|'\n    foutput = self.rename_exportFileTxt.GetValue()\n    if not self.rename_exportInPlaceChk.GetValue():\n        if not self.rename_exportFileTxt.GetValue() and (not self.rename_exportDirTxt.GetValue()):\n            dlg = wx.MessageDialog(self, 'Export destination must be specified to add an item to the batch queue', 'ERROR', wx.OK)\n            dlg.ShowModal()\n            dlg.Destroy()\n            return\n    batchItemInfo = {}\n    batchItemInfo['label'] = self.batchItemNameTxt.GetValue()\n    batchItemInfo['cmd'] = 'egg-rename'\n    batchItemInfo['args'] = self.BuildEggRenameArgs()\n    batchItemInfo['finput'] = str(finput)\n    batchItemInfo['foutput'] = str(foutput)\n    if editItemIndex >= 0:\n        self.batchList[editItemIndex] = batchItemInfo\n        self.UpdateBatchDisplay()\n    else:\n        self.batchList.append(batchItemInfo)\n        self.AddToBatchDisplay(batchItemInfo)",
            "def addEggRenameToBatch(self, editItemIndex=-1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    finput = ''\n    if len(self.rename_eggList) == 0:\n        dlg = wx.MessageDialog(self, 'At least one input egg file must be present to add an item to the batch queue', 'ERROR', wx.OK)\n        dlg.ShowModal()\n        dlg.Destroy()\n        return\n    for file in self.rename_eggList:\n        finput += str(file) + '|'\n    foutput = self.rename_exportFileTxt.GetValue()\n    if not self.rename_exportInPlaceChk.GetValue():\n        if not self.rename_exportFileTxt.GetValue() and (not self.rename_exportDirTxt.GetValue()):\n            dlg = wx.MessageDialog(self, 'Export destination must be specified to add an item to the batch queue', 'ERROR', wx.OK)\n            dlg.ShowModal()\n            dlg.Destroy()\n            return\n    batchItemInfo = {}\n    batchItemInfo['label'] = self.batchItemNameTxt.GetValue()\n    batchItemInfo['cmd'] = 'egg-rename'\n    batchItemInfo['args'] = self.BuildEggRenameArgs()\n    batchItemInfo['finput'] = str(finput)\n    batchItemInfo['foutput'] = str(foutput)\n    if editItemIndex >= 0:\n        self.batchList[editItemIndex] = batchItemInfo\n        self.UpdateBatchDisplay()\n    else:\n        self.batchList.append(batchItemInfo)\n        self.AddToBatchDisplay(batchItemInfo)",
            "def addEggRenameToBatch(self, editItemIndex=-1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    finput = ''\n    if len(self.rename_eggList) == 0:\n        dlg = wx.MessageDialog(self, 'At least one input egg file must be present to add an item to the batch queue', 'ERROR', wx.OK)\n        dlg.ShowModal()\n        dlg.Destroy()\n        return\n    for file in self.rename_eggList:\n        finput += str(file) + '|'\n    foutput = self.rename_exportFileTxt.GetValue()\n    if not self.rename_exportInPlaceChk.GetValue():\n        if not self.rename_exportFileTxt.GetValue() and (not self.rename_exportDirTxt.GetValue()):\n            dlg = wx.MessageDialog(self, 'Export destination must be specified to add an item to the batch queue', 'ERROR', wx.OK)\n            dlg.ShowModal()\n            dlg.Destroy()\n            return\n    batchItemInfo = {}\n    batchItemInfo['label'] = self.batchItemNameTxt.GetValue()\n    batchItemInfo['cmd'] = 'egg-rename'\n    batchItemInfo['args'] = self.BuildEggRenameArgs()\n    batchItemInfo['finput'] = str(finput)\n    batchItemInfo['foutput'] = str(foutput)\n    if editItemIndex >= 0:\n        self.batchList[editItemIndex] = batchItemInfo\n        self.UpdateBatchDisplay()\n    else:\n        self.batchList.append(batchItemInfo)\n        self.AddToBatchDisplay(batchItemInfo)"
        ]
    },
    {
        "func_name": "addEggOptcharToBatch",
        "original": "def addEggOptcharToBatch(self, editItemIndex=-1):\n    finput = ''\n    if len(self.optchar_eggList) == 0:\n        dlg = wx.MessageDialog(self, 'At least one input egg file must be present to add an item to the batch queue', 'ERROR', wx.OK)\n        dlg.ShowModal()\n        dlg.Destroy()\n        return\n    for file in self.optchar_eggList:\n        finput += str(file) + '|'\n    foutput = self.optchar_exportFileTxt.GetValue()\n    if not self.optchar_exportInPlaceChk.GetValue():\n        if not self.optchar_exportFileTxt.GetValue() and (not self.optchar_exportDirTxt.GetValue()):\n            dlg = wx.MessageDialog(self, 'Export destination must be specified to add an item to the batch queue', 'ERROR', wx.OK)\n            dlg.ShowModal()\n            dlg.Destroy()\n            return\n    batchItemInfo = {}\n    batchItemInfo['label'] = self.batchItemNameTxt.GetValue()\n    batchItemInfo['cmd'] = 'egg-optchar'\n    batchItemInfo['args'] = self.BuildEggOptcharArgs()\n    batchItemInfo['finput'] = str(finput)\n    batchItemInfo['foutput'] = str(foutput)\n    if editItemIndex >= 0:\n        self.batchList[editItemIndex] = batchItemInfo\n        self.UpdateBatchDisplay()\n    else:\n        self.batchList.append(batchItemInfo)\n        self.AddToBatchDisplay(batchItemInfo)",
        "mutated": [
            "def addEggOptcharToBatch(self, editItemIndex=-1):\n    if False:\n        i = 10\n    finput = ''\n    if len(self.optchar_eggList) == 0:\n        dlg = wx.MessageDialog(self, 'At least one input egg file must be present to add an item to the batch queue', 'ERROR', wx.OK)\n        dlg.ShowModal()\n        dlg.Destroy()\n        return\n    for file in self.optchar_eggList:\n        finput += str(file) + '|'\n    foutput = self.optchar_exportFileTxt.GetValue()\n    if not self.optchar_exportInPlaceChk.GetValue():\n        if not self.optchar_exportFileTxt.GetValue() and (not self.optchar_exportDirTxt.GetValue()):\n            dlg = wx.MessageDialog(self, 'Export destination must be specified to add an item to the batch queue', 'ERROR', wx.OK)\n            dlg.ShowModal()\n            dlg.Destroy()\n            return\n    batchItemInfo = {}\n    batchItemInfo['label'] = self.batchItemNameTxt.GetValue()\n    batchItemInfo['cmd'] = 'egg-optchar'\n    batchItemInfo['args'] = self.BuildEggOptcharArgs()\n    batchItemInfo['finput'] = str(finput)\n    batchItemInfo['foutput'] = str(foutput)\n    if editItemIndex >= 0:\n        self.batchList[editItemIndex] = batchItemInfo\n        self.UpdateBatchDisplay()\n    else:\n        self.batchList.append(batchItemInfo)\n        self.AddToBatchDisplay(batchItemInfo)",
            "def addEggOptcharToBatch(self, editItemIndex=-1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    finput = ''\n    if len(self.optchar_eggList) == 0:\n        dlg = wx.MessageDialog(self, 'At least one input egg file must be present to add an item to the batch queue', 'ERROR', wx.OK)\n        dlg.ShowModal()\n        dlg.Destroy()\n        return\n    for file in self.optchar_eggList:\n        finput += str(file) + '|'\n    foutput = self.optchar_exportFileTxt.GetValue()\n    if not self.optchar_exportInPlaceChk.GetValue():\n        if not self.optchar_exportFileTxt.GetValue() and (not self.optchar_exportDirTxt.GetValue()):\n            dlg = wx.MessageDialog(self, 'Export destination must be specified to add an item to the batch queue', 'ERROR', wx.OK)\n            dlg.ShowModal()\n            dlg.Destroy()\n            return\n    batchItemInfo = {}\n    batchItemInfo['label'] = self.batchItemNameTxt.GetValue()\n    batchItemInfo['cmd'] = 'egg-optchar'\n    batchItemInfo['args'] = self.BuildEggOptcharArgs()\n    batchItemInfo['finput'] = str(finput)\n    batchItemInfo['foutput'] = str(foutput)\n    if editItemIndex >= 0:\n        self.batchList[editItemIndex] = batchItemInfo\n        self.UpdateBatchDisplay()\n    else:\n        self.batchList.append(batchItemInfo)\n        self.AddToBatchDisplay(batchItemInfo)",
            "def addEggOptcharToBatch(self, editItemIndex=-1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    finput = ''\n    if len(self.optchar_eggList) == 0:\n        dlg = wx.MessageDialog(self, 'At least one input egg file must be present to add an item to the batch queue', 'ERROR', wx.OK)\n        dlg.ShowModal()\n        dlg.Destroy()\n        return\n    for file in self.optchar_eggList:\n        finput += str(file) + '|'\n    foutput = self.optchar_exportFileTxt.GetValue()\n    if not self.optchar_exportInPlaceChk.GetValue():\n        if not self.optchar_exportFileTxt.GetValue() and (not self.optchar_exportDirTxt.GetValue()):\n            dlg = wx.MessageDialog(self, 'Export destination must be specified to add an item to the batch queue', 'ERROR', wx.OK)\n            dlg.ShowModal()\n            dlg.Destroy()\n            return\n    batchItemInfo = {}\n    batchItemInfo['label'] = self.batchItemNameTxt.GetValue()\n    batchItemInfo['cmd'] = 'egg-optchar'\n    batchItemInfo['args'] = self.BuildEggOptcharArgs()\n    batchItemInfo['finput'] = str(finput)\n    batchItemInfo['foutput'] = str(foutput)\n    if editItemIndex >= 0:\n        self.batchList[editItemIndex] = batchItemInfo\n        self.UpdateBatchDisplay()\n    else:\n        self.batchList.append(batchItemInfo)\n        self.AddToBatchDisplay(batchItemInfo)",
            "def addEggOptcharToBatch(self, editItemIndex=-1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    finput = ''\n    if len(self.optchar_eggList) == 0:\n        dlg = wx.MessageDialog(self, 'At least one input egg file must be present to add an item to the batch queue', 'ERROR', wx.OK)\n        dlg.ShowModal()\n        dlg.Destroy()\n        return\n    for file in self.optchar_eggList:\n        finput += str(file) + '|'\n    foutput = self.optchar_exportFileTxt.GetValue()\n    if not self.optchar_exportInPlaceChk.GetValue():\n        if not self.optchar_exportFileTxt.GetValue() and (not self.optchar_exportDirTxt.GetValue()):\n            dlg = wx.MessageDialog(self, 'Export destination must be specified to add an item to the batch queue', 'ERROR', wx.OK)\n            dlg.ShowModal()\n            dlg.Destroy()\n            return\n    batchItemInfo = {}\n    batchItemInfo['label'] = self.batchItemNameTxt.GetValue()\n    batchItemInfo['cmd'] = 'egg-optchar'\n    batchItemInfo['args'] = self.BuildEggOptcharArgs()\n    batchItemInfo['finput'] = str(finput)\n    batchItemInfo['foutput'] = str(foutput)\n    if editItemIndex >= 0:\n        self.batchList[editItemIndex] = batchItemInfo\n        self.UpdateBatchDisplay()\n    else:\n        self.batchList.append(batchItemInfo)\n        self.AddToBatchDisplay(batchItemInfo)",
            "def addEggOptcharToBatch(self, editItemIndex=-1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    finput = ''\n    if len(self.optchar_eggList) == 0:\n        dlg = wx.MessageDialog(self, 'At least one input egg file must be present to add an item to the batch queue', 'ERROR', wx.OK)\n        dlg.ShowModal()\n        dlg.Destroy()\n        return\n    for file in self.optchar_eggList:\n        finput += str(file) + '|'\n    foutput = self.optchar_exportFileTxt.GetValue()\n    if not self.optchar_exportInPlaceChk.GetValue():\n        if not self.optchar_exportFileTxt.GetValue() and (not self.optchar_exportDirTxt.GetValue()):\n            dlg = wx.MessageDialog(self, 'Export destination must be specified to add an item to the batch queue', 'ERROR', wx.OK)\n            dlg.ShowModal()\n            dlg.Destroy()\n            return\n    batchItemInfo = {}\n    batchItemInfo['label'] = self.batchItemNameTxt.GetValue()\n    batchItemInfo['cmd'] = 'egg-optchar'\n    batchItemInfo['args'] = self.BuildEggOptcharArgs()\n    batchItemInfo['finput'] = str(finput)\n    batchItemInfo['foutput'] = str(foutput)\n    if editItemIndex >= 0:\n        self.batchList[editItemIndex] = batchItemInfo\n        self.UpdateBatchDisplay()\n    else:\n        self.batchList.append(batchItemInfo)\n        self.AddToBatchDisplay(batchItemInfo)"
        ]
    },
    {
        "func_name": "addEggPalettizeToBatch",
        "original": "def addEggPalettizeToBatch(self, editItemIndex=-1):\n    finput = ''\n    if len(self.palettize_eggList) == 0:\n        dlg = wx.MessageDialog(self, 'At least one input egg file must be present to add an item to the batch queue', 'ERROR', wx.OK)\n        dlg.ShowModal()\n        dlg.Destroy()\n        return\n    for file in self.palettize_eggList:\n        finput += str(file) + '|'\n    foutput = self.palettize_exportFileTxt.GetValue()\n    if not self.palettize_exportInPlaceChk.GetValue():\n        if not self.palettize_exportFileTxt.GetValue() and (not self.palettize_exportDirTxt.GetValue()):\n            dlg = wx.MessageDialog(self, 'Export destination must be specified to add an item to the batch queue', 'ERROR', wx.OK)\n            dlg.ShowModal()\n            dlg.Destroy()\n            return\n    if not self.palettize_exportTexTxt.GetValue():\n        dlg = wx.MessageDialog(self, 'Export texture destination folder must be specified to add an item to the batch queue', 'ERROR', wx.OK)\n        dlg.ShowModal()\n        dlg.Destroy()\n        return\n    batchItemInfo = {}\n    batchItemInfo['label'] = self.batchItemNameTxt.GetValue()\n    batchItemInfo['cmd'] = 'egg-palettize'\n    batchItemInfo['args'] = self.BuildEggPalettizeArgs()\n    batchItemInfo['finput'] = str(finput)\n    batchItemInfo['foutput'] = str(foutput)\n    if editItemIndex >= 0:\n        self.batchList[editItemIndex] = batchItemInfo\n        self.UpdateBatchDisplay()\n    else:\n        self.batchList.append(batchItemInfo)\n        self.AddToBatchDisplay(batchItemInfo)",
        "mutated": [
            "def addEggPalettizeToBatch(self, editItemIndex=-1):\n    if False:\n        i = 10\n    finput = ''\n    if len(self.palettize_eggList) == 0:\n        dlg = wx.MessageDialog(self, 'At least one input egg file must be present to add an item to the batch queue', 'ERROR', wx.OK)\n        dlg.ShowModal()\n        dlg.Destroy()\n        return\n    for file in self.palettize_eggList:\n        finput += str(file) + '|'\n    foutput = self.palettize_exportFileTxt.GetValue()\n    if not self.palettize_exportInPlaceChk.GetValue():\n        if not self.palettize_exportFileTxt.GetValue() and (not self.palettize_exportDirTxt.GetValue()):\n            dlg = wx.MessageDialog(self, 'Export destination must be specified to add an item to the batch queue', 'ERROR', wx.OK)\n            dlg.ShowModal()\n            dlg.Destroy()\n            return\n    if not self.palettize_exportTexTxt.GetValue():\n        dlg = wx.MessageDialog(self, 'Export texture destination folder must be specified to add an item to the batch queue', 'ERROR', wx.OK)\n        dlg.ShowModal()\n        dlg.Destroy()\n        return\n    batchItemInfo = {}\n    batchItemInfo['label'] = self.batchItemNameTxt.GetValue()\n    batchItemInfo['cmd'] = 'egg-palettize'\n    batchItemInfo['args'] = self.BuildEggPalettizeArgs()\n    batchItemInfo['finput'] = str(finput)\n    batchItemInfo['foutput'] = str(foutput)\n    if editItemIndex >= 0:\n        self.batchList[editItemIndex] = batchItemInfo\n        self.UpdateBatchDisplay()\n    else:\n        self.batchList.append(batchItemInfo)\n        self.AddToBatchDisplay(batchItemInfo)",
            "def addEggPalettizeToBatch(self, editItemIndex=-1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    finput = ''\n    if len(self.palettize_eggList) == 0:\n        dlg = wx.MessageDialog(self, 'At least one input egg file must be present to add an item to the batch queue', 'ERROR', wx.OK)\n        dlg.ShowModal()\n        dlg.Destroy()\n        return\n    for file in self.palettize_eggList:\n        finput += str(file) + '|'\n    foutput = self.palettize_exportFileTxt.GetValue()\n    if not self.palettize_exportInPlaceChk.GetValue():\n        if not self.palettize_exportFileTxt.GetValue() and (not self.palettize_exportDirTxt.GetValue()):\n            dlg = wx.MessageDialog(self, 'Export destination must be specified to add an item to the batch queue', 'ERROR', wx.OK)\n            dlg.ShowModal()\n            dlg.Destroy()\n            return\n    if not self.palettize_exportTexTxt.GetValue():\n        dlg = wx.MessageDialog(self, 'Export texture destination folder must be specified to add an item to the batch queue', 'ERROR', wx.OK)\n        dlg.ShowModal()\n        dlg.Destroy()\n        return\n    batchItemInfo = {}\n    batchItemInfo['label'] = self.batchItemNameTxt.GetValue()\n    batchItemInfo['cmd'] = 'egg-palettize'\n    batchItemInfo['args'] = self.BuildEggPalettizeArgs()\n    batchItemInfo['finput'] = str(finput)\n    batchItemInfo['foutput'] = str(foutput)\n    if editItemIndex >= 0:\n        self.batchList[editItemIndex] = batchItemInfo\n        self.UpdateBatchDisplay()\n    else:\n        self.batchList.append(batchItemInfo)\n        self.AddToBatchDisplay(batchItemInfo)",
            "def addEggPalettizeToBatch(self, editItemIndex=-1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    finput = ''\n    if len(self.palettize_eggList) == 0:\n        dlg = wx.MessageDialog(self, 'At least one input egg file must be present to add an item to the batch queue', 'ERROR', wx.OK)\n        dlg.ShowModal()\n        dlg.Destroy()\n        return\n    for file in self.palettize_eggList:\n        finput += str(file) + '|'\n    foutput = self.palettize_exportFileTxt.GetValue()\n    if not self.palettize_exportInPlaceChk.GetValue():\n        if not self.palettize_exportFileTxt.GetValue() and (not self.palettize_exportDirTxt.GetValue()):\n            dlg = wx.MessageDialog(self, 'Export destination must be specified to add an item to the batch queue', 'ERROR', wx.OK)\n            dlg.ShowModal()\n            dlg.Destroy()\n            return\n    if not self.palettize_exportTexTxt.GetValue():\n        dlg = wx.MessageDialog(self, 'Export texture destination folder must be specified to add an item to the batch queue', 'ERROR', wx.OK)\n        dlg.ShowModal()\n        dlg.Destroy()\n        return\n    batchItemInfo = {}\n    batchItemInfo['label'] = self.batchItemNameTxt.GetValue()\n    batchItemInfo['cmd'] = 'egg-palettize'\n    batchItemInfo['args'] = self.BuildEggPalettizeArgs()\n    batchItemInfo['finput'] = str(finput)\n    batchItemInfo['foutput'] = str(foutput)\n    if editItemIndex >= 0:\n        self.batchList[editItemIndex] = batchItemInfo\n        self.UpdateBatchDisplay()\n    else:\n        self.batchList.append(batchItemInfo)\n        self.AddToBatchDisplay(batchItemInfo)",
            "def addEggPalettizeToBatch(self, editItemIndex=-1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    finput = ''\n    if len(self.palettize_eggList) == 0:\n        dlg = wx.MessageDialog(self, 'At least one input egg file must be present to add an item to the batch queue', 'ERROR', wx.OK)\n        dlg.ShowModal()\n        dlg.Destroy()\n        return\n    for file in self.palettize_eggList:\n        finput += str(file) + '|'\n    foutput = self.palettize_exportFileTxt.GetValue()\n    if not self.palettize_exportInPlaceChk.GetValue():\n        if not self.palettize_exportFileTxt.GetValue() and (not self.palettize_exportDirTxt.GetValue()):\n            dlg = wx.MessageDialog(self, 'Export destination must be specified to add an item to the batch queue', 'ERROR', wx.OK)\n            dlg.ShowModal()\n            dlg.Destroy()\n            return\n    if not self.palettize_exportTexTxt.GetValue():\n        dlg = wx.MessageDialog(self, 'Export texture destination folder must be specified to add an item to the batch queue', 'ERROR', wx.OK)\n        dlg.ShowModal()\n        dlg.Destroy()\n        return\n    batchItemInfo = {}\n    batchItemInfo['label'] = self.batchItemNameTxt.GetValue()\n    batchItemInfo['cmd'] = 'egg-palettize'\n    batchItemInfo['args'] = self.BuildEggPalettizeArgs()\n    batchItemInfo['finput'] = str(finput)\n    batchItemInfo['foutput'] = str(foutput)\n    if editItemIndex >= 0:\n        self.batchList[editItemIndex] = batchItemInfo\n        self.UpdateBatchDisplay()\n    else:\n        self.batchList.append(batchItemInfo)\n        self.AddToBatchDisplay(batchItemInfo)",
            "def addEggPalettizeToBatch(self, editItemIndex=-1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    finput = ''\n    if len(self.palettize_eggList) == 0:\n        dlg = wx.MessageDialog(self, 'At least one input egg file must be present to add an item to the batch queue', 'ERROR', wx.OK)\n        dlg.ShowModal()\n        dlg.Destroy()\n        return\n    for file in self.palettize_eggList:\n        finput += str(file) + '|'\n    foutput = self.palettize_exportFileTxt.GetValue()\n    if not self.palettize_exportInPlaceChk.GetValue():\n        if not self.palettize_exportFileTxt.GetValue() and (not self.palettize_exportDirTxt.GetValue()):\n            dlg = wx.MessageDialog(self, 'Export destination must be specified to add an item to the batch queue', 'ERROR', wx.OK)\n            dlg.ShowModal()\n            dlg.Destroy()\n            return\n    if not self.palettize_exportTexTxt.GetValue():\n        dlg = wx.MessageDialog(self, 'Export texture destination folder must be specified to add an item to the batch queue', 'ERROR', wx.OK)\n        dlg.ShowModal()\n        dlg.Destroy()\n        return\n    batchItemInfo = {}\n    batchItemInfo['label'] = self.batchItemNameTxt.GetValue()\n    batchItemInfo['cmd'] = 'egg-palettize'\n    batchItemInfo['args'] = self.BuildEggPalettizeArgs()\n    batchItemInfo['finput'] = str(finput)\n    batchItemInfo['foutput'] = str(foutput)\n    if editItemIndex >= 0:\n        self.batchList[editItemIndex] = batchItemInfo\n        self.UpdateBatchDisplay()\n    else:\n        self.batchList.append(batchItemInfo)\n        self.AddToBatchDisplay(batchItemInfo)"
        ]
    },
    {
        "func_name": "AddToBatchDisplay",
        "original": "def AddToBatchDisplay(self, batchItemInfo):\n    label = self.GetBatchItemLabel(batchItemInfo)\n    self.SetStatusText('Batch item added: ' + label)\n    self.batchTree.AppendItem(self.treeRoot, str(len(self.batchList)) + ' ' + label)\n    self.batchTree.ExpandAll()",
        "mutated": [
            "def AddToBatchDisplay(self, batchItemInfo):\n    if False:\n        i = 10\n    label = self.GetBatchItemLabel(batchItemInfo)\n    self.SetStatusText('Batch item added: ' + label)\n    self.batchTree.AppendItem(self.treeRoot, str(len(self.batchList)) + ' ' + label)\n    self.batchTree.ExpandAll()",
            "def AddToBatchDisplay(self, batchItemInfo):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    label = self.GetBatchItemLabel(batchItemInfo)\n    self.SetStatusText('Batch item added: ' + label)\n    self.batchTree.AppendItem(self.treeRoot, str(len(self.batchList)) + ' ' + label)\n    self.batchTree.ExpandAll()",
            "def AddToBatchDisplay(self, batchItemInfo):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    label = self.GetBatchItemLabel(batchItemInfo)\n    self.SetStatusText('Batch item added: ' + label)\n    self.batchTree.AppendItem(self.treeRoot, str(len(self.batchList)) + ' ' + label)\n    self.batchTree.ExpandAll()",
            "def AddToBatchDisplay(self, batchItemInfo):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    label = self.GetBatchItemLabel(batchItemInfo)\n    self.SetStatusText('Batch item added: ' + label)\n    self.batchTree.AppendItem(self.treeRoot, str(len(self.batchList)) + ' ' + label)\n    self.batchTree.ExpandAll()",
            "def AddToBatchDisplay(self, batchItemInfo):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    label = self.GetBatchItemLabel(batchItemInfo)\n    self.SetStatusText('Batch item added: ' + label)\n    self.batchTree.AppendItem(self.treeRoot, str(len(self.batchList)) + ' ' + label)\n    self.batchTree.ExpandAll()"
        ]
    },
    {
        "func_name": "GetBatchItemLabel",
        "original": "def GetBatchItemLabel(self, batchItemInfo):\n    label = ''\n    if batchItemInfo['label'] == '':\n        label = self.BuildCommand(batchItemInfo)\n    else:\n        label = batchItemInfo['cmd'] + ' | ' + batchItemInfo['label']\n    return label",
        "mutated": [
            "def GetBatchItemLabel(self, batchItemInfo):\n    if False:\n        i = 10\n    label = ''\n    if batchItemInfo['label'] == '':\n        label = self.BuildCommand(batchItemInfo)\n    else:\n        label = batchItemInfo['cmd'] + ' | ' + batchItemInfo['label']\n    return label",
            "def GetBatchItemLabel(self, batchItemInfo):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    label = ''\n    if batchItemInfo['label'] == '':\n        label = self.BuildCommand(batchItemInfo)\n    else:\n        label = batchItemInfo['cmd'] + ' | ' + batchItemInfo['label']\n    return label",
            "def GetBatchItemLabel(self, batchItemInfo):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    label = ''\n    if batchItemInfo['label'] == '':\n        label = self.BuildCommand(batchItemInfo)\n    else:\n        label = batchItemInfo['cmd'] + ' | ' + batchItemInfo['label']\n    return label",
            "def GetBatchItemLabel(self, batchItemInfo):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    label = ''\n    if batchItemInfo['label'] == '':\n        label = self.BuildCommand(batchItemInfo)\n    else:\n        label = batchItemInfo['cmd'] + ' | ' + batchItemInfo['label']\n    return label",
            "def GetBatchItemLabel(self, batchItemInfo):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    label = ''\n    if batchItemInfo['label'] == '':\n        label = self.BuildCommand(batchItemInfo)\n    else:\n        label = batchItemInfo['cmd'] + ' | ' + batchItemInfo['label']\n    return label"
        ]
    },
    {
        "func_name": "BuildMaya2EggArgs",
        "original": "def BuildMaya2EggArgs(self):\n    args = {}\n    args['a'] = self.m2e_animOptChoice.GetStringSelection()\n    args['ui'] = UNIT_TYPES[self.m2e_mayaUnitsComboBox.GetSelection()]\n    args['uo'] = UNIT_TYPES[self.m2e_pandaUnitsComboBox.GetSelection()]\n    if self.m2e_backfaceChk.GetValue():\n        args['bface'] = None\n    if self.m2e_polygonOutputChk.GetValue():\n        args['p'] = None\n    if self.m2e_tbnallChk.GetValue():\n        args['tbnall'] = None\n    if self.m2e_charNameChk.GetValue():\n        args['cn'] = self.m2e_charNameTxt.GetValue()\n    if self.m2e_subsetsChk.GetValue():\n        args['subset'] = self.m2e_subsetsTxt.GetValue()\n    if self.m2e_subrootsChk.GetValue():\n        args['subroot'] = self.m2e_subrootsTxt.GetValue()\n    if self.m2e_excludesChk.GetValue():\n        args['exclude'] = self.m2e_excludesTxt.GetValue()\n    if self.m2e_startFrameChk.GetValue():\n        args['sf'] = self.m2e_startFrameSpin.GetValue()\n    if self.m2e_endFrameChk.GetValue():\n        args['ef'] = self.m2e_endFrameSpin.GetValue()\n    if self.m2e_frameRateInChk.GetValue():\n        args['fri'] = self.m2e_frameRateInSpin.GetValue()\n    if self.m2e_frameRateOutChk.GetValue():\n        args['fro'] = self.m2e_frameRateOutSpin.GetValue()\n    if self.m2e_copyTexChk.GetValue():\n        args['copytex'] = self.m2e_copyTexPathTxt.GetValue()\n    if self.m2e_legacyShaderChk.GetValue():\n        args['legacy-shader'] = None\n    if self.m2e_pathReplaceChk.GetValue():\n        args['pr'] = self.m2e_pathReplaceTxt.GetValue()\n    return args",
        "mutated": [
            "def BuildMaya2EggArgs(self):\n    if False:\n        i = 10\n    args = {}\n    args['a'] = self.m2e_animOptChoice.GetStringSelection()\n    args['ui'] = UNIT_TYPES[self.m2e_mayaUnitsComboBox.GetSelection()]\n    args['uo'] = UNIT_TYPES[self.m2e_pandaUnitsComboBox.GetSelection()]\n    if self.m2e_backfaceChk.GetValue():\n        args['bface'] = None\n    if self.m2e_polygonOutputChk.GetValue():\n        args['p'] = None\n    if self.m2e_tbnallChk.GetValue():\n        args['tbnall'] = None\n    if self.m2e_charNameChk.GetValue():\n        args['cn'] = self.m2e_charNameTxt.GetValue()\n    if self.m2e_subsetsChk.GetValue():\n        args['subset'] = self.m2e_subsetsTxt.GetValue()\n    if self.m2e_subrootsChk.GetValue():\n        args['subroot'] = self.m2e_subrootsTxt.GetValue()\n    if self.m2e_excludesChk.GetValue():\n        args['exclude'] = self.m2e_excludesTxt.GetValue()\n    if self.m2e_startFrameChk.GetValue():\n        args['sf'] = self.m2e_startFrameSpin.GetValue()\n    if self.m2e_endFrameChk.GetValue():\n        args['ef'] = self.m2e_endFrameSpin.GetValue()\n    if self.m2e_frameRateInChk.GetValue():\n        args['fri'] = self.m2e_frameRateInSpin.GetValue()\n    if self.m2e_frameRateOutChk.GetValue():\n        args['fro'] = self.m2e_frameRateOutSpin.GetValue()\n    if self.m2e_copyTexChk.GetValue():\n        args['copytex'] = self.m2e_copyTexPathTxt.GetValue()\n    if self.m2e_legacyShaderChk.GetValue():\n        args['legacy-shader'] = None\n    if self.m2e_pathReplaceChk.GetValue():\n        args['pr'] = self.m2e_pathReplaceTxt.GetValue()\n    return args",
            "def BuildMaya2EggArgs(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    args = {}\n    args['a'] = self.m2e_animOptChoice.GetStringSelection()\n    args['ui'] = UNIT_TYPES[self.m2e_mayaUnitsComboBox.GetSelection()]\n    args['uo'] = UNIT_TYPES[self.m2e_pandaUnitsComboBox.GetSelection()]\n    if self.m2e_backfaceChk.GetValue():\n        args['bface'] = None\n    if self.m2e_polygonOutputChk.GetValue():\n        args['p'] = None\n    if self.m2e_tbnallChk.GetValue():\n        args['tbnall'] = None\n    if self.m2e_charNameChk.GetValue():\n        args['cn'] = self.m2e_charNameTxt.GetValue()\n    if self.m2e_subsetsChk.GetValue():\n        args['subset'] = self.m2e_subsetsTxt.GetValue()\n    if self.m2e_subrootsChk.GetValue():\n        args['subroot'] = self.m2e_subrootsTxt.GetValue()\n    if self.m2e_excludesChk.GetValue():\n        args['exclude'] = self.m2e_excludesTxt.GetValue()\n    if self.m2e_startFrameChk.GetValue():\n        args['sf'] = self.m2e_startFrameSpin.GetValue()\n    if self.m2e_endFrameChk.GetValue():\n        args['ef'] = self.m2e_endFrameSpin.GetValue()\n    if self.m2e_frameRateInChk.GetValue():\n        args['fri'] = self.m2e_frameRateInSpin.GetValue()\n    if self.m2e_frameRateOutChk.GetValue():\n        args['fro'] = self.m2e_frameRateOutSpin.GetValue()\n    if self.m2e_copyTexChk.GetValue():\n        args['copytex'] = self.m2e_copyTexPathTxt.GetValue()\n    if self.m2e_legacyShaderChk.GetValue():\n        args['legacy-shader'] = None\n    if self.m2e_pathReplaceChk.GetValue():\n        args['pr'] = self.m2e_pathReplaceTxt.GetValue()\n    return args",
            "def BuildMaya2EggArgs(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    args = {}\n    args['a'] = self.m2e_animOptChoice.GetStringSelection()\n    args['ui'] = UNIT_TYPES[self.m2e_mayaUnitsComboBox.GetSelection()]\n    args['uo'] = UNIT_TYPES[self.m2e_pandaUnitsComboBox.GetSelection()]\n    if self.m2e_backfaceChk.GetValue():\n        args['bface'] = None\n    if self.m2e_polygonOutputChk.GetValue():\n        args['p'] = None\n    if self.m2e_tbnallChk.GetValue():\n        args['tbnall'] = None\n    if self.m2e_charNameChk.GetValue():\n        args['cn'] = self.m2e_charNameTxt.GetValue()\n    if self.m2e_subsetsChk.GetValue():\n        args['subset'] = self.m2e_subsetsTxt.GetValue()\n    if self.m2e_subrootsChk.GetValue():\n        args['subroot'] = self.m2e_subrootsTxt.GetValue()\n    if self.m2e_excludesChk.GetValue():\n        args['exclude'] = self.m2e_excludesTxt.GetValue()\n    if self.m2e_startFrameChk.GetValue():\n        args['sf'] = self.m2e_startFrameSpin.GetValue()\n    if self.m2e_endFrameChk.GetValue():\n        args['ef'] = self.m2e_endFrameSpin.GetValue()\n    if self.m2e_frameRateInChk.GetValue():\n        args['fri'] = self.m2e_frameRateInSpin.GetValue()\n    if self.m2e_frameRateOutChk.GetValue():\n        args['fro'] = self.m2e_frameRateOutSpin.GetValue()\n    if self.m2e_copyTexChk.GetValue():\n        args['copytex'] = self.m2e_copyTexPathTxt.GetValue()\n    if self.m2e_legacyShaderChk.GetValue():\n        args['legacy-shader'] = None\n    if self.m2e_pathReplaceChk.GetValue():\n        args['pr'] = self.m2e_pathReplaceTxt.GetValue()\n    return args",
            "def BuildMaya2EggArgs(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    args = {}\n    args['a'] = self.m2e_animOptChoice.GetStringSelection()\n    args['ui'] = UNIT_TYPES[self.m2e_mayaUnitsComboBox.GetSelection()]\n    args['uo'] = UNIT_TYPES[self.m2e_pandaUnitsComboBox.GetSelection()]\n    if self.m2e_backfaceChk.GetValue():\n        args['bface'] = None\n    if self.m2e_polygonOutputChk.GetValue():\n        args['p'] = None\n    if self.m2e_tbnallChk.GetValue():\n        args['tbnall'] = None\n    if self.m2e_charNameChk.GetValue():\n        args['cn'] = self.m2e_charNameTxt.GetValue()\n    if self.m2e_subsetsChk.GetValue():\n        args['subset'] = self.m2e_subsetsTxt.GetValue()\n    if self.m2e_subrootsChk.GetValue():\n        args['subroot'] = self.m2e_subrootsTxt.GetValue()\n    if self.m2e_excludesChk.GetValue():\n        args['exclude'] = self.m2e_excludesTxt.GetValue()\n    if self.m2e_startFrameChk.GetValue():\n        args['sf'] = self.m2e_startFrameSpin.GetValue()\n    if self.m2e_endFrameChk.GetValue():\n        args['ef'] = self.m2e_endFrameSpin.GetValue()\n    if self.m2e_frameRateInChk.GetValue():\n        args['fri'] = self.m2e_frameRateInSpin.GetValue()\n    if self.m2e_frameRateOutChk.GetValue():\n        args['fro'] = self.m2e_frameRateOutSpin.GetValue()\n    if self.m2e_copyTexChk.GetValue():\n        args['copytex'] = self.m2e_copyTexPathTxt.GetValue()\n    if self.m2e_legacyShaderChk.GetValue():\n        args['legacy-shader'] = None\n    if self.m2e_pathReplaceChk.GetValue():\n        args['pr'] = self.m2e_pathReplaceTxt.GetValue()\n    return args",
            "def BuildMaya2EggArgs(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    args = {}\n    args['a'] = self.m2e_animOptChoice.GetStringSelection()\n    args['ui'] = UNIT_TYPES[self.m2e_mayaUnitsComboBox.GetSelection()]\n    args['uo'] = UNIT_TYPES[self.m2e_pandaUnitsComboBox.GetSelection()]\n    if self.m2e_backfaceChk.GetValue():\n        args['bface'] = None\n    if self.m2e_polygonOutputChk.GetValue():\n        args['p'] = None\n    if self.m2e_tbnallChk.GetValue():\n        args['tbnall'] = None\n    if self.m2e_charNameChk.GetValue():\n        args['cn'] = self.m2e_charNameTxt.GetValue()\n    if self.m2e_subsetsChk.GetValue():\n        args['subset'] = self.m2e_subsetsTxt.GetValue()\n    if self.m2e_subrootsChk.GetValue():\n        args['subroot'] = self.m2e_subrootsTxt.GetValue()\n    if self.m2e_excludesChk.GetValue():\n        args['exclude'] = self.m2e_excludesTxt.GetValue()\n    if self.m2e_startFrameChk.GetValue():\n        args['sf'] = self.m2e_startFrameSpin.GetValue()\n    if self.m2e_endFrameChk.GetValue():\n        args['ef'] = self.m2e_endFrameSpin.GetValue()\n    if self.m2e_frameRateInChk.GetValue():\n        args['fri'] = self.m2e_frameRateInSpin.GetValue()\n    if self.m2e_frameRateOutChk.GetValue():\n        args['fro'] = self.m2e_frameRateOutSpin.GetValue()\n    if self.m2e_copyTexChk.GetValue():\n        args['copytex'] = self.m2e_copyTexPathTxt.GetValue()\n    if self.m2e_legacyShaderChk.GetValue():\n        args['legacy-shader'] = None\n    if self.m2e_pathReplaceChk.GetValue():\n        args['pr'] = self.m2e_pathReplaceTxt.GetValue()\n    return args"
        ]
    },
    {
        "func_name": "BuildEgg2BamArgs",
        "original": "def BuildEgg2BamArgs(self):\n    args = {}\n    if self.e2b_flattenChk.GetValue():\n        args['flatten'] = 3\n    if self.e2b_embedTexChk.GetValue():\n        args['rawtex'] = None\n    return args",
        "mutated": [
            "def BuildEgg2BamArgs(self):\n    if False:\n        i = 10\n    args = {}\n    if self.e2b_flattenChk.GetValue():\n        args['flatten'] = 3\n    if self.e2b_embedTexChk.GetValue():\n        args['rawtex'] = None\n    return args",
            "def BuildEgg2BamArgs(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    args = {}\n    if self.e2b_flattenChk.GetValue():\n        args['flatten'] = 3\n    if self.e2b_embedTexChk.GetValue():\n        args['rawtex'] = None\n    return args",
            "def BuildEgg2BamArgs(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    args = {}\n    if self.e2b_flattenChk.GetValue():\n        args['flatten'] = 3\n    if self.e2b_embedTexChk.GetValue():\n        args['rawtex'] = None\n    return args",
            "def BuildEgg2BamArgs(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    args = {}\n    if self.e2b_flattenChk.GetValue():\n        args['flatten'] = 3\n    if self.e2b_embedTexChk.GetValue():\n        args['rawtex'] = None\n    return args",
            "def BuildEgg2BamArgs(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    args = {}\n    if self.e2b_flattenChk.GetValue():\n        args['flatten'] = 3\n    if self.e2b_embedTexChk.GetValue():\n        args['rawtex'] = None\n    return args"
        ]
    },
    {
        "func_name": "BuildEggRenameArgs",
        "original": "def BuildEggRenameArgs(self):\n    args = {}\n    if self.rename_exportInPlaceChk.GetValue():\n        args['inplace'] = None\n    if self.rename_exportDirTxt.GetValue():\n        args['d'] = self.rename_exportDirTxt.GetValue()\n    if self.rename_stripPrefixChk.GetValue():\n        args['strip_prefix'] = self.rename_stripPrefixTxt.GetValue()\n    return args",
        "mutated": [
            "def BuildEggRenameArgs(self):\n    if False:\n        i = 10\n    args = {}\n    if self.rename_exportInPlaceChk.GetValue():\n        args['inplace'] = None\n    if self.rename_exportDirTxt.GetValue():\n        args['d'] = self.rename_exportDirTxt.GetValue()\n    if self.rename_stripPrefixChk.GetValue():\n        args['strip_prefix'] = self.rename_stripPrefixTxt.GetValue()\n    return args",
            "def BuildEggRenameArgs(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    args = {}\n    if self.rename_exportInPlaceChk.GetValue():\n        args['inplace'] = None\n    if self.rename_exportDirTxt.GetValue():\n        args['d'] = self.rename_exportDirTxt.GetValue()\n    if self.rename_stripPrefixChk.GetValue():\n        args['strip_prefix'] = self.rename_stripPrefixTxt.GetValue()\n    return args",
            "def BuildEggRenameArgs(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    args = {}\n    if self.rename_exportInPlaceChk.GetValue():\n        args['inplace'] = None\n    if self.rename_exportDirTxt.GetValue():\n        args['d'] = self.rename_exportDirTxt.GetValue()\n    if self.rename_stripPrefixChk.GetValue():\n        args['strip_prefix'] = self.rename_stripPrefixTxt.GetValue()\n    return args",
            "def BuildEggRenameArgs(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    args = {}\n    if self.rename_exportInPlaceChk.GetValue():\n        args['inplace'] = None\n    if self.rename_exportDirTxt.GetValue():\n        args['d'] = self.rename_exportDirTxt.GetValue()\n    if self.rename_stripPrefixChk.GetValue():\n        args['strip_prefix'] = self.rename_stripPrefixTxt.GetValue()\n    return args",
            "def BuildEggRenameArgs(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    args = {}\n    if self.rename_exportInPlaceChk.GetValue():\n        args['inplace'] = None\n    if self.rename_exportDirTxt.GetValue():\n        args['d'] = self.rename_exportDirTxt.GetValue()\n    if self.rename_stripPrefixChk.GetValue():\n        args['strip_prefix'] = self.rename_stripPrefixTxt.GetValue()\n    return args"
        ]
    },
    {
        "func_name": "BuildEggOptcharArgs",
        "original": "def BuildEggOptcharArgs(self):\n    args = {}\n    if self.optchar_exportInPlaceChk.GetValue():\n        args['inplace'] = None\n    if self.optchar_exportDirTxt.GetValue():\n        args['d'] = self.optchar_exportDirTxt.GetValue()\n    if self.optchar_keepAllJointsChk.GetValue():\n        args['keepall'] = None\n    if self.optchar_keepJointsChk.GetValue():\n        args['keep'] = self.optchar_keepJointsTxt.GetValue()\n    if self.optchar_dropJointsChk.GetValue():\n        args['drop'] = self.optchar_dropJointsTxt.GetValue()\n    if self.optchar_exposeJointsChk.GetValue():\n        args['expose'] = self.optchar_exposeJointsTxt.GetValue()\n    if self.optchar_flagGeometryChk.GetValue():\n        args['flag'] = self.optchar_flagGeometryTxt.GetValue()\n    args['dart'] = self.optchar_dartChoice.GetStringSelection()\n    return args",
        "mutated": [
            "def BuildEggOptcharArgs(self):\n    if False:\n        i = 10\n    args = {}\n    if self.optchar_exportInPlaceChk.GetValue():\n        args['inplace'] = None\n    if self.optchar_exportDirTxt.GetValue():\n        args['d'] = self.optchar_exportDirTxt.GetValue()\n    if self.optchar_keepAllJointsChk.GetValue():\n        args['keepall'] = None\n    if self.optchar_keepJointsChk.GetValue():\n        args['keep'] = self.optchar_keepJointsTxt.GetValue()\n    if self.optchar_dropJointsChk.GetValue():\n        args['drop'] = self.optchar_dropJointsTxt.GetValue()\n    if self.optchar_exposeJointsChk.GetValue():\n        args['expose'] = self.optchar_exposeJointsTxt.GetValue()\n    if self.optchar_flagGeometryChk.GetValue():\n        args['flag'] = self.optchar_flagGeometryTxt.GetValue()\n    args['dart'] = self.optchar_dartChoice.GetStringSelection()\n    return args",
            "def BuildEggOptcharArgs(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    args = {}\n    if self.optchar_exportInPlaceChk.GetValue():\n        args['inplace'] = None\n    if self.optchar_exportDirTxt.GetValue():\n        args['d'] = self.optchar_exportDirTxt.GetValue()\n    if self.optchar_keepAllJointsChk.GetValue():\n        args['keepall'] = None\n    if self.optchar_keepJointsChk.GetValue():\n        args['keep'] = self.optchar_keepJointsTxt.GetValue()\n    if self.optchar_dropJointsChk.GetValue():\n        args['drop'] = self.optchar_dropJointsTxt.GetValue()\n    if self.optchar_exposeJointsChk.GetValue():\n        args['expose'] = self.optchar_exposeJointsTxt.GetValue()\n    if self.optchar_flagGeometryChk.GetValue():\n        args['flag'] = self.optchar_flagGeometryTxt.GetValue()\n    args['dart'] = self.optchar_dartChoice.GetStringSelection()\n    return args",
            "def BuildEggOptcharArgs(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    args = {}\n    if self.optchar_exportInPlaceChk.GetValue():\n        args['inplace'] = None\n    if self.optchar_exportDirTxt.GetValue():\n        args['d'] = self.optchar_exportDirTxt.GetValue()\n    if self.optchar_keepAllJointsChk.GetValue():\n        args['keepall'] = None\n    if self.optchar_keepJointsChk.GetValue():\n        args['keep'] = self.optchar_keepJointsTxt.GetValue()\n    if self.optchar_dropJointsChk.GetValue():\n        args['drop'] = self.optchar_dropJointsTxt.GetValue()\n    if self.optchar_exposeJointsChk.GetValue():\n        args['expose'] = self.optchar_exposeJointsTxt.GetValue()\n    if self.optchar_flagGeometryChk.GetValue():\n        args['flag'] = self.optchar_flagGeometryTxt.GetValue()\n    args['dart'] = self.optchar_dartChoice.GetStringSelection()\n    return args",
            "def BuildEggOptcharArgs(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    args = {}\n    if self.optchar_exportInPlaceChk.GetValue():\n        args['inplace'] = None\n    if self.optchar_exportDirTxt.GetValue():\n        args['d'] = self.optchar_exportDirTxt.GetValue()\n    if self.optchar_keepAllJointsChk.GetValue():\n        args['keepall'] = None\n    if self.optchar_keepJointsChk.GetValue():\n        args['keep'] = self.optchar_keepJointsTxt.GetValue()\n    if self.optchar_dropJointsChk.GetValue():\n        args['drop'] = self.optchar_dropJointsTxt.GetValue()\n    if self.optchar_exposeJointsChk.GetValue():\n        args['expose'] = self.optchar_exposeJointsTxt.GetValue()\n    if self.optchar_flagGeometryChk.GetValue():\n        args['flag'] = self.optchar_flagGeometryTxt.GetValue()\n    args['dart'] = self.optchar_dartChoice.GetStringSelection()\n    return args",
            "def BuildEggOptcharArgs(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    args = {}\n    if self.optchar_exportInPlaceChk.GetValue():\n        args['inplace'] = None\n    if self.optchar_exportDirTxt.GetValue():\n        args['d'] = self.optchar_exportDirTxt.GetValue()\n    if self.optchar_keepAllJointsChk.GetValue():\n        args['keepall'] = None\n    if self.optchar_keepJointsChk.GetValue():\n        args['keep'] = self.optchar_keepJointsTxt.GetValue()\n    if self.optchar_dropJointsChk.GetValue():\n        args['drop'] = self.optchar_dropJointsTxt.GetValue()\n    if self.optchar_exposeJointsChk.GetValue():\n        args['expose'] = self.optchar_exposeJointsTxt.GetValue()\n    if self.optchar_flagGeometryChk.GetValue():\n        args['flag'] = self.optchar_flagGeometryTxt.GetValue()\n    args['dart'] = self.optchar_dartChoice.GetStringSelection()\n    return args"
        ]
    },
    {
        "func_name": "BuildEggPalettizeArgs",
        "original": "def BuildEggPalettizeArgs(self):\n    args = {}\n    if self.palettize_exportInPlaceChk.GetValue():\n        args['inplace'] = None\n    if self.palettize_exportDirTxt.GetValue():\n        args['d'] = self.palettize_exportDirTxt.GetValue()\n    if self.palettize_exportTexTxt.GetValue():\n        args['dm'] = self.palettize_exportTexTxt.GetValue()\n    if self.palettize_saveTxaTxt.GetValue():\n        args['af'] = self.palettize_saveTxaTxt.GetValue()\n    return args",
        "mutated": [
            "def BuildEggPalettizeArgs(self):\n    if False:\n        i = 10\n    args = {}\n    if self.palettize_exportInPlaceChk.GetValue():\n        args['inplace'] = None\n    if self.palettize_exportDirTxt.GetValue():\n        args['d'] = self.palettize_exportDirTxt.GetValue()\n    if self.palettize_exportTexTxt.GetValue():\n        args['dm'] = self.palettize_exportTexTxt.GetValue()\n    if self.palettize_saveTxaTxt.GetValue():\n        args['af'] = self.palettize_saveTxaTxt.GetValue()\n    return args",
            "def BuildEggPalettizeArgs(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    args = {}\n    if self.palettize_exportInPlaceChk.GetValue():\n        args['inplace'] = None\n    if self.palettize_exportDirTxt.GetValue():\n        args['d'] = self.palettize_exportDirTxt.GetValue()\n    if self.palettize_exportTexTxt.GetValue():\n        args['dm'] = self.palettize_exportTexTxt.GetValue()\n    if self.palettize_saveTxaTxt.GetValue():\n        args['af'] = self.palettize_saveTxaTxt.GetValue()\n    return args",
            "def BuildEggPalettizeArgs(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    args = {}\n    if self.palettize_exportInPlaceChk.GetValue():\n        args['inplace'] = None\n    if self.palettize_exportDirTxt.GetValue():\n        args['d'] = self.palettize_exportDirTxt.GetValue()\n    if self.palettize_exportTexTxt.GetValue():\n        args['dm'] = self.palettize_exportTexTxt.GetValue()\n    if self.palettize_saveTxaTxt.GetValue():\n        args['af'] = self.palettize_saveTxaTxt.GetValue()\n    return args",
            "def BuildEggPalettizeArgs(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    args = {}\n    if self.palettize_exportInPlaceChk.GetValue():\n        args['inplace'] = None\n    if self.palettize_exportDirTxt.GetValue():\n        args['d'] = self.palettize_exportDirTxt.GetValue()\n    if self.palettize_exportTexTxt.GetValue():\n        args['dm'] = self.palettize_exportTexTxt.GetValue()\n    if self.palettize_saveTxaTxt.GetValue():\n        args['af'] = self.palettize_saveTxaTxt.GetValue()\n    return args",
            "def BuildEggPalettizeArgs(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    args = {}\n    if self.palettize_exportInPlaceChk.GetValue():\n        args['inplace'] = None\n    if self.palettize_exportDirTxt.GetValue():\n        args['d'] = self.palettize_exportDirTxt.GetValue()\n    if self.palettize_exportTexTxt.GetValue():\n        args['dm'] = self.palettize_exportTexTxt.GetValue()\n    if self.palettize_saveTxaTxt.GetValue():\n        args['af'] = self.palettize_saveTxaTxt.GetValue()\n    return args"
        ]
    },
    {
        "func_name": "BuildCommand",
        "original": "def BuildCommand(self, item):\n    command = item['cmd']\n    for param in item['args'].keys():\n        if param in ['subroot', 'exclude', 'subset', 'keep', 'drop', 'expose', 'flag', 'strip_prefix']:\n            for arg in item['args'][param].split(' '):\n                command += ' -' + param + ' ' + arg\n        else:\n            command += ' -' + param\n            if item['args'][param] is not None:\n                if param in ['d', 'dm', 'copytex', 'af']:\n                    command += ' \"' + str(item['args'][param]) + '\"'\n                else:\n                    command += ' ' + str(item['args'][param])\n    if item['foutput'] != '':\n        command += ' -o '\n        command += '\"' + item['foutput'] + '\"'\n    for filename in item['finput'].split('|'):\n        if filename:\n            command += ' \"' + filename + '\"'\n    return command",
        "mutated": [
            "def BuildCommand(self, item):\n    if False:\n        i = 10\n    command = item['cmd']\n    for param in item['args'].keys():\n        if param in ['subroot', 'exclude', 'subset', 'keep', 'drop', 'expose', 'flag', 'strip_prefix']:\n            for arg in item['args'][param].split(' '):\n                command += ' -' + param + ' ' + arg\n        else:\n            command += ' -' + param\n            if item['args'][param] is not None:\n                if param in ['d', 'dm', 'copytex', 'af']:\n                    command += ' \"' + str(item['args'][param]) + '\"'\n                else:\n                    command += ' ' + str(item['args'][param])\n    if item['foutput'] != '':\n        command += ' -o '\n        command += '\"' + item['foutput'] + '\"'\n    for filename in item['finput'].split('|'):\n        if filename:\n            command += ' \"' + filename + '\"'\n    return command",
            "def BuildCommand(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    command = item['cmd']\n    for param in item['args'].keys():\n        if param in ['subroot', 'exclude', 'subset', 'keep', 'drop', 'expose', 'flag', 'strip_prefix']:\n            for arg in item['args'][param].split(' '):\n                command += ' -' + param + ' ' + arg\n        else:\n            command += ' -' + param\n            if item['args'][param] is not None:\n                if param in ['d', 'dm', 'copytex', 'af']:\n                    command += ' \"' + str(item['args'][param]) + '\"'\n                else:\n                    command += ' ' + str(item['args'][param])\n    if item['foutput'] != '':\n        command += ' -o '\n        command += '\"' + item['foutput'] + '\"'\n    for filename in item['finput'].split('|'):\n        if filename:\n            command += ' \"' + filename + '\"'\n    return command",
            "def BuildCommand(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    command = item['cmd']\n    for param in item['args'].keys():\n        if param in ['subroot', 'exclude', 'subset', 'keep', 'drop', 'expose', 'flag', 'strip_prefix']:\n            for arg in item['args'][param].split(' '):\n                command += ' -' + param + ' ' + arg\n        else:\n            command += ' -' + param\n            if item['args'][param] is not None:\n                if param in ['d', 'dm', 'copytex', 'af']:\n                    command += ' \"' + str(item['args'][param]) + '\"'\n                else:\n                    command += ' ' + str(item['args'][param])\n    if item['foutput'] != '':\n        command += ' -o '\n        command += '\"' + item['foutput'] + '\"'\n    for filename in item['finput'].split('|'):\n        if filename:\n            command += ' \"' + filename + '\"'\n    return command",
            "def BuildCommand(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    command = item['cmd']\n    for param in item['args'].keys():\n        if param in ['subroot', 'exclude', 'subset', 'keep', 'drop', 'expose', 'flag', 'strip_prefix']:\n            for arg in item['args'][param].split(' '):\n                command += ' -' + param + ' ' + arg\n        else:\n            command += ' -' + param\n            if item['args'][param] is not None:\n                if param in ['d', 'dm', 'copytex', 'af']:\n                    command += ' \"' + str(item['args'][param]) + '\"'\n                else:\n                    command += ' ' + str(item['args'][param])\n    if item['foutput'] != '':\n        command += ' -o '\n        command += '\"' + item['foutput'] + '\"'\n    for filename in item['finput'].split('|'):\n        if filename:\n            command += ' \"' + filename + '\"'\n    return command",
            "def BuildCommand(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    command = item['cmd']\n    for param in item['args'].keys():\n        if param in ['subroot', 'exclude', 'subset', 'keep', 'drop', 'expose', 'flag', 'strip_prefix']:\n            for arg in item['args'][param].split(' '):\n                command += ' -' + param + ' ' + arg\n        else:\n            command += ' -' + param\n            if item['args'][param] is not None:\n                if param in ['d', 'dm', 'copytex', 'af']:\n                    command += ' \"' + str(item['args'][param]) + '\"'\n                else:\n                    command += ' ' + str(item['args'][param])\n    if item['foutput'] != '':\n        command += ' -o '\n        command += '\"' + item['foutput'] + '\"'\n    for filename in item['finput'].split('|'):\n        if filename:\n            command += ' \"' + filename + '\"'\n    return command"
        ]
    },
    {
        "func_name": "RunCommand",
        "original": "def RunCommand(self, command, batchmode):\n    if batchmode and self.pandaPathTxt.GetValue() != '':\n        PATH = self.pandaPathTxt.GetValue() + os.sep + 'bin' + os.sep\n    else:\n        PATH = ''\n    if batchmode:\n        self.consoleOutputTxt.AppendText(command + '\\n')\n    try:\n        p = subprocess.Popen(PATH + command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, universal_newlines=True)\n    except:\n        dlg = wx.MessageDialog(self, 'Failed To Find Or run the Exporter Application', 'ERROR', wx.OK)\n        dlg.ShowModal()\n        dlg.Destroy()\n    else:\n        if batchmode:\n            while p.poll() is None:\n                out = p.stdout.readline()\n                if out != '\\n':\n                    self.consoleOutputTxt.AppendText(out)\n        else:\n            while p.poll() is None:\n                out = p.stdout.readline()\n                self.outdlg.dlgOutText.AppendText(out)\n    if batchmode:\n        self.consoleOutputTxt.AppendText('\\n')",
        "mutated": [
            "def RunCommand(self, command, batchmode):\n    if False:\n        i = 10\n    if batchmode and self.pandaPathTxt.GetValue() != '':\n        PATH = self.pandaPathTxt.GetValue() + os.sep + 'bin' + os.sep\n    else:\n        PATH = ''\n    if batchmode:\n        self.consoleOutputTxt.AppendText(command + '\\n')\n    try:\n        p = subprocess.Popen(PATH + command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, universal_newlines=True)\n    except:\n        dlg = wx.MessageDialog(self, 'Failed To Find Or run the Exporter Application', 'ERROR', wx.OK)\n        dlg.ShowModal()\n        dlg.Destroy()\n    else:\n        if batchmode:\n            while p.poll() is None:\n                out = p.stdout.readline()\n                if out != '\\n':\n                    self.consoleOutputTxt.AppendText(out)\n        else:\n            while p.poll() is None:\n                out = p.stdout.readline()\n                self.outdlg.dlgOutText.AppendText(out)\n    if batchmode:\n        self.consoleOutputTxt.AppendText('\\n')",
            "def RunCommand(self, command, batchmode):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if batchmode and self.pandaPathTxt.GetValue() != '':\n        PATH = self.pandaPathTxt.GetValue() + os.sep + 'bin' + os.sep\n    else:\n        PATH = ''\n    if batchmode:\n        self.consoleOutputTxt.AppendText(command + '\\n')\n    try:\n        p = subprocess.Popen(PATH + command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, universal_newlines=True)\n    except:\n        dlg = wx.MessageDialog(self, 'Failed To Find Or run the Exporter Application', 'ERROR', wx.OK)\n        dlg.ShowModal()\n        dlg.Destroy()\n    else:\n        if batchmode:\n            while p.poll() is None:\n                out = p.stdout.readline()\n                if out != '\\n':\n                    self.consoleOutputTxt.AppendText(out)\n        else:\n            while p.poll() is None:\n                out = p.stdout.readline()\n                self.outdlg.dlgOutText.AppendText(out)\n    if batchmode:\n        self.consoleOutputTxt.AppendText('\\n')",
            "def RunCommand(self, command, batchmode):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if batchmode and self.pandaPathTxt.GetValue() != '':\n        PATH = self.pandaPathTxt.GetValue() + os.sep + 'bin' + os.sep\n    else:\n        PATH = ''\n    if batchmode:\n        self.consoleOutputTxt.AppendText(command + '\\n')\n    try:\n        p = subprocess.Popen(PATH + command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, universal_newlines=True)\n    except:\n        dlg = wx.MessageDialog(self, 'Failed To Find Or run the Exporter Application', 'ERROR', wx.OK)\n        dlg.ShowModal()\n        dlg.Destroy()\n    else:\n        if batchmode:\n            while p.poll() is None:\n                out = p.stdout.readline()\n                if out != '\\n':\n                    self.consoleOutputTxt.AppendText(out)\n        else:\n            while p.poll() is None:\n                out = p.stdout.readline()\n                self.outdlg.dlgOutText.AppendText(out)\n    if batchmode:\n        self.consoleOutputTxt.AppendText('\\n')",
            "def RunCommand(self, command, batchmode):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if batchmode and self.pandaPathTxt.GetValue() != '':\n        PATH = self.pandaPathTxt.GetValue() + os.sep + 'bin' + os.sep\n    else:\n        PATH = ''\n    if batchmode:\n        self.consoleOutputTxt.AppendText(command + '\\n')\n    try:\n        p = subprocess.Popen(PATH + command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, universal_newlines=True)\n    except:\n        dlg = wx.MessageDialog(self, 'Failed To Find Or run the Exporter Application', 'ERROR', wx.OK)\n        dlg.ShowModal()\n        dlg.Destroy()\n    else:\n        if batchmode:\n            while p.poll() is None:\n                out = p.stdout.readline()\n                if out != '\\n':\n                    self.consoleOutputTxt.AppendText(out)\n        else:\n            while p.poll() is None:\n                out = p.stdout.readline()\n                self.outdlg.dlgOutText.AppendText(out)\n    if batchmode:\n        self.consoleOutputTxt.AppendText('\\n')",
            "def RunCommand(self, command, batchmode):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if batchmode and self.pandaPathTxt.GetValue() != '':\n        PATH = self.pandaPathTxt.GetValue() + os.sep + 'bin' + os.sep\n    else:\n        PATH = ''\n    if batchmode:\n        self.consoleOutputTxt.AppendText(command + '\\n')\n    try:\n        p = subprocess.Popen(PATH + command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, universal_newlines=True)\n    except:\n        dlg = wx.MessageDialog(self, 'Failed To Find Or run the Exporter Application', 'ERROR', wx.OK)\n        dlg.ShowModal()\n        dlg.Destroy()\n    else:\n        if batchmode:\n            while p.poll() is None:\n                out = p.stdout.readline()\n                if out != '\\n':\n                    self.consoleOutputTxt.AppendText(out)\n        else:\n            while p.poll() is None:\n                out = p.stdout.readline()\n                self.outdlg.dlgOutText.AppendText(out)\n    if batchmode:\n        self.consoleOutputTxt.AppendText('\\n')"
        ]
    },
    {
        "func_name": "OnRemoveBatch",
        "original": "def OnRemoveBatch(self, event):\n    items = self.batchTree.GetSelections()\n    toRemove = []\n    for item in items:\n        if item != self.treeRoot:\n            index = int(self.batchTree.GetItemText(item).split()[0]) - 1\n            toRemove.append(index)\n            self.batchTree.Delete(item)\n    toRemove.sort()\n    if len(toRemove):\n        for i in range(0, len(toRemove)):\n            self.batchList.pop(toRemove[len(toRemove) - i - 1])\n    self.UpdateBatchDisplay()",
        "mutated": [
            "def OnRemoveBatch(self, event):\n    if False:\n        i = 10\n    items = self.batchTree.GetSelections()\n    toRemove = []\n    for item in items:\n        if item != self.treeRoot:\n            index = int(self.batchTree.GetItemText(item).split()[0]) - 1\n            toRemove.append(index)\n            self.batchTree.Delete(item)\n    toRemove.sort()\n    if len(toRemove):\n        for i in range(0, len(toRemove)):\n            self.batchList.pop(toRemove[len(toRemove) - i - 1])\n    self.UpdateBatchDisplay()",
            "def OnRemoveBatch(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    items = self.batchTree.GetSelections()\n    toRemove = []\n    for item in items:\n        if item != self.treeRoot:\n            index = int(self.batchTree.GetItemText(item).split()[0]) - 1\n            toRemove.append(index)\n            self.batchTree.Delete(item)\n    toRemove.sort()\n    if len(toRemove):\n        for i in range(0, len(toRemove)):\n            self.batchList.pop(toRemove[len(toRemove) - i - 1])\n    self.UpdateBatchDisplay()",
            "def OnRemoveBatch(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    items = self.batchTree.GetSelections()\n    toRemove = []\n    for item in items:\n        if item != self.treeRoot:\n            index = int(self.batchTree.GetItemText(item).split()[0]) - 1\n            toRemove.append(index)\n            self.batchTree.Delete(item)\n    toRemove.sort()\n    if len(toRemove):\n        for i in range(0, len(toRemove)):\n            self.batchList.pop(toRemove[len(toRemove) - i - 1])\n    self.UpdateBatchDisplay()",
            "def OnRemoveBatch(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    items = self.batchTree.GetSelections()\n    toRemove = []\n    for item in items:\n        if item != self.treeRoot:\n            index = int(self.batchTree.GetItemText(item).split()[0]) - 1\n            toRemove.append(index)\n            self.batchTree.Delete(item)\n    toRemove.sort()\n    if len(toRemove):\n        for i in range(0, len(toRemove)):\n            self.batchList.pop(toRemove[len(toRemove) - i - 1])\n    self.UpdateBatchDisplay()",
            "def OnRemoveBatch(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    items = self.batchTree.GetSelections()\n    toRemove = []\n    for item in items:\n        if item != self.treeRoot:\n            index = int(self.batchTree.GetItemText(item).split()[0]) - 1\n            toRemove.append(index)\n            self.batchTree.Delete(item)\n    toRemove.sort()\n    if len(toRemove):\n        for i in range(0, len(toRemove)):\n            self.batchList.pop(toRemove[len(toRemove) - i - 1])\n    self.UpdateBatchDisplay()"
        ]
    },
    {
        "func_name": "UpdateBatchDisplay",
        "original": "def UpdateBatchDisplay(self):\n    self.batchTree.DeleteAllItems()\n    self.treeRoot = self.batchTree.AddRoot('Batch Files')\n    index = 0\n    for batchItemInfo in self.batchList:\n        index += 1\n        label = self.GetBatchItemLabel(batchItemInfo)\n        self.batchTree.AppendItem(self.treeRoot, str(index) + ' ' + label)\n    self.batchTree.ExpandAll()",
        "mutated": [
            "def UpdateBatchDisplay(self):\n    if False:\n        i = 10\n    self.batchTree.DeleteAllItems()\n    self.treeRoot = self.batchTree.AddRoot('Batch Files')\n    index = 0\n    for batchItemInfo in self.batchList:\n        index += 1\n        label = self.GetBatchItemLabel(batchItemInfo)\n        self.batchTree.AppendItem(self.treeRoot, str(index) + ' ' + label)\n    self.batchTree.ExpandAll()",
            "def UpdateBatchDisplay(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.batchTree.DeleteAllItems()\n    self.treeRoot = self.batchTree.AddRoot('Batch Files')\n    index = 0\n    for batchItemInfo in self.batchList:\n        index += 1\n        label = self.GetBatchItemLabel(batchItemInfo)\n        self.batchTree.AppendItem(self.treeRoot, str(index) + ' ' + label)\n    self.batchTree.ExpandAll()",
            "def UpdateBatchDisplay(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.batchTree.DeleteAllItems()\n    self.treeRoot = self.batchTree.AddRoot('Batch Files')\n    index = 0\n    for batchItemInfo in self.batchList:\n        index += 1\n        label = self.GetBatchItemLabel(batchItemInfo)\n        self.batchTree.AppendItem(self.treeRoot, str(index) + ' ' + label)\n    self.batchTree.ExpandAll()",
            "def UpdateBatchDisplay(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.batchTree.DeleteAllItems()\n    self.treeRoot = self.batchTree.AddRoot('Batch Files')\n    index = 0\n    for batchItemInfo in self.batchList:\n        index += 1\n        label = self.GetBatchItemLabel(batchItemInfo)\n        self.batchTree.AppendItem(self.treeRoot, str(index) + ' ' + label)\n    self.batchTree.ExpandAll()",
            "def UpdateBatchDisplay(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.batchTree.DeleteAllItems()\n    self.treeRoot = self.batchTree.AddRoot('Batch Files')\n    index = 0\n    for batchItemInfo in self.batchList:\n        index += 1\n        label = self.GetBatchItemLabel(batchItemInfo)\n        self.batchTree.AppendItem(self.treeRoot, str(index) + ' ' + label)\n    self.batchTree.ExpandAll()"
        ]
    },
    {
        "func_name": "OnRemoveAllBatch",
        "original": "def OnRemoveAllBatch(self, event):\n    self.batchTree.DeleteAllItems()\n    if self.batchList != []:\n        self.batchList = []\n    self.treeRoot = self.batchTree.AddRoot('Batch Files')",
        "mutated": [
            "def OnRemoveAllBatch(self, event):\n    if False:\n        i = 10\n    self.batchTree.DeleteAllItems()\n    if self.batchList != []:\n        self.batchList = []\n    self.treeRoot = self.batchTree.AddRoot('Batch Files')",
            "def OnRemoveAllBatch(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.batchTree.DeleteAllItems()\n    if self.batchList != []:\n        self.batchList = []\n    self.treeRoot = self.batchTree.AddRoot('Batch Files')",
            "def OnRemoveAllBatch(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.batchTree.DeleteAllItems()\n    if self.batchList != []:\n        self.batchList = []\n    self.treeRoot = self.batchTree.AddRoot('Batch Files')",
            "def OnRemoveAllBatch(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.batchTree.DeleteAllItems()\n    if self.batchList != []:\n        self.batchList = []\n    self.treeRoot = self.batchTree.AddRoot('Batch Files')",
            "def OnRemoveAllBatch(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.batchTree.DeleteAllItems()\n    if self.batchList != []:\n        self.batchList = []\n    self.treeRoot = self.batchTree.AddRoot('Batch Files')"
        ]
    },
    {
        "func_name": "OnClearOutput",
        "original": "def OnClearOutput(self, event):\n    self.consoleOutputTxt.Clear()",
        "mutated": [
            "def OnClearOutput(self, event):\n    if False:\n        i = 10\n    self.consoleOutputTxt.Clear()",
            "def OnClearOutput(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.consoleOutputTxt.Clear()",
            "def OnClearOutput(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.consoleOutputTxt.Clear()",
            "def OnClearOutput(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.consoleOutputTxt.Clear()",
            "def OnClearOutput(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.consoleOutputTxt.Clear()"
        ]
    },
    {
        "func_name": "OnExit",
        "original": "def OnExit(self, e):\n    self.Close(True)",
        "mutated": [
            "def OnExit(self, e):\n    if False:\n        i = 10\n    self.Close(True)",
            "def OnExit(self, e):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.Close(True)",
            "def OnExit(self, e):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.Close(True)",
            "def OnExit(self, e):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.Close(True)",
            "def OnExit(self, e):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.Close(True)"
        ]
    },
    {
        "func_name": "OnLoadPview",
        "original": "def OnLoadPview(self, event):\n    path = self.pandaPathTxt.GetValue() + os.sep + 'bin' + os.sep\n    self.outpview = OutputDialogpview(self)\n    self.outpview.Show()",
        "mutated": [
            "def OnLoadPview(self, event):\n    if False:\n        i = 10\n    path = self.pandaPathTxt.GetValue() + os.sep + 'bin' + os.sep\n    self.outpview = OutputDialogpview(self)\n    self.outpview.Show()",
            "def OnLoadPview(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    path = self.pandaPathTxt.GetValue() + os.sep + 'bin' + os.sep\n    self.outpview = OutputDialogpview(self)\n    self.outpview.Show()",
            "def OnLoadPview(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    path = self.pandaPathTxt.GetValue() + os.sep + 'bin' + os.sep\n    self.outpview = OutputDialogpview(self)\n    self.outpview.Show()",
            "def OnLoadPview(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    path = self.pandaPathTxt.GetValue() + os.sep + 'bin' + os.sep\n    self.outpview = OutputDialogpview(self)\n    self.outpview.Show()",
            "def OnLoadPview(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    path = self.pandaPathTxt.GetValue() + os.sep + 'bin' + os.sep\n    self.outpview = OutputDialogpview(self)\n    self.outpview.Show()"
        ]
    },
    {
        "func_name": "OnSortBatch",
        "original": "def OnSortBatch(self, event):\n    maya2eggCommands = []\n    egg2bamCommands = []\n    eggRenameCommands = []\n    eggOptcharCommands = []\n    eggPalettizeCommands = []\n    for item in self.batchList:\n        if item['cmd'].count('maya2egg'):\n            maya2eggCommands.append(item)\n        elif item['cmd'] == 'egg2bam':\n            egg2bamCommands.append(item)\n        elif item['cmd'] == 'egg-rename':\n            eggRenameCommands.append(item)\n        elif item['cmd'] == 'egg-optchar':\n            eggOptcharCommands.append(item)\n        elif item['cmd'] == 'egg-palettize':\n            eggPalettizeCommands.append(item)\n    self.batchList = maya2eggCommands + eggRenameCommands + eggOptcharCommands + eggPalettizeCommands + egg2bamCommands\n    self.UpdateBatchDisplay()",
        "mutated": [
            "def OnSortBatch(self, event):\n    if False:\n        i = 10\n    maya2eggCommands = []\n    egg2bamCommands = []\n    eggRenameCommands = []\n    eggOptcharCommands = []\n    eggPalettizeCommands = []\n    for item in self.batchList:\n        if item['cmd'].count('maya2egg'):\n            maya2eggCommands.append(item)\n        elif item['cmd'] == 'egg2bam':\n            egg2bamCommands.append(item)\n        elif item['cmd'] == 'egg-rename':\n            eggRenameCommands.append(item)\n        elif item['cmd'] == 'egg-optchar':\n            eggOptcharCommands.append(item)\n        elif item['cmd'] == 'egg-palettize':\n            eggPalettizeCommands.append(item)\n    self.batchList = maya2eggCommands + eggRenameCommands + eggOptcharCommands + eggPalettizeCommands + egg2bamCommands\n    self.UpdateBatchDisplay()",
            "def OnSortBatch(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    maya2eggCommands = []\n    egg2bamCommands = []\n    eggRenameCommands = []\n    eggOptcharCommands = []\n    eggPalettizeCommands = []\n    for item in self.batchList:\n        if item['cmd'].count('maya2egg'):\n            maya2eggCommands.append(item)\n        elif item['cmd'] == 'egg2bam':\n            egg2bamCommands.append(item)\n        elif item['cmd'] == 'egg-rename':\n            eggRenameCommands.append(item)\n        elif item['cmd'] == 'egg-optchar':\n            eggOptcharCommands.append(item)\n        elif item['cmd'] == 'egg-palettize':\n            eggPalettizeCommands.append(item)\n    self.batchList = maya2eggCommands + eggRenameCommands + eggOptcharCommands + eggPalettizeCommands + egg2bamCommands\n    self.UpdateBatchDisplay()",
            "def OnSortBatch(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    maya2eggCommands = []\n    egg2bamCommands = []\n    eggRenameCommands = []\n    eggOptcharCommands = []\n    eggPalettizeCommands = []\n    for item in self.batchList:\n        if item['cmd'].count('maya2egg'):\n            maya2eggCommands.append(item)\n        elif item['cmd'] == 'egg2bam':\n            egg2bamCommands.append(item)\n        elif item['cmd'] == 'egg-rename':\n            eggRenameCommands.append(item)\n        elif item['cmd'] == 'egg-optchar':\n            eggOptcharCommands.append(item)\n        elif item['cmd'] == 'egg-palettize':\n            eggPalettizeCommands.append(item)\n    self.batchList = maya2eggCommands + eggRenameCommands + eggOptcharCommands + eggPalettizeCommands + egg2bamCommands\n    self.UpdateBatchDisplay()",
            "def OnSortBatch(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    maya2eggCommands = []\n    egg2bamCommands = []\n    eggRenameCommands = []\n    eggOptcharCommands = []\n    eggPalettizeCommands = []\n    for item in self.batchList:\n        if item['cmd'].count('maya2egg'):\n            maya2eggCommands.append(item)\n        elif item['cmd'] == 'egg2bam':\n            egg2bamCommands.append(item)\n        elif item['cmd'] == 'egg-rename':\n            eggRenameCommands.append(item)\n        elif item['cmd'] == 'egg-optchar':\n            eggOptcharCommands.append(item)\n        elif item['cmd'] == 'egg-palettize':\n            eggPalettizeCommands.append(item)\n    self.batchList = maya2eggCommands + eggRenameCommands + eggOptcharCommands + eggPalettizeCommands + egg2bamCommands\n    self.UpdateBatchDisplay()",
            "def OnSortBatch(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    maya2eggCommands = []\n    egg2bamCommands = []\n    eggRenameCommands = []\n    eggOptcharCommands = []\n    eggPalettizeCommands = []\n    for item in self.batchList:\n        if item['cmd'].count('maya2egg'):\n            maya2eggCommands.append(item)\n        elif item['cmd'] == 'egg2bam':\n            egg2bamCommands.append(item)\n        elif item['cmd'] == 'egg-rename':\n            eggRenameCommands.append(item)\n        elif item['cmd'] == 'egg-optchar':\n            eggOptcharCommands.append(item)\n        elif item['cmd'] == 'egg-palettize':\n            eggPalettizeCommands.append(item)\n    self.batchList = maya2eggCommands + eggRenameCommands + eggOptcharCommands + eggPalettizeCommands + egg2bamCommands\n    self.UpdateBatchDisplay()"
        ]
    },
    {
        "func_name": "OnChangePaths",
        "original": "def OnChangePaths(self, event):\n    self.paths = OutputDialogPaths(self)\n    self.paths.setCallback(self.ChangeBatchPaths)\n    self.paths.Show()",
        "mutated": [
            "def OnChangePaths(self, event):\n    if False:\n        i = 10\n    self.paths = OutputDialogPaths(self)\n    self.paths.setCallback(self.ChangeBatchPaths)\n    self.paths.Show()",
            "def OnChangePaths(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.paths = OutputDialogPaths(self)\n    self.paths.setCallback(self.ChangeBatchPaths)\n    self.paths.Show()",
            "def OnChangePaths(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.paths = OutputDialogPaths(self)\n    self.paths.setCallback(self.ChangeBatchPaths)\n    self.paths.Show()",
            "def OnChangePaths(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.paths = OutputDialogPaths(self)\n    self.paths.setCallback(self.ChangeBatchPaths)\n    self.paths.Show()",
            "def OnChangePaths(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.paths = OutputDialogPaths(self)\n    self.paths.setCallback(self.ChangeBatchPaths)\n    self.paths.Show()"
        ]
    },
    {
        "func_name": "ChangeBatchPaths",
        "original": "def ChangeBatchPaths(self, fromStr, toStr):\n    for item in self.batchList:\n        item['finput'] = item['finput'].replace(fromStr, toStr)\n        item['foutput'] = item['foutput'].replace(fromStr, toStr)\n        if item['args'].has_key('d'):\n            item['args']['d'] = item['args']['d'].replace(fromStr, toStr)\n        if item['args'].has_key('copytex'):\n            item['args']['copytex'] = item['args']['copytex'].replace(fromStr, toStr)\n        if item['args'].has_key('dm'):\n            item['args']['dm'] = item['args']['dm'].replace(fromStr, toStr)\n        if item['args'].has_key('af'):\n            item['args']['af'] = item['args']['af'].replace(fromStr, toStr)\n    self.UpdateBatchDisplay()",
        "mutated": [
            "def ChangeBatchPaths(self, fromStr, toStr):\n    if False:\n        i = 10\n    for item in self.batchList:\n        item['finput'] = item['finput'].replace(fromStr, toStr)\n        item['foutput'] = item['foutput'].replace(fromStr, toStr)\n        if item['args'].has_key('d'):\n            item['args']['d'] = item['args']['d'].replace(fromStr, toStr)\n        if item['args'].has_key('copytex'):\n            item['args']['copytex'] = item['args']['copytex'].replace(fromStr, toStr)\n        if item['args'].has_key('dm'):\n            item['args']['dm'] = item['args']['dm'].replace(fromStr, toStr)\n        if item['args'].has_key('af'):\n            item['args']['af'] = item['args']['af'].replace(fromStr, toStr)\n    self.UpdateBatchDisplay()",
            "def ChangeBatchPaths(self, fromStr, toStr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for item in self.batchList:\n        item['finput'] = item['finput'].replace(fromStr, toStr)\n        item['foutput'] = item['foutput'].replace(fromStr, toStr)\n        if item['args'].has_key('d'):\n            item['args']['d'] = item['args']['d'].replace(fromStr, toStr)\n        if item['args'].has_key('copytex'):\n            item['args']['copytex'] = item['args']['copytex'].replace(fromStr, toStr)\n        if item['args'].has_key('dm'):\n            item['args']['dm'] = item['args']['dm'].replace(fromStr, toStr)\n        if item['args'].has_key('af'):\n            item['args']['af'] = item['args']['af'].replace(fromStr, toStr)\n    self.UpdateBatchDisplay()",
            "def ChangeBatchPaths(self, fromStr, toStr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for item in self.batchList:\n        item['finput'] = item['finput'].replace(fromStr, toStr)\n        item['foutput'] = item['foutput'].replace(fromStr, toStr)\n        if item['args'].has_key('d'):\n            item['args']['d'] = item['args']['d'].replace(fromStr, toStr)\n        if item['args'].has_key('copytex'):\n            item['args']['copytex'] = item['args']['copytex'].replace(fromStr, toStr)\n        if item['args'].has_key('dm'):\n            item['args']['dm'] = item['args']['dm'].replace(fromStr, toStr)\n        if item['args'].has_key('af'):\n            item['args']['af'] = item['args']['af'].replace(fromStr, toStr)\n    self.UpdateBatchDisplay()",
            "def ChangeBatchPaths(self, fromStr, toStr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for item in self.batchList:\n        item['finput'] = item['finput'].replace(fromStr, toStr)\n        item['foutput'] = item['foutput'].replace(fromStr, toStr)\n        if item['args'].has_key('d'):\n            item['args']['d'] = item['args']['d'].replace(fromStr, toStr)\n        if item['args'].has_key('copytex'):\n            item['args']['copytex'] = item['args']['copytex'].replace(fromStr, toStr)\n        if item['args'].has_key('dm'):\n            item['args']['dm'] = item['args']['dm'].replace(fromStr, toStr)\n        if item['args'].has_key('af'):\n            item['args']['af'] = item['args']['af'].replace(fromStr, toStr)\n    self.UpdateBatchDisplay()",
            "def ChangeBatchPaths(self, fromStr, toStr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for item in self.batchList:\n        item['finput'] = item['finput'].replace(fromStr, toStr)\n        item['foutput'] = item['foutput'].replace(fromStr, toStr)\n        if item['args'].has_key('d'):\n            item['args']['d'] = item['args']['d'].replace(fromStr, toStr)\n        if item['args'].has_key('copytex'):\n            item['args']['copytex'] = item['args']['copytex'].replace(fromStr, toStr)\n        if item['args'].has_key('dm'):\n            item['args']['dm'] = item['args']['dm'].replace(fromStr, toStr)\n        if item['args'].has_key('af'):\n            item['args']['af'] = item['args']['af'].replace(fromStr, toStr)\n    self.UpdateBatchDisplay()"
        ]
    },
    {
        "func_name": "PrefixReplaceInBatch",
        "original": "def PrefixReplaceInBatch(self, inPrefix, outPrefix):\n    for batchItem in self.batchList:\n        if batchItem['finput'].count(inPrefix):\n            pass",
        "mutated": [
            "def PrefixReplaceInBatch(self, inPrefix, outPrefix):\n    if False:\n        i = 10\n    for batchItem in self.batchList:\n        if batchItem['finput'].count(inPrefix):\n            pass",
            "def PrefixReplaceInBatch(self, inPrefix, outPrefix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    for batchItem in self.batchList:\n        if batchItem['finput'].count(inPrefix):\n            pass",
            "def PrefixReplaceInBatch(self, inPrefix, outPrefix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    for batchItem in self.batchList:\n        if batchItem['finput'].count(inPrefix):\n            pass",
            "def PrefixReplaceInBatch(self, inPrefix, outPrefix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    for batchItem in self.batchList:\n        if batchItem['finput'].count(inPrefix):\n            pass",
            "def PrefixReplaceInBatch(self, inPrefix, outPrefix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    for batchItem in self.batchList:\n        if batchItem['finput'].count(inPrefix):\n            pass"
        ]
    },
    {
        "func_name": "OnSaveBatch",
        "original": "def OnSaveBatch(self, event):\n    newdoc = Document()\n    top_element = newdoc.createElement('batch')\n    newdoc.appendChild(top_element)\n    for item in self.batchList:\n        batchitem = newdoc.createElement('batchitem')\n        top_element.appendChild(batchitem)\n        label = newdoc.createTextNode(item['label'])\n        cmd = newdoc.createTextNode(item['cmd'])\n        finput = newdoc.createTextNode(item['finput'])\n        foutput = newdoc.createTextNode(item['foutput'])\n        labelNode = newdoc.createElement('label')\n        cmdNode = newdoc.createElement('cmd')\n        argsNode = newdoc.createElement('args')\n        finputNode = newdoc.createElement('finput')\n        foutputNode = newdoc.createElement('foutput')\n        for param in item['args']:\n            paramItem = newdoc.createElement(param)\n            if item['args'][param] is not None:\n                paramText = newdoc.createTextNode(str(item['args'][param]))\n                paramItem.appendChild(paramText)\n            argsNode.appendChild(paramItem)\n        batchitem.appendChild(labelNode)\n        batchitem.appendChild(cmdNode)\n        batchitem.appendChild(argsNode)\n        batchitem.appendChild(finputNode)\n        batchitem.appendChild(foutputNode)\n        labelNode.appendChild(label)\n        cmdNode.appendChild(cmd)\n        finputNode.appendChild(finput)\n        foutputNode.appendChild(foutput)\n    dirname = self.destProjectFolder\n    filename = ''\n    dlg = wx.FileDialog(self, 'Choose a location and filename', dirname, '', '*.xml', wx.SAVE)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        file = dirname + os.sep + filename\n        f = open(file, 'w')\n        out = newdoc.toprettyxml()\n        for line in out:\n            f.writelines(line)\n        f.close()\n    dlg.Destroy()\n    self.statusBar.SetStatusText('Batch list exported to ' + dirname + os.sep + filename)",
        "mutated": [
            "def OnSaveBatch(self, event):\n    if False:\n        i = 10\n    newdoc = Document()\n    top_element = newdoc.createElement('batch')\n    newdoc.appendChild(top_element)\n    for item in self.batchList:\n        batchitem = newdoc.createElement('batchitem')\n        top_element.appendChild(batchitem)\n        label = newdoc.createTextNode(item['label'])\n        cmd = newdoc.createTextNode(item['cmd'])\n        finput = newdoc.createTextNode(item['finput'])\n        foutput = newdoc.createTextNode(item['foutput'])\n        labelNode = newdoc.createElement('label')\n        cmdNode = newdoc.createElement('cmd')\n        argsNode = newdoc.createElement('args')\n        finputNode = newdoc.createElement('finput')\n        foutputNode = newdoc.createElement('foutput')\n        for param in item['args']:\n            paramItem = newdoc.createElement(param)\n            if item['args'][param] is not None:\n                paramText = newdoc.createTextNode(str(item['args'][param]))\n                paramItem.appendChild(paramText)\n            argsNode.appendChild(paramItem)\n        batchitem.appendChild(labelNode)\n        batchitem.appendChild(cmdNode)\n        batchitem.appendChild(argsNode)\n        batchitem.appendChild(finputNode)\n        batchitem.appendChild(foutputNode)\n        labelNode.appendChild(label)\n        cmdNode.appendChild(cmd)\n        finputNode.appendChild(finput)\n        foutputNode.appendChild(foutput)\n    dirname = self.destProjectFolder\n    filename = ''\n    dlg = wx.FileDialog(self, 'Choose a location and filename', dirname, '', '*.xml', wx.SAVE)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        file = dirname + os.sep + filename\n        f = open(file, 'w')\n        out = newdoc.toprettyxml()\n        for line in out:\n            f.writelines(line)\n        f.close()\n    dlg.Destroy()\n    self.statusBar.SetStatusText('Batch list exported to ' + dirname + os.sep + filename)",
            "def OnSaveBatch(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    newdoc = Document()\n    top_element = newdoc.createElement('batch')\n    newdoc.appendChild(top_element)\n    for item in self.batchList:\n        batchitem = newdoc.createElement('batchitem')\n        top_element.appendChild(batchitem)\n        label = newdoc.createTextNode(item['label'])\n        cmd = newdoc.createTextNode(item['cmd'])\n        finput = newdoc.createTextNode(item['finput'])\n        foutput = newdoc.createTextNode(item['foutput'])\n        labelNode = newdoc.createElement('label')\n        cmdNode = newdoc.createElement('cmd')\n        argsNode = newdoc.createElement('args')\n        finputNode = newdoc.createElement('finput')\n        foutputNode = newdoc.createElement('foutput')\n        for param in item['args']:\n            paramItem = newdoc.createElement(param)\n            if item['args'][param] is not None:\n                paramText = newdoc.createTextNode(str(item['args'][param]))\n                paramItem.appendChild(paramText)\n            argsNode.appendChild(paramItem)\n        batchitem.appendChild(labelNode)\n        batchitem.appendChild(cmdNode)\n        batchitem.appendChild(argsNode)\n        batchitem.appendChild(finputNode)\n        batchitem.appendChild(foutputNode)\n        labelNode.appendChild(label)\n        cmdNode.appendChild(cmd)\n        finputNode.appendChild(finput)\n        foutputNode.appendChild(foutput)\n    dirname = self.destProjectFolder\n    filename = ''\n    dlg = wx.FileDialog(self, 'Choose a location and filename', dirname, '', '*.xml', wx.SAVE)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        file = dirname + os.sep + filename\n        f = open(file, 'w')\n        out = newdoc.toprettyxml()\n        for line in out:\n            f.writelines(line)\n        f.close()\n    dlg.Destroy()\n    self.statusBar.SetStatusText('Batch list exported to ' + dirname + os.sep + filename)",
            "def OnSaveBatch(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    newdoc = Document()\n    top_element = newdoc.createElement('batch')\n    newdoc.appendChild(top_element)\n    for item in self.batchList:\n        batchitem = newdoc.createElement('batchitem')\n        top_element.appendChild(batchitem)\n        label = newdoc.createTextNode(item['label'])\n        cmd = newdoc.createTextNode(item['cmd'])\n        finput = newdoc.createTextNode(item['finput'])\n        foutput = newdoc.createTextNode(item['foutput'])\n        labelNode = newdoc.createElement('label')\n        cmdNode = newdoc.createElement('cmd')\n        argsNode = newdoc.createElement('args')\n        finputNode = newdoc.createElement('finput')\n        foutputNode = newdoc.createElement('foutput')\n        for param in item['args']:\n            paramItem = newdoc.createElement(param)\n            if item['args'][param] is not None:\n                paramText = newdoc.createTextNode(str(item['args'][param]))\n                paramItem.appendChild(paramText)\n            argsNode.appendChild(paramItem)\n        batchitem.appendChild(labelNode)\n        batchitem.appendChild(cmdNode)\n        batchitem.appendChild(argsNode)\n        batchitem.appendChild(finputNode)\n        batchitem.appendChild(foutputNode)\n        labelNode.appendChild(label)\n        cmdNode.appendChild(cmd)\n        finputNode.appendChild(finput)\n        foutputNode.appendChild(foutput)\n    dirname = self.destProjectFolder\n    filename = ''\n    dlg = wx.FileDialog(self, 'Choose a location and filename', dirname, '', '*.xml', wx.SAVE)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        file = dirname + os.sep + filename\n        f = open(file, 'w')\n        out = newdoc.toprettyxml()\n        for line in out:\n            f.writelines(line)\n        f.close()\n    dlg.Destroy()\n    self.statusBar.SetStatusText('Batch list exported to ' + dirname + os.sep + filename)",
            "def OnSaveBatch(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    newdoc = Document()\n    top_element = newdoc.createElement('batch')\n    newdoc.appendChild(top_element)\n    for item in self.batchList:\n        batchitem = newdoc.createElement('batchitem')\n        top_element.appendChild(batchitem)\n        label = newdoc.createTextNode(item['label'])\n        cmd = newdoc.createTextNode(item['cmd'])\n        finput = newdoc.createTextNode(item['finput'])\n        foutput = newdoc.createTextNode(item['foutput'])\n        labelNode = newdoc.createElement('label')\n        cmdNode = newdoc.createElement('cmd')\n        argsNode = newdoc.createElement('args')\n        finputNode = newdoc.createElement('finput')\n        foutputNode = newdoc.createElement('foutput')\n        for param in item['args']:\n            paramItem = newdoc.createElement(param)\n            if item['args'][param] is not None:\n                paramText = newdoc.createTextNode(str(item['args'][param]))\n                paramItem.appendChild(paramText)\n            argsNode.appendChild(paramItem)\n        batchitem.appendChild(labelNode)\n        batchitem.appendChild(cmdNode)\n        batchitem.appendChild(argsNode)\n        batchitem.appendChild(finputNode)\n        batchitem.appendChild(foutputNode)\n        labelNode.appendChild(label)\n        cmdNode.appendChild(cmd)\n        finputNode.appendChild(finput)\n        foutputNode.appendChild(foutput)\n    dirname = self.destProjectFolder\n    filename = ''\n    dlg = wx.FileDialog(self, 'Choose a location and filename', dirname, '', '*.xml', wx.SAVE)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        file = dirname + os.sep + filename\n        f = open(file, 'w')\n        out = newdoc.toprettyxml()\n        for line in out:\n            f.writelines(line)\n        f.close()\n    dlg.Destroy()\n    self.statusBar.SetStatusText('Batch list exported to ' + dirname + os.sep + filename)",
            "def OnSaveBatch(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    newdoc = Document()\n    top_element = newdoc.createElement('batch')\n    newdoc.appendChild(top_element)\n    for item in self.batchList:\n        batchitem = newdoc.createElement('batchitem')\n        top_element.appendChild(batchitem)\n        label = newdoc.createTextNode(item['label'])\n        cmd = newdoc.createTextNode(item['cmd'])\n        finput = newdoc.createTextNode(item['finput'])\n        foutput = newdoc.createTextNode(item['foutput'])\n        labelNode = newdoc.createElement('label')\n        cmdNode = newdoc.createElement('cmd')\n        argsNode = newdoc.createElement('args')\n        finputNode = newdoc.createElement('finput')\n        foutputNode = newdoc.createElement('foutput')\n        for param in item['args']:\n            paramItem = newdoc.createElement(param)\n            if item['args'][param] is not None:\n                paramText = newdoc.createTextNode(str(item['args'][param]))\n                paramItem.appendChild(paramText)\n            argsNode.appendChild(paramItem)\n        batchitem.appendChild(labelNode)\n        batchitem.appendChild(cmdNode)\n        batchitem.appendChild(argsNode)\n        batchitem.appendChild(finputNode)\n        batchitem.appendChild(foutputNode)\n        labelNode.appendChild(label)\n        cmdNode.appendChild(cmd)\n        finputNode.appendChild(finput)\n        foutputNode.appendChild(foutput)\n    dirname = self.destProjectFolder\n    filename = ''\n    dlg = wx.FileDialog(self, 'Choose a location and filename', dirname, '', '*.xml', wx.SAVE)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        file = dirname + os.sep + filename\n        f = open(file, 'w')\n        out = newdoc.toprettyxml()\n        for line in out:\n            f.writelines(line)\n        f.close()\n    dlg.Destroy()\n    self.statusBar.SetStatusText('Batch list exported to ' + dirname + os.sep + filename)"
        ]
    },
    {
        "func_name": "OnLoadBatch",
        "original": "def OnLoadBatch(self, event):\n    dirname = self.destProjectFolder\n    filename = ''\n    dlg = wx.FileDialog(self, 'Load Preferences file...', dirname, '', '*.xml', wx.OPEN)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        file = dirname + os.sep + filename\n        if self.batchList != []:\n            self.batchList = []\n        self.batchTree.DeleteAllItems()\n        self.treeRoot = self.batchTree.AddRoot('Batch Files')\n        doc = xml.dom.minidom.parse(str(file))\n        for node in doc.getElementsByTagName('batchitem'):\n            batchItemInfo = {}\n            label = ''\n            cmd = ''\n            args = {}\n            finput = ''\n            foutput = ''\n            elemlabel = node.getElementsByTagName('label')\n            for node2 in elemlabel:\n                for node3 in node2.childNodes:\n                    label = node3.data\n            elemcmd = node.getElementsByTagName('cmd')\n            for node2 in elemcmd:\n                for node3 in node2.childNodes:\n                    cmd = node3.data\n            elemargs = node.getElementsByTagName('args')\n            for param in elemargs.item(0).childNodes:\n                if isinstance(param, Element):\n                    if param.childNodes:\n                        args[param.tagName] = str(param.childNodes[0].data).strip()\n                    else:\n                        args[param.tagName] = None\n            elemfinput = node.getElementsByTagName('finput')\n            for node2 in elemfinput:\n                for node3 in node2.childNodes:\n                    finput = node3.data\n            elemoutput = node.getElementsByTagName('foutput')\n            for node2 in elemoutput:\n                for node3 in node2.childNodes:\n                    foutput = node3.data\n            batchItemInfo['label'] = str(label).strip()\n            batchItemInfo['cmd'] = str(cmd).strip()\n            batchItemInfo['args'] = args\n            batchItemInfo['finput'] = str(finput).strip()\n            batchItemInfo['foutput'] = str(foutput).strip()\n            self.batchList.append(batchItemInfo)\n            self.AddToBatchDisplay(batchItemInfo)\n    dlg.Destroy()\n    self.statusBar.SetStatusText('Batch imported succesfully from:' + dirname + os.sep + filename)",
        "mutated": [
            "def OnLoadBatch(self, event):\n    if False:\n        i = 10\n    dirname = self.destProjectFolder\n    filename = ''\n    dlg = wx.FileDialog(self, 'Load Preferences file...', dirname, '', '*.xml', wx.OPEN)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        file = dirname + os.sep + filename\n        if self.batchList != []:\n            self.batchList = []\n        self.batchTree.DeleteAllItems()\n        self.treeRoot = self.batchTree.AddRoot('Batch Files')\n        doc = xml.dom.minidom.parse(str(file))\n        for node in doc.getElementsByTagName('batchitem'):\n            batchItemInfo = {}\n            label = ''\n            cmd = ''\n            args = {}\n            finput = ''\n            foutput = ''\n            elemlabel = node.getElementsByTagName('label')\n            for node2 in elemlabel:\n                for node3 in node2.childNodes:\n                    label = node3.data\n            elemcmd = node.getElementsByTagName('cmd')\n            for node2 in elemcmd:\n                for node3 in node2.childNodes:\n                    cmd = node3.data\n            elemargs = node.getElementsByTagName('args')\n            for param in elemargs.item(0).childNodes:\n                if isinstance(param, Element):\n                    if param.childNodes:\n                        args[param.tagName] = str(param.childNodes[0].data).strip()\n                    else:\n                        args[param.tagName] = None\n            elemfinput = node.getElementsByTagName('finput')\n            for node2 in elemfinput:\n                for node3 in node2.childNodes:\n                    finput = node3.data\n            elemoutput = node.getElementsByTagName('foutput')\n            for node2 in elemoutput:\n                for node3 in node2.childNodes:\n                    foutput = node3.data\n            batchItemInfo['label'] = str(label).strip()\n            batchItemInfo['cmd'] = str(cmd).strip()\n            batchItemInfo['args'] = args\n            batchItemInfo['finput'] = str(finput).strip()\n            batchItemInfo['foutput'] = str(foutput).strip()\n            self.batchList.append(batchItemInfo)\n            self.AddToBatchDisplay(batchItemInfo)\n    dlg.Destroy()\n    self.statusBar.SetStatusText('Batch imported succesfully from:' + dirname + os.sep + filename)",
            "def OnLoadBatch(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    dirname = self.destProjectFolder\n    filename = ''\n    dlg = wx.FileDialog(self, 'Load Preferences file...', dirname, '', '*.xml', wx.OPEN)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        file = dirname + os.sep + filename\n        if self.batchList != []:\n            self.batchList = []\n        self.batchTree.DeleteAllItems()\n        self.treeRoot = self.batchTree.AddRoot('Batch Files')\n        doc = xml.dom.minidom.parse(str(file))\n        for node in doc.getElementsByTagName('batchitem'):\n            batchItemInfo = {}\n            label = ''\n            cmd = ''\n            args = {}\n            finput = ''\n            foutput = ''\n            elemlabel = node.getElementsByTagName('label')\n            for node2 in elemlabel:\n                for node3 in node2.childNodes:\n                    label = node3.data\n            elemcmd = node.getElementsByTagName('cmd')\n            for node2 in elemcmd:\n                for node3 in node2.childNodes:\n                    cmd = node3.data\n            elemargs = node.getElementsByTagName('args')\n            for param in elemargs.item(0).childNodes:\n                if isinstance(param, Element):\n                    if param.childNodes:\n                        args[param.tagName] = str(param.childNodes[0].data).strip()\n                    else:\n                        args[param.tagName] = None\n            elemfinput = node.getElementsByTagName('finput')\n            for node2 in elemfinput:\n                for node3 in node2.childNodes:\n                    finput = node3.data\n            elemoutput = node.getElementsByTagName('foutput')\n            for node2 in elemoutput:\n                for node3 in node2.childNodes:\n                    foutput = node3.data\n            batchItemInfo['label'] = str(label).strip()\n            batchItemInfo['cmd'] = str(cmd).strip()\n            batchItemInfo['args'] = args\n            batchItemInfo['finput'] = str(finput).strip()\n            batchItemInfo['foutput'] = str(foutput).strip()\n            self.batchList.append(batchItemInfo)\n            self.AddToBatchDisplay(batchItemInfo)\n    dlg.Destroy()\n    self.statusBar.SetStatusText('Batch imported succesfully from:' + dirname + os.sep + filename)",
            "def OnLoadBatch(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    dirname = self.destProjectFolder\n    filename = ''\n    dlg = wx.FileDialog(self, 'Load Preferences file...', dirname, '', '*.xml', wx.OPEN)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        file = dirname + os.sep + filename\n        if self.batchList != []:\n            self.batchList = []\n        self.batchTree.DeleteAllItems()\n        self.treeRoot = self.batchTree.AddRoot('Batch Files')\n        doc = xml.dom.minidom.parse(str(file))\n        for node in doc.getElementsByTagName('batchitem'):\n            batchItemInfo = {}\n            label = ''\n            cmd = ''\n            args = {}\n            finput = ''\n            foutput = ''\n            elemlabel = node.getElementsByTagName('label')\n            for node2 in elemlabel:\n                for node3 in node2.childNodes:\n                    label = node3.data\n            elemcmd = node.getElementsByTagName('cmd')\n            for node2 in elemcmd:\n                for node3 in node2.childNodes:\n                    cmd = node3.data\n            elemargs = node.getElementsByTagName('args')\n            for param in elemargs.item(0).childNodes:\n                if isinstance(param, Element):\n                    if param.childNodes:\n                        args[param.tagName] = str(param.childNodes[0].data).strip()\n                    else:\n                        args[param.tagName] = None\n            elemfinput = node.getElementsByTagName('finput')\n            for node2 in elemfinput:\n                for node3 in node2.childNodes:\n                    finput = node3.data\n            elemoutput = node.getElementsByTagName('foutput')\n            for node2 in elemoutput:\n                for node3 in node2.childNodes:\n                    foutput = node3.data\n            batchItemInfo['label'] = str(label).strip()\n            batchItemInfo['cmd'] = str(cmd).strip()\n            batchItemInfo['args'] = args\n            batchItemInfo['finput'] = str(finput).strip()\n            batchItemInfo['foutput'] = str(foutput).strip()\n            self.batchList.append(batchItemInfo)\n            self.AddToBatchDisplay(batchItemInfo)\n    dlg.Destroy()\n    self.statusBar.SetStatusText('Batch imported succesfully from:' + dirname + os.sep + filename)",
            "def OnLoadBatch(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    dirname = self.destProjectFolder\n    filename = ''\n    dlg = wx.FileDialog(self, 'Load Preferences file...', dirname, '', '*.xml', wx.OPEN)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        file = dirname + os.sep + filename\n        if self.batchList != []:\n            self.batchList = []\n        self.batchTree.DeleteAllItems()\n        self.treeRoot = self.batchTree.AddRoot('Batch Files')\n        doc = xml.dom.minidom.parse(str(file))\n        for node in doc.getElementsByTagName('batchitem'):\n            batchItemInfo = {}\n            label = ''\n            cmd = ''\n            args = {}\n            finput = ''\n            foutput = ''\n            elemlabel = node.getElementsByTagName('label')\n            for node2 in elemlabel:\n                for node3 in node2.childNodes:\n                    label = node3.data\n            elemcmd = node.getElementsByTagName('cmd')\n            for node2 in elemcmd:\n                for node3 in node2.childNodes:\n                    cmd = node3.data\n            elemargs = node.getElementsByTagName('args')\n            for param in elemargs.item(0).childNodes:\n                if isinstance(param, Element):\n                    if param.childNodes:\n                        args[param.tagName] = str(param.childNodes[0].data).strip()\n                    else:\n                        args[param.tagName] = None\n            elemfinput = node.getElementsByTagName('finput')\n            for node2 in elemfinput:\n                for node3 in node2.childNodes:\n                    finput = node3.data\n            elemoutput = node.getElementsByTagName('foutput')\n            for node2 in elemoutput:\n                for node3 in node2.childNodes:\n                    foutput = node3.data\n            batchItemInfo['label'] = str(label).strip()\n            batchItemInfo['cmd'] = str(cmd).strip()\n            batchItemInfo['args'] = args\n            batchItemInfo['finput'] = str(finput).strip()\n            batchItemInfo['foutput'] = str(foutput).strip()\n            self.batchList.append(batchItemInfo)\n            self.AddToBatchDisplay(batchItemInfo)\n    dlg.Destroy()\n    self.statusBar.SetStatusText('Batch imported succesfully from:' + dirname + os.sep + filename)",
            "def OnLoadBatch(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    dirname = self.destProjectFolder\n    filename = ''\n    dlg = wx.FileDialog(self, 'Load Preferences file...', dirname, '', '*.xml', wx.OPEN)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        file = dirname + os.sep + filename\n        if self.batchList != []:\n            self.batchList = []\n        self.batchTree.DeleteAllItems()\n        self.treeRoot = self.batchTree.AddRoot('Batch Files')\n        doc = xml.dom.minidom.parse(str(file))\n        for node in doc.getElementsByTagName('batchitem'):\n            batchItemInfo = {}\n            label = ''\n            cmd = ''\n            args = {}\n            finput = ''\n            foutput = ''\n            elemlabel = node.getElementsByTagName('label')\n            for node2 in elemlabel:\n                for node3 in node2.childNodes:\n                    label = node3.data\n            elemcmd = node.getElementsByTagName('cmd')\n            for node2 in elemcmd:\n                for node3 in node2.childNodes:\n                    cmd = node3.data\n            elemargs = node.getElementsByTagName('args')\n            for param in elemargs.item(0).childNodes:\n                if isinstance(param, Element):\n                    if param.childNodes:\n                        args[param.tagName] = str(param.childNodes[0].data).strip()\n                    else:\n                        args[param.tagName] = None\n            elemfinput = node.getElementsByTagName('finput')\n            for node2 in elemfinput:\n                for node3 in node2.childNodes:\n                    finput = node3.data\n            elemoutput = node.getElementsByTagName('foutput')\n            for node2 in elemoutput:\n                for node3 in node2.childNodes:\n                    foutput = node3.data\n            batchItemInfo['label'] = str(label).strip()\n            batchItemInfo['cmd'] = str(cmd).strip()\n            batchItemInfo['args'] = args\n            batchItemInfo['finput'] = str(finput).strip()\n            batchItemInfo['foutput'] = str(foutput).strip()\n            self.batchList.append(batchItemInfo)\n            self.AddToBatchDisplay(batchItemInfo)\n    dlg.Destroy()\n    self.statusBar.SetStatusText('Batch imported succesfully from:' + dirname + os.sep + filename)"
        ]
    },
    {
        "func_name": "OnRunBatch",
        "original": "def OnRunBatch(self, event):\n    self.batchProgress = wx.ProgressDialog('Progress', 'Running Batch export please be patient...', maximum=len(self.batchList), style=wx.PD_REMAINING_TIME)\n    self.batchProgress.SetSizeWH(300, 150)\n    self.batchProgress.Show()\n    index = 0\n    if self.batchTree.ItemHasChildren(self.treeRoot):\n        (child, cookie) = self.batchTree.GetFirstChild(self.treeRoot)\n        while child.IsOk():\n            self.batchTree.SetItemBold(child, False)\n            self.batchTree.SetItemTextColour(child, wx.Colour(0, 0, 0))\n            child = self.batchTree.GetNextSibling(child)\n    currNode = None\n    if self.batchList:\n        self.SetStatusText('Running Batch export please be patient...')\n        for item in self.batchList:\n            if currNode:\n                currNode = self.batchTree.GetNextSibling(currNode)\n            else:\n                (currNode, cookie) = self.batchTree.GetFirstChild(self.treeRoot)\n            self.batchTree.SetItemBold(currNode, True)\n            self.batchProgress.Update(index, '')\n            index += 1\n            if self.ignoreModDates.GetValue():\n                self.RunCommand(self.BuildCommand(item), True)\n                self.batchTree.SetItemTextColour(currNode, wx.Colour(0, 175, 0))\n            elif self.CheckModDates(item):\n                self.RunCommand(self.BuildCommand(item), True)\n                self.batchTree.SetItemTextColour(currNode, wx.Colour(0, 175, 0))\n            else:\n                self.batchTree.SetItemTextColour(currNode, wx.Colour(0, 0, 175))\n        self.batchProgress.Destroy()\n        dlg = wx.MessageDialog(self, 'Export Complete', 'Complete', wx.OK)\n        dlg.ShowModal()\n        dlg.Destroy()\n        self.SetStatusText('Batch process complete, see Console Output for details')\n    else:\n        self.batchProgress.Destroy()\n        dlg = wx.MessageDialog(self, 'No items in the batch queue to export. Please add items', 'ERROR', wx.OK)\n        dlg.ShowModal()\n        dlg.Destroy()",
        "mutated": [
            "def OnRunBatch(self, event):\n    if False:\n        i = 10\n    self.batchProgress = wx.ProgressDialog('Progress', 'Running Batch export please be patient...', maximum=len(self.batchList), style=wx.PD_REMAINING_TIME)\n    self.batchProgress.SetSizeWH(300, 150)\n    self.batchProgress.Show()\n    index = 0\n    if self.batchTree.ItemHasChildren(self.treeRoot):\n        (child, cookie) = self.batchTree.GetFirstChild(self.treeRoot)\n        while child.IsOk():\n            self.batchTree.SetItemBold(child, False)\n            self.batchTree.SetItemTextColour(child, wx.Colour(0, 0, 0))\n            child = self.batchTree.GetNextSibling(child)\n    currNode = None\n    if self.batchList:\n        self.SetStatusText('Running Batch export please be patient...')\n        for item in self.batchList:\n            if currNode:\n                currNode = self.batchTree.GetNextSibling(currNode)\n            else:\n                (currNode, cookie) = self.batchTree.GetFirstChild(self.treeRoot)\n            self.batchTree.SetItemBold(currNode, True)\n            self.batchProgress.Update(index, '')\n            index += 1\n            if self.ignoreModDates.GetValue():\n                self.RunCommand(self.BuildCommand(item), True)\n                self.batchTree.SetItemTextColour(currNode, wx.Colour(0, 175, 0))\n            elif self.CheckModDates(item):\n                self.RunCommand(self.BuildCommand(item), True)\n                self.batchTree.SetItemTextColour(currNode, wx.Colour(0, 175, 0))\n            else:\n                self.batchTree.SetItemTextColour(currNode, wx.Colour(0, 0, 175))\n        self.batchProgress.Destroy()\n        dlg = wx.MessageDialog(self, 'Export Complete', 'Complete', wx.OK)\n        dlg.ShowModal()\n        dlg.Destroy()\n        self.SetStatusText('Batch process complete, see Console Output for details')\n    else:\n        self.batchProgress.Destroy()\n        dlg = wx.MessageDialog(self, 'No items in the batch queue to export. Please add items', 'ERROR', wx.OK)\n        dlg.ShowModal()\n        dlg.Destroy()",
            "def OnRunBatch(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.batchProgress = wx.ProgressDialog('Progress', 'Running Batch export please be patient...', maximum=len(self.batchList), style=wx.PD_REMAINING_TIME)\n    self.batchProgress.SetSizeWH(300, 150)\n    self.batchProgress.Show()\n    index = 0\n    if self.batchTree.ItemHasChildren(self.treeRoot):\n        (child, cookie) = self.batchTree.GetFirstChild(self.treeRoot)\n        while child.IsOk():\n            self.batchTree.SetItemBold(child, False)\n            self.batchTree.SetItemTextColour(child, wx.Colour(0, 0, 0))\n            child = self.batchTree.GetNextSibling(child)\n    currNode = None\n    if self.batchList:\n        self.SetStatusText('Running Batch export please be patient...')\n        for item in self.batchList:\n            if currNode:\n                currNode = self.batchTree.GetNextSibling(currNode)\n            else:\n                (currNode, cookie) = self.batchTree.GetFirstChild(self.treeRoot)\n            self.batchTree.SetItemBold(currNode, True)\n            self.batchProgress.Update(index, '')\n            index += 1\n            if self.ignoreModDates.GetValue():\n                self.RunCommand(self.BuildCommand(item), True)\n                self.batchTree.SetItemTextColour(currNode, wx.Colour(0, 175, 0))\n            elif self.CheckModDates(item):\n                self.RunCommand(self.BuildCommand(item), True)\n                self.batchTree.SetItemTextColour(currNode, wx.Colour(0, 175, 0))\n            else:\n                self.batchTree.SetItemTextColour(currNode, wx.Colour(0, 0, 175))\n        self.batchProgress.Destroy()\n        dlg = wx.MessageDialog(self, 'Export Complete', 'Complete', wx.OK)\n        dlg.ShowModal()\n        dlg.Destroy()\n        self.SetStatusText('Batch process complete, see Console Output for details')\n    else:\n        self.batchProgress.Destroy()\n        dlg = wx.MessageDialog(self, 'No items in the batch queue to export. Please add items', 'ERROR', wx.OK)\n        dlg.ShowModal()\n        dlg.Destroy()",
            "def OnRunBatch(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.batchProgress = wx.ProgressDialog('Progress', 'Running Batch export please be patient...', maximum=len(self.batchList), style=wx.PD_REMAINING_TIME)\n    self.batchProgress.SetSizeWH(300, 150)\n    self.batchProgress.Show()\n    index = 0\n    if self.batchTree.ItemHasChildren(self.treeRoot):\n        (child, cookie) = self.batchTree.GetFirstChild(self.treeRoot)\n        while child.IsOk():\n            self.batchTree.SetItemBold(child, False)\n            self.batchTree.SetItemTextColour(child, wx.Colour(0, 0, 0))\n            child = self.batchTree.GetNextSibling(child)\n    currNode = None\n    if self.batchList:\n        self.SetStatusText('Running Batch export please be patient...')\n        for item in self.batchList:\n            if currNode:\n                currNode = self.batchTree.GetNextSibling(currNode)\n            else:\n                (currNode, cookie) = self.batchTree.GetFirstChild(self.treeRoot)\n            self.batchTree.SetItemBold(currNode, True)\n            self.batchProgress.Update(index, '')\n            index += 1\n            if self.ignoreModDates.GetValue():\n                self.RunCommand(self.BuildCommand(item), True)\n                self.batchTree.SetItemTextColour(currNode, wx.Colour(0, 175, 0))\n            elif self.CheckModDates(item):\n                self.RunCommand(self.BuildCommand(item), True)\n                self.batchTree.SetItemTextColour(currNode, wx.Colour(0, 175, 0))\n            else:\n                self.batchTree.SetItemTextColour(currNode, wx.Colour(0, 0, 175))\n        self.batchProgress.Destroy()\n        dlg = wx.MessageDialog(self, 'Export Complete', 'Complete', wx.OK)\n        dlg.ShowModal()\n        dlg.Destroy()\n        self.SetStatusText('Batch process complete, see Console Output for details')\n    else:\n        self.batchProgress.Destroy()\n        dlg = wx.MessageDialog(self, 'No items in the batch queue to export. Please add items', 'ERROR', wx.OK)\n        dlg.ShowModal()\n        dlg.Destroy()",
            "def OnRunBatch(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.batchProgress = wx.ProgressDialog('Progress', 'Running Batch export please be patient...', maximum=len(self.batchList), style=wx.PD_REMAINING_TIME)\n    self.batchProgress.SetSizeWH(300, 150)\n    self.batchProgress.Show()\n    index = 0\n    if self.batchTree.ItemHasChildren(self.treeRoot):\n        (child, cookie) = self.batchTree.GetFirstChild(self.treeRoot)\n        while child.IsOk():\n            self.batchTree.SetItemBold(child, False)\n            self.batchTree.SetItemTextColour(child, wx.Colour(0, 0, 0))\n            child = self.batchTree.GetNextSibling(child)\n    currNode = None\n    if self.batchList:\n        self.SetStatusText('Running Batch export please be patient...')\n        for item in self.batchList:\n            if currNode:\n                currNode = self.batchTree.GetNextSibling(currNode)\n            else:\n                (currNode, cookie) = self.batchTree.GetFirstChild(self.treeRoot)\n            self.batchTree.SetItemBold(currNode, True)\n            self.batchProgress.Update(index, '')\n            index += 1\n            if self.ignoreModDates.GetValue():\n                self.RunCommand(self.BuildCommand(item), True)\n                self.batchTree.SetItemTextColour(currNode, wx.Colour(0, 175, 0))\n            elif self.CheckModDates(item):\n                self.RunCommand(self.BuildCommand(item), True)\n                self.batchTree.SetItemTextColour(currNode, wx.Colour(0, 175, 0))\n            else:\n                self.batchTree.SetItemTextColour(currNode, wx.Colour(0, 0, 175))\n        self.batchProgress.Destroy()\n        dlg = wx.MessageDialog(self, 'Export Complete', 'Complete', wx.OK)\n        dlg.ShowModal()\n        dlg.Destroy()\n        self.SetStatusText('Batch process complete, see Console Output for details')\n    else:\n        self.batchProgress.Destroy()\n        dlg = wx.MessageDialog(self, 'No items in the batch queue to export. Please add items', 'ERROR', wx.OK)\n        dlg.ShowModal()\n        dlg.Destroy()",
            "def OnRunBatch(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.batchProgress = wx.ProgressDialog('Progress', 'Running Batch export please be patient...', maximum=len(self.batchList), style=wx.PD_REMAINING_TIME)\n    self.batchProgress.SetSizeWH(300, 150)\n    self.batchProgress.Show()\n    index = 0\n    if self.batchTree.ItemHasChildren(self.treeRoot):\n        (child, cookie) = self.batchTree.GetFirstChild(self.treeRoot)\n        while child.IsOk():\n            self.batchTree.SetItemBold(child, False)\n            self.batchTree.SetItemTextColour(child, wx.Colour(0, 0, 0))\n            child = self.batchTree.GetNextSibling(child)\n    currNode = None\n    if self.batchList:\n        self.SetStatusText('Running Batch export please be patient...')\n        for item in self.batchList:\n            if currNode:\n                currNode = self.batchTree.GetNextSibling(currNode)\n            else:\n                (currNode, cookie) = self.batchTree.GetFirstChild(self.treeRoot)\n            self.batchTree.SetItemBold(currNode, True)\n            self.batchProgress.Update(index, '')\n            index += 1\n            if self.ignoreModDates.GetValue():\n                self.RunCommand(self.BuildCommand(item), True)\n                self.batchTree.SetItemTextColour(currNode, wx.Colour(0, 175, 0))\n            elif self.CheckModDates(item):\n                self.RunCommand(self.BuildCommand(item), True)\n                self.batchTree.SetItemTextColour(currNode, wx.Colour(0, 175, 0))\n            else:\n                self.batchTree.SetItemTextColour(currNode, wx.Colour(0, 0, 175))\n        self.batchProgress.Destroy()\n        dlg = wx.MessageDialog(self, 'Export Complete', 'Complete', wx.OK)\n        dlg.ShowModal()\n        dlg.Destroy()\n        self.SetStatusText('Batch process complete, see Console Output for details')\n    else:\n        self.batchProgress.Destroy()\n        dlg = wx.MessageDialog(self, 'No items in the batch queue to export. Please add items', 'ERROR', wx.OK)\n        dlg.ShowModal()\n        dlg.Destroy()"
        ]
    },
    {
        "func_name": "CheckModDates",
        "original": "def CheckModDates(self, item):\n    finput = item['finput']\n    foutput = item['foutput']\n    if 1:\n        if item['cmd'].count('maya2egg') or item['cmd'].count('egg2bam'):\n            inputTime = os.path.getmtime(finput)\n            outputTime = os.path.getmtime(foutput)\n            item['changed'] = inputTime > outputTime\n            return inputTime > outputTime\n        elif item['cmd'] in ['egg-rename', 'egg-optchar', 'egg-palettize']:\n            if item['args'].has_key('inplace'):\n                index = self.batchList.index(item)\n                inputFiles = item['finput'].split('|')\n                for inFile in inputFiles:\n                    if inFile != '':\n                        inputFound = False\n                        inputChanged = False\n                        filename = inFile.split('\\\\')[-1]\n                        for i in range(0, index):\n                            idx = index - (i + 1)\n                            outputFiles = self.GetOutputFromBatch(idx)\n                            if inFile in outputFiles:\n                                inputFound = True\n                                if self.batchList[idx]['cmd'].count('maya2egg'):\n                                    inputFile = self.batchList[idx]['finput']\n                                    inputTime = os.path.getmtime(inputFile)\n                                    outputTime = os.path.getmtime(inFile)\n                                    inputChanged = inputTime > outputTime\n                                elif self.batchList[idx]['args'].has_key('inplace'):\n                                    inputChanged = self.batchList[idx]['changed']\n                                elif self.batchList[idx]['args'].has_key('d'):\n                                    inputChanged = self.batchList[idx]['changed']\n                                    '\\n                                            inputs = self.batchList[idx][\\'finput\\'].split(\\'|\\')\\n                                            for inputFile in inputs:\\n                                                if (inputFile != \\'\\'):\\n                                                    inputFilename = inputFile.split(\\'\\\\\\')[-1]\\n                                                    print(\"Compare: \", inFile, filename, inputFile, inputFilename)\\n                                                    if inputFilename == filename:\\n                                                        inputTime = os.path.getmtime(inputFile)\\n                                                        outputTime = os.path.getmtime(inFile)\\n                                                        print(\"Matched: \", (inputTime > outputTime))\\n                                                        inputChanged = (inputTime > outputTime)\\n                                                        break\\n                                            '\n                                else:\n                                    inputFile = self.batchList[idx]['finput']\n                                    inputTime = os.path.getmtime(finput)\n                                    outputTime = os.path.getmtime(inFile)\n                                    inputChanged = inputTime > outputTime\n                                break\n                        if not inputFound:\n                            item['changed'] = True\n                            return True\n                        if inputChanged:\n                            item['changed'] = True\n                            return True\n                item['changed'] = False\n                return False\n            if item['args'].has_key('d'):\n                inputFiles = item['finput'].split('|')\n                filesChanged = False\n                for inFile in inputFiles:\n                    if inFile != '':\n                        filename = inFile.split('\\\\')[-1]\n                        directory = item['args']['d']\n                        inputTime = os.path.getmtime(inFile)\n                        outputTime = os.path.getmtime(directory + '\\\\' + filename)\n                        filesChanged = filesChanged or inputTime > outputTime\n                item['changed'] = filesChanged\n                return filesChanged\n            else:\n                inputTime = os.path.getmtime(finput)\n                outputTime = os.path.getmtime(foutput)\n                item['changed'] = inputTime > outputTime\n                return inputTime > outputTime\n    else:\n        item['changed'] = True\n        return True\n    item['changed'] = True\n    return True",
        "mutated": [
            "def CheckModDates(self, item):\n    if False:\n        i = 10\n    finput = item['finput']\n    foutput = item['foutput']\n    if 1:\n        if item['cmd'].count('maya2egg') or item['cmd'].count('egg2bam'):\n            inputTime = os.path.getmtime(finput)\n            outputTime = os.path.getmtime(foutput)\n            item['changed'] = inputTime > outputTime\n            return inputTime > outputTime\n        elif item['cmd'] in ['egg-rename', 'egg-optchar', 'egg-palettize']:\n            if item['args'].has_key('inplace'):\n                index = self.batchList.index(item)\n                inputFiles = item['finput'].split('|')\n                for inFile in inputFiles:\n                    if inFile != '':\n                        inputFound = False\n                        inputChanged = False\n                        filename = inFile.split('\\\\')[-1]\n                        for i in range(0, index):\n                            idx = index - (i + 1)\n                            outputFiles = self.GetOutputFromBatch(idx)\n                            if inFile in outputFiles:\n                                inputFound = True\n                                if self.batchList[idx]['cmd'].count('maya2egg'):\n                                    inputFile = self.batchList[idx]['finput']\n                                    inputTime = os.path.getmtime(inputFile)\n                                    outputTime = os.path.getmtime(inFile)\n                                    inputChanged = inputTime > outputTime\n                                elif self.batchList[idx]['args'].has_key('inplace'):\n                                    inputChanged = self.batchList[idx]['changed']\n                                elif self.batchList[idx]['args'].has_key('d'):\n                                    inputChanged = self.batchList[idx]['changed']\n                                    '\\n                                            inputs = self.batchList[idx][\\'finput\\'].split(\\'|\\')\\n                                            for inputFile in inputs:\\n                                                if (inputFile != \\'\\'):\\n                                                    inputFilename = inputFile.split(\\'\\\\\\')[-1]\\n                                                    print(\"Compare: \", inFile, filename, inputFile, inputFilename)\\n                                                    if inputFilename == filename:\\n                                                        inputTime = os.path.getmtime(inputFile)\\n                                                        outputTime = os.path.getmtime(inFile)\\n                                                        print(\"Matched: \", (inputTime > outputTime))\\n                                                        inputChanged = (inputTime > outputTime)\\n                                                        break\\n                                            '\n                                else:\n                                    inputFile = self.batchList[idx]['finput']\n                                    inputTime = os.path.getmtime(finput)\n                                    outputTime = os.path.getmtime(inFile)\n                                    inputChanged = inputTime > outputTime\n                                break\n                        if not inputFound:\n                            item['changed'] = True\n                            return True\n                        if inputChanged:\n                            item['changed'] = True\n                            return True\n                item['changed'] = False\n                return False\n            if item['args'].has_key('d'):\n                inputFiles = item['finput'].split('|')\n                filesChanged = False\n                for inFile in inputFiles:\n                    if inFile != '':\n                        filename = inFile.split('\\\\')[-1]\n                        directory = item['args']['d']\n                        inputTime = os.path.getmtime(inFile)\n                        outputTime = os.path.getmtime(directory + '\\\\' + filename)\n                        filesChanged = filesChanged or inputTime > outputTime\n                item['changed'] = filesChanged\n                return filesChanged\n            else:\n                inputTime = os.path.getmtime(finput)\n                outputTime = os.path.getmtime(foutput)\n                item['changed'] = inputTime > outputTime\n                return inputTime > outputTime\n    else:\n        item['changed'] = True\n        return True\n    item['changed'] = True\n    return True",
            "def CheckModDates(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    finput = item['finput']\n    foutput = item['foutput']\n    if 1:\n        if item['cmd'].count('maya2egg') or item['cmd'].count('egg2bam'):\n            inputTime = os.path.getmtime(finput)\n            outputTime = os.path.getmtime(foutput)\n            item['changed'] = inputTime > outputTime\n            return inputTime > outputTime\n        elif item['cmd'] in ['egg-rename', 'egg-optchar', 'egg-palettize']:\n            if item['args'].has_key('inplace'):\n                index = self.batchList.index(item)\n                inputFiles = item['finput'].split('|')\n                for inFile in inputFiles:\n                    if inFile != '':\n                        inputFound = False\n                        inputChanged = False\n                        filename = inFile.split('\\\\')[-1]\n                        for i in range(0, index):\n                            idx = index - (i + 1)\n                            outputFiles = self.GetOutputFromBatch(idx)\n                            if inFile in outputFiles:\n                                inputFound = True\n                                if self.batchList[idx]['cmd'].count('maya2egg'):\n                                    inputFile = self.batchList[idx]['finput']\n                                    inputTime = os.path.getmtime(inputFile)\n                                    outputTime = os.path.getmtime(inFile)\n                                    inputChanged = inputTime > outputTime\n                                elif self.batchList[idx]['args'].has_key('inplace'):\n                                    inputChanged = self.batchList[idx]['changed']\n                                elif self.batchList[idx]['args'].has_key('d'):\n                                    inputChanged = self.batchList[idx]['changed']\n                                    '\\n                                            inputs = self.batchList[idx][\\'finput\\'].split(\\'|\\')\\n                                            for inputFile in inputs:\\n                                                if (inputFile != \\'\\'):\\n                                                    inputFilename = inputFile.split(\\'\\\\\\')[-1]\\n                                                    print(\"Compare: \", inFile, filename, inputFile, inputFilename)\\n                                                    if inputFilename == filename:\\n                                                        inputTime = os.path.getmtime(inputFile)\\n                                                        outputTime = os.path.getmtime(inFile)\\n                                                        print(\"Matched: \", (inputTime > outputTime))\\n                                                        inputChanged = (inputTime > outputTime)\\n                                                        break\\n                                            '\n                                else:\n                                    inputFile = self.batchList[idx]['finput']\n                                    inputTime = os.path.getmtime(finput)\n                                    outputTime = os.path.getmtime(inFile)\n                                    inputChanged = inputTime > outputTime\n                                break\n                        if not inputFound:\n                            item['changed'] = True\n                            return True\n                        if inputChanged:\n                            item['changed'] = True\n                            return True\n                item['changed'] = False\n                return False\n            if item['args'].has_key('d'):\n                inputFiles = item['finput'].split('|')\n                filesChanged = False\n                for inFile in inputFiles:\n                    if inFile != '':\n                        filename = inFile.split('\\\\')[-1]\n                        directory = item['args']['d']\n                        inputTime = os.path.getmtime(inFile)\n                        outputTime = os.path.getmtime(directory + '\\\\' + filename)\n                        filesChanged = filesChanged or inputTime > outputTime\n                item['changed'] = filesChanged\n                return filesChanged\n            else:\n                inputTime = os.path.getmtime(finput)\n                outputTime = os.path.getmtime(foutput)\n                item['changed'] = inputTime > outputTime\n                return inputTime > outputTime\n    else:\n        item['changed'] = True\n        return True\n    item['changed'] = True\n    return True",
            "def CheckModDates(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    finput = item['finput']\n    foutput = item['foutput']\n    if 1:\n        if item['cmd'].count('maya2egg') or item['cmd'].count('egg2bam'):\n            inputTime = os.path.getmtime(finput)\n            outputTime = os.path.getmtime(foutput)\n            item['changed'] = inputTime > outputTime\n            return inputTime > outputTime\n        elif item['cmd'] in ['egg-rename', 'egg-optchar', 'egg-palettize']:\n            if item['args'].has_key('inplace'):\n                index = self.batchList.index(item)\n                inputFiles = item['finput'].split('|')\n                for inFile in inputFiles:\n                    if inFile != '':\n                        inputFound = False\n                        inputChanged = False\n                        filename = inFile.split('\\\\')[-1]\n                        for i in range(0, index):\n                            idx = index - (i + 1)\n                            outputFiles = self.GetOutputFromBatch(idx)\n                            if inFile in outputFiles:\n                                inputFound = True\n                                if self.batchList[idx]['cmd'].count('maya2egg'):\n                                    inputFile = self.batchList[idx]['finput']\n                                    inputTime = os.path.getmtime(inputFile)\n                                    outputTime = os.path.getmtime(inFile)\n                                    inputChanged = inputTime > outputTime\n                                elif self.batchList[idx]['args'].has_key('inplace'):\n                                    inputChanged = self.batchList[idx]['changed']\n                                elif self.batchList[idx]['args'].has_key('d'):\n                                    inputChanged = self.batchList[idx]['changed']\n                                    '\\n                                            inputs = self.batchList[idx][\\'finput\\'].split(\\'|\\')\\n                                            for inputFile in inputs:\\n                                                if (inputFile != \\'\\'):\\n                                                    inputFilename = inputFile.split(\\'\\\\\\')[-1]\\n                                                    print(\"Compare: \", inFile, filename, inputFile, inputFilename)\\n                                                    if inputFilename == filename:\\n                                                        inputTime = os.path.getmtime(inputFile)\\n                                                        outputTime = os.path.getmtime(inFile)\\n                                                        print(\"Matched: \", (inputTime > outputTime))\\n                                                        inputChanged = (inputTime > outputTime)\\n                                                        break\\n                                            '\n                                else:\n                                    inputFile = self.batchList[idx]['finput']\n                                    inputTime = os.path.getmtime(finput)\n                                    outputTime = os.path.getmtime(inFile)\n                                    inputChanged = inputTime > outputTime\n                                break\n                        if not inputFound:\n                            item['changed'] = True\n                            return True\n                        if inputChanged:\n                            item['changed'] = True\n                            return True\n                item['changed'] = False\n                return False\n            if item['args'].has_key('d'):\n                inputFiles = item['finput'].split('|')\n                filesChanged = False\n                for inFile in inputFiles:\n                    if inFile != '':\n                        filename = inFile.split('\\\\')[-1]\n                        directory = item['args']['d']\n                        inputTime = os.path.getmtime(inFile)\n                        outputTime = os.path.getmtime(directory + '\\\\' + filename)\n                        filesChanged = filesChanged or inputTime > outputTime\n                item['changed'] = filesChanged\n                return filesChanged\n            else:\n                inputTime = os.path.getmtime(finput)\n                outputTime = os.path.getmtime(foutput)\n                item['changed'] = inputTime > outputTime\n                return inputTime > outputTime\n    else:\n        item['changed'] = True\n        return True\n    item['changed'] = True\n    return True",
            "def CheckModDates(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    finput = item['finput']\n    foutput = item['foutput']\n    if 1:\n        if item['cmd'].count('maya2egg') or item['cmd'].count('egg2bam'):\n            inputTime = os.path.getmtime(finput)\n            outputTime = os.path.getmtime(foutput)\n            item['changed'] = inputTime > outputTime\n            return inputTime > outputTime\n        elif item['cmd'] in ['egg-rename', 'egg-optchar', 'egg-palettize']:\n            if item['args'].has_key('inplace'):\n                index = self.batchList.index(item)\n                inputFiles = item['finput'].split('|')\n                for inFile in inputFiles:\n                    if inFile != '':\n                        inputFound = False\n                        inputChanged = False\n                        filename = inFile.split('\\\\')[-1]\n                        for i in range(0, index):\n                            idx = index - (i + 1)\n                            outputFiles = self.GetOutputFromBatch(idx)\n                            if inFile in outputFiles:\n                                inputFound = True\n                                if self.batchList[idx]['cmd'].count('maya2egg'):\n                                    inputFile = self.batchList[idx]['finput']\n                                    inputTime = os.path.getmtime(inputFile)\n                                    outputTime = os.path.getmtime(inFile)\n                                    inputChanged = inputTime > outputTime\n                                elif self.batchList[idx]['args'].has_key('inplace'):\n                                    inputChanged = self.batchList[idx]['changed']\n                                elif self.batchList[idx]['args'].has_key('d'):\n                                    inputChanged = self.batchList[idx]['changed']\n                                    '\\n                                            inputs = self.batchList[idx][\\'finput\\'].split(\\'|\\')\\n                                            for inputFile in inputs:\\n                                                if (inputFile != \\'\\'):\\n                                                    inputFilename = inputFile.split(\\'\\\\\\')[-1]\\n                                                    print(\"Compare: \", inFile, filename, inputFile, inputFilename)\\n                                                    if inputFilename == filename:\\n                                                        inputTime = os.path.getmtime(inputFile)\\n                                                        outputTime = os.path.getmtime(inFile)\\n                                                        print(\"Matched: \", (inputTime > outputTime))\\n                                                        inputChanged = (inputTime > outputTime)\\n                                                        break\\n                                            '\n                                else:\n                                    inputFile = self.batchList[idx]['finput']\n                                    inputTime = os.path.getmtime(finput)\n                                    outputTime = os.path.getmtime(inFile)\n                                    inputChanged = inputTime > outputTime\n                                break\n                        if not inputFound:\n                            item['changed'] = True\n                            return True\n                        if inputChanged:\n                            item['changed'] = True\n                            return True\n                item['changed'] = False\n                return False\n            if item['args'].has_key('d'):\n                inputFiles = item['finput'].split('|')\n                filesChanged = False\n                for inFile in inputFiles:\n                    if inFile != '':\n                        filename = inFile.split('\\\\')[-1]\n                        directory = item['args']['d']\n                        inputTime = os.path.getmtime(inFile)\n                        outputTime = os.path.getmtime(directory + '\\\\' + filename)\n                        filesChanged = filesChanged or inputTime > outputTime\n                item['changed'] = filesChanged\n                return filesChanged\n            else:\n                inputTime = os.path.getmtime(finput)\n                outputTime = os.path.getmtime(foutput)\n                item['changed'] = inputTime > outputTime\n                return inputTime > outputTime\n    else:\n        item['changed'] = True\n        return True\n    item['changed'] = True\n    return True",
            "def CheckModDates(self, item):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    finput = item['finput']\n    foutput = item['foutput']\n    if 1:\n        if item['cmd'].count('maya2egg') or item['cmd'].count('egg2bam'):\n            inputTime = os.path.getmtime(finput)\n            outputTime = os.path.getmtime(foutput)\n            item['changed'] = inputTime > outputTime\n            return inputTime > outputTime\n        elif item['cmd'] in ['egg-rename', 'egg-optchar', 'egg-palettize']:\n            if item['args'].has_key('inplace'):\n                index = self.batchList.index(item)\n                inputFiles = item['finput'].split('|')\n                for inFile in inputFiles:\n                    if inFile != '':\n                        inputFound = False\n                        inputChanged = False\n                        filename = inFile.split('\\\\')[-1]\n                        for i in range(0, index):\n                            idx = index - (i + 1)\n                            outputFiles = self.GetOutputFromBatch(idx)\n                            if inFile in outputFiles:\n                                inputFound = True\n                                if self.batchList[idx]['cmd'].count('maya2egg'):\n                                    inputFile = self.batchList[idx]['finput']\n                                    inputTime = os.path.getmtime(inputFile)\n                                    outputTime = os.path.getmtime(inFile)\n                                    inputChanged = inputTime > outputTime\n                                elif self.batchList[idx]['args'].has_key('inplace'):\n                                    inputChanged = self.batchList[idx]['changed']\n                                elif self.batchList[idx]['args'].has_key('d'):\n                                    inputChanged = self.batchList[idx]['changed']\n                                    '\\n                                            inputs = self.batchList[idx][\\'finput\\'].split(\\'|\\')\\n                                            for inputFile in inputs:\\n                                                if (inputFile != \\'\\'):\\n                                                    inputFilename = inputFile.split(\\'\\\\\\')[-1]\\n                                                    print(\"Compare: \", inFile, filename, inputFile, inputFilename)\\n                                                    if inputFilename == filename:\\n                                                        inputTime = os.path.getmtime(inputFile)\\n                                                        outputTime = os.path.getmtime(inFile)\\n                                                        print(\"Matched: \", (inputTime > outputTime))\\n                                                        inputChanged = (inputTime > outputTime)\\n                                                        break\\n                                            '\n                                else:\n                                    inputFile = self.batchList[idx]['finput']\n                                    inputTime = os.path.getmtime(finput)\n                                    outputTime = os.path.getmtime(inFile)\n                                    inputChanged = inputTime > outputTime\n                                break\n                        if not inputFound:\n                            item['changed'] = True\n                            return True\n                        if inputChanged:\n                            item['changed'] = True\n                            return True\n                item['changed'] = False\n                return False\n            if item['args'].has_key('d'):\n                inputFiles = item['finput'].split('|')\n                filesChanged = False\n                for inFile in inputFiles:\n                    if inFile != '':\n                        filename = inFile.split('\\\\')[-1]\n                        directory = item['args']['d']\n                        inputTime = os.path.getmtime(inFile)\n                        outputTime = os.path.getmtime(directory + '\\\\' + filename)\n                        filesChanged = filesChanged or inputTime > outputTime\n                item['changed'] = filesChanged\n                return filesChanged\n            else:\n                inputTime = os.path.getmtime(finput)\n                outputTime = os.path.getmtime(foutput)\n                item['changed'] = inputTime > outputTime\n                return inputTime > outputTime\n    else:\n        item['changed'] = True\n        return True\n    item['changed'] = True\n    return True"
        ]
    },
    {
        "func_name": "OnBatchItemSelection",
        "original": "def OnBatchItemSelection(self, event):\n    if not len(self.batchTree.GetSelections()):\n        return\n    try:\n        selectedItemId = self.batchTree.GetSelections()[0]\n        selectedItemIndex = int(self.batchTree.GetItemText(selectedItemId).split()[0]) - 1\n        batchItem = self.batchList[selectedItemIndex]\n        print('\\n' + self.BuildCommand(batchItem))\n        if batchItem['cmd'].count('maya2egg'):\n            self.toolComboBox.SetStringSelection('maya2egg')\n            self.OnTool(None)\n            self.m2e_mayaVerComboBox.SetValue(batchItem['cmd'].split('maya2egg')[1])\n            self.m2e_mayaFileTxt.SetValue(batchItem['finput'])\n            self.m2e_exportDestTxt.SetValue(batchItem['foutput'])\n            self.m2e_mayaUnitsComboBox.SetValue(batchItem['args']['ui'])\n            self.m2e_pandaUnitsComboBox.SetValue(batchItem['args']['uo'])\n            self.m2e_backfaceChk.SetValue(batchItem['args'].has_key('bface'))\n            self.m2e_polygonOutputChk.SetValue(batchItem['args'].has_key('p'))\n            self.m2e_tbnallChk.SetValue(batchItem['args'].has_key('tbnall'))\n            self.m2e_subsetsChk.SetValue(batchItem['args'].has_key('subset'))\n            self.m2e_subsetsTxt.SetValue('' if not batchItem['args'].has_key('subset') else batchItem['args']['subset'])\n            self.m2e_excludesChk.SetValue(batchItem['args'].has_key('exclude'))\n            self.m2e_excludesTxt.SetValue('' if not batchItem['args'].has_key('exclude') else batchItem['args']['exclude'])\n            self.m2e_animOptChoice.SetStringSelection(batchItem['args']['a'])\n            self.m2e_charNameChk.SetValue(batchItem['args'].has_key('cn'))\n            self.m2e_charNameTxt.SetValue('' if not batchItem['args'].has_key('cn') else batchItem['args']['cn'])\n            self.m2e_startFrameChk.SetValue(batchItem['args'].has_key('sf'))\n            self.m2e_startFrameSpin.SetValue(0 if not batchItem['args'].has_key('sf') else int(batchItem['args']['sf']))\n            self.m2e_endFrameChk.SetValue(batchItem['args'].has_key('ef'))\n            self.m2e_endFrameSpin.SetValue(0 if not batchItem['args'].has_key('ef') else int(batchItem['args']['ef']))\n            self.m2e_frameRateInChk.SetValue(batchItem['args'].has_key('fri'))\n            self.m2e_frameRateInSpin.SetValue(0 if not batchItem['args'].has_key('fri') else int(batchItem['args']['fri']))\n            self.m2e_frameRateOutChk.SetValue(batchItem['args'].has_key('fro'))\n            self.m2e_frameRateOutSpin.SetValue(0 if not batchItem['args'].has_key('fro') else int(batchItem['args']['fro']))\n            self.m2e_subrootsChk.SetValue(batchItem['args'].has_key('subroot'))\n            self.m2e_subrootsTxt.SetValue('' if not batchItem['args'].has_key('subroot') else batchItem['args']['subroot'])\n            self.m2e_legacyShaderChk.SetValue(batchItem['args'].has_key('legacy-shader'))\n            self.m2e_copyTexChk.SetValue(batchItem['args'].has_key('copytex'))\n            self.m2e_copyTexPathTxt.SetValue('' if not batchItem['args'].has_key('copytex') else batchItem['args']['copytex'])\n            self.m2e_pathReplaceChk.SetValue(batchItem['args'].has_key('pr'))\n            self.m2e_pathReplaceTxt.SetValue('' if not batchItem['args'].has_key('pr') else batchItem['args']['pr'])\n        elif batchItem['cmd'].count('egg2bam'):\n            self.toolComboBox.SetStringSelection('egg2bam')\n            self.OnTool(None)\n            self.e2b_eggFileTxt.SetValue(batchItem['finput'])\n            self.e2b_exportDestTxt.SetValue(batchItem['foutput'])\n            self.e2b_useCurrEggChk.SetValue(0)\n            self.e2b_flattenChk.SetValue(batchItem['args'].has_key('flatten'))\n            self.e2b_embedTexChk.SetValue(batchItem['args'].has_key('rawtex'))\n        elif batchItem['cmd'].count('egg-rename'):\n            self.toolComboBox.SetStringSelection('egg-rename')\n            self.OnTool(None)\n            self.rename_eggList = []\n            for filename in batchItem['finput'].split('|'):\n                if filename:\n                    self.rename_eggList.append(filename)\n            self.UpdateEggRenameDisplay()\n            self.rename_exportInPlaceChk.SetValue(batchItem['args'].has_key('inplace'))\n            self.rename_exportFileTxt.SetValue(batchItem['foutput'])\n            if batchItem['args'].has_key('d'):\n                self.rename_exportDirTxt.SetValue(batchItem['args']['d'])\n            else:\n                self.rename_exportDirTxt.SetValue('')\n            self.OnRenameInPlace(None)\n            self.rename_stripPrefixChk.SetValue(batchItem['args'].has_key('strip_prefix'))\n            self.rename_stripPrefixTxt.SetValue('' if not batchItem['args'].has_key('strip_prefix') else batchItem['args']['strip_prefix'])\n        elif batchItem['cmd'].count('egg-optchar'):\n            self.toolComboBox.SetStringSelection('egg-optchar')\n            self.OnTool(None)\n            self.optchar_eggList = []\n            for filename in batchItem['finput'].split('|'):\n                if filename:\n                    self.optchar_eggList.append(filename)\n            self.UpdateEggOptcharDisplay()\n            self.optchar_exportInPlaceChk.SetValue(batchItem['args'].has_key('inplace'))\n            self.optchar_exportFileTxt.SetValue(batchItem['foutput'])\n            if batchItem['args'].has_key('d'):\n                self.optchar_exportDirTxt.SetValue(batchItem['args']['d'])\n            else:\n                self.optchar_exportDirTxt.SetValue('')\n            self.OnOptcharInPlace(None)\n            self.optchar_keepAllJointsChk.SetValue(batchItem['args'].has_key('keepall'))\n            self.optchar_keepJointsChk.SetValue(batchItem['args'].has_key('keep'))\n            self.optchar_keepJointsTxt.SetValue('' if not batchItem['args'].has_key('keep') else batchItem['args']['keep'])\n            self.optchar_dropJointsChk.SetValue(batchItem['args'].has_key('drop'))\n            self.optchar_dropJointsTxt.SetValue('' if not batchItem['args'].has_key('drop') else batchItem['args']['drop'])\n            self.optchar_exposeJointsChk.SetValue(batchItem['args'].has_key('expose'))\n            self.optchar_exposeJointsTxt.SetValue('' if not batchItem['args'].has_key('expose') else batchItem['args']['expose'])\n            self.optchar_flagGeometryChk.SetValue(batchItem['args'].has_key('flag'))\n            self.optchar_flagGeometryTxt.SetValue('' if not batchItem['args'].has_key('flag') else batchItem['args']['flag'])\n            self.optchar_dartChoice.SetStringSelection(batchItem['args']['dart'])\n        elif batchItem['cmd'].count('egg-palettize'):\n            self.toolComboBox.SetStringSelection('egg-palettize')\n            self.OnTool(None)\n            self.palettize_eggList = []\n            for filename in batchItem['finput'].split('|'):\n                if filename:\n                    self.palettize_eggList.append(filename)\n            self.UpdateEggPalettizeDisplay()\n            self.palettize_exportInPlaceChk.SetValue(batchItem['args'].has_key('inplace'))\n            self.palettize_exportFileTxt.SetValue(batchItem['foutput'])\n            if batchItem['args'].has_key('d'):\n                self.palettize_exportDirTxt.SetValue(batchItem['args']['d'])\n            else:\n                self.palettize_exportDirTxt.SetValue('')\n            self.OnPalettizeInPlace(None)\n            self.palettize_exportTexTxt.SetValue(batchItem['args']['dm'])\n            self.palettize_saveTxaTxt.SetValue(batchItem['args']['af'])\n            try:\n                self.txaExtraLines = []\n                txafile = open(batchItem['args']['af'], 'r')\n                for line in txafile:\n                    words = line.split()\n                    if len(words):\n                        if words[0] == ':palette':\n                            self.palettize_sizeWidthTxt.SetValue(words[1])\n                            self.palettize_sizeHeightTxt.SetValue(words[2])\n                        elif words[0] == ':imagetype':\n                            self.palettize_imageTypeChoice.SetStringSelection(words[1])\n                        elif words[0] == ':powertwo':\n                            self.palettize_powerOf2Chk.SetValue(int(words[1]))\n                        elif words[0] == ':background':\n                            self.palettize_redTxt.SetValue(int(words[1]))\n                            self.palettize_greenTxt.SetValue(int(words[2]))\n                            self.palettize_blueTxt.SetValue(int(words[3]))\n                            self.palettize_alphaTxt.SetValue(int(words[4]))\n                        elif words[0] == ':margin':\n                            self.palettize_marginTxt.SetValue(int(words[1]))\n                        elif words[0] == ':coverage':\n                            self.palettize_coverageTxt.SetValue(words[1])\n                        else:\n                            self.txaExtraLines.append(line)\n                txafile.close()\n            except:\n                print('Error opening .txa file!')\n        self.batchItemNameTxt.SetValue(batchItem['label'])\n    except ValueError:\n        return",
        "mutated": [
            "def OnBatchItemSelection(self, event):\n    if False:\n        i = 10\n    if not len(self.batchTree.GetSelections()):\n        return\n    try:\n        selectedItemId = self.batchTree.GetSelections()[0]\n        selectedItemIndex = int(self.batchTree.GetItemText(selectedItemId).split()[0]) - 1\n        batchItem = self.batchList[selectedItemIndex]\n        print('\\n' + self.BuildCommand(batchItem))\n        if batchItem['cmd'].count('maya2egg'):\n            self.toolComboBox.SetStringSelection('maya2egg')\n            self.OnTool(None)\n            self.m2e_mayaVerComboBox.SetValue(batchItem['cmd'].split('maya2egg')[1])\n            self.m2e_mayaFileTxt.SetValue(batchItem['finput'])\n            self.m2e_exportDestTxt.SetValue(batchItem['foutput'])\n            self.m2e_mayaUnitsComboBox.SetValue(batchItem['args']['ui'])\n            self.m2e_pandaUnitsComboBox.SetValue(batchItem['args']['uo'])\n            self.m2e_backfaceChk.SetValue(batchItem['args'].has_key('bface'))\n            self.m2e_polygonOutputChk.SetValue(batchItem['args'].has_key('p'))\n            self.m2e_tbnallChk.SetValue(batchItem['args'].has_key('tbnall'))\n            self.m2e_subsetsChk.SetValue(batchItem['args'].has_key('subset'))\n            self.m2e_subsetsTxt.SetValue('' if not batchItem['args'].has_key('subset') else batchItem['args']['subset'])\n            self.m2e_excludesChk.SetValue(batchItem['args'].has_key('exclude'))\n            self.m2e_excludesTxt.SetValue('' if not batchItem['args'].has_key('exclude') else batchItem['args']['exclude'])\n            self.m2e_animOptChoice.SetStringSelection(batchItem['args']['a'])\n            self.m2e_charNameChk.SetValue(batchItem['args'].has_key('cn'))\n            self.m2e_charNameTxt.SetValue('' if not batchItem['args'].has_key('cn') else batchItem['args']['cn'])\n            self.m2e_startFrameChk.SetValue(batchItem['args'].has_key('sf'))\n            self.m2e_startFrameSpin.SetValue(0 if not batchItem['args'].has_key('sf') else int(batchItem['args']['sf']))\n            self.m2e_endFrameChk.SetValue(batchItem['args'].has_key('ef'))\n            self.m2e_endFrameSpin.SetValue(0 if not batchItem['args'].has_key('ef') else int(batchItem['args']['ef']))\n            self.m2e_frameRateInChk.SetValue(batchItem['args'].has_key('fri'))\n            self.m2e_frameRateInSpin.SetValue(0 if not batchItem['args'].has_key('fri') else int(batchItem['args']['fri']))\n            self.m2e_frameRateOutChk.SetValue(batchItem['args'].has_key('fro'))\n            self.m2e_frameRateOutSpin.SetValue(0 if not batchItem['args'].has_key('fro') else int(batchItem['args']['fro']))\n            self.m2e_subrootsChk.SetValue(batchItem['args'].has_key('subroot'))\n            self.m2e_subrootsTxt.SetValue('' if not batchItem['args'].has_key('subroot') else batchItem['args']['subroot'])\n            self.m2e_legacyShaderChk.SetValue(batchItem['args'].has_key('legacy-shader'))\n            self.m2e_copyTexChk.SetValue(batchItem['args'].has_key('copytex'))\n            self.m2e_copyTexPathTxt.SetValue('' if not batchItem['args'].has_key('copytex') else batchItem['args']['copytex'])\n            self.m2e_pathReplaceChk.SetValue(batchItem['args'].has_key('pr'))\n            self.m2e_pathReplaceTxt.SetValue('' if not batchItem['args'].has_key('pr') else batchItem['args']['pr'])\n        elif batchItem['cmd'].count('egg2bam'):\n            self.toolComboBox.SetStringSelection('egg2bam')\n            self.OnTool(None)\n            self.e2b_eggFileTxt.SetValue(batchItem['finput'])\n            self.e2b_exportDestTxt.SetValue(batchItem['foutput'])\n            self.e2b_useCurrEggChk.SetValue(0)\n            self.e2b_flattenChk.SetValue(batchItem['args'].has_key('flatten'))\n            self.e2b_embedTexChk.SetValue(batchItem['args'].has_key('rawtex'))\n        elif batchItem['cmd'].count('egg-rename'):\n            self.toolComboBox.SetStringSelection('egg-rename')\n            self.OnTool(None)\n            self.rename_eggList = []\n            for filename in batchItem['finput'].split('|'):\n                if filename:\n                    self.rename_eggList.append(filename)\n            self.UpdateEggRenameDisplay()\n            self.rename_exportInPlaceChk.SetValue(batchItem['args'].has_key('inplace'))\n            self.rename_exportFileTxt.SetValue(batchItem['foutput'])\n            if batchItem['args'].has_key('d'):\n                self.rename_exportDirTxt.SetValue(batchItem['args']['d'])\n            else:\n                self.rename_exportDirTxt.SetValue('')\n            self.OnRenameInPlace(None)\n            self.rename_stripPrefixChk.SetValue(batchItem['args'].has_key('strip_prefix'))\n            self.rename_stripPrefixTxt.SetValue('' if not batchItem['args'].has_key('strip_prefix') else batchItem['args']['strip_prefix'])\n        elif batchItem['cmd'].count('egg-optchar'):\n            self.toolComboBox.SetStringSelection('egg-optchar')\n            self.OnTool(None)\n            self.optchar_eggList = []\n            for filename in batchItem['finput'].split('|'):\n                if filename:\n                    self.optchar_eggList.append(filename)\n            self.UpdateEggOptcharDisplay()\n            self.optchar_exportInPlaceChk.SetValue(batchItem['args'].has_key('inplace'))\n            self.optchar_exportFileTxt.SetValue(batchItem['foutput'])\n            if batchItem['args'].has_key('d'):\n                self.optchar_exportDirTxt.SetValue(batchItem['args']['d'])\n            else:\n                self.optchar_exportDirTxt.SetValue('')\n            self.OnOptcharInPlace(None)\n            self.optchar_keepAllJointsChk.SetValue(batchItem['args'].has_key('keepall'))\n            self.optchar_keepJointsChk.SetValue(batchItem['args'].has_key('keep'))\n            self.optchar_keepJointsTxt.SetValue('' if not batchItem['args'].has_key('keep') else batchItem['args']['keep'])\n            self.optchar_dropJointsChk.SetValue(batchItem['args'].has_key('drop'))\n            self.optchar_dropJointsTxt.SetValue('' if not batchItem['args'].has_key('drop') else batchItem['args']['drop'])\n            self.optchar_exposeJointsChk.SetValue(batchItem['args'].has_key('expose'))\n            self.optchar_exposeJointsTxt.SetValue('' if not batchItem['args'].has_key('expose') else batchItem['args']['expose'])\n            self.optchar_flagGeometryChk.SetValue(batchItem['args'].has_key('flag'))\n            self.optchar_flagGeometryTxt.SetValue('' if not batchItem['args'].has_key('flag') else batchItem['args']['flag'])\n            self.optchar_dartChoice.SetStringSelection(batchItem['args']['dart'])\n        elif batchItem['cmd'].count('egg-palettize'):\n            self.toolComboBox.SetStringSelection('egg-palettize')\n            self.OnTool(None)\n            self.palettize_eggList = []\n            for filename in batchItem['finput'].split('|'):\n                if filename:\n                    self.palettize_eggList.append(filename)\n            self.UpdateEggPalettizeDisplay()\n            self.palettize_exportInPlaceChk.SetValue(batchItem['args'].has_key('inplace'))\n            self.palettize_exportFileTxt.SetValue(batchItem['foutput'])\n            if batchItem['args'].has_key('d'):\n                self.palettize_exportDirTxt.SetValue(batchItem['args']['d'])\n            else:\n                self.palettize_exportDirTxt.SetValue('')\n            self.OnPalettizeInPlace(None)\n            self.palettize_exportTexTxt.SetValue(batchItem['args']['dm'])\n            self.palettize_saveTxaTxt.SetValue(batchItem['args']['af'])\n            try:\n                self.txaExtraLines = []\n                txafile = open(batchItem['args']['af'], 'r')\n                for line in txafile:\n                    words = line.split()\n                    if len(words):\n                        if words[0] == ':palette':\n                            self.palettize_sizeWidthTxt.SetValue(words[1])\n                            self.palettize_sizeHeightTxt.SetValue(words[2])\n                        elif words[0] == ':imagetype':\n                            self.palettize_imageTypeChoice.SetStringSelection(words[1])\n                        elif words[0] == ':powertwo':\n                            self.palettize_powerOf2Chk.SetValue(int(words[1]))\n                        elif words[0] == ':background':\n                            self.palettize_redTxt.SetValue(int(words[1]))\n                            self.palettize_greenTxt.SetValue(int(words[2]))\n                            self.palettize_blueTxt.SetValue(int(words[3]))\n                            self.palettize_alphaTxt.SetValue(int(words[4]))\n                        elif words[0] == ':margin':\n                            self.palettize_marginTxt.SetValue(int(words[1]))\n                        elif words[0] == ':coverage':\n                            self.palettize_coverageTxt.SetValue(words[1])\n                        else:\n                            self.txaExtraLines.append(line)\n                txafile.close()\n            except:\n                print('Error opening .txa file!')\n        self.batchItemNameTxt.SetValue(batchItem['label'])\n    except ValueError:\n        return",
            "def OnBatchItemSelection(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not len(self.batchTree.GetSelections()):\n        return\n    try:\n        selectedItemId = self.batchTree.GetSelections()[0]\n        selectedItemIndex = int(self.batchTree.GetItemText(selectedItemId).split()[0]) - 1\n        batchItem = self.batchList[selectedItemIndex]\n        print('\\n' + self.BuildCommand(batchItem))\n        if batchItem['cmd'].count('maya2egg'):\n            self.toolComboBox.SetStringSelection('maya2egg')\n            self.OnTool(None)\n            self.m2e_mayaVerComboBox.SetValue(batchItem['cmd'].split('maya2egg')[1])\n            self.m2e_mayaFileTxt.SetValue(batchItem['finput'])\n            self.m2e_exportDestTxt.SetValue(batchItem['foutput'])\n            self.m2e_mayaUnitsComboBox.SetValue(batchItem['args']['ui'])\n            self.m2e_pandaUnitsComboBox.SetValue(batchItem['args']['uo'])\n            self.m2e_backfaceChk.SetValue(batchItem['args'].has_key('bface'))\n            self.m2e_polygonOutputChk.SetValue(batchItem['args'].has_key('p'))\n            self.m2e_tbnallChk.SetValue(batchItem['args'].has_key('tbnall'))\n            self.m2e_subsetsChk.SetValue(batchItem['args'].has_key('subset'))\n            self.m2e_subsetsTxt.SetValue('' if not batchItem['args'].has_key('subset') else batchItem['args']['subset'])\n            self.m2e_excludesChk.SetValue(batchItem['args'].has_key('exclude'))\n            self.m2e_excludesTxt.SetValue('' if not batchItem['args'].has_key('exclude') else batchItem['args']['exclude'])\n            self.m2e_animOptChoice.SetStringSelection(batchItem['args']['a'])\n            self.m2e_charNameChk.SetValue(batchItem['args'].has_key('cn'))\n            self.m2e_charNameTxt.SetValue('' if not batchItem['args'].has_key('cn') else batchItem['args']['cn'])\n            self.m2e_startFrameChk.SetValue(batchItem['args'].has_key('sf'))\n            self.m2e_startFrameSpin.SetValue(0 if not batchItem['args'].has_key('sf') else int(batchItem['args']['sf']))\n            self.m2e_endFrameChk.SetValue(batchItem['args'].has_key('ef'))\n            self.m2e_endFrameSpin.SetValue(0 if not batchItem['args'].has_key('ef') else int(batchItem['args']['ef']))\n            self.m2e_frameRateInChk.SetValue(batchItem['args'].has_key('fri'))\n            self.m2e_frameRateInSpin.SetValue(0 if not batchItem['args'].has_key('fri') else int(batchItem['args']['fri']))\n            self.m2e_frameRateOutChk.SetValue(batchItem['args'].has_key('fro'))\n            self.m2e_frameRateOutSpin.SetValue(0 if not batchItem['args'].has_key('fro') else int(batchItem['args']['fro']))\n            self.m2e_subrootsChk.SetValue(batchItem['args'].has_key('subroot'))\n            self.m2e_subrootsTxt.SetValue('' if not batchItem['args'].has_key('subroot') else batchItem['args']['subroot'])\n            self.m2e_legacyShaderChk.SetValue(batchItem['args'].has_key('legacy-shader'))\n            self.m2e_copyTexChk.SetValue(batchItem['args'].has_key('copytex'))\n            self.m2e_copyTexPathTxt.SetValue('' if not batchItem['args'].has_key('copytex') else batchItem['args']['copytex'])\n            self.m2e_pathReplaceChk.SetValue(batchItem['args'].has_key('pr'))\n            self.m2e_pathReplaceTxt.SetValue('' if not batchItem['args'].has_key('pr') else batchItem['args']['pr'])\n        elif batchItem['cmd'].count('egg2bam'):\n            self.toolComboBox.SetStringSelection('egg2bam')\n            self.OnTool(None)\n            self.e2b_eggFileTxt.SetValue(batchItem['finput'])\n            self.e2b_exportDestTxt.SetValue(batchItem['foutput'])\n            self.e2b_useCurrEggChk.SetValue(0)\n            self.e2b_flattenChk.SetValue(batchItem['args'].has_key('flatten'))\n            self.e2b_embedTexChk.SetValue(batchItem['args'].has_key('rawtex'))\n        elif batchItem['cmd'].count('egg-rename'):\n            self.toolComboBox.SetStringSelection('egg-rename')\n            self.OnTool(None)\n            self.rename_eggList = []\n            for filename in batchItem['finput'].split('|'):\n                if filename:\n                    self.rename_eggList.append(filename)\n            self.UpdateEggRenameDisplay()\n            self.rename_exportInPlaceChk.SetValue(batchItem['args'].has_key('inplace'))\n            self.rename_exportFileTxt.SetValue(batchItem['foutput'])\n            if batchItem['args'].has_key('d'):\n                self.rename_exportDirTxt.SetValue(batchItem['args']['d'])\n            else:\n                self.rename_exportDirTxt.SetValue('')\n            self.OnRenameInPlace(None)\n            self.rename_stripPrefixChk.SetValue(batchItem['args'].has_key('strip_prefix'))\n            self.rename_stripPrefixTxt.SetValue('' if not batchItem['args'].has_key('strip_prefix') else batchItem['args']['strip_prefix'])\n        elif batchItem['cmd'].count('egg-optchar'):\n            self.toolComboBox.SetStringSelection('egg-optchar')\n            self.OnTool(None)\n            self.optchar_eggList = []\n            for filename in batchItem['finput'].split('|'):\n                if filename:\n                    self.optchar_eggList.append(filename)\n            self.UpdateEggOptcharDisplay()\n            self.optchar_exportInPlaceChk.SetValue(batchItem['args'].has_key('inplace'))\n            self.optchar_exportFileTxt.SetValue(batchItem['foutput'])\n            if batchItem['args'].has_key('d'):\n                self.optchar_exportDirTxt.SetValue(batchItem['args']['d'])\n            else:\n                self.optchar_exportDirTxt.SetValue('')\n            self.OnOptcharInPlace(None)\n            self.optchar_keepAllJointsChk.SetValue(batchItem['args'].has_key('keepall'))\n            self.optchar_keepJointsChk.SetValue(batchItem['args'].has_key('keep'))\n            self.optchar_keepJointsTxt.SetValue('' if not batchItem['args'].has_key('keep') else batchItem['args']['keep'])\n            self.optchar_dropJointsChk.SetValue(batchItem['args'].has_key('drop'))\n            self.optchar_dropJointsTxt.SetValue('' if not batchItem['args'].has_key('drop') else batchItem['args']['drop'])\n            self.optchar_exposeJointsChk.SetValue(batchItem['args'].has_key('expose'))\n            self.optchar_exposeJointsTxt.SetValue('' if not batchItem['args'].has_key('expose') else batchItem['args']['expose'])\n            self.optchar_flagGeometryChk.SetValue(batchItem['args'].has_key('flag'))\n            self.optchar_flagGeometryTxt.SetValue('' if not batchItem['args'].has_key('flag') else batchItem['args']['flag'])\n            self.optchar_dartChoice.SetStringSelection(batchItem['args']['dart'])\n        elif batchItem['cmd'].count('egg-palettize'):\n            self.toolComboBox.SetStringSelection('egg-palettize')\n            self.OnTool(None)\n            self.palettize_eggList = []\n            for filename in batchItem['finput'].split('|'):\n                if filename:\n                    self.palettize_eggList.append(filename)\n            self.UpdateEggPalettizeDisplay()\n            self.palettize_exportInPlaceChk.SetValue(batchItem['args'].has_key('inplace'))\n            self.palettize_exportFileTxt.SetValue(batchItem['foutput'])\n            if batchItem['args'].has_key('d'):\n                self.palettize_exportDirTxt.SetValue(batchItem['args']['d'])\n            else:\n                self.palettize_exportDirTxt.SetValue('')\n            self.OnPalettizeInPlace(None)\n            self.palettize_exportTexTxt.SetValue(batchItem['args']['dm'])\n            self.palettize_saveTxaTxt.SetValue(batchItem['args']['af'])\n            try:\n                self.txaExtraLines = []\n                txafile = open(batchItem['args']['af'], 'r')\n                for line in txafile:\n                    words = line.split()\n                    if len(words):\n                        if words[0] == ':palette':\n                            self.palettize_sizeWidthTxt.SetValue(words[1])\n                            self.palettize_sizeHeightTxt.SetValue(words[2])\n                        elif words[0] == ':imagetype':\n                            self.palettize_imageTypeChoice.SetStringSelection(words[1])\n                        elif words[0] == ':powertwo':\n                            self.palettize_powerOf2Chk.SetValue(int(words[1]))\n                        elif words[0] == ':background':\n                            self.palettize_redTxt.SetValue(int(words[1]))\n                            self.palettize_greenTxt.SetValue(int(words[2]))\n                            self.palettize_blueTxt.SetValue(int(words[3]))\n                            self.palettize_alphaTxt.SetValue(int(words[4]))\n                        elif words[0] == ':margin':\n                            self.palettize_marginTxt.SetValue(int(words[1]))\n                        elif words[0] == ':coverage':\n                            self.palettize_coverageTxt.SetValue(words[1])\n                        else:\n                            self.txaExtraLines.append(line)\n                txafile.close()\n            except:\n                print('Error opening .txa file!')\n        self.batchItemNameTxt.SetValue(batchItem['label'])\n    except ValueError:\n        return",
            "def OnBatchItemSelection(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not len(self.batchTree.GetSelections()):\n        return\n    try:\n        selectedItemId = self.batchTree.GetSelections()[0]\n        selectedItemIndex = int(self.batchTree.GetItemText(selectedItemId).split()[0]) - 1\n        batchItem = self.batchList[selectedItemIndex]\n        print('\\n' + self.BuildCommand(batchItem))\n        if batchItem['cmd'].count('maya2egg'):\n            self.toolComboBox.SetStringSelection('maya2egg')\n            self.OnTool(None)\n            self.m2e_mayaVerComboBox.SetValue(batchItem['cmd'].split('maya2egg')[1])\n            self.m2e_mayaFileTxt.SetValue(batchItem['finput'])\n            self.m2e_exportDestTxt.SetValue(batchItem['foutput'])\n            self.m2e_mayaUnitsComboBox.SetValue(batchItem['args']['ui'])\n            self.m2e_pandaUnitsComboBox.SetValue(batchItem['args']['uo'])\n            self.m2e_backfaceChk.SetValue(batchItem['args'].has_key('bface'))\n            self.m2e_polygonOutputChk.SetValue(batchItem['args'].has_key('p'))\n            self.m2e_tbnallChk.SetValue(batchItem['args'].has_key('tbnall'))\n            self.m2e_subsetsChk.SetValue(batchItem['args'].has_key('subset'))\n            self.m2e_subsetsTxt.SetValue('' if not batchItem['args'].has_key('subset') else batchItem['args']['subset'])\n            self.m2e_excludesChk.SetValue(batchItem['args'].has_key('exclude'))\n            self.m2e_excludesTxt.SetValue('' if not batchItem['args'].has_key('exclude') else batchItem['args']['exclude'])\n            self.m2e_animOptChoice.SetStringSelection(batchItem['args']['a'])\n            self.m2e_charNameChk.SetValue(batchItem['args'].has_key('cn'))\n            self.m2e_charNameTxt.SetValue('' if not batchItem['args'].has_key('cn') else batchItem['args']['cn'])\n            self.m2e_startFrameChk.SetValue(batchItem['args'].has_key('sf'))\n            self.m2e_startFrameSpin.SetValue(0 if not batchItem['args'].has_key('sf') else int(batchItem['args']['sf']))\n            self.m2e_endFrameChk.SetValue(batchItem['args'].has_key('ef'))\n            self.m2e_endFrameSpin.SetValue(0 if not batchItem['args'].has_key('ef') else int(batchItem['args']['ef']))\n            self.m2e_frameRateInChk.SetValue(batchItem['args'].has_key('fri'))\n            self.m2e_frameRateInSpin.SetValue(0 if not batchItem['args'].has_key('fri') else int(batchItem['args']['fri']))\n            self.m2e_frameRateOutChk.SetValue(batchItem['args'].has_key('fro'))\n            self.m2e_frameRateOutSpin.SetValue(0 if not batchItem['args'].has_key('fro') else int(batchItem['args']['fro']))\n            self.m2e_subrootsChk.SetValue(batchItem['args'].has_key('subroot'))\n            self.m2e_subrootsTxt.SetValue('' if not batchItem['args'].has_key('subroot') else batchItem['args']['subroot'])\n            self.m2e_legacyShaderChk.SetValue(batchItem['args'].has_key('legacy-shader'))\n            self.m2e_copyTexChk.SetValue(batchItem['args'].has_key('copytex'))\n            self.m2e_copyTexPathTxt.SetValue('' if not batchItem['args'].has_key('copytex') else batchItem['args']['copytex'])\n            self.m2e_pathReplaceChk.SetValue(batchItem['args'].has_key('pr'))\n            self.m2e_pathReplaceTxt.SetValue('' if not batchItem['args'].has_key('pr') else batchItem['args']['pr'])\n        elif batchItem['cmd'].count('egg2bam'):\n            self.toolComboBox.SetStringSelection('egg2bam')\n            self.OnTool(None)\n            self.e2b_eggFileTxt.SetValue(batchItem['finput'])\n            self.e2b_exportDestTxt.SetValue(batchItem['foutput'])\n            self.e2b_useCurrEggChk.SetValue(0)\n            self.e2b_flattenChk.SetValue(batchItem['args'].has_key('flatten'))\n            self.e2b_embedTexChk.SetValue(batchItem['args'].has_key('rawtex'))\n        elif batchItem['cmd'].count('egg-rename'):\n            self.toolComboBox.SetStringSelection('egg-rename')\n            self.OnTool(None)\n            self.rename_eggList = []\n            for filename in batchItem['finput'].split('|'):\n                if filename:\n                    self.rename_eggList.append(filename)\n            self.UpdateEggRenameDisplay()\n            self.rename_exportInPlaceChk.SetValue(batchItem['args'].has_key('inplace'))\n            self.rename_exportFileTxt.SetValue(batchItem['foutput'])\n            if batchItem['args'].has_key('d'):\n                self.rename_exportDirTxt.SetValue(batchItem['args']['d'])\n            else:\n                self.rename_exportDirTxt.SetValue('')\n            self.OnRenameInPlace(None)\n            self.rename_stripPrefixChk.SetValue(batchItem['args'].has_key('strip_prefix'))\n            self.rename_stripPrefixTxt.SetValue('' if not batchItem['args'].has_key('strip_prefix') else batchItem['args']['strip_prefix'])\n        elif batchItem['cmd'].count('egg-optchar'):\n            self.toolComboBox.SetStringSelection('egg-optchar')\n            self.OnTool(None)\n            self.optchar_eggList = []\n            for filename in batchItem['finput'].split('|'):\n                if filename:\n                    self.optchar_eggList.append(filename)\n            self.UpdateEggOptcharDisplay()\n            self.optchar_exportInPlaceChk.SetValue(batchItem['args'].has_key('inplace'))\n            self.optchar_exportFileTxt.SetValue(batchItem['foutput'])\n            if batchItem['args'].has_key('d'):\n                self.optchar_exportDirTxt.SetValue(batchItem['args']['d'])\n            else:\n                self.optchar_exportDirTxt.SetValue('')\n            self.OnOptcharInPlace(None)\n            self.optchar_keepAllJointsChk.SetValue(batchItem['args'].has_key('keepall'))\n            self.optchar_keepJointsChk.SetValue(batchItem['args'].has_key('keep'))\n            self.optchar_keepJointsTxt.SetValue('' if not batchItem['args'].has_key('keep') else batchItem['args']['keep'])\n            self.optchar_dropJointsChk.SetValue(batchItem['args'].has_key('drop'))\n            self.optchar_dropJointsTxt.SetValue('' if not batchItem['args'].has_key('drop') else batchItem['args']['drop'])\n            self.optchar_exposeJointsChk.SetValue(batchItem['args'].has_key('expose'))\n            self.optchar_exposeJointsTxt.SetValue('' if not batchItem['args'].has_key('expose') else batchItem['args']['expose'])\n            self.optchar_flagGeometryChk.SetValue(batchItem['args'].has_key('flag'))\n            self.optchar_flagGeometryTxt.SetValue('' if not batchItem['args'].has_key('flag') else batchItem['args']['flag'])\n            self.optchar_dartChoice.SetStringSelection(batchItem['args']['dart'])\n        elif batchItem['cmd'].count('egg-palettize'):\n            self.toolComboBox.SetStringSelection('egg-palettize')\n            self.OnTool(None)\n            self.palettize_eggList = []\n            for filename in batchItem['finput'].split('|'):\n                if filename:\n                    self.palettize_eggList.append(filename)\n            self.UpdateEggPalettizeDisplay()\n            self.palettize_exportInPlaceChk.SetValue(batchItem['args'].has_key('inplace'))\n            self.palettize_exportFileTxt.SetValue(batchItem['foutput'])\n            if batchItem['args'].has_key('d'):\n                self.palettize_exportDirTxt.SetValue(batchItem['args']['d'])\n            else:\n                self.palettize_exportDirTxt.SetValue('')\n            self.OnPalettizeInPlace(None)\n            self.palettize_exportTexTxt.SetValue(batchItem['args']['dm'])\n            self.palettize_saveTxaTxt.SetValue(batchItem['args']['af'])\n            try:\n                self.txaExtraLines = []\n                txafile = open(batchItem['args']['af'], 'r')\n                for line in txafile:\n                    words = line.split()\n                    if len(words):\n                        if words[0] == ':palette':\n                            self.palettize_sizeWidthTxt.SetValue(words[1])\n                            self.palettize_sizeHeightTxt.SetValue(words[2])\n                        elif words[0] == ':imagetype':\n                            self.palettize_imageTypeChoice.SetStringSelection(words[1])\n                        elif words[0] == ':powertwo':\n                            self.palettize_powerOf2Chk.SetValue(int(words[1]))\n                        elif words[0] == ':background':\n                            self.palettize_redTxt.SetValue(int(words[1]))\n                            self.palettize_greenTxt.SetValue(int(words[2]))\n                            self.palettize_blueTxt.SetValue(int(words[3]))\n                            self.palettize_alphaTxt.SetValue(int(words[4]))\n                        elif words[0] == ':margin':\n                            self.palettize_marginTxt.SetValue(int(words[1]))\n                        elif words[0] == ':coverage':\n                            self.palettize_coverageTxt.SetValue(words[1])\n                        else:\n                            self.txaExtraLines.append(line)\n                txafile.close()\n            except:\n                print('Error opening .txa file!')\n        self.batchItemNameTxt.SetValue(batchItem['label'])\n    except ValueError:\n        return",
            "def OnBatchItemSelection(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not len(self.batchTree.GetSelections()):\n        return\n    try:\n        selectedItemId = self.batchTree.GetSelections()[0]\n        selectedItemIndex = int(self.batchTree.GetItemText(selectedItemId).split()[0]) - 1\n        batchItem = self.batchList[selectedItemIndex]\n        print('\\n' + self.BuildCommand(batchItem))\n        if batchItem['cmd'].count('maya2egg'):\n            self.toolComboBox.SetStringSelection('maya2egg')\n            self.OnTool(None)\n            self.m2e_mayaVerComboBox.SetValue(batchItem['cmd'].split('maya2egg')[1])\n            self.m2e_mayaFileTxt.SetValue(batchItem['finput'])\n            self.m2e_exportDestTxt.SetValue(batchItem['foutput'])\n            self.m2e_mayaUnitsComboBox.SetValue(batchItem['args']['ui'])\n            self.m2e_pandaUnitsComboBox.SetValue(batchItem['args']['uo'])\n            self.m2e_backfaceChk.SetValue(batchItem['args'].has_key('bface'))\n            self.m2e_polygonOutputChk.SetValue(batchItem['args'].has_key('p'))\n            self.m2e_tbnallChk.SetValue(batchItem['args'].has_key('tbnall'))\n            self.m2e_subsetsChk.SetValue(batchItem['args'].has_key('subset'))\n            self.m2e_subsetsTxt.SetValue('' if not batchItem['args'].has_key('subset') else batchItem['args']['subset'])\n            self.m2e_excludesChk.SetValue(batchItem['args'].has_key('exclude'))\n            self.m2e_excludesTxt.SetValue('' if not batchItem['args'].has_key('exclude') else batchItem['args']['exclude'])\n            self.m2e_animOptChoice.SetStringSelection(batchItem['args']['a'])\n            self.m2e_charNameChk.SetValue(batchItem['args'].has_key('cn'))\n            self.m2e_charNameTxt.SetValue('' if not batchItem['args'].has_key('cn') else batchItem['args']['cn'])\n            self.m2e_startFrameChk.SetValue(batchItem['args'].has_key('sf'))\n            self.m2e_startFrameSpin.SetValue(0 if not batchItem['args'].has_key('sf') else int(batchItem['args']['sf']))\n            self.m2e_endFrameChk.SetValue(batchItem['args'].has_key('ef'))\n            self.m2e_endFrameSpin.SetValue(0 if not batchItem['args'].has_key('ef') else int(batchItem['args']['ef']))\n            self.m2e_frameRateInChk.SetValue(batchItem['args'].has_key('fri'))\n            self.m2e_frameRateInSpin.SetValue(0 if not batchItem['args'].has_key('fri') else int(batchItem['args']['fri']))\n            self.m2e_frameRateOutChk.SetValue(batchItem['args'].has_key('fro'))\n            self.m2e_frameRateOutSpin.SetValue(0 if not batchItem['args'].has_key('fro') else int(batchItem['args']['fro']))\n            self.m2e_subrootsChk.SetValue(batchItem['args'].has_key('subroot'))\n            self.m2e_subrootsTxt.SetValue('' if not batchItem['args'].has_key('subroot') else batchItem['args']['subroot'])\n            self.m2e_legacyShaderChk.SetValue(batchItem['args'].has_key('legacy-shader'))\n            self.m2e_copyTexChk.SetValue(batchItem['args'].has_key('copytex'))\n            self.m2e_copyTexPathTxt.SetValue('' if not batchItem['args'].has_key('copytex') else batchItem['args']['copytex'])\n            self.m2e_pathReplaceChk.SetValue(batchItem['args'].has_key('pr'))\n            self.m2e_pathReplaceTxt.SetValue('' if not batchItem['args'].has_key('pr') else batchItem['args']['pr'])\n        elif batchItem['cmd'].count('egg2bam'):\n            self.toolComboBox.SetStringSelection('egg2bam')\n            self.OnTool(None)\n            self.e2b_eggFileTxt.SetValue(batchItem['finput'])\n            self.e2b_exportDestTxt.SetValue(batchItem['foutput'])\n            self.e2b_useCurrEggChk.SetValue(0)\n            self.e2b_flattenChk.SetValue(batchItem['args'].has_key('flatten'))\n            self.e2b_embedTexChk.SetValue(batchItem['args'].has_key('rawtex'))\n        elif batchItem['cmd'].count('egg-rename'):\n            self.toolComboBox.SetStringSelection('egg-rename')\n            self.OnTool(None)\n            self.rename_eggList = []\n            for filename in batchItem['finput'].split('|'):\n                if filename:\n                    self.rename_eggList.append(filename)\n            self.UpdateEggRenameDisplay()\n            self.rename_exportInPlaceChk.SetValue(batchItem['args'].has_key('inplace'))\n            self.rename_exportFileTxt.SetValue(batchItem['foutput'])\n            if batchItem['args'].has_key('d'):\n                self.rename_exportDirTxt.SetValue(batchItem['args']['d'])\n            else:\n                self.rename_exportDirTxt.SetValue('')\n            self.OnRenameInPlace(None)\n            self.rename_stripPrefixChk.SetValue(batchItem['args'].has_key('strip_prefix'))\n            self.rename_stripPrefixTxt.SetValue('' if not batchItem['args'].has_key('strip_prefix') else batchItem['args']['strip_prefix'])\n        elif batchItem['cmd'].count('egg-optchar'):\n            self.toolComboBox.SetStringSelection('egg-optchar')\n            self.OnTool(None)\n            self.optchar_eggList = []\n            for filename in batchItem['finput'].split('|'):\n                if filename:\n                    self.optchar_eggList.append(filename)\n            self.UpdateEggOptcharDisplay()\n            self.optchar_exportInPlaceChk.SetValue(batchItem['args'].has_key('inplace'))\n            self.optchar_exportFileTxt.SetValue(batchItem['foutput'])\n            if batchItem['args'].has_key('d'):\n                self.optchar_exportDirTxt.SetValue(batchItem['args']['d'])\n            else:\n                self.optchar_exportDirTxt.SetValue('')\n            self.OnOptcharInPlace(None)\n            self.optchar_keepAllJointsChk.SetValue(batchItem['args'].has_key('keepall'))\n            self.optchar_keepJointsChk.SetValue(batchItem['args'].has_key('keep'))\n            self.optchar_keepJointsTxt.SetValue('' if not batchItem['args'].has_key('keep') else batchItem['args']['keep'])\n            self.optchar_dropJointsChk.SetValue(batchItem['args'].has_key('drop'))\n            self.optchar_dropJointsTxt.SetValue('' if not batchItem['args'].has_key('drop') else batchItem['args']['drop'])\n            self.optchar_exposeJointsChk.SetValue(batchItem['args'].has_key('expose'))\n            self.optchar_exposeJointsTxt.SetValue('' if not batchItem['args'].has_key('expose') else batchItem['args']['expose'])\n            self.optchar_flagGeometryChk.SetValue(batchItem['args'].has_key('flag'))\n            self.optchar_flagGeometryTxt.SetValue('' if not batchItem['args'].has_key('flag') else batchItem['args']['flag'])\n            self.optchar_dartChoice.SetStringSelection(batchItem['args']['dart'])\n        elif batchItem['cmd'].count('egg-palettize'):\n            self.toolComboBox.SetStringSelection('egg-palettize')\n            self.OnTool(None)\n            self.palettize_eggList = []\n            for filename in batchItem['finput'].split('|'):\n                if filename:\n                    self.palettize_eggList.append(filename)\n            self.UpdateEggPalettizeDisplay()\n            self.palettize_exportInPlaceChk.SetValue(batchItem['args'].has_key('inplace'))\n            self.palettize_exportFileTxt.SetValue(batchItem['foutput'])\n            if batchItem['args'].has_key('d'):\n                self.palettize_exportDirTxt.SetValue(batchItem['args']['d'])\n            else:\n                self.palettize_exportDirTxt.SetValue('')\n            self.OnPalettizeInPlace(None)\n            self.palettize_exportTexTxt.SetValue(batchItem['args']['dm'])\n            self.palettize_saveTxaTxt.SetValue(batchItem['args']['af'])\n            try:\n                self.txaExtraLines = []\n                txafile = open(batchItem['args']['af'], 'r')\n                for line in txafile:\n                    words = line.split()\n                    if len(words):\n                        if words[0] == ':palette':\n                            self.palettize_sizeWidthTxt.SetValue(words[1])\n                            self.palettize_sizeHeightTxt.SetValue(words[2])\n                        elif words[0] == ':imagetype':\n                            self.palettize_imageTypeChoice.SetStringSelection(words[1])\n                        elif words[0] == ':powertwo':\n                            self.palettize_powerOf2Chk.SetValue(int(words[1]))\n                        elif words[0] == ':background':\n                            self.palettize_redTxt.SetValue(int(words[1]))\n                            self.palettize_greenTxt.SetValue(int(words[2]))\n                            self.palettize_blueTxt.SetValue(int(words[3]))\n                            self.palettize_alphaTxt.SetValue(int(words[4]))\n                        elif words[0] == ':margin':\n                            self.palettize_marginTxt.SetValue(int(words[1]))\n                        elif words[0] == ':coverage':\n                            self.palettize_coverageTxt.SetValue(words[1])\n                        else:\n                            self.txaExtraLines.append(line)\n                txafile.close()\n            except:\n                print('Error opening .txa file!')\n        self.batchItemNameTxt.SetValue(batchItem['label'])\n    except ValueError:\n        return",
            "def OnBatchItemSelection(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not len(self.batchTree.GetSelections()):\n        return\n    try:\n        selectedItemId = self.batchTree.GetSelections()[0]\n        selectedItemIndex = int(self.batchTree.GetItemText(selectedItemId).split()[0]) - 1\n        batchItem = self.batchList[selectedItemIndex]\n        print('\\n' + self.BuildCommand(batchItem))\n        if batchItem['cmd'].count('maya2egg'):\n            self.toolComboBox.SetStringSelection('maya2egg')\n            self.OnTool(None)\n            self.m2e_mayaVerComboBox.SetValue(batchItem['cmd'].split('maya2egg')[1])\n            self.m2e_mayaFileTxt.SetValue(batchItem['finput'])\n            self.m2e_exportDestTxt.SetValue(batchItem['foutput'])\n            self.m2e_mayaUnitsComboBox.SetValue(batchItem['args']['ui'])\n            self.m2e_pandaUnitsComboBox.SetValue(batchItem['args']['uo'])\n            self.m2e_backfaceChk.SetValue(batchItem['args'].has_key('bface'))\n            self.m2e_polygonOutputChk.SetValue(batchItem['args'].has_key('p'))\n            self.m2e_tbnallChk.SetValue(batchItem['args'].has_key('tbnall'))\n            self.m2e_subsetsChk.SetValue(batchItem['args'].has_key('subset'))\n            self.m2e_subsetsTxt.SetValue('' if not batchItem['args'].has_key('subset') else batchItem['args']['subset'])\n            self.m2e_excludesChk.SetValue(batchItem['args'].has_key('exclude'))\n            self.m2e_excludesTxt.SetValue('' if not batchItem['args'].has_key('exclude') else batchItem['args']['exclude'])\n            self.m2e_animOptChoice.SetStringSelection(batchItem['args']['a'])\n            self.m2e_charNameChk.SetValue(batchItem['args'].has_key('cn'))\n            self.m2e_charNameTxt.SetValue('' if not batchItem['args'].has_key('cn') else batchItem['args']['cn'])\n            self.m2e_startFrameChk.SetValue(batchItem['args'].has_key('sf'))\n            self.m2e_startFrameSpin.SetValue(0 if not batchItem['args'].has_key('sf') else int(batchItem['args']['sf']))\n            self.m2e_endFrameChk.SetValue(batchItem['args'].has_key('ef'))\n            self.m2e_endFrameSpin.SetValue(0 if not batchItem['args'].has_key('ef') else int(batchItem['args']['ef']))\n            self.m2e_frameRateInChk.SetValue(batchItem['args'].has_key('fri'))\n            self.m2e_frameRateInSpin.SetValue(0 if not batchItem['args'].has_key('fri') else int(batchItem['args']['fri']))\n            self.m2e_frameRateOutChk.SetValue(batchItem['args'].has_key('fro'))\n            self.m2e_frameRateOutSpin.SetValue(0 if not batchItem['args'].has_key('fro') else int(batchItem['args']['fro']))\n            self.m2e_subrootsChk.SetValue(batchItem['args'].has_key('subroot'))\n            self.m2e_subrootsTxt.SetValue('' if not batchItem['args'].has_key('subroot') else batchItem['args']['subroot'])\n            self.m2e_legacyShaderChk.SetValue(batchItem['args'].has_key('legacy-shader'))\n            self.m2e_copyTexChk.SetValue(batchItem['args'].has_key('copytex'))\n            self.m2e_copyTexPathTxt.SetValue('' if not batchItem['args'].has_key('copytex') else batchItem['args']['copytex'])\n            self.m2e_pathReplaceChk.SetValue(batchItem['args'].has_key('pr'))\n            self.m2e_pathReplaceTxt.SetValue('' if not batchItem['args'].has_key('pr') else batchItem['args']['pr'])\n        elif batchItem['cmd'].count('egg2bam'):\n            self.toolComboBox.SetStringSelection('egg2bam')\n            self.OnTool(None)\n            self.e2b_eggFileTxt.SetValue(batchItem['finput'])\n            self.e2b_exportDestTxt.SetValue(batchItem['foutput'])\n            self.e2b_useCurrEggChk.SetValue(0)\n            self.e2b_flattenChk.SetValue(batchItem['args'].has_key('flatten'))\n            self.e2b_embedTexChk.SetValue(batchItem['args'].has_key('rawtex'))\n        elif batchItem['cmd'].count('egg-rename'):\n            self.toolComboBox.SetStringSelection('egg-rename')\n            self.OnTool(None)\n            self.rename_eggList = []\n            for filename in batchItem['finput'].split('|'):\n                if filename:\n                    self.rename_eggList.append(filename)\n            self.UpdateEggRenameDisplay()\n            self.rename_exportInPlaceChk.SetValue(batchItem['args'].has_key('inplace'))\n            self.rename_exportFileTxt.SetValue(batchItem['foutput'])\n            if batchItem['args'].has_key('d'):\n                self.rename_exportDirTxt.SetValue(batchItem['args']['d'])\n            else:\n                self.rename_exportDirTxt.SetValue('')\n            self.OnRenameInPlace(None)\n            self.rename_stripPrefixChk.SetValue(batchItem['args'].has_key('strip_prefix'))\n            self.rename_stripPrefixTxt.SetValue('' if not batchItem['args'].has_key('strip_prefix') else batchItem['args']['strip_prefix'])\n        elif batchItem['cmd'].count('egg-optchar'):\n            self.toolComboBox.SetStringSelection('egg-optchar')\n            self.OnTool(None)\n            self.optchar_eggList = []\n            for filename in batchItem['finput'].split('|'):\n                if filename:\n                    self.optchar_eggList.append(filename)\n            self.UpdateEggOptcharDisplay()\n            self.optchar_exportInPlaceChk.SetValue(batchItem['args'].has_key('inplace'))\n            self.optchar_exportFileTxt.SetValue(batchItem['foutput'])\n            if batchItem['args'].has_key('d'):\n                self.optchar_exportDirTxt.SetValue(batchItem['args']['d'])\n            else:\n                self.optchar_exportDirTxt.SetValue('')\n            self.OnOptcharInPlace(None)\n            self.optchar_keepAllJointsChk.SetValue(batchItem['args'].has_key('keepall'))\n            self.optchar_keepJointsChk.SetValue(batchItem['args'].has_key('keep'))\n            self.optchar_keepJointsTxt.SetValue('' if not batchItem['args'].has_key('keep') else batchItem['args']['keep'])\n            self.optchar_dropJointsChk.SetValue(batchItem['args'].has_key('drop'))\n            self.optchar_dropJointsTxt.SetValue('' if not batchItem['args'].has_key('drop') else batchItem['args']['drop'])\n            self.optchar_exposeJointsChk.SetValue(batchItem['args'].has_key('expose'))\n            self.optchar_exposeJointsTxt.SetValue('' if not batchItem['args'].has_key('expose') else batchItem['args']['expose'])\n            self.optchar_flagGeometryChk.SetValue(batchItem['args'].has_key('flag'))\n            self.optchar_flagGeometryTxt.SetValue('' if not batchItem['args'].has_key('flag') else batchItem['args']['flag'])\n            self.optchar_dartChoice.SetStringSelection(batchItem['args']['dart'])\n        elif batchItem['cmd'].count('egg-palettize'):\n            self.toolComboBox.SetStringSelection('egg-palettize')\n            self.OnTool(None)\n            self.palettize_eggList = []\n            for filename in batchItem['finput'].split('|'):\n                if filename:\n                    self.palettize_eggList.append(filename)\n            self.UpdateEggPalettizeDisplay()\n            self.palettize_exportInPlaceChk.SetValue(batchItem['args'].has_key('inplace'))\n            self.palettize_exportFileTxt.SetValue(batchItem['foutput'])\n            if batchItem['args'].has_key('d'):\n                self.palettize_exportDirTxt.SetValue(batchItem['args']['d'])\n            else:\n                self.palettize_exportDirTxt.SetValue('')\n            self.OnPalettizeInPlace(None)\n            self.palettize_exportTexTxt.SetValue(batchItem['args']['dm'])\n            self.palettize_saveTxaTxt.SetValue(batchItem['args']['af'])\n            try:\n                self.txaExtraLines = []\n                txafile = open(batchItem['args']['af'], 'r')\n                for line in txafile:\n                    words = line.split()\n                    if len(words):\n                        if words[0] == ':palette':\n                            self.palettize_sizeWidthTxt.SetValue(words[1])\n                            self.palettize_sizeHeightTxt.SetValue(words[2])\n                        elif words[0] == ':imagetype':\n                            self.palettize_imageTypeChoice.SetStringSelection(words[1])\n                        elif words[0] == ':powertwo':\n                            self.palettize_powerOf2Chk.SetValue(int(words[1]))\n                        elif words[0] == ':background':\n                            self.palettize_redTxt.SetValue(int(words[1]))\n                            self.palettize_greenTxt.SetValue(int(words[2]))\n                            self.palettize_blueTxt.SetValue(int(words[3]))\n                            self.palettize_alphaTxt.SetValue(int(words[4]))\n                        elif words[0] == ':margin':\n                            self.palettize_marginTxt.SetValue(int(words[1]))\n                        elif words[0] == ':coverage':\n                            self.palettize_coverageTxt.SetValue(words[1])\n                        else:\n                            self.txaExtraLines.append(line)\n                txafile.close()\n            except:\n                print('Error opening .txa file!')\n        self.batchItemNameTxt.SetValue(batchItem['label'])\n    except ValueError:\n        return"
        ]
    },
    {
        "func_name": "OnBatchItemEdit",
        "original": "def OnBatchItemEdit(self, event):\n    selectedItemId = self.batchTree.GetSelections()\n    if len(selectedItemId):\n        selectedItemId = selectedItemId[0]\n    else:\n        return\n    if selectedItemId:\n        selectedItemIndex = int(self.batchTree.GetItemText(selectedItemId).split()[0]) - 1\n        batchItem = self.batchList[selectedItemIndex]\n        if batchItem['cmd'].count('maya2egg'):\n            self.addMaya2EggToBatch(selectedItemIndex)\n        if batchItem['cmd'].count('egg2bam'):\n            self.addEgg2BamToBatch(selectedItemIndex)\n        if batchItem['cmd'].count('egg-rename'):\n            self.addEggRenameToBatch(selectedItemIndex)\n        if batchItem['cmd'].count('egg-optchar'):\n            self.addEggOptcharToBatch(selectedItemIndex)\n        if batchItem['cmd'].count('egg-palettize'):\n            self.addEggPalettizeToBatch(selectedItemIndex)",
        "mutated": [
            "def OnBatchItemEdit(self, event):\n    if False:\n        i = 10\n    selectedItemId = self.batchTree.GetSelections()\n    if len(selectedItemId):\n        selectedItemId = selectedItemId[0]\n    else:\n        return\n    if selectedItemId:\n        selectedItemIndex = int(self.batchTree.GetItemText(selectedItemId).split()[0]) - 1\n        batchItem = self.batchList[selectedItemIndex]\n        if batchItem['cmd'].count('maya2egg'):\n            self.addMaya2EggToBatch(selectedItemIndex)\n        if batchItem['cmd'].count('egg2bam'):\n            self.addEgg2BamToBatch(selectedItemIndex)\n        if batchItem['cmd'].count('egg-rename'):\n            self.addEggRenameToBatch(selectedItemIndex)\n        if batchItem['cmd'].count('egg-optchar'):\n            self.addEggOptcharToBatch(selectedItemIndex)\n        if batchItem['cmd'].count('egg-palettize'):\n            self.addEggPalettizeToBatch(selectedItemIndex)",
            "def OnBatchItemEdit(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    selectedItemId = self.batchTree.GetSelections()\n    if len(selectedItemId):\n        selectedItemId = selectedItemId[0]\n    else:\n        return\n    if selectedItemId:\n        selectedItemIndex = int(self.batchTree.GetItemText(selectedItemId).split()[0]) - 1\n        batchItem = self.batchList[selectedItemIndex]\n        if batchItem['cmd'].count('maya2egg'):\n            self.addMaya2EggToBatch(selectedItemIndex)\n        if batchItem['cmd'].count('egg2bam'):\n            self.addEgg2BamToBatch(selectedItemIndex)\n        if batchItem['cmd'].count('egg-rename'):\n            self.addEggRenameToBatch(selectedItemIndex)\n        if batchItem['cmd'].count('egg-optchar'):\n            self.addEggOptcharToBatch(selectedItemIndex)\n        if batchItem['cmd'].count('egg-palettize'):\n            self.addEggPalettizeToBatch(selectedItemIndex)",
            "def OnBatchItemEdit(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    selectedItemId = self.batchTree.GetSelections()\n    if len(selectedItemId):\n        selectedItemId = selectedItemId[0]\n    else:\n        return\n    if selectedItemId:\n        selectedItemIndex = int(self.batchTree.GetItemText(selectedItemId).split()[0]) - 1\n        batchItem = self.batchList[selectedItemIndex]\n        if batchItem['cmd'].count('maya2egg'):\n            self.addMaya2EggToBatch(selectedItemIndex)\n        if batchItem['cmd'].count('egg2bam'):\n            self.addEgg2BamToBatch(selectedItemIndex)\n        if batchItem['cmd'].count('egg-rename'):\n            self.addEggRenameToBatch(selectedItemIndex)\n        if batchItem['cmd'].count('egg-optchar'):\n            self.addEggOptcharToBatch(selectedItemIndex)\n        if batchItem['cmd'].count('egg-palettize'):\n            self.addEggPalettizeToBatch(selectedItemIndex)",
            "def OnBatchItemEdit(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    selectedItemId = self.batchTree.GetSelections()\n    if len(selectedItemId):\n        selectedItemId = selectedItemId[0]\n    else:\n        return\n    if selectedItemId:\n        selectedItemIndex = int(self.batchTree.GetItemText(selectedItemId).split()[0]) - 1\n        batchItem = self.batchList[selectedItemIndex]\n        if batchItem['cmd'].count('maya2egg'):\n            self.addMaya2EggToBatch(selectedItemIndex)\n        if batchItem['cmd'].count('egg2bam'):\n            self.addEgg2BamToBatch(selectedItemIndex)\n        if batchItem['cmd'].count('egg-rename'):\n            self.addEggRenameToBatch(selectedItemIndex)\n        if batchItem['cmd'].count('egg-optchar'):\n            self.addEggOptcharToBatch(selectedItemIndex)\n        if batchItem['cmd'].count('egg-palettize'):\n            self.addEggPalettizeToBatch(selectedItemIndex)",
            "def OnBatchItemEdit(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    selectedItemId = self.batchTree.GetSelections()\n    if len(selectedItemId):\n        selectedItemId = selectedItemId[0]\n    else:\n        return\n    if selectedItemId:\n        selectedItemIndex = int(self.batchTree.GetItemText(selectedItemId).split()[0]) - 1\n        batchItem = self.batchList[selectedItemIndex]\n        if batchItem['cmd'].count('maya2egg'):\n            self.addMaya2EggToBatch(selectedItemIndex)\n        if batchItem['cmd'].count('egg2bam'):\n            self.addEgg2BamToBatch(selectedItemIndex)\n        if batchItem['cmd'].count('egg-rename'):\n            self.addEggRenameToBatch(selectedItemIndex)\n        if batchItem['cmd'].count('egg-optchar'):\n            self.addEggOptcharToBatch(selectedItemIndex)\n        if batchItem['cmd'].count('egg-palettize'):\n            self.addEggPalettizeToBatch(selectedItemIndex)"
        ]
    },
    {
        "func_name": "OnSavePrefs",
        "original": "def OnSavePrefs(self, event):\n    newdoc = Document()\n    top_element = newdoc.createElement('preferences')\n    newdoc.appendChild(top_element)\n    envitem = newdoc.createElement('environment')\n    genitem = newdoc.createElement('genoptions')\n    animitem = newdoc.createElement('animoptions')\n    texitem = newdoc.createElement('textureoptions')\n    overitem = newdoc.createElement('overridemod')\n    attributeitem = newdoc.createElement('attribute')\n    top_element.appendChild(envitem)\n    top_element.appendChild(genitem)\n    top_element.appendChild(animitem)\n    top_element.appendChild(texitem)\n    top_element.appendChild(overitem)\n    top_element.appendChild(attributeitem)\n    pandadir = newdoc.createTextNode(str(self.pandaPathTxt.GetValue()))\n    mayaver = newdoc.createTextNode(str(self.m2e_mayaVerComboBox.GetSelection()))\n    pandadirElem = newdoc.createElement('pandadir')\n    mayaverElem = newdoc.createElement('mayaver')\n    pandadirElem.appendChild(pandadir)\n    mayaverElem.appendChild(mayaver)\n    envitem.appendChild(pandadirElem)\n    envitem.appendChild(mayaverElem)\n    inunits = newdoc.createTextNode(str(self.m2e_mayaUnitsComboBox.GetValue()))\n    outunits = newdoc.createTextNode(str(self.m2e_pandaUnitsComboBox.GetValue()))\n    bface = newdoc.createTextNode(str(int(self.m2e_backfaceChk.GetValue())))\n    tbnall = newdoc.createTextNode(str(int(self.m2e_tbnallChk.GetValue())))\n    subsets = newdoc.createTextNode(str(int(self.m2e_subsetsChk.GetValue())))\n    subsetsval = newdoc.createTextNode(str(self.m2e_subsetsTxt.GetValue()))\n    excludes = newdoc.createTextNode(str(int(self.m2e_excludesChk.GetValue())))\n    excludesval = newdoc.createTextNode(str(self.m2e_excludesTxt.GetValue()))\n    inunitsElem = newdoc.createElement('inunits')\n    outunitsElem = newdoc.createElement('outunits')\n    bfaceElem = newdoc.createElement('bface')\n    tbnallElem = newdoc.createElement('tbnall')\n    subsetsElem = newdoc.createElement('subsets')\n    subnamesElem = newdoc.createElement('subnames')\n    excludesElem = newdoc.createElement('excludes')\n    exnamesElem = newdoc.createElement('excludesval')\n    inunitsElem.appendChild(inunits)\n    outunitsElem.appendChild(outunits)\n    bfaceElem.appendChild(bface)\n    tbnallElem.appendChild(tbnall)\n    subsetsElem.appendChild(subsets)\n    subnamesElem.appendChild(subsetsval)\n    excludesElem.appendChild(excludes)\n    exnamesElem.appendChild(exnamesElem)\n    genitem.appendChild(inunitsElem)\n    genitem.appendChild(outunitsElem)\n    genitem.appendChild(bfaceElem)\n    genitem.appendChild(tbnallElem)\n    genitem.appendChild(subsetsElem)\n    genitem.appendChild(subnamesElem)\n    genitem.appendChild(excludesElem)\n    genitem.appendChild(exnamesElem)\n    modeloptsElem = newdoc.createElement('modelopts')\n    cnElem = newdoc.createElement('cn')\n    charnameElem = newdoc.createElement('charname')\n    framerangeElem = newdoc.createElement('framerange')\n    subrootsElem = newdoc.createElement('subroots')\n    subrnamesElem = newdoc.createElement('subrnames')\n    sfElem = newdoc.createElement('sf')\n    sfvalElem = newdoc.createElement('sfval')\n    efElem = newdoc.createElement('ef')\n    efvalElem = newdoc.createElement('efval')\n    friElem = newdoc.createElement('fri')\n    frivalElem = newdoc.createElement('frival')\n    froElem = newdoc.createElement('fro')\n    frovalElem = newdoc.createElement('froval')\n    framerangeElem.appendChild(sfElem)\n    framerangeElem.appendChild(sfvalElem)\n    framerangeElem.appendChild(efElem)\n    framerangeElem.appendChild(efvalElem)\n    framerangeElem.appendChild(friElem)\n    framerangeElem.appendChild(frivalElem)\n    framerangeElem.appendChild(froElem)\n    framerangeElem.appendChild(frovalElem)\n    modelopts = newdoc.createTextNode(str(self.m2e_animOptChoice.GetSelection()))\n    cn = newdoc.createTextNode(str(int(self.m2e_charNameChk.GetValue())))\n    charname = newdoc.createTextNode(str(self.m2e_charNameTxt.GetValue()))\n    modeloptsElem.appendChild(modelopts)\n    cnElem.appendChild(cn)\n    charnameElem.appendChild(charname)\n    sf = newdoc.createTextNode(str(int(self.m2e_startFrameChk.GetValue())))\n    sfval = newdoc.createTextNode(str(self.m2e_startFrameSpin.GetValue()))\n    ef = newdoc.createTextNode(str(int(self.m2e_endFrameChk.GetValue())))\n    efval = newdoc.createTextNode(str(self.m2e_endFrameSpin.GetValue()))\n    fri = newdoc.createTextNode(str(int(self.m2e_frameRateInChk.GetValue())))\n    frival = newdoc.createTextNode(str(self.m2e_frameRateInSpin.GetValue()))\n    fro = newdoc.createTextNode(str(int(self.m2e_frameRateOutChk.GetValue())))\n    froval = newdoc.createTextNode(str(self.m2e_frameRateOutSpin.GetValue()))\n    sfElem.appendChild(sf)\n    sfvalElem.appendChild(sfval)\n    efElem.appendChild(ef)\n    efvalElem.appendChild(efval)\n    friElem.appendChild(fri)\n    frivalElem.appendChild(frival)\n    froElem.appendChild(fro)\n    frovalElem.appendChild(froval)\n    subroots = newdoc.createTextNode(str(int(self.m2e_subrootsChk.GetValue())))\n    subrnames = newdoc.createTextNode(str(self.m2e_subrootsTxt.GetValue()))\n    subrootsElem.appendChild(subroots)\n    subrnamesElem.appendChild(subrnames)\n    animitem.appendChild(modeloptsElem)\n    animitem.appendChild(cnElem)\n    animitem.appendChild(charnameElem)\n    animitem.appendChild(framerangeElem)\n    animitem.appendChild(subrootsElem)\n    animitem.appendChild(subrnamesElem)\n    legacy_shaderElem = newdoc.createElement('legacy-shader')\n    copytexElem = newdoc.createElement('copytex')\n    destpathElem = newdoc.createElement('path')\n    legacy_shader = newdoc.createTextNode(str(int(self.m2e_legacyShaderChk.GetValue())))\n    copytex = newdoc.createTextNode(str(int(self.m2e_copyTexChk.GetValue())))\n    destpath = newdoc.createTextNode(str(self.m2e_copyTexPathTxt.GetValue()))\n    legacy_shaderElem.appendChild(legacy_shader)\n    copytexElem.appendChild(copytex)\n    destpathElem.appendChild(destpath)\n    texitem.appendChild(legacy_shaderElem)\n    texitem.appendChild(copytexElem)\n    texitem.appendChild(destpathElem)\n    override = newdoc.createTextNode(str(int(self.ignoreModDates.GetValue())))\n    overitem.appendChild(override)\n    imagetype = newdoc.createTextNode(str(self.palettize_imageTypeChoice.GetSelection()))\n    powertwo = newdoc.createTextNode(str(self.powerflag.GetSelection()))\n    imagetypeElem = newdoc.createElement('imagetype')\n    powertwoElem = newdoc.createElement('powertwo')\n    R = newdoc.createTextNode(str(int(self.palettize_redTxt.GetValue())))\n    G = newdoc.createTextNode(str(int(self.palettize_greenTxt.GetValue())))\n    B = newdoc.createTextNode(str(int(self.palettize_blueTxt.GetValue())))\n    A = newdoc.createTextNode(str(int(self.palettize_alphaTxt.GetValue())))\n    margin = newdoc.createTextNode(str(int(self.palettize_marginTxt.GetValue())))\n    coverage = newdoc.createTextNode(str(self.palettize_coverageTxt.GetValue()))\n    RElem = newdoc.createElement('R')\n    GElem = newdoc.createElement('G')\n    BElem = newdoc.createElement('B')\n    AElem = newdoc.createElement('A')\n    marginElem = newdoc.createElement('margin')\n    coverageElem = newdoc.createElement('coverage')\n    imagetypeElem.appendChild(imagetype)\n    powertwoElem.appendChild(powertwo)\n    RElem.appendChild(R)\n    GElem.appendChild(G)\n    BElem.appendChild(B)\n    AElem.appendChild(A)\n    marginElem.appendChild(margin)\n    coverageElem.appendChild(coverage)\n    attributeitem.appendChild(imagetypeElem)\n    attributeitem.appendChild(powertwoElem)\n    attributeitem.appendChild(RElem)\n    attributeitem.appendChild(GElem)\n    attributeitem.appendChild(BElem)\n    attributeitem.appendChild(AElem)\n    attributeitem.appendChild(marginElem)\n    attributeitem.appendChild(coverageElem)\n    filename = ''\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose a location and filename', dirname, '', '*.xml', wx.SAVE)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        file = dirname + os.sep + filename\n        f = open(file, 'w')\n        out = newdoc.toprettyxml()\n        for line in out:\n            f.writelines(line)\n        f.close()",
        "mutated": [
            "def OnSavePrefs(self, event):\n    if False:\n        i = 10\n    newdoc = Document()\n    top_element = newdoc.createElement('preferences')\n    newdoc.appendChild(top_element)\n    envitem = newdoc.createElement('environment')\n    genitem = newdoc.createElement('genoptions')\n    animitem = newdoc.createElement('animoptions')\n    texitem = newdoc.createElement('textureoptions')\n    overitem = newdoc.createElement('overridemod')\n    attributeitem = newdoc.createElement('attribute')\n    top_element.appendChild(envitem)\n    top_element.appendChild(genitem)\n    top_element.appendChild(animitem)\n    top_element.appendChild(texitem)\n    top_element.appendChild(overitem)\n    top_element.appendChild(attributeitem)\n    pandadir = newdoc.createTextNode(str(self.pandaPathTxt.GetValue()))\n    mayaver = newdoc.createTextNode(str(self.m2e_mayaVerComboBox.GetSelection()))\n    pandadirElem = newdoc.createElement('pandadir')\n    mayaverElem = newdoc.createElement('mayaver')\n    pandadirElem.appendChild(pandadir)\n    mayaverElem.appendChild(mayaver)\n    envitem.appendChild(pandadirElem)\n    envitem.appendChild(mayaverElem)\n    inunits = newdoc.createTextNode(str(self.m2e_mayaUnitsComboBox.GetValue()))\n    outunits = newdoc.createTextNode(str(self.m2e_pandaUnitsComboBox.GetValue()))\n    bface = newdoc.createTextNode(str(int(self.m2e_backfaceChk.GetValue())))\n    tbnall = newdoc.createTextNode(str(int(self.m2e_tbnallChk.GetValue())))\n    subsets = newdoc.createTextNode(str(int(self.m2e_subsetsChk.GetValue())))\n    subsetsval = newdoc.createTextNode(str(self.m2e_subsetsTxt.GetValue()))\n    excludes = newdoc.createTextNode(str(int(self.m2e_excludesChk.GetValue())))\n    excludesval = newdoc.createTextNode(str(self.m2e_excludesTxt.GetValue()))\n    inunitsElem = newdoc.createElement('inunits')\n    outunitsElem = newdoc.createElement('outunits')\n    bfaceElem = newdoc.createElement('bface')\n    tbnallElem = newdoc.createElement('tbnall')\n    subsetsElem = newdoc.createElement('subsets')\n    subnamesElem = newdoc.createElement('subnames')\n    excludesElem = newdoc.createElement('excludes')\n    exnamesElem = newdoc.createElement('excludesval')\n    inunitsElem.appendChild(inunits)\n    outunitsElem.appendChild(outunits)\n    bfaceElem.appendChild(bface)\n    tbnallElem.appendChild(tbnall)\n    subsetsElem.appendChild(subsets)\n    subnamesElem.appendChild(subsetsval)\n    excludesElem.appendChild(excludes)\n    exnamesElem.appendChild(exnamesElem)\n    genitem.appendChild(inunitsElem)\n    genitem.appendChild(outunitsElem)\n    genitem.appendChild(bfaceElem)\n    genitem.appendChild(tbnallElem)\n    genitem.appendChild(subsetsElem)\n    genitem.appendChild(subnamesElem)\n    genitem.appendChild(excludesElem)\n    genitem.appendChild(exnamesElem)\n    modeloptsElem = newdoc.createElement('modelopts')\n    cnElem = newdoc.createElement('cn')\n    charnameElem = newdoc.createElement('charname')\n    framerangeElem = newdoc.createElement('framerange')\n    subrootsElem = newdoc.createElement('subroots')\n    subrnamesElem = newdoc.createElement('subrnames')\n    sfElem = newdoc.createElement('sf')\n    sfvalElem = newdoc.createElement('sfval')\n    efElem = newdoc.createElement('ef')\n    efvalElem = newdoc.createElement('efval')\n    friElem = newdoc.createElement('fri')\n    frivalElem = newdoc.createElement('frival')\n    froElem = newdoc.createElement('fro')\n    frovalElem = newdoc.createElement('froval')\n    framerangeElem.appendChild(sfElem)\n    framerangeElem.appendChild(sfvalElem)\n    framerangeElem.appendChild(efElem)\n    framerangeElem.appendChild(efvalElem)\n    framerangeElem.appendChild(friElem)\n    framerangeElem.appendChild(frivalElem)\n    framerangeElem.appendChild(froElem)\n    framerangeElem.appendChild(frovalElem)\n    modelopts = newdoc.createTextNode(str(self.m2e_animOptChoice.GetSelection()))\n    cn = newdoc.createTextNode(str(int(self.m2e_charNameChk.GetValue())))\n    charname = newdoc.createTextNode(str(self.m2e_charNameTxt.GetValue()))\n    modeloptsElem.appendChild(modelopts)\n    cnElem.appendChild(cn)\n    charnameElem.appendChild(charname)\n    sf = newdoc.createTextNode(str(int(self.m2e_startFrameChk.GetValue())))\n    sfval = newdoc.createTextNode(str(self.m2e_startFrameSpin.GetValue()))\n    ef = newdoc.createTextNode(str(int(self.m2e_endFrameChk.GetValue())))\n    efval = newdoc.createTextNode(str(self.m2e_endFrameSpin.GetValue()))\n    fri = newdoc.createTextNode(str(int(self.m2e_frameRateInChk.GetValue())))\n    frival = newdoc.createTextNode(str(self.m2e_frameRateInSpin.GetValue()))\n    fro = newdoc.createTextNode(str(int(self.m2e_frameRateOutChk.GetValue())))\n    froval = newdoc.createTextNode(str(self.m2e_frameRateOutSpin.GetValue()))\n    sfElem.appendChild(sf)\n    sfvalElem.appendChild(sfval)\n    efElem.appendChild(ef)\n    efvalElem.appendChild(efval)\n    friElem.appendChild(fri)\n    frivalElem.appendChild(frival)\n    froElem.appendChild(fro)\n    frovalElem.appendChild(froval)\n    subroots = newdoc.createTextNode(str(int(self.m2e_subrootsChk.GetValue())))\n    subrnames = newdoc.createTextNode(str(self.m2e_subrootsTxt.GetValue()))\n    subrootsElem.appendChild(subroots)\n    subrnamesElem.appendChild(subrnames)\n    animitem.appendChild(modeloptsElem)\n    animitem.appendChild(cnElem)\n    animitem.appendChild(charnameElem)\n    animitem.appendChild(framerangeElem)\n    animitem.appendChild(subrootsElem)\n    animitem.appendChild(subrnamesElem)\n    legacy_shaderElem = newdoc.createElement('legacy-shader')\n    copytexElem = newdoc.createElement('copytex')\n    destpathElem = newdoc.createElement('path')\n    legacy_shader = newdoc.createTextNode(str(int(self.m2e_legacyShaderChk.GetValue())))\n    copytex = newdoc.createTextNode(str(int(self.m2e_copyTexChk.GetValue())))\n    destpath = newdoc.createTextNode(str(self.m2e_copyTexPathTxt.GetValue()))\n    legacy_shaderElem.appendChild(legacy_shader)\n    copytexElem.appendChild(copytex)\n    destpathElem.appendChild(destpath)\n    texitem.appendChild(legacy_shaderElem)\n    texitem.appendChild(copytexElem)\n    texitem.appendChild(destpathElem)\n    override = newdoc.createTextNode(str(int(self.ignoreModDates.GetValue())))\n    overitem.appendChild(override)\n    imagetype = newdoc.createTextNode(str(self.palettize_imageTypeChoice.GetSelection()))\n    powertwo = newdoc.createTextNode(str(self.powerflag.GetSelection()))\n    imagetypeElem = newdoc.createElement('imagetype')\n    powertwoElem = newdoc.createElement('powertwo')\n    R = newdoc.createTextNode(str(int(self.palettize_redTxt.GetValue())))\n    G = newdoc.createTextNode(str(int(self.palettize_greenTxt.GetValue())))\n    B = newdoc.createTextNode(str(int(self.palettize_blueTxt.GetValue())))\n    A = newdoc.createTextNode(str(int(self.palettize_alphaTxt.GetValue())))\n    margin = newdoc.createTextNode(str(int(self.palettize_marginTxt.GetValue())))\n    coverage = newdoc.createTextNode(str(self.palettize_coverageTxt.GetValue()))\n    RElem = newdoc.createElement('R')\n    GElem = newdoc.createElement('G')\n    BElem = newdoc.createElement('B')\n    AElem = newdoc.createElement('A')\n    marginElem = newdoc.createElement('margin')\n    coverageElem = newdoc.createElement('coverage')\n    imagetypeElem.appendChild(imagetype)\n    powertwoElem.appendChild(powertwo)\n    RElem.appendChild(R)\n    GElem.appendChild(G)\n    BElem.appendChild(B)\n    AElem.appendChild(A)\n    marginElem.appendChild(margin)\n    coverageElem.appendChild(coverage)\n    attributeitem.appendChild(imagetypeElem)\n    attributeitem.appendChild(powertwoElem)\n    attributeitem.appendChild(RElem)\n    attributeitem.appendChild(GElem)\n    attributeitem.appendChild(BElem)\n    attributeitem.appendChild(AElem)\n    attributeitem.appendChild(marginElem)\n    attributeitem.appendChild(coverageElem)\n    filename = ''\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose a location and filename', dirname, '', '*.xml', wx.SAVE)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        file = dirname + os.sep + filename\n        f = open(file, 'w')\n        out = newdoc.toprettyxml()\n        for line in out:\n            f.writelines(line)\n        f.close()",
            "def OnSavePrefs(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    newdoc = Document()\n    top_element = newdoc.createElement('preferences')\n    newdoc.appendChild(top_element)\n    envitem = newdoc.createElement('environment')\n    genitem = newdoc.createElement('genoptions')\n    animitem = newdoc.createElement('animoptions')\n    texitem = newdoc.createElement('textureoptions')\n    overitem = newdoc.createElement('overridemod')\n    attributeitem = newdoc.createElement('attribute')\n    top_element.appendChild(envitem)\n    top_element.appendChild(genitem)\n    top_element.appendChild(animitem)\n    top_element.appendChild(texitem)\n    top_element.appendChild(overitem)\n    top_element.appendChild(attributeitem)\n    pandadir = newdoc.createTextNode(str(self.pandaPathTxt.GetValue()))\n    mayaver = newdoc.createTextNode(str(self.m2e_mayaVerComboBox.GetSelection()))\n    pandadirElem = newdoc.createElement('pandadir')\n    mayaverElem = newdoc.createElement('mayaver')\n    pandadirElem.appendChild(pandadir)\n    mayaverElem.appendChild(mayaver)\n    envitem.appendChild(pandadirElem)\n    envitem.appendChild(mayaverElem)\n    inunits = newdoc.createTextNode(str(self.m2e_mayaUnitsComboBox.GetValue()))\n    outunits = newdoc.createTextNode(str(self.m2e_pandaUnitsComboBox.GetValue()))\n    bface = newdoc.createTextNode(str(int(self.m2e_backfaceChk.GetValue())))\n    tbnall = newdoc.createTextNode(str(int(self.m2e_tbnallChk.GetValue())))\n    subsets = newdoc.createTextNode(str(int(self.m2e_subsetsChk.GetValue())))\n    subsetsval = newdoc.createTextNode(str(self.m2e_subsetsTxt.GetValue()))\n    excludes = newdoc.createTextNode(str(int(self.m2e_excludesChk.GetValue())))\n    excludesval = newdoc.createTextNode(str(self.m2e_excludesTxt.GetValue()))\n    inunitsElem = newdoc.createElement('inunits')\n    outunitsElem = newdoc.createElement('outunits')\n    bfaceElem = newdoc.createElement('bface')\n    tbnallElem = newdoc.createElement('tbnall')\n    subsetsElem = newdoc.createElement('subsets')\n    subnamesElem = newdoc.createElement('subnames')\n    excludesElem = newdoc.createElement('excludes')\n    exnamesElem = newdoc.createElement('excludesval')\n    inunitsElem.appendChild(inunits)\n    outunitsElem.appendChild(outunits)\n    bfaceElem.appendChild(bface)\n    tbnallElem.appendChild(tbnall)\n    subsetsElem.appendChild(subsets)\n    subnamesElem.appendChild(subsetsval)\n    excludesElem.appendChild(excludes)\n    exnamesElem.appendChild(exnamesElem)\n    genitem.appendChild(inunitsElem)\n    genitem.appendChild(outunitsElem)\n    genitem.appendChild(bfaceElem)\n    genitem.appendChild(tbnallElem)\n    genitem.appendChild(subsetsElem)\n    genitem.appendChild(subnamesElem)\n    genitem.appendChild(excludesElem)\n    genitem.appendChild(exnamesElem)\n    modeloptsElem = newdoc.createElement('modelopts')\n    cnElem = newdoc.createElement('cn')\n    charnameElem = newdoc.createElement('charname')\n    framerangeElem = newdoc.createElement('framerange')\n    subrootsElem = newdoc.createElement('subroots')\n    subrnamesElem = newdoc.createElement('subrnames')\n    sfElem = newdoc.createElement('sf')\n    sfvalElem = newdoc.createElement('sfval')\n    efElem = newdoc.createElement('ef')\n    efvalElem = newdoc.createElement('efval')\n    friElem = newdoc.createElement('fri')\n    frivalElem = newdoc.createElement('frival')\n    froElem = newdoc.createElement('fro')\n    frovalElem = newdoc.createElement('froval')\n    framerangeElem.appendChild(sfElem)\n    framerangeElem.appendChild(sfvalElem)\n    framerangeElem.appendChild(efElem)\n    framerangeElem.appendChild(efvalElem)\n    framerangeElem.appendChild(friElem)\n    framerangeElem.appendChild(frivalElem)\n    framerangeElem.appendChild(froElem)\n    framerangeElem.appendChild(frovalElem)\n    modelopts = newdoc.createTextNode(str(self.m2e_animOptChoice.GetSelection()))\n    cn = newdoc.createTextNode(str(int(self.m2e_charNameChk.GetValue())))\n    charname = newdoc.createTextNode(str(self.m2e_charNameTxt.GetValue()))\n    modeloptsElem.appendChild(modelopts)\n    cnElem.appendChild(cn)\n    charnameElem.appendChild(charname)\n    sf = newdoc.createTextNode(str(int(self.m2e_startFrameChk.GetValue())))\n    sfval = newdoc.createTextNode(str(self.m2e_startFrameSpin.GetValue()))\n    ef = newdoc.createTextNode(str(int(self.m2e_endFrameChk.GetValue())))\n    efval = newdoc.createTextNode(str(self.m2e_endFrameSpin.GetValue()))\n    fri = newdoc.createTextNode(str(int(self.m2e_frameRateInChk.GetValue())))\n    frival = newdoc.createTextNode(str(self.m2e_frameRateInSpin.GetValue()))\n    fro = newdoc.createTextNode(str(int(self.m2e_frameRateOutChk.GetValue())))\n    froval = newdoc.createTextNode(str(self.m2e_frameRateOutSpin.GetValue()))\n    sfElem.appendChild(sf)\n    sfvalElem.appendChild(sfval)\n    efElem.appendChild(ef)\n    efvalElem.appendChild(efval)\n    friElem.appendChild(fri)\n    frivalElem.appendChild(frival)\n    froElem.appendChild(fro)\n    frovalElem.appendChild(froval)\n    subroots = newdoc.createTextNode(str(int(self.m2e_subrootsChk.GetValue())))\n    subrnames = newdoc.createTextNode(str(self.m2e_subrootsTxt.GetValue()))\n    subrootsElem.appendChild(subroots)\n    subrnamesElem.appendChild(subrnames)\n    animitem.appendChild(modeloptsElem)\n    animitem.appendChild(cnElem)\n    animitem.appendChild(charnameElem)\n    animitem.appendChild(framerangeElem)\n    animitem.appendChild(subrootsElem)\n    animitem.appendChild(subrnamesElem)\n    legacy_shaderElem = newdoc.createElement('legacy-shader')\n    copytexElem = newdoc.createElement('copytex')\n    destpathElem = newdoc.createElement('path')\n    legacy_shader = newdoc.createTextNode(str(int(self.m2e_legacyShaderChk.GetValue())))\n    copytex = newdoc.createTextNode(str(int(self.m2e_copyTexChk.GetValue())))\n    destpath = newdoc.createTextNode(str(self.m2e_copyTexPathTxt.GetValue()))\n    legacy_shaderElem.appendChild(legacy_shader)\n    copytexElem.appendChild(copytex)\n    destpathElem.appendChild(destpath)\n    texitem.appendChild(legacy_shaderElem)\n    texitem.appendChild(copytexElem)\n    texitem.appendChild(destpathElem)\n    override = newdoc.createTextNode(str(int(self.ignoreModDates.GetValue())))\n    overitem.appendChild(override)\n    imagetype = newdoc.createTextNode(str(self.palettize_imageTypeChoice.GetSelection()))\n    powertwo = newdoc.createTextNode(str(self.powerflag.GetSelection()))\n    imagetypeElem = newdoc.createElement('imagetype')\n    powertwoElem = newdoc.createElement('powertwo')\n    R = newdoc.createTextNode(str(int(self.palettize_redTxt.GetValue())))\n    G = newdoc.createTextNode(str(int(self.palettize_greenTxt.GetValue())))\n    B = newdoc.createTextNode(str(int(self.palettize_blueTxt.GetValue())))\n    A = newdoc.createTextNode(str(int(self.palettize_alphaTxt.GetValue())))\n    margin = newdoc.createTextNode(str(int(self.palettize_marginTxt.GetValue())))\n    coverage = newdoc.createTextNode(str(self.palettize_coverageTxt.GetValue()))\n    RElem = newdoc.createElement('R')\n    GElem = newdoc.createElement('G')\n    BElem = newdoc.createElement('B')\n    AElem = newdoc.createElement('A')\n    marginElem = newdoc.createElement('margin')\n    coverageElem = newdoc.createElement('coverage')\n    imagetypeElem.appendChild(imagetype)\n    powertwoElem.appendChild(powertwo)\n    RElem.appendChild(R)\n    GElem.appendChild(G)\n    BElem.appendChild(B)\n    AElem.appendChild(A)\n    marginElem.appendChild(margin)\n    coverageElem.appendChild(coverage)\n    attributeitem.appendChild(imagetypeElem)\n    attributeitem.appendChild(powertwoElem)\n    attributeitem.appendChild(RElem)\n    attributeitem.appendChild(GElem)\n    attributeitem.appendChild(BElem)\n    attributeitem.appendChild(AElem)\n    attributeitem.appendChild(marginElem)\n    attributeitem.appendChild(coverageElem)\n    filename = ''\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose a location and filename', dirname, '', '*.xml', wx.SAVE)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        file = dirname + os.sep + filename\n        f = open(file, 'w')\n        out = newdoc.toprettyxml()\n        for line in out:\n            f.writelines(line)\n        f.close()",
            "def OnSavePrefs(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    newdoc = Document()\n    top_element = newdoc.createElement('preferences')\n    newdoc.appendChild(top_element)\n    envitem = newdoc.createElement('environment')\n    genitem = newdoc.createElement('genoptions')\n    animitem = newdoc.createElement('animoptions')\n    texitem = newdoc.createElement('textureoptions')\n    overitem = newdoc.createElement('overridemod')\n    attributeitem = newdoc.createElement('attribute')\n    top_element.appendChild(envitem)\n    top_element.appendChild(genitem)\n    top_element.appendChild(animitem)\n    top_element.appendChild(texitem)\n    top_element.appendChild(overitem)\n    top_element.appendChild(attributeitem)\n    pandadir = newdoc.createTextNode(str(self.pandaPathTxt.GetValue()))\n    mayaver = newdoc.createTextNode(str(self.m2e_mayaVerComboBox.GetSelection()))\n    pandadirElem = newdoc.createElement('pandadir')\n    mayaverElem = newdoc.createElement('mayaver')\n    pandadirElem.appendChild(pandadir)\n    mayaverElem.appendChild(mayaver)\n    envitem.appendChild(pandadirElem)\n    envitem.appendChild(mayaverElem)\n    inunits = newdoc.createTextNode(str(self.m2e_mayaUnitsComboBox.GetValue()))\n    outunits = newdoc.createTextNode(str(self.m2e_pandaUnitsComboBox.GetValue()))\n    bface = newdoc.createTextNode(str(int(self.m2e_backfaceChk.GetValue())))\n    tbnall = newdoc.createTextNode(str(int(self.m2e_tbnallChk.GetValue())))\n    subsets = newdoc.createTextNode(str(int(self.m2e_subsetsChk.GetValue())))\n    subsetsval = newdoc.createTextNode(str(self.m2e_subsetsTxt.GetValue()))\n    excludes = newdoc.createTextNode(str(int(self.m2e_excludesChk.GetValue())))\n    excludesval = newdoc.createTextNode(str(self.m2e_excludesTxt.GetValue()))\n    inunitsElem = newdoc.createElement('inunits')\n    outunitsElem = newdoc.createElement('outunits')\n    bfaceElem = newdoc.createElement('bface')\n    tbnallElem = newdoc.createElement('tbnall')\n    subsetsElem = newdoc.createElement('subsets')\n    subnamesElem = newdoc.createElement('subnames')\n    excludesElem = newdoc.createElement('excludes')\n    exnamesElem = newdoc.createElement('excludesval')\n    inunitsElem.appendChild(inunits)\n    outunitsElem.appendChild(outunits)\n    bfaceElem.appendChild(bface)\n    tbnallElem.appendChild(tbnall)\n    subsetsElem.appendChild(subsets)\n    subnamesElem.appendChild(subsetsval)\n    excludesElem.appendChild(excludes)\n    exnamesElem.appendChild(exnamesElem)\n    genitem.appendChild(inunitsElem)\n    genitem.appendChild(outunitsElem)\n    genitem.appendChild(bfaceElem)\n    genitem.appendChild(tbnallElem)\n    genitem.appendChild(subsetsElem)\n    genitem.appendChild(subnamesElem)\n    genitem.appendChild(excludesElem)\n    genitem.appendChild(exnamesElem)\n    modeloptsElem = newdoc.createElement('modelopts')\n    cnElem = newdoc.createElement('cn')\n    charnameElem = newdoc.createElement('charname')\n    framerangeElem = newdoc.createElement('framerange')\n    subrootsElem = newdoc.createElement('subroots')\n    subrnamesElem = newdoc.createElement('subrnames')\n    sfElem = newdoc.createElement('sf')\n    sfvalElem = newdoc.createElement('sfval')\n    efElem = newdoc.createElement('ef')\n    efvalElem = newdoc.createElement('efval')\n    friElem = newdoc.createElement('fri')\n    frivalElem = newdoc.createElement('frival')\n    froElem = newdoc.createElement('fro')\n    frovalElem = newdoc.createElement('froval')\n    framerangeElem.appendChild(sfElem)\n    framerangeElem.appendChild(sfvalElem)\n    framerangeElem.appendChild(efElem)\n    framerangeElem.appendChild(efvalElem)\n    framerangeElem.appendChild(friElem)\n    framerangeElem.appendChild(frivalElem)\n    framerangeElem.appendChild(froElem)\n    framerangeElem.appendChild(frovalElem)\n    modelopts = newdoc.createTextNode(str(self.m2e_animOptChoice.GetSelection()))\n    cn = newdoc.createTextNode(str(int(self.m2e_charNameChk.GetValue())))\n    charname = newdoc.createTextNode(str(self.m2e_charNameTxt.GetValue()))\n    modeloptsElem.appendChild(modelopts)\n    cnElem.appendChild(cn)\n    charnameElem.appendChild(charname)\n    sf = newdoc.createTextNode(str(int(self.m2e_startFrameChk.GetValue())))\n    sfval = newdoc.createTextNode(str(self.m2e_startFrameSpin.GetValue()))\n    ef = newdoc.createTextNode(str(int(self.m2e_endFrameChk.GetValue())))\n    efval = newdoc.createTextNode(str(self.m2e_endFrameSpin.GetValue()))\n    fri = newdoc.createTextNode(str(int(self.m2e_frameRateInChk.GetValue())))\n    frival = newdoc.createTextNode(str(self.m2e_frameRateInSpin.GetValue()))\n    fro = newdoc.createTextNode(str(int(self.m2e_frameRateOutChk.GetValue())))\n    froval = newdoc.createTextNode(str(self.m2e_frameRateOutSpin.GetValue()))\n    sfElem.appendChild(sf)\n    sfvalElem.appendChild(sfval)\n    efElem.appendChild(ef)\n    efvalElem.appendChild(efval)\n    friElem.appendChild(fri)\n    frivalElem.appendChild(frival)\n    froElem.appendChild(fro)\n    frovalElem.appendChild(froval)\n    subroots = newdoc.createTextNode(str(int(self.m2e_subrootsChk.GetValue())))\n    subrnames = newdoc.createTextNode(str(self.m2e_subrootsTxt.GetValue()))\n    subrootsElem.appendChild(subroots)\n    subrnamesElem.appendChild(subrnames)\n    animitem.appendChild(modeloptsElem)\n    animitem.appendChild(cnElem)\n    animitem.appendChild(charnameElem)\n    animitem.appendChild(framerangeElem)\n    animitem.appendChild(subrootsElem)\n    animitem.appendChild(subrnamesElem)\n    legacy_shaderElem = newdoc.createElement('legacy-shader')\n    copytexElem = newdoc.createElement('copytex')\n    destpathElem = newdoc.createElement('path')\n    legacy_shader = newdoc.createTextNode(str(int(self.m2e_legacyShaderChk.GetValue())))\n    copytex = newdoc.createTextNode(str(int(self.m2e_copyTexChk.GetValue())))\n    destpath = newdoc.createTextNode(str(self.m2e_copyTexPathTxt.GetValue()))\n    legacy_shaderElem.appendChild(legacy_shader)\n    copytexElem.appendChild(copytex)\n    destpathElem.appendChild(destpath)\n    texitem.appendChild(legacy_shaderElem)\n    texitem.appendChild(copytexElem)\n    texitem.appendChild(destpathElem)\n    override = newdoc.createTextNode(str(int(self.ignoreModDates.GetValue())))\n    overitem.appendChild(override)\n    imagetype = newdoc.createTextNode(str(self.palettize_imageTypeChoice.GetSelection()))\n    powertwo = newdoc.createTextNode(str(self.powerflag.GetSelection()))\n    imagetypeElem = newdoc.createElement('imagetype')\n    powertwoElem = newdoc.createElement('powertwo')\n    R = newdoc.createTextNode(str(int(self.palettize_redTxt.GetValue())))\n    G = newdoc.createTextNode(str(int(self.palettize_greenTxt.GetValue())))\n    B = newdoc.createTextNode(str(int(self.palettize_blueTxt.GetValue())))\n    A = newdoc.createTextNode(str(int(self.palettize_alphaTxt.GetValue())))\n    margin = newdoc.createTextNode(str(int(self.palettize_marginTxt.GetValue())))\n    coverage = newdoc.createTextNode(str(self.palettize_coverageTxt.GetValue()))\n    RElem = newdoc.createElement('R')\n    GElem = newdoc.createElement('G')\n    BElem = newdoc.createElement('B')\n    AElem = newdoc.createElement('A')\n    marginElem = newdoc.createElement('margin')\n    coverageElem = newdoc.createElement('coverage')\n    imagetypeElem.appendChild(imagetype)\n    powertwoElem.appendChild(powertwo)\n    RElem.appendChild(R)\n    GElem.appendChild(G)\n    BElem.appendChild(B)\n    AElem.appendChild(A)\n    marginElem.appendChild(margin)\n    coverageElem.appendChild(coverage)\n    attributeitem.appendChild(imagetypeElem)\n    attributeitem.appendChild(powertwoElem)\n    attributeitem.appendChild(RElem)\n    attributeitem.appendChild(GElem)\n    attributeitem.appendChild(BElem)\n    attributeitem.appendChild(AElem)\n    attributeitem.appendChild(marginElem)\n    attributeitem.appendChild(coverageElem)\n    filename = ''\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose a location and filename', dirname, '', '*.xml', wx.SAVE)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        file = dirname + os.sep + filename\n        f = open(file, 'w')\n        out = newdoc.toprettyxml()\n        for line in out:\n            f.writelines(line)\n        f.close()",
            "def OnSavePrefs(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    newdoc = Document()\n    top_element = newdoc.createElement('preferences')\n    newdoc.appendChild(top_element)\n    envitem = newdoc.createElement('environment')\n    genitem = newdoc.createElement('genoptions')\n    animitem = newdoc.createElement('animoptions')\n    texitem = newdoc.createElement('textureoptions')\n    overitem = newdoc.createElement('overridemod')\n    attributeitem = newdoc.createElement('attribute')\n    top_element.appendChild(envitem)\n    top_element.appendChild(genitem)\n    top_element.appendChild(animitem)\n    top_element.appendChild(texitem)\n    top_element.appendChild(overitem)\n    top_element.appendChild(attributeitem)\n    pandadir = newdoc.createTextNode(str(self.pandaPathTxt.GetValue()))\n    mayaver = newdoc.createTextNode(str(self.m2e_mayaVerComboBox.GetSelection()))\n    pandadirElem = newdoc.createElement('pandadir')\n    mayaverElem = newdoc.createElement('mayaver')\n    pandadirElem.appendChild(pandadir)\n    mayaverElem.appendChild(mayaver)\n    envitem.appendChild(pandadirElem)\n    envitem.appendChild(mayaverElem)\n    inunits = newdoc.createTextNode(str(self.m2e_mayaUnitsComboBox.GetValue()))\n    outunits = newdoc.createTextNode(str(self.m2e_pandaUnitsComboBox.GetValue()))\n    bface = newdoc.createTextNode(str(int(self.m2e_backfaceChk.GetValue())))\n    tbnall = newdoc.createTextNode(str(int(self.m2e_tbnallChk.GetValue())))\n    subsets = newdoc.createTextNode(str(int(self.m2e_subsetsChk.GetValue())))\n    subsetsval = newdoc.createTextNode(str(self.m2e_subsetsTxt.GetValue()))\n    excludes = newdoc.createTextNode(str(int(self.m2e_excludesChk.GetValue())))\n    excludesval = newdoc.createTextNode(str(self.m2e_excludesTxt.GetValue()))\n    inunitsElem = newdoc.createElement('inunits')\n    outunitsElem = newdoc.createElement('outunits')\n    bfaceElem = newdoc.createElement('bface')\n    tbnallElem = newdoc.createElement('tbnall')\n    subsetsElem = newdoc.createElement('subsets')\n    subnamesElem = newdoc.createElement('subnames')\n    excludesElem = newdoc.createElement('excludes')\n    exnamesElem = newdoc.createElement('excludesval')\n    inunitsElem.appendChild(inunits)\n    outunitsElem.appendChild(outunits)\n    bfaceElem.appendChild(bface)\n    tbnallElem.appendChild(tbnall)\n    subsetsElem.appendChild(subsets)\n    subnamesElem.appendChild(subsetsval)\n    excludesElem.appendChild(excludes)\n    exnamesElem.appendChild(exnamesElem)\n    genitem.appendChild(inunitsElem)\n    genitem.appendChild(outunitsElem)\n    genitem.appendChild(bfaceElem)\n    genitem.appendChild(tbnallElem)\n    genitem.appendChild(subsetsElem)\n    genitem.appendChild(subnamesElem)\n    genitem.appendChild(excludesElem)\n    genitem.appendChild(exnamesElem)\n    modeloptsElem = newdoc.createElement('modelopts')\n    cnElem = newdoc.createElement('cn')\n    charnameElem = newdoc.createElement('charname')\n    framerangeElem = newdoc.createElement('framerange')\n    subrootsElem = newdoc.createElement('subroots')\n    subrnamesElem = newdoc.createElement('subrnames')\n    sfElem = newdoc.createElement('sf')\n    sfvalElem = newdoc.createElement('sfval')\n    efElem = newdoc.createElement('ef')\n    efvalElem = newdoc.createElement('efval')\n    friElem = newdoc.createElement('fri')\n    frivalElem = newdoc.createElement('frival')\n    froElem = newdoc.createElement('fro')\n    frovalElem = newdoc.createElement('froval')\n    framerangeElem.appendChild(sfElem)\n    framerangeElem.appendChild(sfvalElem)\n    framerangeElem.appendChild(efElem)\n    framerangeElem.appendChild(efvalElem)\n    framerangeElem.appendChild(friElem)\n    framerangeElem.appendChild(frivalElem)\n    framerangeElem.appendChild(froElem)\n    framerangeElem.appendChild(frovalElem)\n    modelopts = newdoc.createTextNode(str(self.m2e_animOptChoice.GetSelection()))\n    cn = newdoc.createTextNode(str(int(self.m2e_charNameChk.GetValue())))\n    charname = newdoc.createTextNode(str(self.m2e_charNameTxt.GetValue()))\n    modeloptsElem.appendChild(modelopts)\n    cnElem.appendChild(cn)\n    charnameElem.appendChild(charname)\n    sf = newdoc.createTextNode(str(int(self.m2e_startFrameChk.GetValue())))\n    sfval = newdoc.createTextNode(str(self.m2e_startFrameSpin.GetValue()))\n    ef = newdoc.createTextNode(str(int(self.m2e_endFrameChk.GetValue())))\n    efval = newdoc.createTextNode(str(self.m2e_endFrameSpin.GetValue()))\n    fri = newdoc.createTextNode(str(int(self.m2e_frameRateInChk.GetValue())))\n    frival = newdoc.createTextNode(str(self.m2e_frameRateInSpin.GetValue()))\n    fro = newdoc.createTextNode(str(int(self.m2e_frameRateOutChk.GetValue())))\n    froval = newdoc.createTextNode(str(self.m2e_frameRateOutSpin.GetValue()))\n    sfElem.appendChild(sf)\n    sfvalElem.appendChild(sfval)\n    efElem.appendChild(ef)\n    efvalElem.appendChild(efval)\n    friElem.appendChild(fri)\n    frivalElem.appendChild(frival)\n    froElem.appendChild(fro)\n    frovalElem.appendChild(froval)\n    subroots = newdoc.createTextNode(str(int(self.m2e_subrootsChk.GetValue())))\n    subrnames = newdoc.createTextNode(str(self.m2e_subrootsTxt.GetValue()))\n    subrootsElem.appendChild(subroots)\n    subrnamesElem.appendChild(subrnames)\n    animitem.appendChild(modeloptsElem)\n    animitem.appendChild(cnElem)\n    animitem.appendChild(charnameElem)\n    animitem.appendChild(framerangeElem)\n    animitem.appendChild(subrootsElem)\n    animitem.appendChild(subrnamesElem)\n    legacy_shaderElem = newdoc.createElement('legacy-shader')\n    copytexElem = newdoc.createElement('copytex')\n    destpathElem = newdoc.createElement('path')\n    legacy_shader = newdoc.createTextNode(str(int(self.m2e_legacyShaderChk.GetValue())))\n    copytex = newdoc.createTextNode(str(int(self.m2e_copyTexChk.GetValue())))\n    destpath = newdoc.createTextNode(str(self.m2e_copyTexPathTxt.GetValue()))\n    legacy_shaderElem.appendChild(legacy_shader)\n    copytexElem.appendChild(copytex)\n    destpathElem.appendChild(destpath)\n    texitem.appendChild(legacy_shaderElem)\n    texitem.appendChild(copytexElem)\n    texitem.appendChild(destpathElem)\n    override = newdoc.createTextNode(str(int(self.ignoreModDates.GetValue())))\n    overitem.appendChild(override)\n    imagetype = newdoc.createTextNode(str(self.palettize_imageTypeChoice.GetSelection()))\n    powertwo = newdoc.createTextNode(str(self.powerflag.GetSelection()))\n    imagetypeElem = newdoc.createElement('imagetype')\n    powertwoElem = newdoc.createElement('powertwo')\n    R = newdoc.createTextNode(str(int(self.palettize_redTxt.GetValue())))\n    G = newdoc.createTextNode(str(int(self.palettize_greenTxt.GetValue())))\n    B = newdoc.createTextNode(str(int(self.palettize_blueTxt.GetValue())))\n    A = newdoc.createTextNode(str(int(self.palettize_alphaTxt.GetValue())))\n    margin = newdoc.createTextNode(str(int(self.palettize_marginTxt.GetValue())))\n    coverage = newdoc.createTextNode(str(self.palettize_coverageTxt.GetValue()))\n    RElem = newdoc.createElement('R')\n    GElem = newdoc.createElement('G')\n    BElem = newdoc.createElement('B')\n    AElem = newdoc.createElement('A')\n    marginElem = newdoc.createElement('margin')\n    coverageElem = newdoc.createElement('coverage')\n    imagetypeElem.appendChild(imagetype)\n    powertwoElem.appendChild(powertwo)\n    RElem.appendChild(R)\n    GElem.appendChild(G)\n    BElem.appendChild(B)\n    AElem.appendChild(A)\n    marginElem.appendChild(margin)\n    coverageElem.appendChild(coverage)\n    attributeitem.appendChild(imagetypeElem)\n    attributeitem.appendChild(powertwoElem)\n    attributeitem.appendChild(RElem)\n    attributeitem.appendChild(GElem)\n    attributeitem.appendChild(BElem)\n    attributeitem.appendChild(AElem)\n    attributeitem.appendChild(marginElem)\n    attributeitem.appendChild(coverageElem)\n    filename = ''\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose a location and filename', dirname, '', '*.xml', wx.SAVE)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        file = dirname + os.sep + filename\n        f = open(file, 'w')\n        out = newdoc.toprettyxml()\n        for line in out:\n            f.writelines(line)\n        f.close()",
            "def OnSavePrefs(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    newdoc = Document()\n    top_element = newdoc.createElement('preferences')\n    newdoc.appendChild(top_element)\n    envitem = newdoc.createElement('environment')\n    genitem = newdoc.createElement('genoptions')\n    animitem = newdoc.createElement('animoptions')\n    texitem = newdoc.createElement('textureoptions')\n    overitem = newdoc.createElement('overridemod')\n    attributeitem = newdoc.createElement('attribute')\n    top_element.appendChild(envitem)\n    top_element.appendChild(genitem)\n    top_element.appendChild(animitem)\n    top_element.appendChild(texitem)\n    top_element.appendChild(overitem)\n    top_element.appendChild(attributeitem)\n    pandadir = newdoc.createTextNode(str(self.pandaPathTxt.GetValue()))\n    mayaver = newdoc.createTextNode(str(self.m2e_mayaVerComboBox.GetSelection()))\n    pandadirElem = newdoc.createElement('pandadir')\n    mayaverElem = newdoc.createElement('mayaver')\n    pandadirElem.appendChild(pandadir)\n    mayaverElem.appendChild(mayaver)\n    envitem.appendChild(pandadirElem)\n    envitem.appendChild(mayaverElem)\n    inunits = newdoc.createTextNode(str(self.m2e_mayaUnitsComboBox.GetValue()))\n    outunits = newdoc.createTextNode(str(self.m2e_pandaUnitsComboBox.GetValue()))\n    bface = newdoc.createTextNode(str(int(self.m2e_backfaceChk.GetValue())))\n    tbnall = newdoc.createTextNode(str(int(self.m2e_tbnallChk.GetValue())))\n    subsets = newdoc.createTextNode(str(int(self.m2e_subsetsChk.GetValue())))\n    subsetsval = newdoc.createTextNode(str(self.m2e_subsetsTxt.GetValue()))\n    excludes = newdoc.createTextNode(str(int(self.m2e_excludesChk.GetValue())))\n    excludesval = newdoc.createTextNode(str(self.m2e_excludesTxt.GetValue()))\n    inunitsElem = newdoc.createElement('inunits')\n    outunitsElem = newdoc.createElement('outunits')\n    bfaceElem = newdoc.createElement('bface')\n    tbnallElem = newdoc.createElement('tbnall')\n    subsetsElem = newdoc.createElement('subsets')\n    subnamesElem = newdoc.createElement('subnames')\n    excludesElem = newdoc.createElement('excludes')\n    exnamesElem = newdoc.createElement('excludesval')\n    inunitsElem.appendChild(inunits)\n    outunitsElem.appendChild(outunits)\n    bfaceElem.appendChild(bface)\n    tbnallElem.appendChild(tbnall)\n    subsetsElem.appendChild(subsets)\n    subnamesElem.appendChild(subsetsval)\n    excludesElem.appendChild(excludes)\n    exnamesElem.appendChild(exnamesElem)\n    genitem.appendChild(inunitsElem)\n    genitem.appendChild(outunitsElem)\n    genitem.appendChild(bfaceElem)\n    genitem.appendChild(tbnallElem)\n    genitem.appendChild(subsetsElem)\n    genitem.appendChild(subnamesElem)\n    genitem.appendChild(excludesElem)\n    genitem.appendChild(exnamesElem)\n    modeloptsElem = newdoc.createElement('modelopts')\n    cnElem = newdoc.createElement('cn')\n    charnameElem = newdoc.createElement('charname')\n    framerangeElem = newdoc.createElement('framerange')\n    subrootsElem = newdoc.createElement('subroots')\n    subrnamesElem = newdoc.createElement('subrnames')\n    sfElem = newdoc.createElement('sf')\n    sfvalElem = newdoc.createElement('sfval')\n    efElem = newdoc.createElement('ef')\n    efvalElem = newdoc.createElement('efval')\n    friElem = newdoc.createElement('fri')\n    frivalElem = newdoc.createElement('frival')\n    froElem = newdoc.createElement('fro')\n    frovalElem = newdoc.createElement('froval')\n    framerangeElem.appendChild(sfElem)\n    framerangeElem.appendChild(sfvalElem)\n    framerangeElem.appendChild(efElem)\n    framerangeElem.appendChild(efvalElem)\n    framerangeElem.appendChild(friElem)\n    framerangeElem.appendChild(frivalElem)\n    framerangeElem.appendChild(froElem)\n    framerangeElem.appendChild(frovalElem)\n    modelopts = newdoc.createTextNode(str(self.m2e_animOptChoice.GetSelection()))\n    cn = newdoc.createTextNode(str(int(self.m2e_charNameChk.GetValue())))\n    charname = newdoc.createTextNode(str(self.m2e_charNameTxt.GetValue()))\n    modeloptsElem.appendChild(modelopts)\n    cnElem.appendChild(cn)\n    charnameElem.appendChild(charname)\n    sf = newdoc.createTextNode(str(int(self.m2e_startFrameChk.GetValue())))\n    sfval = newdoc.createTextNode(str(self.m2e_startFrameSpin.GetValue()))\n    ef = newdoc.createTextNode(str(int(self.m2e_endFrameChk.GetValue())))\n    efval = newdoc.createTextNode(str(self.m2e_endFrameSpin.GetValue()))\n    fri = newdoc.createTextNode(str(int(self.m2e_frameRateInChk.GetValue())))\n    frival = newdoc.createTextNode(str(self.m2e_frameRateInSpin.GetValue()))\n    fro = newdoc.createTextNode(str(int(self.m2e_frameRateOutChk.GetValue())))\n    froval = newdoc.createTextNode(str(self.m2e_frameRateOutSpin.GetValue()))\n    sfElem.appendChild(sf)\n    sfvalElem.appendChild(sfval)\n    efElem.appendChild(ef)\n    efvalElem.appendChild(efval)\n    friElem.appendChild(fri)\n    frivalElem.appendChild(frival)\n    froElem.appendChild(fro)\n    frovalElem.appendChild(froval)\n    subroots = newdoc.createTextNode(str(int(self.m2e_subrootsChk.GetValue())))\n    subrnames = newdoc.createTextNode(str(self.m2e_subrootsTxt.GetValue()))\n    subrootsElem.appendChild(subroots)\n    subrnamesElem.appendChild(subrnames)\n    animitem.appendChild(modeloptsElem)\n    animitem.appendChild(cnElem)\n    animitem.appendChild(charnameElem)\n    animitem.appendChild(framerangeElem)\n    animitem.appendChild(subrootsElem)\n    animitem.appendChild(subrnamesElem)\n    legacy_shaderElem = newdoc.createElement('legacy-shader')\n    copytexElem = newdoc.createElement('copytex')\n    destpathElem = newdoc.createElement('path')\n    legacy_shader = newdoc.createTextNode(str(int(self.m2e_legacyShaderChk.GetValue())))\n    copytex = newdoc.createTextNode(str(int(self.m2e_copyTexChk.GetValue())))\n    destpath = newdoc.createTextNode(str(self.m2e_copyTexPathTxt.GetValue()))\n    legacy_shaderElem.appendChild(legacy_shader)\n    copytexElem.appendChild(copytex)\n    destpathElem.appendChild(destpath)\n    texitem.appendChild(legacy_shaderElem)\n    texitem.appendChild(copytexElem)\n    texitem.appendChild(destpathElem)\n    override = newdoc.createTextNode(str(int(self.ignoreModDates.GetValue())))\n    overitem.appendChild(override)\n    imagetype = newdoc.createTextNode(str(self.palettize_imageTypeChoice.GetSelection()))\n    powertwo = newdoc.createTextNode(str(self.powerflag.GetSelection()))\n    imagetypeElem = newdoc.createElement('imagetype')\n    powertwoElem = newdoc.createElement('powertwo')\n    R = newdoc.createTextNode(str(int(self.palettize_redTxt.GetValue())))\n    G = newdoc.createTextNode(str(int(self.palettize_greenTxt.GetValue())))\n    B = newdoc.createTextNode(str(int(self.palettize_blueTxt.GetValue())))\n    A = newdoc.createTextNode(str(int(self.palettize_alphaTxt.GetValue())))\n    margin = newdoc.createTextNode(str(int(self.palettize_marginTxt.GetValue())))\n    coverage = newdoc.createTextNode(str(self.palettize_coverageTxt.GetValue()))\n    RElem = newdoc.createElement('R')\n    GElem = newdoc.createElement('G')\n    BElem = newdoc.createElement('B')\n    AElem = newdoc.createElement('A')\n    marginElem = newdoc.createElement('margin')\n    coverageElem = newdoc.createElement('coverage')\n    imagetypeElem.appendChild(imagetype)\n    powertwoElem.appendChild(powertwo)\n    RElem.appendChild(R)\n    GElem.appendChild(G)\n    BElem.appendChild(B)\n    AElem.appendChild(A)\n    marginElem.appendChild(margin)\n    coverageElem.appendChild(coverage)\n    attributeitem.appendChild(imagetypeElem)\n    attributeitem.appendChild(powertwoElem)\n    attributeitem.appendChild(RElem)\n    attributeitem.appendChild(GElem)\n    attributeitem.appendChild(BElem)\n    attributeitem.appendChild(AElem)\n    attributeitem.appendChild(marginElem)\n    attributeitem.appendChild(coverageElem)\n    filename = ''\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose a location and filename', dirname, '', '*.xml', wx.SAVE)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        file = dirname + os.sep + filename\n        f = open(file, 'w')\n        out = newdoc.toprettyxml()\n        for line in out:\n            f.writelines(line)\n        f.close()"
        ]
    },
    {
        "func_name": "OnLoadPrefs",
        "original": "def OnLoadPrefs(self, event):\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose a location and filename', dirname, '', '*.xml', wx.OPEN)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        file = dirname + os.sep + filename\n        prefs = {}\n        doc = xml.dom.minidom.parse(str(file))\n        prefs = self.parseXML(doc)\n        self.updateOptions(prefs)",
        "mutated": [
            "def OnLoadPrefs(self, event):\n    if False:\n        i = 10\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose a location and filename', dirname, '', '*.xml', wx.OPEN)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        file = dirname + os.sep + filename\n        prefs = {}\n        doc = xml.dom.minidom.parse(str(file))\n        prefs = self.parseXML(doc)\n        self.updateOptions(prefs)",
            "def OnLoadPrefs(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose a location and filename', dirname, '', '*.xml', wx.OPEN)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        file = dirname + os.sep + filename\n        prefs = {}\n        doc = xml.dom.minidom.parse(str(file))\n        prefs = self.parseXML(doc)\n        self.updateOptions(prefs)",
            "def OnLoadPrefs(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose a location and filename', dirname, '', '*.xml', wx.OPEN)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        file = dirname + os.sep + filename\n        prefs = {}\n        doc = xml.dom.minidom.parse(str(file))\n        prefs = self.parseXML(doc)\n        self.updateOptions(prefs)",
            "def OnLoadPrefs(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose a location and filename', dirname, '', '*.xml', wx.OPEN)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        file = dirname + os.sep + filename\n        prefs = {}\n        doc = xml.dom.minidom.parse(str(file))\n        prefs = self.parseXML(doc)\n        self.updateOptions(prefs)",
            "def OnLoadPrefs(self, event):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    dirname = ''\n    dlg = wx.FileDialog(self, 'Choose a location and filename', dirname, '', '*.xml', wx.OPEN)\n    if dlg.ShowModal() == wx.ID_OK:\n        filename = dlg.GetFilename()\n        dirname = dlg.GetDirectory()\n        file = dirname + os.sep + filename\n        prefs = {}\n        doc = xml.dom.minidom.parse(str(file))\n        prefs = self.parseXML(doc)\n        self.updateOptions(prefs)"
        ]
    },
    {
        "func_name": "parseXML",
        "original": "def parseXML(self, doc):\n    prefsDict = {}\n    for list in doc.getElementsByTagName('preferences'):\n        envlist = list.getElementsByTagName('environment')\n        genlist = list.getElementsByTagName('genoptions')\n        animlist = list.getElementsByTagName('animoptions')\n        texlist = list.getElementsByTagName('textureoptions')\n        overlist = list.getElementsByTagName('overridemod')\n        attributelist = list.getElementsByTagName('attribute')\n        for elem in envlist:\n            for nodes in elem.childNodes:\n                for val in nodes.childNodes:\n                    key = val.parentNode.nodeName\n                    data = str(val.data)\n                    prefsDict[str(key)] = data.strip()\n        for elem in genlist:\n            for nodes in elem.childNodes:\n                for val in nodes.childNodes:\n                    key = val.parentNode.nodeName\n                    data = str(val.data)\n                    prefsDict[str(key)] = data.strip()\n        for elem in overlist:\n            for node in elem.childNodes:\n                key = node.parentNode.nodeName\n                data = str(node.data)\n                prefsDict[str(key)] = data.strip()\n        for elem in animlist:\n            for elem2 in elem.childNodes:\n                for elem3 in elem2.childNodes:\n                    data = elem3\n                    parent = str(elem3.parentNode.nodeName)\n                    if parent == 'framerange':\n                        list = data.childNodes\n                        for items in list:\n                            key = str(items.parentNode.nodeName)\n                            keydata = str(items.data)\n                            prefsDict[key] = keydata.strip()\n                    else:\n                        prefsDict[parent] = str(data.data).strip()\n        for elem in texlist:\n            for nodes in elem.childNodes:\n                for val in nodes.childNodes:\n                    key = val.parentNode.nodeName\n                    data = str(val.data)\n                    prefsDict[str(key)] = data.strip()\n        for elem in attributelist:\n            for nodes in elem.childNodes:\n                for val in nodes.childNodes:\n                    key = val.parentNode.nodeName\n                    data = str(val.data)\n                    prefsDict[str(key)] = data.strip()\n    return prefsDict",
        "mutated": [
            "def parseXML(self, doc):\n    if False:\n        i = 10\n    prefsDict = {}\n    for list in doc.getElementsByTagName('preferences'):\n        envlist = list.getElementsByTagName('environment')\n        genlist = list.getElementsByTagName('genoptions')\n        animlist = list.getElementsByTagName('animoptions')\n        texlist = list.getElementsByTagName('textureoptions')\n        overlist = list.getElementsByTagName('overridemod')\n        attributelist = list.getElementsByTagName('attribute')\n        for elem in envlist:\n            for nodes in elem.childNodes:\n                for val in nodes.childNodes:\n                    key = val.parentNode.nodeName\n                    data = str(val.data)\n                    prefsDict[str(key)] = data.strip()\n        for elem in genlist:\n            for nodes in elem.childNodes:\n                for val in nodes.childNodes:\n                    key = val.parentNode.nodeName\n                    data = str(val.data)\n                    prefsDict[str(key)] = data.strip()\n        for elem in overlist:\n            for node in elem.childNodes:\n                key = node.parentNode.nodeName\n                data = str(node.data)\n                prefsDict[str(key)] = data.strip()\n        for elem in animlist:\n            for elem2 in elem.childNodes:\n                for elem3 in elem2.childNodes:\n                    data = elem3\n                    parent = str(elem3.parentNode.nodeName)\n                    if parent == 'framerange':\n                        list = data.childNodes\n                        for items in list:\n                            key = str(items.parentNode.nodeName)\n                            keydata = str(items.data)\n                            prefsDict[key] = keydata.strip()\n                    else:\n                        prefsDict[parent] = str(data.data).strip()\n        for elem in texlist:\n            for nodes in elem.childNodes:\n                for val in nodes.childNodes:\n                    key = val.parentNode.nodeName\n                    data = str(val.data)\n                    prefsDict[str(key)] = data.strip()\n        for elem in attributelist:\n            for nodes in elem.childNodes:\n                for val in nodes.childNodes:\n                    key = val.parentNode.nodeName\n                    data = str(val.data)\n                    prefsDict[str(key)] = data.strip()\n    return prefsDict",
            "def parseXML(self, doc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    prefsDict = {}\n    for list in doc.getElementsByTagName('preferences'):\n        envlist = list.getElementsByTagName('environment')\n        genlist = list.getElementsByTagName('genoptions')\n        animlist = list.getElementsByTagName('animoptions')\n        texlist = list.getElementsByTagName('textureoptions')\n        overlist = list.getElementsByTagName('overridemod')\n        attributelist = list.getElementsByTagName('attribute')\n        for elem in envlist:\n            for nodes in elem.childNodes:\n                for val in nodes.childNodes:\n                    key = val.parentNode.nodeName\n                    data = str(val.data)\n                    prefsDict[str(key)] = data.strip()\n        for elem in genlist:\n            for nodes in elem.childNodes:\n                for val in nodes.childNodes:\n                    key = val.parentNode.nodeName\n                    data = str(val.data)\n                    prefsDict[str(key)] = data.strip()\n        for elem in overlist:\n            for node in elem.childNodes:\n                key = node.parentNode.nodeName\n                data = str(node.data)\n                prefsDict[str(key)] = data.strip()\n        for elem in animlist:\n            for elem2 in elem.childNodes:\n                for elem3 in elem2.childNodes:\n                    data = elem3\n                    parent = str(elem3.parentNode.nodeName)\n                    if parent == 'framerange':\n                        list = data.childNodes\n                        for items in list:\n                            key = str(items.parentNode.nodeName)\n                            keydata = str(items.data)\n                            prefsDict[key] = keydata.strip()\n                    else:\n                        prefsDict[parent] = str(data.data).strip()\n        for elem in texlist:\n            for nodes in elem.childNodes:\n                for val in nodes.childNodes:\n                    key = val.parentNode.nodeName\n                    data = str(val.data)\n                    prefsDict[str(key)] = data.strip()\n        for elem in attributelist:\n            for nodes in elem.childNodes:\n                for val in nodes.childNodes:\n                    key = val.parentNode.nodeName\n                    data = str(val.data)\n                    prefsDict[str(key)] = data.strip()\n    return prefsDict",
            "def parseXML(self, doc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    prefsDict = {}\n    for list in doc.getElementsByTagName('preferences'):\n        envlist = list.getElementsByTagName('environment')\n        genlist = list.getElementsByTagName('genoptions')\n        animlist = list.getElementsByTagName('animoptions')\n        texlist = list.getElementsByTagName('textureoptions')\n        overlist = list.getElementsByTagName('overridemod')\n        attributelist = list.getElementsByTagName('attribute')\n        for elem in envlist:\n            for nodes in elem.childNodes:\n                for val in nodes.childNodes:\n                    key = val.parentNode.nodeName\n                    data = str(val.data)\n                    prefsDict[str(key)] = data.strip()\n        for elem in genlist:\n            for nodes in elem.childNodes:\n                for val in nodes.childNodes:\n                    key = val.parentNode.nodeName\n                    data = str(val.data)\n                    prefsDict[str(key)] = data.strip()\n        for elem in overlist:\n            for node in elem.childNodes:\n                key = node.parentNode.nodeName\n                data = str(node.data)\n                prefsDict[str(key)] = data.strip()\n        for elem in animlist:\n            for elem2 in elem.childNodes:\n                for elem3 in elem2.childNodes:\n                    data = elem3\n                    parent = str(elem3.parentNode.nodeName)\n                    if parent == 'framerange':\n                        list = data.childNodes\n                        for items in list:\n                            key = str(items.parentNode.nodeName)\n                            keydata = str(items.data)\n                            prefsDict[key] = keydata.strip()\n                    else:\n                        prefsDict[parent] = str(data.data).strip()\n        for elem in texlist:\n            for nodes in elem.childNodes:\n                for val in nodes.childNodes:\n                    key = val.parentNode.nodeName\n                    data = str(val.data)\n                    prefsDict[str(key)] = data.strip()\n        for elem in attributelist:\n            for nodes in elem.childNodes:\n                for val in nodes.childNodes:\n                    key = val.parentNode.nodeName\n                    data = str(val.data)\n                    prefsDict[str(key)] = data.strip()\n    return prefsDict",
            "def parseXML(self, doc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    prefsDict = {}\n    for list in doc.getElementsByTagName('preferences'):\n        envlist = list.getElementsByTagName('environment')\n        genlist = list.getElementsByTagName('genoptions')\n        animlist = list.getElementsByTagName('animoptions')\n        texlist = list.getElementsByTagName('textureoptions')\n        overlist = list.getElementsByTagName('overridemod')\n        attributelist = list.getElementsByTagName('attribute')\n        for elem in envlist:\n            for nodes in elem.childNodes:\n                for val in nodes.childNodes:\n                    key = val.parentNode.nodeName\n                    data = str(val.data)\n                    prefsDict[str(key)] = data.strip()\n        for elem in genlist:\n            for nodes in elem.childNodes:\n                for val in nodes.childNodes:\n                    key = val.parentNode.nodeName\n                    data = str(val.data)\n                    prefsDict[str(key)] = data.strip()\n        for elem in overlist:\n            for node in elem.childNodes:\n                key = node.parentNode.nodeName\n                data = str(node.data)\n                prefsDict[str(key)] = data.strip()\n        for elem in animlist:\n            for elem2 in elem.childNodes:\n                for elem3 in elem2.childNodes:\n                    data = elem3\n                    parent = str(elem3.parentNode.nodeName)\n                    if parent == 'framerange':\n                        list = data.childNodes\n                        for items in list:\n                            key = str(items.parentNode.nodeName)\n                            keydata = str(items.data)\n                            prefsDict[key] = keydata.strip()\n                    else:\n                        prefsDict[parent] = str(data.data).strip()\n        for elem in texlist:\n            for nodes in elem.childNodes:\n                for val in nodes.childNodes:\n                    key = val.parentNode.nodeName\n                    data = str(val.data)\n                    prefsDict[str(key)] = data.strip()\n        for elem in attributelist:\n            for nodes in elem.childNodes:\n                for val in nodes.childNodes:\n                    key = val.parentNode.nodeName\n                    data = str(val.data)\n                    prefsDict[str(key)] = data.strip()\n    return prefsDict",
            "def parseXML(self, doc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    prefsDict = {}\n    for list in doc.getElementsByTagName('preferences'):\n        envlist = list.getElementsByTagName('environment')\n        genlist = list.getElementsByTagName('genoptions')\n        animlist = list.getElementsByTagName('animoptions')\n        texlist = list.getElementsByTagName('textureoptions')\n        overlist = list.getElementsByTagName('overridemod')\n        attributelist = list.getElementsByTagName('attribute')\n        for elem in envlist:\n            for nodes in elem.childNodes:\n                for val in nodes.childNodes:\n                    key = val.parentNode.nodeName\n                    data = str(val.data)\n                    prefsDict[str(key)] = data.strip()\n        for elem in genlist:\n            for nodes in elem.childNodes:\n                for val in nodes.childNodes:\n                    key = val.parentNode.nodeName\n                    data = str(val.data)\n                    prefsDict[str(key)] = data.strip()\n        for elem in overlist:\n            for node in elem.childNodes:\n                key = node.parentNode.nodeName\n                data = str(node.data)\n                prefsDict[str(key)] = data.strip()\n        for elem in animlist:\n            for elem2 in elem.childNodes:\n                for elem3 in elem2.childNodes:\n                    data = elem3\n                    parent = str(elem3.parentNode.nodeName)\n                    if parent == 'framerange':\n                        list = data.childNodes\n                        for items in list:\n                            key = str(items.parentNode.nodeName)\n                            keydata = str(items.data)\n                            prefsDict[key] = keydata.strip()\n                    else:\n                        prefsDict[parent] = str(data.data).strip()\n        for elem in texlist:\n            for nodes in elem.childNodes:\n                for val in nodes.childNodes:\n                    key = val.parentNode.nodeName\n                    data = str(val.data)\n                    prefsDict[str(key)] = data.strip()\n        for elem in attributelist:\n            for nodes in elem.childNodes:\n                for val in nodes.childNodes:\n                    key = val.parentNode.nodeName\n                    data = str(val.data)\n                    prefsDict[str(key)] = data.strip()\n    return prefsDict"
        ]
    },
    {
        "func_name": "updateOptions",
        "original": "def updateOptions(self, prefs):\n    self.pandaPathTxt.SetValue(prefs['pandadir'])\n    self.m2e_mayaVerComboBox.SetSelection(int(prefs['mayaver']))\n    self.m2e_mayaUnitsComboBox.SetValue(prefs['inunits'])\n    self.m2e_pandaUnitsComboBox.SetValue(prefs['outunits'])\n    self.m2e_backfaceChk.SetValue(bool(prefs['bface']))\n    self.m2e_tbnallChk.SetValue(bool(int(prefs['tbnall'])))\n    self.m2e_subsetsChk.SetValue(bool(int(prefs['subsets'])))\n    self.m2e_subsetsTxt.SetValue(prefs['subnames'])\n    self.m2e_excludesChk.SetValue(bool(int(prefs['excludes'])))\n    self.m2e_excludesTxt.SetValue(prefs['exnames'])\n    self.m2e_animOptChoice.SetSelection(int(prefs['modelopts']))\n    self.m2e_charNameChk.SetValue(bool(int(prefs['cn'])))\n    self.m2e_charNameTxt.SetValue(prefs['charname'])\n    self.m2e_startFrameChk.SetValue(bool(int(prefs['sf'])))\n    self.m2e_startFrameSpin.SetValue(int(prefs['sfval']))\n    self.m2e_endFrameChk.SetValue(bool(int(prefs['ef'])))\n    self.m2e_endFrameSpin.SetValue(int(prefs['efval']))\n    self.m2e_frameRateInChk.SetValue(bool(int(prefs['fri'])))\n    self.m2e_frameRateInSpin.SetValue(int(prefs['frival']))\n    self.m2e_frameRateOutChk.SetValue(bool(int(prefs['fro'])))\n    self.m2e_frameRateOutSpin.SetValue(int(prefs['froval']))\n    self.m2e_subrootsChk.SetValue(bool(int(prefs['subroots'])))\n    self.m2e_subrootsTxt.SetValue(prefs['subrnames'])\n    self.ignoreModDates.SetValue(bool(int(prefs['overridemod'])))\n    self.m2e_legacyShaderChk.SetValue(bool(int(prefs['legacy-shader'])))\n    self.m2e_copyTexChk.SetValue(bool(int(prefs['copytex'])))\n    self.m2e_copyTexPathTxt.SetValue(prefs['path'])\n    self.palettize_imageTypeChoice.SetSelection(int(prefs['imagetype']))\n    self.powerflag.SetSelection(int(prefs['powertwo']))\n    self.palettize_redTxt.SetValue(int(prefs['R']))\n    self.palettize_greenTxt.SetValue(int(prefs['G']))\n    self.palettize_blueTxt.SetValue(int(prefs['B']))\n    self.palettize_alphaTxt.SetValue(int(prefs['A']))\n    self.palettize_marginTxt.SetValue(int(prefs['margin']))\n    self.palettize_coverageTxt.SetValue(prefs['coverage'])",
        "mutated": [
            "def updateOptions(self, prefs):\n    if False:\n        i = 10\n    self.pandaPathTxt.SetValue(prefs['pandadir'])\n    self.m2e_mayaVerComboBox.SetSelection(int(prefs['mayaver']))\n    self.m2e_mayaUnitsComboBox.SetValue(prefs['inunits'])\n    self.m2e_pandaUnitsComboBox.SetValue(prefs['outunits'])\n    self.m2e_backfaceChk.SetValue(bool(prefs['bface']))\n    self.m2e_tbnallChk.SetValue(bool(int(prefs['tbnall'])))\n    self.m2e_subsetsChk.SetValue(bool(int(prefs['subsets'])))\n    self.m2e_subsetsTxt.SetValue(prefs['subnames'])\n    self.m2e_excludesChk.SetValue(bool(int(prefs['excludes'])))\n    self.m2e_excludesTxt.SetValue(prefs['exnames'])\n    self.m2e_animOptChoice.SetSelection(int(prefs['modelopts']))\n    self.m2e_charNameChk.SetValue(bool(int(prefs['cn'])))\n    self.m2e_charNameTxt.SetValue(prefs['charname'])\n    self.m2e_startFrameChk.SetValue(bool(int(prefs['sf'])))\n    self.m2e_startFrameSpin.SetValue(int(prefs['sfval']))\n    self.m2e_endFrameChk.SetValue(bool(int(prefs['ef'])))\n    self.m2e_endFrameSpin.SetValue(int(prefs['efval']))\n    self.m2e_frameRateInChk.SetValue(bool(int(prefs['fri'])))\n    self.m2e_frameRateInSpin.SetValue(int(prefs['frival']))\n    self.m2e_frameRateOutChk.SetValue(bool(int(prefs['fro'])))\n    self.m2e_frameRateOutSpin.SetValue(int(prefs['froval']))\n    self.m2e_subrootsChk.SetValue(bool(int(prefs['subroots'])))\n    self.m2e_subrootsTxt.SetValue(prefs['subrnames'])\n    self.ignoreModDates.SetValue(bool(int(prefs['overridemod'])))\n    self.m2e_legacyShaderChk.SetValue(bool(int(prefs['legacy-shader'])))\n    self.m2e_copyTexChk.SetValue(bool(int(prefs['copytex'])))\n    self.m2e_copyTexPathTxt.SetValue(prefs['path'])\n    self.palettize_imageTypeChoice.SetSelection(int(prefs['imagetype']))\n    self.powerflag.SetSelection(int(prefs['powertwo']))\n    self.palettize_redTxt.SetValue(int(prefs['R']))\n    self.palettize_greenTxt.SetValue(int(prefs['G']))\n    self.palettize_blueTxt.SetValue(int(prefs['B']))\n    self.palettize_alphaTxt.SetValue(int(prefs['A']))\n    self.palettize_marginTxt.SetValue(int(prefs['margin']))\n    self.palettize_coverageTxt.SetValue(prefs['coverage'])",
            "def updateOptions(self, prefs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.pandaPathTxt.SetValue(prefs['pandadir'])\n    self.m2e_mayaVerComboBox.SetSelection(int(prefs['mayaver']))\n    self.m2e_mayaUnitsComboBox.SetValue(prefs['inunits'])\n    self.m2e_pandaUnitsComboBox.SetValue(prefs['outunits'])\n    self.m2e_backfaceChk.SetValue(bool(prefs['bface']))\n    self.m2e_tbnallChk.SetValue(bool(int(prefs['tbnall'])))\n    self.m2e_subsetsChk.SetValue(bool(int(prefs['subsets'])))\n    self.m2e_subsetsTxt.SetValue(prefs['subnames'])\n    self.m2e_excludesChk.SetValue(bool(int(prefs['excludes'])))\n    self.m2e_excludesTxt.SetValue(prefs['exnames'])\n    self.m2e_animOptChoice.SetSelection(int(prefs['modelopts']))\n    self.m2e_charNameChk.SetValue(bool(int(prefs['cn'])))\n    self.m2e_charNameTxt.SetValue(prefs['charname'])\n    self.m2e_startFrameChk.SetValue(bool(int(prefs['sf'])))\n    self.m2e_startFrameSpin.SetValue(int(prefs['sfval']))\n    self.m2e_endFrameChk.SetValue(bool(int(prefs['ef'])))\n    self.m2e_endFrameSpin.SetValue(int(prefs['efval']))\n    self.m2e_frameRateInChk.SetValue(bool(int(prefs['fri'])))\n    self.m2e_frameRateInSpin.SetValue(int(prefs['frival']))\n    self.m2e_frameRateOutChk.SetValue(bool(int(prefs['fro'])))\n    self.m2e_frameRateOutSpin.SetValue(int(prefs['froval']))\n    self.m2e_subrootsChk.SetValue(bool(int(prefs['subroots'])))\n    self.m2e_subrootsTxt.SetValue(prefs['subrnames'])\n    self.ignoreModDates.SetValue(bool(int(prefs['overridemod'])))\n    self.m2e_legacyShaderChk.SetValue(bool(int(prefs['legacy-shader'])))\n    self.m2e_copyTexChk.SetValue(bool(int(prefs['copytex'])))\n    self.m2e_copyTexPathTxt.SetValue(prefs['path'])\n    self.palettize_imageTypeChoice.SetSelection(int(prefs['imagetype']))\n    self.powerflag.SetSelection(int(prefs['powertwo']))\n    self.palettize_redTxt.SetValue(int(prefs['R']))\n    self.palettize_greenTxt.SetValue(int(prefs['G']))\n    self.palettize_blueTxt.SetValue(int(prefs['B']))\n    self.palettize_alphaTxt.SetValue(int(prefs['A']))\n    self.palettize_marginTxt.SetValue(int(prefs['margin']))\n    self.palettize_coverageTxt.SetValue(prefs['coverage'])",
            "def updateOptions(self, prefs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.pandaPathTxt.SetValue(prefs['pandadir'])\n    self.m2e_mayaVerComboBox.SetSelection(int(prefs['mayaver']))\n    self.m2e_mayaUnitsComboBox.SetValue(prefs['inunits'])\n    self.m2e_pandaUnitsComboBox.SetValue(prefs['outunits'])\n    self.m2e_backfaceChk.SetValue(bool(prefs['bface']))\n    self.m2e_tbnallChk.SetValue(bool(int(prefs['tbnall'])))\n    self.m2e_subsetsChk.SetValue(bool(int(prefs['subsets'])))\n    self.m2e_subsetsTxt.SetValue(prefs['subnames'])\n    self.m2e_excludesChk.SetValue(bool(int(prefs['excludes'])))\n    self.m2e_excludesTxt.SetValue(prefs['exnames'])\n    self.m2e_animOptChoice.SetSelection(int(prefs['modelopts']))\n    self.m2e_charNameChk.SetValue(bool(int(prefs['cn'])))\n    self.m2e_charNameTxt.SetValue(prefs['charname'])\n    self.m2e_startFrameChk.SetValue(bool(int(prefs['sf'])))\n    self.m2e_startFrameSpin.SetValue(int(prefs['sfval']))\n    self.m2e_endFrameChk.SetValue(bool(int(prefs['ef'])))\n    self.m2e_endFrameSpin.SetValue(int(prefs['efval']))\n    self.m2e_frameRateInChk.SetValue(bool(int(prefs['fri'])))\n    self.m2e_frameRateInSpin.SetValue(int(prefs['frival']))\n    self.m2e_frameRateOutChk.SetValue(bool(int(prefs['fro'])))\n    self.m2e_frameRateOutSpin.SetValue(int(prefs['froval']))\n    self.m2e_subrootsChk.SetValue(bool(int(prefs['subroots'])))\n    self.m2e_subrootsTxt.SetValue(prefs['subrnames'])\n    self.ignoreModDates.SetValue(bool(int(prefs['overridemod'])))\n    self.m2e_legacyShaderChk.SetValue(bool(int(prefs['legacy-shader'])))\n    self.m2e_copyTexChk.SetValue(bool(int(prefs['copytex'])))\n    self.m2e_copyTexPathTxt.SetValue(prefs['path'])\n    self.palettize_imageTypeChoice.SetSelection(int(prefs['imagetype']))\n    self.powerflag.SetSelection(int(prefs['powertwo']))\n    self.palettize_redTxt.SetValue(int(prefs['R']))\n    self.palettize_greenTxt.SetValue(int(prefs['G']))\n    self.palettize_blueTxt.SetValue(int(prefs['B']))\n    self.palettize_alphaTxt.SetValue(int(prefs['A']))\n    self.palettize_marginTxt.SetValue(int(prefs['margin']))\n    self.palettize_coverageTxt.SetValue(prefs['coverage'])",
            "def updateOptions(self, prefs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.pandaPathTxt.SetValue(prefs['pandadir'])\n    self.m2e_mayaVerComboBox.SetSelection(int(prefs['mayaver']))\n    self.m2e_mayaUnitsComboBox.SetValue(prefs['inunits'])\n    self.m2e_pandaUnitsComboBox.SetValue(prefs['outunits'])\n    self.m2e_backfaceChk.SetValue(bool(prefs['bface']))\n    self.m2e_tbnallChk.SetValue(bool(int(prefs['tbnall'])))\n    self.m2e_subsetsChk.SetValue(bool(int(prefs['subsets'])))\n    self.m2e_subsetsTxt.SetValue(prefs['subnames'])\n    self.m2e_excludesChk.SetValue(bool(int(prefs['excludes'])))\n    self.m2e_excludesTxt.SetValue(prefs['exnames'])\n    self.m2e_animOptChoice.SetSelection(int(prefs['modelopts']))\n    self.m2e_charNameChk.SetValue(bool(int(prefs['cn'])))\n    self.m2e_charNameTxt.SetValue(prefs['charname'])\n    self.m2e_startFrameChk.SetValue(bool(int(prefs['sf'])))\n    self.m2e_startFrameSpin.SetValue(int(prefs['sfval']))\n    self.m2e_endFrameChk.SetValue(bool(int(prefs['ef'])))\n    self.m2e_endFrameSpin.SetValue(int(prefs['efval']))\n    self.m2e_frameRateInChk.SetValue(bool(int(prefs['fri'])))\n    self.m2e_frameRateInSpin.SetValue(int(prefs['frival']))\n    self.m2e_frameRateOutChk.SetValue(bool(int(prefs['fro'])))\n    self.m2e_frameRateOutSpin.SetValue(int(prefs['froval']))\n    self.m2e_subrootsChk.SetValue(bool(int(prefs['subroots'])))\n    self.m2e_subrootsTxt.SetValue(prefs['subrnames'])\n    self.ignoreModDates.SetValue(bool(int(prefs['overridemod'])))\n    self.m2e_legacyShaderChk.SetValue(bool(int(prefs['legacy-shader'])))\n    self.m2e_copyTexChk.SetValue(bool(int(prefs['copytex'])))\n    self.m2e_copyTexPathTxt.SetValue(prefs['path'])\n    self.palettize_imageTypeChoice.SetSelection(int(prefs['imagetype']))\n    self.powerflag.SetSelection(int(prefs['powertwo']))\n    self.palettize_redTxt.SetValue(int(prefs['R']))\n    self.palettize_greenTxt.SetValue(int(prefs['G']))\n    self.palettize_blueTxt.SetValue(int(prefs['B']))\n    self.palettize_alphaTxt.SetValue(int(prefs['A']))\n    self.palettize_marginTxt.SetValue(int(prefs['margin']))\n    self.palettize_coverageTxt.SetValue(prefs['coverage'])",
            "def updateOptions(self, prefs):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.pandaPathTxt.SetValue(prefs['pandadir'])\n    self.m2e_mayaVerComboBox.SetSelection(int(prefs['mayaver']))\n    self.m2e_mayaUnitsComboBox.SetValue(prefs['inunits'])\n    self.m2e_pandaUnitsComboBox.SetValue(prefs['outunits'])\n    self.m2e_backfaceChk.SetValue(bool(prefs['bface']))\n    self.m2e_tbnallChk.SetValue(bool(int(prefs['tbnall'])))\n    self.m2e_subsetsChk.SetValue(bool(int(prefs['subsets'])))\n    self.m2e_subsetsTxt.SetValue(prefs['subnames'])\n    self.m2e_excludesChk.SetValue(bool(int(prefs['excludes'])))\n    self.m2e_excludesTxt.SetValue(prefs['exnames'])\n    self.m2e_animOptChoice.SetSelection(int(prefs['modelopts']))\n    self.m2e_charNameChk.SetValue(bool(int(prefs['cn'])))\n    self.m2e_charNameTxt.SetValue(prefs['charname'])\n    self.m2e_startFrameChk.SetValue(bool(int(prefs['sf'])))\n    self.m2e_startFrameSpin.SetValue(int(prefs['sfval']))\n    self.m2e_endFrameChk.SetValue(bool(int(prefs['ef'])))\n    self.m2e_endFrameSpin.SetValue(int(prefs['efval']))\n    self.m2e_frameRateInChk.SetValue(bool(int(prefs['fri'])))\n    self.m2e_frameRateInSpin.SetValue(int(prefs['frival']))\n    self.m2e_frameRateOutChk.SetValue(bool(int(prefs['fro'])))\n    self.m2e_frameRateOutSpin.SetValue(int(prefs['froval']))\n    self.m2e_subrootsChk.SetValue(bool(int(prefs['subroots'])))\n    self.m2e_subrootsTxt.SetValue(prefs['subrnames'])\n    self.ignoreModDates.SetValue(bool(int(prefs['overridemod'])))\n    self.m2e_legacyShaderChk.SetValue(bool(int(prefs['legacy-shader'])))\n    self.m2e_copyTexChk.SetValue(bool(int(prefs['copytex'])))\n    self.m2e_copyTexPathTxt.SetValue(prefs['path'])\n    self.palettize_imageTypeChoice.SetSelection(int(prefs['imagetype']))\n    self.powerflag.SetSelection(int(prefs['powertwo']))\n    self.palettize_redTxt.SetValue(int(prefs['R']))\n    self.palettize_greenTxt.SetValue(int(prefs['G']))\n    self.palettize_blueTxt.SetValue(int(prefs['B']))\n    self.palettize_alphaTxt.SetValue(int(prefs['A']))\n    self.palettize_marginTxt.SetValue(int(prefs['margin']))\n    self.palettize_coverageTxt.SetValue(prefs['coverage'])"
        ]
    }
]
[
    {
        "func_name": "minMeetingRooms",
        "original": "def minMeetingRooms(self, intervals):\n    (result, curr) = (0, 0)\n    line = [x for (i, j) in intervals for x in [[i, 1], [j, -1]]]\n    line.sort()\n    for (_, num) in line:\n        curr += num\n        result = max(result, curr)\n    return result",
        "mutated": [
            "def minMeetingRooms(self, intervals):\n    if False:\n        i = 10\n    (result, curr) = (0, 0)\n    line = [x for (i, j) in intervals for x in [[i, 1], [j, -1]]]\n    line.sort()\n    for (_, num) in line:\n        curr += num\n        result = max(result, curr)\n    return result",
            "def minMeetingRooms(self, intervals):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (result, curr) = (0, 0)\n    line = [x for (i, j) in intervals for x in [[i, 1], [j, -1]]]\n    line.sort()\n    for (_, num) in line:\n        curr += num\n        result = max(result, curr)\n    return result",
            "def minMeetingRooms(self, intervals):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (result, curr) = (0, 0)\n    line = [x for (i, j) in intervals for x in [[i, 1], [j, -1]]]\n    line.sort()\n    for (_, num) in line:\n        curr += num\n        result = max(result, curr)\n    return result",
            "def minMeetingRooms(self, intervals):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (result, curr) = (0, 0)\n    line = [x for (i, j) in intervals for x in [[i, 1], [j, -1]]]\n    line.sort()\n    for (_, num) in line:\n        curr += num\n        result = max(result, curr)\n    return result",
            "def minMeetingRooms(self, intervals):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (result, curr) = (0, 0)\n    line = [x for (i, j) in intervals for x in [[i, 1], [j, -1]]]\n    line.sort()\n    for (_, num) in line:\n        curr += num\n        result = max(result, curr)\n    return result"
        ]
    },
    {
        "func_name": "minMeetingRooms",
        "original": "def minMeetingRooms(self, intervals):\n    (starts, ends) = ([], [])\n    for (start, end) in intervals:\n        starts.append(start)\n        ends.append(end)\n    starts.sort()\n    ends.sort()\n    (s, e) = (0, 0)\n    (min_rooms, cnt_rooms) = (0, 0)\n    while s < len(starts):\n        if starts[s] < ends[e]:\n            cnt_rooms += 1\n            min_rooms = max(min_rooms, cnt_rooms)\n            s += 1\n        else:\n            cnt_rooms -= 1\n            e += 1\n    return min_rooms",
        "mutated": [
            "def minMeetingRooms(self, intervals):\n    if False:\n        i = 10\n    (starts, ends) = ([], [])\n    for (start, end) in intervals:\n        starts.append(start)\n        ends.append(end)\n    starts.sort()\n    ends.sort()\n    (s, e) = (0, 0)\n    (min_rooms, cnt_rooms) = (0, 0)\n    while s < len(starts):\n        if starts[s] < ends[e]:\n            cnt_rooms += 1\n            min_rooms = max(min_rooms, cnt_rooms)\n            s += 1\n        else:\n            cnt_rooms -= 1\n            e += 1\n    return min_rooms",
            "def minMeetingRooms(self, intervals):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (starts, ends) = ([], [])\n    for (start, end) in intervals:\n        starts.append(start)\n        ends.append(end)\n    starts.sort()\n    ends.sort()\n    (s, e) = (0, 0)\n    (min_rooms, cnt_rooms) = (0, 0)\n    while s < len(starts):\n        if starts[s] < ends[e]:\n            cnt_rooms += 1\n            min_rooms = max(min_rooms, cnt_rooms)\n            s += 1\n        else:\n            cnt_rooms -= 1\n            e += 1\n    return min_rooms",
            "def minMeetingRooms(self, intervals):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (starts, ends) = ([], [])\n    for (start, end) in intervals:\n        starts.append(start)\n        ends.append(end)\n    starts.sort()\n    ends.sort()\n    (s, e) = (0, 0)\n    (min_rooms, cnt_rooms) = (0, 0)\n    while s < len(starts):\n        if starts[s] < ends[e]:\n            cnt_rooms += 1\n            min_rooms = max(min_rooms, cnt_rooms)\n            s += 1\n        else:\n            cnt_rooms -= 1\n            e += 1\n    return min_rooms",
            "def minMeetingRooms(self, intervals):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (starts, ends) = ([], [])\n    for (start, end) in intervals:\n        starts.append(start)\n        ends.append(end)\n    starts.sort()\n    ends.sort()\n    (s, e) = (0, 0)\n    (min_rooms, cnt_rooms) = (0, 0)\n    while s < len(starts):\n        if starts[s] < ends[e]:\n            cnt_rooms += 1\n            min_rooms = max(min_rooms, cnt_rooms)\n            s += 1\n        else:\n            cnt_rooms -= 1\n            e += 1\n    return min_rooms",
            "def minMeetingRooms(self, intervals):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (starts, ends) = ([], [])\n    for (start, end) in intervals:\n        starts.append(start)\n        ends.append(end)\n    starts.sort()\n    ends.sort()\n    (s, e) = (0, 0)\n    (min_rooms, cnt_rooms) = (0, 0)\n    while s < len(starts):\n        if starts[s] < ends[e]:\n            cnt_rooms += 1\n            min_rooms = max(min_rooms, cnt_rooms)\n            s += 1\n        else:\n            cnt_rooms -= 1\n            e += 1\n    return min_rooms"
        ]
    },
    {
        "func_name": "minMeetingRooms",
        "original": "def minMeetingRooms(self, intervals):\n    \"\"\"\n        :type intervals: List[Interval]\n        :rtype: int\n        \"\"\"\n    if not intervals:\n        return 0\n    intervals.sort(key=lambda x: x[0])\n    free_rooms = []\n    heappush(free_rooms, intervals[0][1])\n    for interval in intervals[1:]:\n        if free_rooms[0] <= interval[0]:\n            heappop(free_rooms)\n        heappush(free_rooms, interval[1])\n    return len(free_rooms)",
        "mutated": [
            "def minMeetingRooms(self, intervals):\n    if False:\n        i = 10\n    '\\n        :type intervals: List[Interval]\\n        :rtype: int\\n        '\n    if not intervals:\n        return 0\n    intervals.sort(key=lambda x: x[0])\n    free_rooms = []\n    heappush(free_rooms, intervals[0][1])\n    for interval in intervals[1:]:\n        if free_rooms[0] <= interval[0]:\n            heappop(free_rooms)\n        heappush(free_rooms, interval[1])\n    return len(free_rooms)",
            "def minMeetingRooms(self, intervals):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type intervals: List[Interval]\\n        :rtype: int\\n        '\n    if not intervals:\n        return 0\n    intervals.sort(key=lambda x: x[0])\n    free_rooms = []\n    heappush(free_rooms, intervals[0][1])\n    for interval in intervals[1:]:\n        if free_rooms[0] <= interval[0]:\n            heappop(free_rooms)\n        heappush(free_rooms, interval[1])\n    return len(free_rooms)",
            "def minMeetingRooms(self, intervals):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type intervals: List[Interval]\\n        :rtype: int\\n        '\n    if not intervals:\n        return 0\n    intervals.sort(key=lambda x: x[0])\n    free_rooms = []\n    heappush(free_rooms, intervals[0][1])\n    for interval in intervals[1:]:\n        if free_rooms[0] <= interval[0]:\n            heappop(free_rooms)\n        heappush(free_rooms, interval[1])\n    return len(free_rooms)",
            "def minMeetingRooms(self, intervals):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type intervals: List[Interval]\\n        :rtype: int\\n        '\n    if not intervals:\n        return 0\n    intervals.sort(key=lambda x: x[0])\n    free_rooms = []\n    heappush(free_rooms, intervals[0][1])\n    for interval in intervals[1:]:\n        if free_rooms[0] <= interval[0]:\n            heappop(free_rooms)\n        heappush(free_rooms, interval[1])\n    return len(free_rooms)",
            "def minMeetingRooms(self, intervals):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type intervals: List[Interval]\\n        :rtype: int\\n        '\n    if not intervals:\n        return 0\n    intervals.sort(key=lambda x: x[0])\n    free_rooms = []\n    heappush(free_rooms, intervals[0][1])\n    for interval in intervals[1:]:\n        if free_rooms[0] <= interval[0]:\n            heappop(free_rooms)\n        heappush(free_rooms, interval[1])\n    return len(free_rooms)"
        ]
    }
]
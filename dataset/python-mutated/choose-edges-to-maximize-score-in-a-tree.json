[
    {
        "func_name": "iter_dfs",
        "original": "def iter_dfs():\n    result = [(0, 0) for _ in xrange(len(adj))]\n    stk = [(1, 0)]\n    while stk:\n        (step, u) = stk.pop()\n        if step == 1:\n            if not adj[u]:\n                continue\n            stk.append((2, u))\n            for (v, _) in adj[u]:\n                stk.append((1, v))\n        elif step == 2:\n            without_u = sum((max(result[v]) for (v, w) in adj[u]))\n            with_u = max((without_u - max(result[v]) + (result[v][1] + w) for (v, w) in adj[u]))\n            result[u] = (with_u, without_u)\n    return max(result[0])",
        "mutated": [
            "def iter_dfs():\n    if False:\n        i = 10\n    result = [(0, 0) for _ in xrange(len(adj))]\n    stk = [(1, 0)]\n    while stk:\n        (step, u) = stk.pop()\n        if step == 1:\n            if not adj[u]:\n                continue\n            stk.append((2, u))\n            for (v, _) in adj[u]:\n                stk.append((1, v))\n        elif step == 2:\n            without_u = sum((max(result[v]) for (v, w) in adj[u]))\n            with_u = max((without_u - max(result[v]) + (result[v][1] + w) for (v, w) in adj[u]))\n            result[u] = (with_u, without_u)\n    return max(result[0])",
            "def iter_dfs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    result = [(0, 0) for _ in xrange(len(adj))]\n    stk = [(1, 0)]\n    while stk:\n        (step, u) = stk.pop()\n        if step == 1:\n            if not adj[u]:\n                continue\n            stk.append((2, u))\n            for (v, _) in adj[u]:\n                stk.append((1, v))\n        elif step == 2:\n            without_u = sum((max(result[v]) for (v, w) in adj[u]))\n            with_u = max((without_u - max(result[v]) + (result[v][1] + w) for (v, w) in adj[u]))\n            result[u] = (with_u, without_u)\n    return max(result[0])",
            "def iter_dfs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    result = [(0, 0) for _ in xrange(len(adj))]\n    stk = [(1, 0)]\n    while stk:\n        (step, u) = stk.pop()\n        if step == 1:\n            if not adj[u]:\n                continue\n            stk.append((2, u))\n            for (v, _) in adj[u]:\n                stk.append((1, v))\n        elif step == 2:\n            without_u = sum((max(result[v]) for (v, w) in adj[u]))\n            with_u = max((without_u - max(result[v]) + (result[v][1] + w) for (v, w) in adj[u]))\n            result[u] = (with_u, without_u)\n    return max(result[0])",
            "def iter_dfs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    result = [(0, 0) for _ in xrange(len(adj))]\n    stk = [(1, 0)]\n    while stk:\n        (step, u) = stk.pop()\n        if step == 1:\n            if not adj[u]:\n                continue\n            stk.append((2, u))\n            for (v, _) in adj[u]:\n                stk.append((1, v))\n        elif step == 2:\n            without_u = sum((max(result[v]) for (v, w) in adj[u]))\n            with_u = max((without_u - max(result[v]) + (result[v][1] + w) for (v, w) in adj[u]))\n            result[u] = (with_u, without_u)\n    return max(result[0])",
            "def iter_dfs():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    result = [(0, 0) for _ in xrange(len(adj))]\n    stk = [(1, 0)]\n    while stk:\n        (step, u) = stk.pop()\n        if step == 1:\n            if not adj[u]:\n                continue\n            stk.append((2, u))\n            for (v, _) in adj[u]:\n                stk.append((1, v))\n        elif step == 2:\n            without_u = sum((max(result[v]) for (v, w) in adj[u]))\n            with_u = max((without_u - max(result[v]) + (result[v][1] + w) for (v, w) in adj[u]))\n            result[u] = (with_u, without_u)\n    return max(result[0])"
        ]
    },
    {
        "func_name": "maxScore",
        "original": "def maxScore(self, edges):\n    \"\"\"\n        :type edges: List[List[int]]\n        :rtype: int\n        \"\"\"\n\n    def iter_dfs():\n        result = [(0, 0) for _ in xrange(len(adj))]\n        stk = [(1, 0)]\n        while stk:\n            (step, u) = stk.pop()\n            if step == 1:\n                if not adj[u]:\n                    continue\n                stk.append((2, u))\n                for (v, _) in adj[u]:\n                    stk.append((1, v))\n            elif step == 2:\n                without_u = sum((max(result[v]) for (v, w) in adj[u]))\n                with_u = max((without_u - max(result[v]) + (result[v][1] + w) for (v, w) in adj[u]))\n                result[u] = (with_u, without_u)\n        return max(result[0])\n    adj = [[] for _ in xrange(len(edges))]\n    for (i, (p, w)) in enumerate(edges):\n        if i == 0:\n            continue\n        adj[p].append((i, w))\n    return iter_dfs()",
        "mutated": [
            "def maxScore(self, edges):\n    if False:\n        i = 10\n    '\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n\n    def iter_dfs():\n        result = [(0, 0) for _ in xrange(len(adj))]\n        stk = [(1, 0)]\n        while stk:\n            (step, u) = stk.pop()\n            if step == 1:\n                if not adj[u]:\n                    continue\n                stk.append((2, u))\n                for (v, _) in adj[u]:\n                    stk.append((1, v))\n            elif step == 2:\n                without_u = sum((max(result[v]) for (v, w) in adj[u]))\n                with_u = max((without_u - max(result[v]) + (result[v][1] + w) for (v, w) in adj[u]))\n                result[u] = (with_u, without_u)\n        return max(result[0])\n    adj = [[] for _ in xrange(len(edges))]\n    for (i, (p, w)) in enumerate(edges):\n        if i == 0:\n            continue\n        adj[p].append((i, w))\n    return iter_dfs()",
            "def maxScore(self, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n\n    def iter_dfs():\n        result = [(0, 0) for _ in xrange(len(adj))]\n        stk = [(1, 0)]\n        while stk:\n            (step, u) = stk.pop()\n            if step == 1:\n                if not adj[u]:\n                    continue\n                stk.append((2, u))\n                for (v, _) in adj[u]:\n                    stk.append((1, v))\n            elif step == 2:\n                without_u = sum((max(result[v]) for (v, w) in adj[u]))\n                with_u = max((without_u - max(result[v]) + (result[v][1] + w) for (v, w) in adj[u]))\n                result[u] = (with_u, without_u)\n        return max(result[0])\n    adj = [[] for _ in xrange(len(edges))]\n    for (i, (p, w)) in enumerate(edges):\n        if i == 0:\n            continue\n        adj[p].append((i, w))\n    return iter_dfs()",
            "def maxScore(self, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n\n    def iter_dfs():\n        result = [(0, 0) for _ in xrange(len(adj))]\n        stk = [(1, 0)]\n        while stk:\n            (step, u) = stk.pop()\n            if step == 1:\n                if not adj[u]:\n                    continue\n                stk.append((2, u))\n                for (v, _) in adj[u]:\n                    stk.append((1, v))\n            elif step == 2:\n                without_u = sum((max(result[v]) for (v, w) in adj[u]))\n                with_u = max((without_u - max(result[v]) + (result[v][1] + w) for (v, w) in adj[u]))\n                result[u] = (with_u, without_u)\n        return max(result[0])\n    adj = [[] for _ in xrange(len(edges))]\n    for (i, (p, w)) in enumerate(edges):\n        if i == 0:\n            continue\n        adj[p].append((i, w))\n    return iter_dfs()",
            "def maxScore(self, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n\n    def iter_dfs():\n        result = [(0, 0) for _ in xrange(len(adj))]\n        stk = [(1, 0)]\n        while stk:\n            (step, u) = stk.pop()\n            if step == 1:\n                if not adj[u]:\n                    continue\n                stk.append((2, u))\n                for (v, _) in adj[u]:\n                    stk.append((1, v))\n            elif step == 2:\n                without_u = sum((max(result[v]) for (v, w) in adj[u]))\n                with_u = max((without_u - max(result[v]) + (result[v][1] + w) for (v, w) in adj[u]))\n                result[u] = (with_u, without_u)\n        return max(result[0])\n    adj = [[] for _ in xrange(len(edges))]\n    for (i, (p, w)) in enumerate(edges):\n        if i == 0:\n            continue\n        adj[p].append((i, w))\n    return iter_dfs()",
            "def maxScore(self, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n\n    def iter_dfs():\n        result = [(0, 0) for _ in xrange(len(adj))]\n        stk = [(1, 0)]\n        while stk:\n            (step, u) = stk.pop()\n            if step == 1:\n                if not adj[u]:\n                    continue\n                stk.append((2, u))\n                for (v, _) in adj[u]:\n                    stk.append((1, v))\n            elif step == 2:\n                without_u = sum((max(result[v]) for (v, w) in adj[u]))\n                with_u = max((without_u - max(result[v]) + (result[v][1] + w) for (v, w) in adj[u]))\n                result[u] = (with_u, without_u)\n        return max(result[0])\n    adj = [[] for _ in xrange(len(edges))]\n    for (i, (p, w)) in enumerate(edges):\n        if i == 0:\n            continue\n        adj[p].append((i, w))\n    return iter_dfs()"
        ]
    },
    {
        "func_name": "dfs",
        "original": "def dfs(u):\n    if not adj[u]:\n        return (0, 0)\n    children = [dfs(v) for (v, _) in adj[u]]\n    without_u = sum((max(with_v, without_v) for (with_v, without_v) in children))\n    with_u = max((without_u - max(with_v, without_v) + (without_v + adj[u][i][1]) for (i, (with_v, without_v)) in enumerate(children)))\n    return (with_u, without_u)",
        "mutated": [
            "def dfs(u):\n    if False:\n        i = 10\n    if not adj[u]:\n        return (0, 0)\n    children = [dfs(v) for (v, _) in adj[u]]\n    without_u = sum((max(with_v, without_v) for (with_v, without_v) in children))\n    with_u = max((without_u - max(with_v, without_v) + (without_v + adj[u][i][1]) for (i, (with_v, without_v)) in enumerate(children)))\n    return (with_u, without_u)",
            "def dfs(u):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if not adj[u]:\n        return (0, 0)\n    children = [dfs(v) for (v, _) in adj[u]]\n    without_u = sum((max(with_v, without_v) for (with_v, without_v) in children))\n    with_u = max((without_u - max(with_v, without_v) + (without_v + adj[u][i][1]) for (i, (with_v, without_v)) in enumerate(children)))\n    return (with_u, without_u)",
            "def dfs(u):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if not adj[u]:\n        return (0, 0)\n    children = [dfs(v) for (v, _) in adj[u]]\n    without_u = sum((max(with_v, without_v) for (with_v, without_v) in children))\n    with_u = max((without_u - max(with_v, without_v) + (without_v + adj[u][i][1]) for (i, (with_v, without_v)) in enumerate(children)))\n    return (with_u, without_u)",
            "def dfs(u):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if not adj[u]:\n        return (0, 0)\n    children = [dfs(v) for (v, _) in adj[u]]\n    without_u = sum((max(with_v, without_v) for (with_v, without_v) in children))\n    with_u = max((without_u - max(with_v, without_v) + (without_v + adj[u][i][1]) for (i, (with_v, without_v)) in enumerate(children)))\n    return (with_u, without_u)",
            "def dfs(u):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if not adj[u]:\n        return (0, 0)\n    children = [dfs(v) for (v, _) in adj[u]]\n    without_u = sum((max(with_v, without_v) for (with_v, without_v) in children))\n    with_u = max((without_u - max(with_v, without_v) + (without_v + adj[u][i][1]) for (i, (with_v, without_v)) in enumerate(children)))\n    return (with_u, without_u)"
        ]
    },
    {
        "func_name": "maxScore",
        "original": "def maxScore(self, edges):\n    \"\"\"\n        :type edges: List[List[int]]\n        :rtype: int\n        \"\"\"\n\n    def dfs(u):\n        if not adj[u]:\n            return (0, 0)\n        children = [dfs(v) for (v, _) in adj[u]]\n        without_u = sum((max(with_v, without_v) for (with_v, without_v) in children))\n        with_u = max((without_u - max(with_v, without_v) + (without_v + adj[u][i][1]) for (i, (with_v, without_v)) in enumerate(children)))\n        return (with_u, without_u)\n    adj = [[] for _ in xrange(len(edges))]\n    for (i, (p, w)) in enumerate(edges):\n        if i == 0:\n            continue\n        adj[p].append((i, w))\n    return max(dfs(0))",
        "mutated": [
            "def maxScore(self, edges):\n    if False:\n        i = 10\n    '\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n\n    def dfs(u):\n        if not adj[u]:\n            return (0, 0)\n        children = [dfs(v) for (v, _) in adj[u]]\n        without_u = sum((max(with_v, without_v) for (with_v, without_v) in children))\n        with_u = max((without_u - max(with_v, without_v) + (without_v + adj[u][i][1]) for (i, (with_v, without_v)) in enumerate(children)))\n        return (with_u, without_u)\n    adj = [[] for _ in xrange(len(edges))]\n    for (i, (p, w)) in enumerate(edges):\n        if i == 0:\n            continue\n        adj[p].append((i, w))\n    return max(dfs(0))",
            "def maxScore(self, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n\n    def dfs(u):\n        if not adj[u]:\n            return (0, 0)\n        children = [dfs(v) for (v, _) in adj[u]]\n        without_u = sum((max(with_v, without_v) for (with_v, without_v) in children))\n        with_u = max((without_u - max(with_v, without_v) + (without_v + adj[u][i][1]) for (i, (with_v, without_v)) in enumerate(children)))\n        return (with_u, without_u)\n    adj = [[] for _ in xrange(len(edges))]\n    for (i, (p, w)) in enumerate(edges):\n        if i == 0:\n            continue\n        adj[p].append((i, w))\n    return max(dfs(0))",
            "def maxScore(self, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n\n    def dfs(u):\n        if not adj[u]:\n            return (0, 0)\n        children = [dfs(v) for (v, _) in adj[u]]\n        without_u = sum((max(with_v, without_v) for (with_v, without_v) in children))\n        with_u = max((without_u - max(with_v, without_v) + (without_v + adj[u][i][1]) for (i, (with_v, without_v)) in enumerate(children)))\n        return (with_u, without_u)\n    adj = [[] for _ in xrange(len(edges))]\n    for (i, (p, w)) in enumerate(edges):\n        if i == 0:\n            continue\n        adj[p].append((i, w))\n    return max(dfs(0))",
            "def maxScore(self, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n\n    def dfs(u):\n        if not adj[u]:\n            return (0, 0)\n        children = [dfs(v) for (v, _) in adj[u]]\n        without_u = sum((max(with_v, without_v) for (with_v, without_v) in children))\n        with_u = max((without_u - max(with_v, without_v) + (without_v + adj[u][i][1]) for (i, (with_v, without_v)) in enumerate(children)))\n        return (with_u, without_u)\n    adj = [[] for _ in xrange(len(edges))]\n    for (i, (p, w)) in enumerate(edges):\n        if i == 0:\n            continue\n        adj[p].append((i, w))\n    return max(dfs(0))",
            "def maxScore(self, edges):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type edges: List[List[int]]\\n        :rtype: int\\n        '\n\n    def dfs(u):\n        if not adj[u]:\n            return (0, 0)\n        children = [dfs(v) for (v, _) in adj[u]]\n        without_u = sum((max(with_v, without_v) for (with_v, without_v) in children))\n        with_u = max((without_u - max(with_v, without_v) + (without_v + adj[u][i][1]) for (i, (with_v, without_v)) in enumerate(children)))\n        return (with_u, without_u)\n    adj = [[] for _ in xrange(len(edges))]\n    for (i, (p, w)) in enumerate(edges):\n        if i == 0:\n            continue\n        adj[p].append((i, w))\n    return max(dfs(0))"
        ]
    }
]
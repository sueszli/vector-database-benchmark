[
    {
        "func_name": "to_markdown",
        "original": "def to_markdown(data):\n    markdown = ''\n    for (key, value) in data.items():\n        markdown += f'**{key}:**\\n\\n'\n        if isinstance(value, dict):\n            markdown += '| Key | Value |\\n| --- | --- |\\n'\n            for (nested_key, nested_value) in value.items():\n                nested_value = round(nested_value, 3) if isinstance(nested_value, float) else {k: round(v, 3) for (k, v) in nested_value.items()} if isinstance(nested_value, dict) else nested_value\n                markdown += f'| {nested_key} | {nested_value} |\\n'\n        elif isinstance(value, list) and all((isinstance(item, dict) for item in value)):\n            if value:\n                headers = sorted(set().union(*[item.keys() for item in value]))\n                markdown += '| ' + ' | '.join(headers) + ' |\\n| ' + ' | '.join(['---'] * len(headers)) + ' |\\n'\n                for item in value:\n                    value_list = ['{:.3e}'.format(float(item.get(header, ''))) if not str(item.get(header, '')).isdigit() else str(item.get(header, '')) for header in headers]\n                    markdown += '| ' + ' | '.join(value_list) + ' |\\n'\n            else:\n                markdown += '(empty list)\\n'\n        else:\n            markdown += f'{value}\\n'\n        markdown += '\\n'\n    return markdown",
        "mutated": [
            "def to_markdown(data):\n    if False:\n        i = 10\n    markdown = ''\n    for (key, value) in data.items():\n        markdown += f'**{key}:**\\n\\n'\n        if isinstance(value, dict):\n            markdown += '| Key | Value |\\n| --- | --- |\\n'\n            for (nested_key, nested_value) in value.items():\n                nested_value = round(nested_value, 3) if isinstance(nested_value, float) else {k: round(v, 3) for (k, v) in nested_value.items()} if isinstance(nested_value, dict) else nested_value\n                markdown += f'| {nested_key} | {nested_value} |\\n'\n        elif isinstance(value, list) and all((isinstance(item, dict) for item in value)):\n            if value:\n                headers = sorted(set().union(*[item.keys() for item in value]))\n                markdown += '| ' + ' | '.join(headers) + ' |\\n| ' + ' | '.join(['---'] * len(headers)) + ' |\\n'\n                for item in value:\n                    value_list = ['{:.3e}'.format(float(item.get(header, ''))) if not str(item.get(header, '')).isdigit() else str(item.get(header, '')) for header in headers]\n                    markdown += '| ' + ' | '.join(value_list) + ' |\\n'\n            else:\n                markdown += '(empty list)\\n'\n        else:\n            markdown += f'{value}\\n'\n        markdown += '\\n'\n    return markdown",
            "def to_markdown(data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    markdown = ''\n    for (key, value) in data.items():\n        markdown += f'**{key}:**\\n\\n'\n        if isinstance(value, dict):\n            markdown += '| Key | Value |\\n| --- | --- |\\n'\n            for (nested_key, nested_value) in value.items():\n                nested_value = round(nested_value, 3) if isinstance(nested_value, float) else {k: round(v, 3) for (k, v) in nested_value.items()} if isinstance(nested_value, dict) else nested_value\n                markdown += f'| {nested_key} | {nested_value} |\\n'\n        elif isinstance(value, list) and all((isinstance(item, dict) for item in value)):\n            if value:\n                headers = sorted(set().union(*[item.keys() for item in value]))\n                markdown += '| ' + ' | '.join(headers) + ' |\\n| ' + ' | '.join(['---'] * len(headers)) + ' |\\n'\n                for item in value:\n                    value_list = ['{:.3e}'.format(float(item.get(header, ''))) if not str(item.get(header, '')).isdigit() else str(item.get(header, '')) for header in headers]\n                    markdown += '| ' + ' | '.join(value_list) + ' |\\n'\n            else:\n                markdown += '(empty list)\\n'\n        else:\n            markdown += f'{value}\\n'\n        markdown += '\\n'\n    return markdown",
            "def to_markdown(data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    markdown = ''\n    for (key, value) in data.items():\n        markdown += f'**{key}:**\\n\\n'\n        if isinstance(value, dict):\n            markdown += '| Key | Value |\\n| --- | --- |\\n'\n            for (nested_key, nested_value) in value.items():\n                nested_value = round(nested_value, 3) if isinstance(nested_value, float) else {k: round(v, 3) for (k, v) in nested_value.items()} if isinstance(nested_value, dict) else nested_value\n                markdown += f'| {nested_key} | {nested_value} |\\n'\n        elif isinstance(value, list) and all((isinstance(item, dict) for item in value)):\n            if value:\n                headers = sorted(set().union(*[item.keys() for item in value]))\n                markdown += '| ' + ' | '.join(headers) + ' |\\n| ' + ' | '.join(['---'] * len(headers)) + ' |\\n'\n                for item in value:\n                    value_list = ['{:.3e}'.format(float(item.get(header, ''))) if not str(item.get(header, '')).isdigit() else str(item.get(header, '')) for header in headers]\n                    markdown += '| ' + ' | '.join(value_list) + ' |\\n'\n            else:\n                markdown += '(empty list)\\n'\n        else:\n            markdown += f'{value}\\n'\n        markdown += '\\n'\n    return markdown",
            "def to_markdown(data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    markdown = ''\n    for (key, value) in data.items():\n        markdown += f'**{key}:**\\n\\n'\n        if isinstance(value, dict):\n            markdown += '| Key | Value |\\n| --- | --- |\\n'\n            for (nested_key, nested_value) in value.items():\n                nested_value = round(nested_value, 3) if isinstance(nested_value, float) else {k: round(v, 3) for (k, v) in nested_value.items()} if isinstance(nested_value, dict) else nested_value\n                markdown += f'| {nested_key} | {nested_value} |\\n'\n        elif isinstance(value, list) and all((isinstance(item, dict) for item in value)):\n            if value:\n                headers = sorted(set().union(*[item.keys() for item in value]))\n                markdown += '| ' + ' | '.join(headers) + ' |\\n| ' + ' | '.join(['---'] * len(headers)) + ' |\\n'\n                for item in value:\n                    value_list = ['{:.3e}'.format(float(item.get(header, ''))) if not str(item.get(header, '')).isdigit() else str(item.get(header, '')) for header in headers]\n                    markdown += '| ' + ' | '.join(value_list) + ' |\\n'\n            else:\n                markdown += '(empty list)\\n'\n        else:\n            markdown += f'{value}\\n'\n        markdown += '\\n'\n    return markdown",
            "def to_markdown(data):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    markdown = ''\n    for (key, value) in data.items():\n        markdown += f'**{key}:**\\n\\n'\n        if isinstance(value, dict):\n            markdown += '| Key | Value |\\n| --- | --- |\\n'\n            for (nested_key, nested_value) in value.items():\n                nested_value = round(nested_value, 3) if isinstance(nested_value, float) else {k: round(v, 3) for (k, v) in nested_value.items()} if isinstance(nested_value, dict) else nested_value\n                markdown += f'| {nested_key} | {nested_value} |\\n'\n        elif isinstance(value, list) and all((isinstance(item, dict) for item in value)):\n            if value:\n                headers = sorted(set().union(*[item.keys() for item in value]))\n                markdown += '| ' + ' | '.join(headers) + ' |\\n| ' + ' | '.join(['---'] * len(headers)) + ' |\\n'\n                for item in value:\n                    value_list = ['{:.3e}'.format(float(item.get(header, ''))) if not str(item.get(header, '')).isdigit() else str(item.get(header, '')) for header in headers]\n                    markdown += '| ' + ' | '.join(value_list) + ' |\\n'\n            else:\n                markdown += '(empty list)\\n'\n        else:\n            markdown += f'{value}\\n'\n        markdown += '\\n'\n    return markdown"
        ]
    },
    {
        "func_name": "json_to_markdown",
        "original": "def json_to_markdown(json_fp, md_fp):\n    \"\"\"Convert a json file to markdown.\"\"\"\n    with open(json_fp, 'r') as file:\n        data = json.load(file)\n    markdown = to_markdown(data)\n    with open(md_fp, 'w') as file:\n        file.write(markdown)\n    return markdown",
        "mutated": [
            "def json_to_markdown(json_fp, md_fp):\n    if False:\n        i = 10\n    'Convert a json file to markdown.'\n    with open(json_fp, 'r') as file:\n        data = json.load(file)\n    markdown = to_markdown(data)\n    with open(md_fp, 'w') as file:\n        file.write(markdown)\n    return markdown",
            "def json_to_markdown(json_fp, md_fp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Convert a json file to markdown.'\n    with open(json_fp, 'r') as file:\n        data = json.load(file)\n    markdown = to_markdown(data)\n    with open(md_fp, 'w') as file:\n        file.write(markdown)\n    return markdown",
            "def json_to_markdown(json_fp, md_fp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Convert a json file to markdown.'\n    with open(json_fp, 'r') as file:\n        data = json.load(file)\n    markdown = to_markdown(data)\n    with open(md_fp, 'w') as file:\n        file.write(markdown)\n    return markdown",
            "def json_to_markdown(json_fp, md_fp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Convert a json file to markdown.'\n    with open(json_fp, 'r') as file:\n        data = json.load(file)\n    markdown = to_markdown(data)\n    with open(md_fp, 'w') as file:\n        file.write(markdown)\n    return markdown",
            "def json_to_markdown(json_fp, md_fp):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Convert a json file to markdown.'\n    with open(json_fp, 'r') as file:\n        data = json.load(file)\n    markdown = to_markdown(data)\n    with open(md_fp, 'w') as file:\n        file.write(markdown)\n    return markdown"
        ]
    }
]
[
    {
        "func_name": "oddString",
        "original": "def oddString(self, words):\n    \"\"\"\n        :type words: List[str]\n        :rtype: str\n        \"\"\"\n    for i in xrange(len(words[0]) - 1):\n        lookup = collections.defaultdict(list)\n        for (j, w) in enumerate(words):\n            if len(lookup[ord(w[i + 1]) - ord(w[i])]) < 2:\n                lookup[ord(w[i + 1]) - ord(w[i])].append(j)\n        if len(lookup) == 2:\n            return next((words[l[0]] for l in lookup.itervalues() if len(l) == 1))",
        "mutated": [
            "def oddString(self, words):\n    if False:\n        i = 10\n    '\\n        :type words: List[str]\\n        :rtype: str\\n        '\n    for i in xrange(len(words[0]) - 1):\n        lookup = collections.defaultdict(list)\n        for (j, w) in enumerate(words):\n            if len(lookup[ord(w[i + 1]) - ord(w[i])]) < 2:\n                lookup[ord(w[i + 1]) - ord(w[i])].append(j)\n        if len(lookup) == 2:\n            return next((words[l[0]] for l in lookup.itervalues() if len(l) == 1))",
            "def oddString(self, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type words: List[str]\\n        :rtype: str\\n        '\n    for i in xrange(len(words[0]) - 1):\n        lookup = collections.defaultdict(list)\n        for (j, w) in enumerate(words):\n            if len(lookup[ord(w[i + 1]) - ord(w[i])]) < 2:\n                lookup[ord(w[i + 1]) - ord(w[i])].append(j)\n        if len(lookup) == 2:\n            return next((words[l[0]] for l in lookup.itervalues() if len(l) == 1))",
            "def oddString(self, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type words: List[str]\\n        :rtype: str\\n        '\n    for i in xrange(len(words[0]) - 1):\n        lookup = collections.defaultdict(list)\n        for (j, w) in enumerate(words):\n            if len(lookup[ord(w[i + 1]) - ord(w[i])]) < 2:\n                lookup[ord(w[i + 1]) - ord(w[i])].append(j)\n        if len(lookup) == 2:\n            return next((words[l[0]] for l in lookup.itervalues() if len(l) == 1))",
            "def oddString(self, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type words: List[str]\\n        :rtype: str\\n        '\n    for i in xrange(len(words[0]) - 1):\n        lookup = collections.defaultdict(list)\n        for (j, w) in enumerate(words):\n            if len(lookup[ord(w[i + 1]) - ord(w[i])]) < 2:\n                lookup[ord(w[i + 1]) - ord(w[i])].append(j)\n        if len(lookup) == 2:\n            return next((words[l[0]] for l in lookup.itervalues() if len(l) == 1))",
            "def oddString(self, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type words: List[str]\\n        :rtype: str\\n        '\n    for i in xrange(len(words[0]) - 1):\n        lookup = collections.defaultdict(list)\n        for (j, w) in enumerate(words):\n            if len(lookup[ord(w[i + 1]) - ord(w[i])]) < 2:\n                lookup[ord(w[i + 1]) - ord(w[i])].append(j)\n        if len(lookup) == 2:\n            return next((words[l[0]] for l in lookup.itervalues() if len(l) == 1))"
        ]
    },
    {
        "func_name": "oddString",
        "original": "def oddString(self, words):\n    \"\"\"\n        :type words: List[str]\n        :rtype: str\n        \"\"\"\n    cnt = collections.Counter((tuple((ord(w[i + 1]) - ord(w[i]) for i in xrange(len(w) - 1))) for w in words))\n    target = next((k for (k, v) in cnt.iteritems() if v == 1))\n    return next((w for w in words if tuple((ord(w[i + 1]) - ord(w[i]) for i in xrange(len(w) - 1))) == target))",
        "mutated": [
            "def oddString(self, words):\n    if False:\n        i = 10\n    '\\n        :type words: List[str]\\n        :rtype: str\\n        '\n    cnt = collections.Counter((tuple((ord(w[i + 1]) - ord(w[i]) for i in xrange(len(w) - 1))) for w in words))\n    target = next((k for (k, v) in cnt.iteritems() if v == 1))\n    return next((w for w in words if tuple((ord(w[i + 1]) - ord(w[i]) for i in xrange(len(w) - 1))) == target))",
            "def oddString(self, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type words: List[str]\\n        :rtype: str\\n        '\n    cnt = collections.Counter((tuple((ord(w[i + 1]) - ord(w[i]) for i in xrange(len(w) - 1))) for w in words))\n    target = next((k for (k, v) in cnt.iteritems() if v == 1))\n    return next((w for w in words if tuple((ord(w[i + 1]) - ord(w[i]) for i in xrange(len(w) - 1))) == target))",
            "def oddString(self, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type words: List[str]\\n        :rtype: str\\n        '\n    cnt = collections.Counter((tuple((ord(w[i + 1]) - ord(w[i]) for i in xrange(len(w) - 1))) for w in words))\n    target = next((k for (k, v) in cnt.iteritems() if v == 1))\n    return next((w for w in words if tuple((ord(w[i + 1]) - ord(w[i]) for i in xrange(len(w) - 1))) == target))",
            "def oddString(self, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type words: List[str]\\n        :rtype: str\\n        '\n    cnt = collections.Counter((tuple((ord(w[i + 1]) - ord(w[i]) for i in xrange(len(w) - 1))) for w in words))\n    target = next((k for (k, v) in cnt.iteritems() if v == 1))\n    return next((w for w in words if tuple((ord(w[i + 1]) - ord(w[i]) for i in xrange(len(w) - 1))) == target))",
            "def oddString(self, words):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type words: List[str]\\n        :rtype: str\\n        '\n    cnt = collections.Counter((tuple((ord(w[i + 1]) - ord(w[i]) for i in xrange(len(w) - 1))) for w in words))\n    target = next((k for (k, v) in cnt.iteritems() if v == 1))\n    return next((w for w in words if tuple((ord(w[i + 1]) - ord(w[i]) for i in xrange(len(w) - 1))) == target))"
        ]
    }
]
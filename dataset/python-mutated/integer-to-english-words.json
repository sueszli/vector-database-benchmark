[
    {
        "func_name": "numberToWords",
        "original": "def numberToWords(self, num):\n    \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n    if num == 0:\n        return 'Zero'\n    lookup = {0: 'Zero', 1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine', 10: 'Ten', 11: 'Eleven', 12: 'Twelve', 13: 'Thirteen', 14: 'Fourteen', 15: 'Fifteen', 16: 'Sixteen', 17: 'Seventeen', 18: 'Eighteen', 19: 'Nineteen', 20: 'Twenty', 30: 'Thirty', 40: 'Forty', 50: 'Fifty', 60: 'Sixty', 70: 'Seventy', 80: 'Eighty', 90: 'Ninety'}\n    unit = ['', 'Thousand', 'Million', 'Billion']\n    (res, i) = ([], 0)\n    while num:\n        cur = num % 1000\n        if num % 1000:\n            res.append(self.threeDigits(cur, lookup, unit[i]))\n        num //= 1000\n        i += 1\n    return ' '.join(res[::-1])",
        "mutated": [
            "def numberToWords(self, num):\n    if False:\n        i = 10\n    '\\n        :type num: int\\n        :rtype: str\\n        '\n    if num == 0:\n        return 'Zero'\n    lookup = {0: 'Zero', 1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine', 10: 'Ten', 11: 'Eleven', 12: 'Twelve', 13: 'Thirteen', 14: 'Fourteen', 15: 'Fifteen', 16: 'Sixteen', 17: 'Seventeen', 18: 'Eighteen', 19: 'Nineteen', 20: 'Twenty', 30: 'Thirty', 40: 'Forty', 50: 'Fifty', 60: 'Sixty', 70: 'Seventy', 80: 'Eighty', 90: 'Ninety'}\n    unit = ['', 'Thousand', 'Million', 'Billion']\n    (res, i) = ([], 0)\n    while num:\n        cur = num % 1000\n        if num % 1000:\n            res.append(self.threeDigits(cur, lookup, unit[i]))\n        num //= 1000\n        i += 1\n    return ' '.join(res[::-1])",
            "def numberToWords(self, num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type num: int\\n        :rtype: str\\n        '\n    if num == 0:\n        return 'Zero'\n    lookup = {0: 'Zero', 1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine', 10: 'Ten', 11: 'Eleven', 12: 'Twelve', 13: 'Thirteen', 14: 'Fourteen', 15: 'Fifteen', 16: 'Sixteen', 17: 'Seventeen', 18: 'Eighteen', 19: 'Nineteen', 20: 'Twenty', 30: 'Thirty', 40: 'Forty', 50: 'Fifty', 60: 'Sixty', 70: 'Seventy', 80: 'Eighty', 90: 'Ninety'}\n    unit = ['', 'Thousand', 'Million', 'Billion']\n    (res, i) = ([], 0)\n    while num:\n        cur = num % 1000\n        if num % 1000:\n            res.append(self.threeDigits(cur, lookup, unit[i]))\n        num //= 1000\n        i += 1\n    return ' '.join(res[::-1])",
            "def numberToWords(self, num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type num: int\\n        :rtype: str\\n        '\n    if num == 0:\n        return 'Zero'\n    lookup = {0: 'Zero', 1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine', 10: 'Ten', 11: 'Eleven', 12: 'Twelve', 13: 'Thirteen', 14: 'Fourteen', 15: 'Fifteen', 16: 'Sixteen', 17: 'Seventeen', 18: 'Eighteen', 19: 'Nineteen', 20: 'Twenty', 30: 'Thirty', 40: 'Forty', 50: 'Fifty', 60: 'Sixty', 70: 'Seventy', 80: 'Eighty', 90: 'Ninety'}\n    unit = ['', 'Thousand', 'Million', 'Billion']\n    (res, i) = ([], 0)\n    while num:\n        cur = num % 1000\n        if num % 1000:\n            res.append(self.threeDigits(cur, lookup, unit[i]))\n        num //= 1000\n        i += 1\n    return ' '.join(res[::-1])",
            "def numberToWords(self, num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type num: int\\n        :rtype: str\\n        '\n    if num == 0:\n        return 'Zero'\n    lookup = {0: 'Zero', 1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine', 10: 'Ten', 11: 'Eleven', 12: 'Twelve', 13: 'Thirteen', 14: 'Fourteen', 15: 'Fifteen', 16: 'Sixteen', 17: 'Seventeen', 18: 'Eighteen', 19: 'Nineteen', 20: 'Twenty', 30: 'Thirty', 40: 'Forty', 50: 'Fifty', 60: 'Sixty', 70: 'Seventy', 80: 'Eighty', 90: 'Ninety'}\n    unit = ['', 'Thousand', 'Million', 'Billion']\n    (res, i) = ([], 0)\n    while num:\n        cur = num % 1000\n        if num % 1000:\n            res.append(self.threeDigits(cur, lookup, unit[i]))\n        num //= 1000\n        i += 1\n    return ' '.join(res[::-1])",
            "def numberToWords(self, num):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type num: int\\n        :rtype: str\\n        '\n    if num == 0:\n        return 'Zero'\n    lookup = {0: 'Zero', 1: 'One', 2: 'Two', 3: 'Three', 4: 'Four', 5: 'Five', 6: 'Six', 7: 'Seven', 8: 'Eight', 9: 'Nine', 10: 'Ten', 11: 'Eleven', 12: 'Twelve', 13: 'Thirteen', 14: 'Fourteen', 15: 'Fifteen', 16: 'Sixteen', 17: 'Seventeen', 18: 'Eighteen', 19: 'Nineteen', 20: 'Twenty', 30: 'Thirty', 40: 'Forty', 50: 'Fifty', 60: 'Sixty', 70: 'Seventy', 80: 'Eighty', 90: 'Ninety'}\n    unit = ['', 'Thousand', 'Million', 'Billion']\n    (res, i) = ([], 0)\n    while num:\n        cur = num % 1000\n        if num % 1000:\n            res.append(self.threeDigits(cur, lookup, unit[i]))\n        num //= 1000\n        i += 1\n    return ' '.join(res[::-1])"
        ]
    },
    {
        "func_name": "threeDigits",
        "original": "def threeDigits(self, num, lookup, unit):\n    res = []\n    if num / 100:\n        res = [lookup[num / 100] + ' ' + 'Hundred']\n    if num % 100:\n        res.append(self.twoDigits(num % 100, lookup))\n    if unit != '':\n        res.append(unit)\n    return ' '.join(res)",
        "mutated": [
            "def threeDigits(self, num, lookup, unit):\n    if False:\n        i = 10\n    res = []\n    if num / 100:\n        res = [lookup[num / 100] + ' ' + 'Hundred']\n    if num % 100:\n        res.append(self.twoDigits(num % 100, lookup))\n    if unit != '':\n        res.append(unit)\n    return ' '.join(res)",
            "def threeDigits(self, num, lookup, unit):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    res = []\n    if num / 100:\n        res = [lookup[num / 100] + ' ' + 'Hundred']\n    if num % 100:\n        res.append(self.twoDigits(num % 100, lookup))\n    if unit != '':\n        res.append(unit)\n    return ' '.join(res)",
            "def threeDigits(self, num, lookup, unit):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    res = []\n    if num / 100:\n        res = [lookup[num / 100] + ' ' + 'Hundred']\n    if num % 100:\n        res.append(self.twoDigits(num % 100, lookup))\n    if unit != '':\n        res.append(unit)\n    return ' '.join(res)",
            "def threeDigits(self, num, lookup, unit):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    res = []\n    if num / 100:\n        res = [lookup[num / 100] + ' ' + 'Hundred']\n    if num % 100:\n        res.append(self.twoDigits(num % 100, lookup))\n    if unit != '':\n        res.append(unit)\n    return ' '.join(res)",
            "def threeDigits(self, num, lookup, unit):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    res = []\n    if num / 100:\n        res = [lookup[num / 100] + ' ' + 'Hundred']\n    if num % 100:\n        res.append(self.twoDigits(num % 100, lookup))\n    if unit != '':\n        res.append(unit)\n    return ' '.join(res)"
        ]
    },
    {
        "func_name": "twoDigits",
        "original": "def twoDigits(self, num, lookup):\n    if num in lookup:\n        return lookup[num]\n    return lookup[num / 10 * 10] + ' ' + lookup[num % 10]",
        "mutated": [
            "def twoDigits(self, num, lookup):\n    if False:\n        i = 10\n    if num in lookup:\n        return lookup[num]\n    return lookup[num / 10 * 10] + ' ' + lookup[num % 10]",
            "def twoDigits(self, num, lookup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if num in lookup:\n        return lookup[num]\n    return lookup[num / 10 * 10] + ' ' + lookup[num % 10]",
            "def twoDigits(self, num, lookup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if num in lookup:\n        return lookup[num]\n    return lookup[num / 10 * 10] + ' ' + lookup[num % 10]",
            "def twoDigits(self, num, lookup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if num in lookup:\n        return lookup[num]\n    return lookup[num / 10 * 10] + ' ' + lookup[num % 10]",
            "def twoDigits(self, num, lookup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if num in lookup:\n        return lookup[num]\n    return lookup[num / 10 * 10] + ' ' + lookup[num % 10]"
        ]
    }
]
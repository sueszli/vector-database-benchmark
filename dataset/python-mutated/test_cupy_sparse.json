[
    {
        "func_name": "test_sparse_hstack_vstack_csr",
        "original": "def test_sparse_hstack_vstack_csr():\n    pytest.importorskip('cupyx')\n    x = cupy.arange(24, dtype=cupy.float32).reshape(4, 6)\n    sp = da.from_array(x, chunks=(2, 3), asarray=False, fancy=False)\n    sp = sp.map_blocks(cupyx.scipy.sparse.csr_matrix, dtype=cupy.float32)\n    y = sp.compute()\n    assert cupyx.scipy.sparse.isspmatrix(y)\n    assert_eq(x, y.todense())",
        "mutated": [
            "def test_sparse_hstack_vstack_csr():\n    if False:\n        i = 10\n    pytest.importorskip('cupyx')\n    x = cupy.arange(24, dtype=cupy.float32).reshape(4, 6)\n    sp = da.from_array(x, chunks=(2, 3), asarray=False, fancy=False)\n    sp = sp.map_blocks(cupyx.scipy.sparse.csr_matrix, dtype=cupy.float32)\n    y = sp.compute()\n    assert cupyx.scipy.sparse.isspmatrix(y)\n    assert_eq(x, y.todense())",
            "def test_sparse_hstack_vstack_csr():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    pytest.importorskip('cupyx')\n    x = cupy.arange(24, dtype=cupy.float32).reshape(4, 6)\n    sp = da.from_array(x, chunks=(2, 3), asarray=False, fancy=False)\n    sp = sp.map_blocks(cupyx.scipy.sparse.csr_matrix, dtype=cupy.float32)\n    y = sp.compute()\n    assert cupyx.scipy.sparse.isspmatrix(y)\n    assert_eq(x, y.todense())",
            "def test_sparse_hstack_vstack_csr():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    pytest.importorskip('cupyx')\n    x = cupy.arange(24, dtype=cupy.float32).reshape(4, 6)\n    sp = da.from_array(x, chunks=(2, 3), asarray=False, fancy=False)\n    sp = sp.map_blocks(cupyx.scipy.sparse.csr_matrix, dtype=cupy.float32)\n    y = sp.compute()\n    assert cupyx.scipy.sparse.isspmatrix(y)\n    assert_eq(x, y.todense())",
            "def test_sparse_hstack_vstack_csr():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    pytest.importorskip('cupyx')\n    x = cupy.arange(24, dtype=cupy.float32).reshape(4, 6)\n    sp = da.from_array(x, chunks=(2, 3), asarray=False, fancy=False)\n    sp = sp.map_blocks(cupyx.scipy.sparse.csr_matrix, dtype=cupy.float32)\n    y = sp.compute()\n    assert cupyx.scipy.sparse.isspmatrix(y)\n    assert_eq(x, y.todense())",
            "def test_sparse_hstack_vstack_csr():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    pytest.importorskip('cupyx')\n    x = cupy.arange(24, dtype=cupy.float32).reshape(4, 6)\n    sp = da.from_array(x, chunks=(2, 3), asarray=False, fancy=False)\n    sp = sp.map_blocks(cupyx.scipy.sparse.csr_matrix, dtype=cupy.float32)\n    y = sp.compute()\n    assert cupyx.scipy.sparse.isspmatrix(y)\n    assert_eq(x, y.todense())"
        ]
    },
    {
        "func_name": "test_sparse_concatenate",
        "original": "@pytest.mark.parametrize('axis', [0, 1])\ndef test_sparse_concatenate(axis):\n    pytest.importorskip('cupyx')\n    rng = da.random.default_rng(cupy.random.default_rng())\n    meta = cupyx.scipy.sparse.csr_matrix((0, 0))\n    xs = []\n    ys = []\n    for _ in range(2):\n        x = rng.random((1000, 10), chunks=(100, 10))\n        x[x < 0.9] = 0\n        xs.append(x)\n        ys.append(x.map_blocks(cupyx.scipy.sparse.csr_matrix, meta=meta))\n    z = da.concatenate(ys, axis=axis)\n    z = z.compute()\n    if axis == 0:\n        sp_concatenate = cupyx.scipy.sparse.vstack\n    elif axis == 1:\n        sp_concatenate = cupyx.scipy.sparse.hstack\n    z_expected = sp_concatenate([cupyx.scipy.sparse.csr_matrix(e.compute()) for e in xs])\n    assert (z.toarray() == z_expected.toarray()).all()",
        "mutated": [
            "@pytest.mark.parametrize('axis', [0, 1])\ndef test_sparse_concatenate(axis):\n    if False:\n        i = 10\n    pytest.importorskip('cupyx')\n    rng = da.random.default_rng(cupy.random.default_rng())\n    meta = cupyx.scipy.sparse.csr_matrix((0, 0))\n    xs = []\n    ys = []\n    for _ in range(2):\n        x = rng.random((1000, 10), chunks=(100, 10))\n        x[x < 0.9] = 0\n        xs.append(x)\n        ys.append(x.map_blocks(cupyx.scipy.sparse.csr_matrix, meta=meta))\n    z = da.concatenate(ys, axis=axis)\n    z = z.compute()\n    if axis == 0:\n        sp_concatenate = cupyx.scipy.sparse.vstack\n    elif axis == 1:\n        sp_concatenate = cupyx.scipy.sparse.hstack\n    z_expected = sp_concatenate([cupyx.scipy.sparse.csr_matrix(e.compute()) for e in xs])\n    assert (z.toarray() == z_expected.toarray()).all()",
            "@pytest.mark.parametrize('axis', [0, 1])\ndef test_sparse_concatenate(axis):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    pytest.importorskip('cupyx')\n    rng = da.random.default_rng(cupy.random.default_rng())\n    meta = cupyx.scipy.sparse.csr_matrix((0, 0))\n    xs = []\n    ys = []\n    for _ in range(2):\n        x = rng.random((1000, 10), chunks=(100, 10))\n        x[x < 0.9] = 0\n        xs.append(x)\n        ys.append(x.map_blocks(cupyx.scipy.sparse.csr_matrix, meta=meta))\n    z = da.concatenate(ys, axis=axis)\n    z = z.compute()\n    if axis == 0:\n        sp_concatenate = cupyx.scipy.sparse.vstack\n    elif axis == 1:\n        sp_concatenate = cupyx.scipy.sparse.hstack\n    z_expected = sp_concatenate([cupyx.scipy.sparse.csr_matrix(e.compute()) for e in xs])\n    assert (z.toarray() == z_expected.toarray()).all()",
            "@pytest.mark.parametrize('axis', [0, 1])\ndef test_sparse_concatenate(axis):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    pytest.importorskip('cupyx')\n    rng = da.random.default_rng(cupy.random.default_rng())\n    meta = cupyx.scipy.sparse.csr_matrix((0, 0))\n    xs = []\n    ys = []\n    for _ in range(2):\n        x = rng.random((1000, 10), chunks=(100, 10))\n        x[x < 0.9] = 0\n        xs.append(x)\n        ys.append(x.map_blocks(cupyx.scipy.sparse.csr_matrix, meta=meta))\n    z = da.concatenate(ys, axis=axis)\n    z = z.compute()\n    if axis == 0:\n        sp_concatenate = cupyx.scipy.sparse.vstack\n    elif axis == 1:\n        sp_concatenate = cupyx.scipy.sparse.hstack\n    z_expected = sp_concatenate([cupyx.scipy.sparse.csr_matrix(e.compute()) for e in xs])\n    assert (z.toarray() == z_expected.toarray()).all()",
            "@pytest.mark.parametrize('axis', [0, 1])\ndef test_sparse_concatenate(axis):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    pytest.importorskip('cupyx')\n    rng = da.random.default_rng(cupy.random.default_rng())\n    meta = cupyx.scipy.sparse.csr_matrix((0, 0))\n    xs = []\n    ys = []\n    for _ in range(2):\n        x = rng.random((1000, 10), chunks=(100, 10))\n        x[x < 0.9] = 0\n        xs.append(x)\n        ys.append(x.map_blocks(cupyx.scipy.sparse.csr_matrix, meta=meta))\n    z = da.concatenate(ys, axis=axis)\n    z = z.compute()\n    if axis == 0:\n        sp_concatenate = cupyx.scipy.sparse.vstack\n    elif axis == 1:\n        sp_concatenate = cupyx.scipy.sparse.hstack\n    z_expected = sp_concatenate([cupyx.scipy.sparse.csr_matrix(e.compute()) for e in xs])\n    assert (z.toarray() == z_expected.toarray()).all()",
            "@pytest.mark.parametrize('axis', [0, 1])\ndef test_sparse_concatenate(axis):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    pytest.importorskip('cupyx')\n    rng = da.random.default_rng(cupy.random.default_rng())\n    meta = cupyx.scipy.sparse.csr_matrix((0, 0))\n    xs = []\n    ys = []\n    for _ in range(2):\n        x = rng.random((1000, 10), chunks=(100, 10))\n        x[x < 0.9] = 0\n        xs.append(x)\n        ys.append(x.map_blocks(cupyx.scipy.sparse.csr_matrix, meta=meta))\n    z = da.concatenate(ys, axis=axis)\n    z = z.compute()\n    if axis == 0:\n        sp_concatenate = cupyx.scipy.sparse.vstack\n    elif axis == 1:\n        sp_concatenate = cupyx.scipy.sparse.hstack\n    z_expected = sp_concatenate([cupyx.scipy.sparse.csr_matrix(e.compute()) for e in xs])\n    assert (z.toarray() == z_expected.toarray()).all()"
        ]
    },
    {
        "func_name": "test_sparse_dot",
        "original": "@pytest.mark.parametrize('sp_format', ['csr', 'csc'])\n@pytest.mark.parametrize('input_sizes', [{'x_shape': (4, 8), 'y_shape': (8, 6), 'x_chunks': (2, 4), 'y_chunks': (4, 3)}, {'x_shape': (4, 4), 'y_shape': (4, 4), 'x_chunks': (2, 2), 'y_chunks': (2, 2)}, {'x_shape': (4, 4), 'y_shape': (4, 4), 'x_chunks': (4, 2), 'y_chunks': (2, 4)}])\ndef test_sparse_dot(sp_format, input_sizes):\n    pytest.importorskip('cupyx')\n    if sp_format == 'csr':\n        sp_matrix = cupyx.scipy.sparse.csr_matrix\n    elif sp_format == 'csc':\n        sp_matrix = cupyx.scipy.sparse.csc_matrix\n    dtype = 'f'\n    density = 0.3\n    rng = cupy.random.default_rng()\n    (x_shape, x_chunks) = (input_sizes['x_shape'], input_sizes['x_chunks'])\n    (y_shape, y_chunks) = (input_sizes['y_shape'], input_sizes['y_chunks'])\n    x = rng.random(x_shape, dtype=dtype)\n    y = rng.random(y_shape, dtype=dtype)\n    x[x < 1 - density] = 0\n    y[y < 1 - density] = 0\n    z = x.dot(y)\n    da_x = da.from_array(x, chunks=x_chunks, asarray=False, fancy=False)\n    da_y = da.from_array(y, chunks=y_chunks, asarray=False, fancy=False)\n    da_x = da_x.map_blocks(sp_matrix, meta=sp_matrix(cupy.array([0], dtype=dtype)))\n    da_y = da_y.map_blocks(sp_matrix, meta=sp_matrix(cupy.array([0], dtype=dtype)))\n    da_z = da.dot(da_x, da_y).compute()\n    assert cupyx.scipy.sparse.isspmatrix(da_z)\n    assert_eq(z, da_z.todense())",
        "mutated": [
            "@pytest.mark.parametrize('sp_format', ['csr', 'csc'])\n@pytest.mark.parametrize('input_sizes', [{'x_shape': (4, 8), 'y_shape': (8, 6), 'x_chunks': (2, 4), 'y_chunks': (4, 3)}, {'x_shape': (4, 4), 'y_shape': (4, 4), 'x_chunks': (2, 2), 'y_chunks': (2, 2)}, {'x_shape': (4, 4), 'y_shape': (4, 4), 'x_chunks': (4, 2), 'y_chunks': (2, 4)}])\ndef test_sparse_dot(sp_format, input_sizes):\n    if False:\n        i = 10\n    pytest.importorskip('cupyx')\n    if sp_format == 'csr':\n        sp_matrix = cupyx.scipy.sparse.csr_matrix\n    elif sp_format == 'csc':\n        sp_matrix = cupyx.scipy.sparse.csc_matrix\n    dtype = 'f'\n    density = 0.3\n    rng = cupy.random.default_rng()\n    (x_shape, x_chunks) = (input_sizes['x_shape'], input_sizes['x_chunks'])\n    (y_shape, y_chunks) = (input_sizes['y_shape'], input_sizes['y_chunks'])\n    x = rng.random(x_shape, dtype=dtype)\n    y = rng.random(y_shape, dtype=dtype)\n    x[x < 1 - density] = 0\n    y[y < 1 - density] = 0\n    z = x.dot(y)\n    da_x = da.from_array(x, chunks=x_chunks, asarray=False, fancy=False)\n    da_y = da.from_array(y, chunks=y_chunks, asarray=False, fancy=False)\n    da_x = da_x.map_blocks(sp_matrix, meta=sp_matrix(cupy.array([0], dtype=dtype)))\n    da_y = da_y.map_blocks(sp_matrix, meta=sp_matrix(cupy.array([0], dtype=dtype)))\n    da_z = da.dot(da_x, da_y).compute()\n    assert cupyx.scipy.sparse.isspmatrix(da_z)\n    assert_eq(z, da_z.todense())",
            "@pytest.mark.parametrize('sp_format', ['csr', 'csc'])\n@pytest.mark.parametrize('input_sizes', [{'x_shape': (4, 8), 'y_shape': (8, 6), 'x_chunks': (2, 4), 'y_chunks': (4, 3)}, {'x_shape': (4, 4), 'y_shape': (4, 4), 'x_chunks': (2, 2), 'y_chunks': (2, 2)}, {'x_shape': (4, 4), 'y_shape': (4, 4), 'x_chunks': (4, 2), 'y_chunks': (2, 4)}])\ndef test_sparse_dot(sp_format, input_sizes):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    pytest.importorskip('cupyx')\n    if sp_format == 'csr':\n        sp_matrix = cupyx.scipy.sparse.csr_matrix\n    elif sp_format == 'csc':\n        sp_matrix = cupyx.scipy.sparse.csc_matrix\n    dtype = 'f'\n    density = 0.3\n    rng = cupy.random.default_rng()\n    (x_shape, x_chunks) = (input_sizes['x_shape'], input_sizes['x_chunks'])\n    (y_shape, y_chunks) = (input_sizes['y_shape'], input_sizes['y_chunks'])\n    x = rng.random(x_shape, dtype=dtype)\n    y = rng.random(y_shape, dtype=dtype)\n    x[x < 1 - density] = 0\n    y[y < 1 - density] = 0\n    z = x.dot(y)\n    da_x = da.from_array(x, chunks=x_chunks, asarray=False, fancy=False)\n    da_y = da.from_array(y, chunks=y_chunks, asarray=False, fancy=False)\n    da_x = da_x.map_blocks(sp_matrix, meta=sp_matrix(cupy.array([0], dtype=dtype)))\n    da_y = da_y.map_blocks(sp_matrix, meta=sp_matrix(cupy.array([0], dtype=dtype)))\n    da_z = da.dot(da_x, da_y).compute()\n    assert cupyx.scipy.sparse.isspmatrix(da_z)\n    assert_eq(z, da_z.todense())",
            "@pytest.mark.parametrize('sp_format', ['csr', 'csc'])\n@pytest.mark.parametrize('input_sizes', [{'x_shape': (4, 8), 'y_shape': (8, 6), 'x_chunks': (2, 4), 'y_chunks': (4, 3)}, {'x_shape': (4, 4), 'y_shape': (4, 4), 'x_chunks': (2, 2), 'y_chunks': (2, 2)}, {'x_shape': (4, 4), 'y_shape': (4, 4), 'x_chunks': (4, 2), 'y_chunks': (2, 4)}])\ndef test_sparse_dot(sp_format, input_sizes):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    pytest.importorskip('cupyx')\n    if sp_format == 'csr':\n        sp_matrix = cupyx.scipy.sparse.csr_matrix\n    elif sp_format == 'csc':\n        sp_matrix = cupyx.scipy.sparse.csc_matrix\n    dtype = 'f'\n    density = 0.3\n    rng = cupy.random.default_rng()\n    (x_shape, x_chunks) = (input_sizes['x_shape'], input_sizes['x_chunks'])\n    (y_shape, y_chunks) = (input_sizes['y_shape'], input_sizes['y_chunks'])\n    x = rng.random(x_shape, dtype=dtype)\n    y = rng.random(y_shape, dtype=dtype)\n    x[x < 1 - density] = 0\n    y[y < 1 - density] = 0\n    z = x.dot(y)\n    da_x = da.from_array(x, chunks=x_chunks, asarray=False, fancy=False)\n    da_y = da.from_array(y, chunks=y_chunks, asarray=False, fancy=False)\n    da_x = da_x.map_blocks(sp_matrix, meta=sp_matrix(cupy.array([0], dtype=dtype)))\n    da_y = da_y.map_blocks(sp_matrix, meta=sp_matrix(cupy.array([0], dtype=dtype)))\n    da_z = da.dot(da_x, da_y).compute()\n    assert cupyx.scipy.sparse.isspmatrix(da_z)\n    assert_eq(z, da_z.todense())",
            "@pytest.mark.parametrize('sp_format', ['csr', 'csc'])\n@pytest.mark.parametrize('input_sizes', [{'x_shape': (4, 8), 'y_shape': (8, 6), 'x_chunks': (2, 4), 'y_chunks': (4, 3)}, {'x_shape': (4, 4), 'y_shape': (4, 4), 'x_chunks': (2, 2), 'y_chunks': (2, 2)}, {'x_shape': (4, 4), 'y_shape': (4, 4), 'x_chunks': (4, 2), 'y_chunks': (2, 4)}])\ndef test_sparse_dot(sp_format, input_sizes):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    pytest.importorskip('cupyx')\n    if sp_format == 'csr':\n        sp_matrix = cupyx.scipy.sparse.csr_matrix\n    elif sp_format == 'csc':\n        sp_matrix = cupyx.scipy.sparse.csc_matrix\n    dtype = 'f'\n    density = 0.3\n    rng = cupy.random.default_rng()\n    (x_shape, x_chunks) = (input_sizes['x_shape'], input_sizes['x_chunks'])\n    (y_shape, y_chunks) = (input_sizes['y_shape'], input_sizes['y_chunks'])\n    x = rng.random(x_shape, dtype=dtype)\n    y = rng.random(y_shape, dtype=dtype)\n    x[x < 1 - density] = 0\n    y[y < 1 - density] = 0\n    z = x.dot(y)\n    da_x = da.from_array(x, chunks=x_chunks, asarray=False, fancy=False)\n    da_y = da.from_array(y, chunks=y_chunks, asarray=False, fancy=False)\n    da_x = da_x.map_blocks(sp_matrix, meta=sp_matrix(cupy.array([0], dtype=dtype)))\n    da_y = da_y.map_blocks(sp_matrix, meta=sp_matrix(cupy.array([0], dtype=dtype)))\n    da_z = da.dot(da_x, da_y).compute()\n    assert cupyx.scipy.sparse.isspmatrix(da_z)\n    assert_eq(z, da_z.todense())",
            "@pytest.mark.parametrize('sp_format', ['csr', 'csc'])\n@pytest.mark.parametrize('input_sizes', [{'x_shape': (4, 8), 'y_shape': (8, 6), 'x_chunks': (2, 4), 'y_chunks': (4, 3)}, {'x_shape': (4, 4), 'y_shape': (4, 4), 'x_chunks': (2, 2), 'y_chunks': (2, 2)}, {'x_shape': (4, 4), 'y_shape': (4, 4), 'x_chunks': (4, 2), 'y_chunks': (2, 4)}])\ndef test_sparse_dot(sp_format, input_sizes):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    pytest.importorskip('cupyx')\n    if sp_format == 'csr':\n        sp_matrix = cupyx.scipy.sparse.csr_matrix\n    elif sp_format == 'csc':\n        sp_matrix = cupyx.scipy.sparse.csc_matrix\n    dtype = 'f'\n    density = 0.3\n    rng = cupy.random.default_rng()\n    (x_shape, x_chunks) = (input_sizes['x_shape'], input_sizes['x_chunks'])\n    (y_shape, y_chunks) = (input_sizes['y_shape'], input_sizes['y_chunks'])\n    x = rng.random(x_shape, dtype=dtype)\n    y = rng.random(y_shape, dtype=dtype)\n    x[x < 1 - density] = 0\n    y[y < 1 - density] = 0\n    z = x.dot(y)\n    da_x = da.from_array(x, chunks=x_chunks, asarray=False, fancy=False)\n    da_y = da.from_array(y, chunks=y_chunks, asarray=False, fancy=False)\n    da_x = da_x.map_blocks(sp_matrix, meta=sp_matrix(cupy.array([0], dtype=dtype)))\n    da_y = da_y.map_blocks(sp_matrix, meta=sp_matrix(cupy.array([0], dtype=dtype)))\n    da_z = da.dot(da_x, da_y).compute()\n    assert cupyx.scipy.sparse.isspmatrix(da_z)\n    assert_eq(z, da_z.todense())"
        ]
    }
]
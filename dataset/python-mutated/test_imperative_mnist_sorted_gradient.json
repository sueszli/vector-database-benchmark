[
    {
        "func_name": "test_mnist_sort_gradient_float32",
        "original": "def test_mnist_sort_gradient_float32(self):\n    seed = 90\n    epoch_num = 1\n    with base.dygraph.guard():\n        base.default_startup_program().random_seed = seed\n        base.default_main_program().random_seed = seed\n        base.set_flags({'FLAGS_sort_sum_gradient': True})\n        mnist2 = MNIST()\n        sgd2 = paddle.optimizer.SGD(learning_rate=0.001, parameters=mnist2.parameters())\n        train_reader2 = paddle.batch(paddle.dataset.mnist.train(), batch_size=128, drop_last=True)\n        mnist2.train()\n        dy_param_init_value2 = {}\n        for epoch in range(epoch_num):\n            for (batch_id, data) in enumerate(train_reader2()):\n                dy_x_data2 = np.array([x[0].reshape(1, 28, 28) for x in data]).astype('float32')\n                y_data2 = np.array([x[1] for x in data]).astype('int64').reshape(128, 1)\n                img2 = to_variable(dy_x_data2)\n                label2 = to_variable(y_data2)\n                label2.stop_gradient = True\n                cost2 = mnist2(img2)\n                loss2 = paddle.nn.functional.cross_entropy(cost2, label2, reduction='none', use_softmax=False)\n                avg_loss2 = paddle.mean(loss2)\n                dy_out2 = avg_loss2.numpy()\n                if epoch == 0 and batch_id == 0:\n                    for param in mnist2.parameters():\n                        dy_param_init_value2[param.name] = param.numpy()\n                avg_loss2.backward()\n                sgd2.minimize(avg_loss2)\n                mnist2.clear_gradients()\n                dy_param_value2 = {}\n                for param in mnist2.parameters():\n                    dy_param_value2[param.name] = param.numpy()\n                if batch_id == 20:\n                    break\n    with new_program_scope():\n        base.default_startup_program().random_seed = seed\n        base.default_main_program().random_seed = seed\n        exe = base.Executor(base.CPUPlace() if not core.is_compiled_with_cuda() else base.CUDAPlace(0))\n        mnist = MNIST()\n        sgd = paddle.optimizer.SGD(learning_rate=0.001)\n        train_reader = paddle.batch(paddle.dataset.mnist.train(), batch_size=128, drop_last=True)\n        img = paddle.static.data(name='pixel', shape=[-1, 1, 28, 28], dtype='float32')\n        label = paddle.static.data(name='label', shape=[-1, 1], dtype='int64')\n        cost = mnist(img)\n        loss = paddle.nn.functional.cross_entropy(cost, label, reduction='none', use_softmax=False)\n        avg_loss = paddle.mean(loss)\n        sgd.minimize(avg_loss)\n        static_param_init_value = {}\n        static_param_name_list = []\n        for param in mnist.parameters():\n            static_param_name_list.append(param.name)\n        out = exe.run(base.default_startup_program(), fetch_list=static_param_name_list)\n        for i in range(len(static_param_name_list)):\n            static_param_init_value[static_param_name_list[i]] = out[i]\n        for epoch in range(epoch_num):\n            for (batch_id, data) in enumerate(train_reader()):\n                static_x_data = np.array([x[0].reshape(1, 28, 28) for x in data]).astype('float32')\n                y_data = np.array([x[1] for x in data]).astype('int64').reshape([128, 1])\n                fetch_list = [avg_loss.name]\n                fetch_list.extend(static_param_name_list)\n                out = exe.run(base.default_main_program(), feed={'pixel': static_x_data, 'label': y_data}, fetch_list=fetch_list)\n                static_param_value = {}\n                static_out = out[0]\n                for i in range(1, len(out)):\n                    static_param_value[static_param_name_list[i - 1]] = out[i]\n                if batch_id == 20:\n                    break\n    np.testing.assert_allclose(dy_x_data2.all(), static_x_data.all(), rtol=1e-05)\n    for (key, value) in static_param_init_value.items():\n        np.testing.assert_allclose(value, dy_param_init_value2[key], rtol=1e-05)\n    np.testing.assert_allclose(static_out, dy_out2, rtol=1e-05)\n    for (key, value) in static_param_value.items():\n        np.testing.assert_allclose(value, dy_param_value2[key], rtol=1e-05, atol=1e-05)",
        "mutated": [
            "def test_mnist_sort_gradient_float32(self):\n    if False:\n        i = 10\n    seed = 90\n    epoch_num = 1\n    with base.dygraph.guard():\n        base.default_startup_program().random_seed = seed\n        base.default_main_program().random_seed = seed\n        base.set_flags({'FLAGS_sort_sum_gradient': True})\n        mnist2 = MNIST()\n        sgd2 = paddle.optimizer.SGD(learning_rate=0.001, parameters=mnist2.parameters())\n        train_reader2 = paddle.batch(paddle.dataset.mnist.train(), batch_size=128, drop_last=True)\n        mnist2.train()\n        dy_param_init_value2 = {}\n        for epoch in range(epoch_num):\n            for (batch_id, data) in enumerate(train_reader2()):\n                dy_x_data2 = np.array([x[0].reshape(1, 28, 28) for x in data]).astype('float32')\n                y_data2 = np.array([x[1] for x in data]).astype('int64').reshape(128, 1)\n                img2 = to_variable(dy_x_data2)\n                label2 = to_variable(y_data2)\n                label2.stop_gradient = True\n                cost2 = mnist2(img2)\n                loss2 = paddle.nn.functional.cross_entropy(cost2, label2, reduction='none', use_softmax=False)\n                avg_loss2 = paddle.mean(loss2)\n                dy_out2 = avg_loss2.numpy()\n                if epoch == 0 and batch_id == 0:\n                    for param in mnist2.parameters():\n                        dy_param_init_value2[param.name] = param.numpy()\n                avg_loss2.backward()\n                sgd2.minimize(avg_loss2)\n                mnist2.clear_gradients()\n                dy_param_value2 = {}\n                for param in mnist2.parameters():\n                    dy_param_value2[param.name] = param.numpy()\n                if batch_id == 20:\n                    break\n    with new_program_scope():\n        base.default_startup_program().random_seed = seed\n        base.default_main_program().random_seed = seed\n        exe = base.Executor(base.CPUPlace() if not core.is_compiled_with_cuda() else base.CUDAPlace(0))\n        mnist = MNIST()\n        sgd = paddle.optimizer.SGD(learning_rate=0.001)\n        train_reader = paddle.batch(paddle.dataset.mnist.train(), batch_size=128, drop_last=True)\n        img = paddle.static.data(name='pixel', shape=[-1, 1, 28, 28], dtype='float32')\n        label = paddle.static.data(name='label', shape=[-1, 1], dtype='int64')\n        cost = mnist(img)\n        loss = paddle.nn.functional.cross_entropy(cost, label, reduction='none', use_softmax=False)\n        avg_loss = paddle.mean(loss)\n        sgd.minimize(avg_loss)\n        static_param_init_value = {}\n        static_param_name_list = []\n        for param in mnist.parameters():\n            static_param_name_list.append(param.name)\n        out = exe.run(base.default_startup_program(), fetch_list=static_param_name_list)\n        for i in range(len(static_param_name_list)):\n            static_param_init_value[static_param_name_list[i]] = out[i]\n        for epoch in range(epoch_num):\n            for (batch_id, data) in enumerate(train_reader()):\n                static_x_data = np.array([x[0].reshape(1, 28, 28) for x in data]).astype('float32')\n                y_data = np.array([x[1] for x in data]).astype('int64').reshape([128, 1])\n                fetch_list = [avg_loss.name]\n                fetch_list.extend(static_param_name_list)\n                out = exe.run(base.default_main_program(), feed={'pixel': static_x_data, 'label': y_data}, fetch_list=fetch_list)\n                static_param_value = {}\n                static_out = out[0]\n                for i in range(1, len(out)):\n                    static_param_value[static_param_name_list[i - 1]] = out[i]\n                if batch_id == 20:\n                    break\n    np.testing.assert_allclose(dy_x_data2.all(), static_x_data.all(), rtol=1e-05)\n    for (key, value) in static_param_init_value.items():\n        np.testing.assert_allclose(value, dy_param_init_value2[key], rtol=1e-05)\n    np.testing.assert_allclose(static_out, dy_out2, rtol=1e-05)\n    for (key, value) in static_param_value.items():\n        np.testing.assert_allclose(value, dy_param_value2[key], rtol=1e-05, atol=1e-05)",
            "def test_mnist_sort_gradient_float32(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    seed = 90\n    epoch_num = 1\n    with base.dygraph.guard():\n        base.default_startup_program().random_seed = seed\n        base.default_main_program().random_seed = seed\n        base.set_flags({'FLAGS_sort_sum_gradient': True})\n        mnist2 = MNIST()\n        sgd2 = paddle.optimizer.SGD(learning_rate=0.001, parameters=mnist2.parameters())\n        train_reader2 = paddle.batch(paddle.dataset.mnist.train(), batch_size=128, drop_last=True)\n        mnist2.train()\n        dy_param_init_value2 = {}\n        for epoch in range(epoch_num):\n            for (batch_id, data) in enumerate(train_reader2()):\n                dy_x_data2 = np.array([x[0].reshape(1, 28, 28) for x in data]).astype('float32')\n                y_data2 = np.array([x[1] for x in data]).astype('int64').reshape(128, 1)\n                img2 = to_variable(dy_x_data2)\n                label2 = to_variable(y_data2)\n                label2.stop_gradient = True\n                cost2 = mnist2(img2)\n                loss2 = paddle.nn.functional.cross_entropy(cost2, label2, reduction='none', use_softmax=False)\n                avg_loss2 = paddle.mean(loss2)\n                dy_out2 = avg_loss2.numpy()\n                if epoch == 0 and batch_id == 0:\n                    for param in mnist2.parameters():\n                        dy_param_init_value2[param.name] = param.numpy()\n                avg_loss2.backward()\n                sgd2.minimize(avg_loss2)\n                mnist2.clear_gradients()\n                dy_param_value2 = {}\n                for param in mnist2.parameters():\n                    dy_param_value2[param.name] = param.numpy()\n                if batch_id == 20:\n                    break\n    with new_program_scope():\n        base.default_startup_program().random_seed = seed\n        base.default_main_program().random_seed = seed\n        exe = base.Executor(base.CPUPlace() if not core.is_compiled_with_cuda() else base.CUDAPlace(0))\n        mnist = MNIST()\n        sgd = paddle.optimizer.SGD(learning_rate=0.001)\n        train_reader = paddle.batch(paddle.dataset.mnist.train(), batch_size=128, drop_last=True)\n        img = paddle.static.data(name='pixel', shape=[-1, 1, 28, 28], dtype='float32')\n        label = paddle.static.data(name='label', shape=[-1, 1], dtype='int64')\n        cost = mnist(img)\n        loss = paddle.nn.functional.cross_entropy(cost, label, reduction='none', use_softmax=False)\n        avg_loss = paddle.mean(loss)\n        sgd.minimize(avg_loss)\n        static_param_init_value = {}\n        static_param_name_list = []\n        for param in mnist.parameters():\n            static_param_name_list.append(param.name)\n        out = exe.run(base.default_startup_program(), fetch_list=static_param_name_list)\n        for i in range(len(static_param_name_list)):\n            static_param_init_value[static_param_name_list[i]] = out[i]\n        for epoch in range(epoch_num):\n            for (batch_id, data) in enumerate(train_reader()):\n                static_x_data = np.array([x[0].reshape(1, 28, 28) for x in data]).astype('float32')\n                y_data = np.array([x[1] for x in data]).astype('int64').reshape([128, 1])\n                fetch_list = [avg_loss.name]\n                fetch_list.extend(static_param_name_list)\n                out = exe.run(base.default_main_program(), feed={'pixel': static_x_data, 'label': y_data}, fetch_list=fetch_list)\n                static_param_value = {}\n                static_out = out[0]\n                for i in range(1, len(out)):\n                    static_param_value[static_param_name_list[i - 1]] = out[i]\n                if batch_id == 20:\n                    break\n    np.testing.assert_allclose(dy_x_data2.all(), static_x_data.all(), rtol=1e-05)\n    for (key, value) in static_param_init_value.items():\n        np.testing.assert_allclose(value, dy_param_init_value2[key], rtol=1e-05)\n    np.testing.assert_allclose(static_out, dy_out2, rtol=1e-05)\n    for (key, value) in static_param_value.items():\n        np.testing.assert_allclose(value, dy_param_value2[key], rtol=1e-05, atol=1e-05)",
            "def test_mnist_sort_gradient_float32(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    seed = 90\n    epoch_num = 1\n    with base.dygraph.guard():\n        base.default_startup_program().random_seed = seed\n        base.default_main_program().random_seed = seed\n        base.set_flags({'FLAGS_sort_sum_gradient': True})\n        mnist2 = MNIST()\n        sgd2 = paddle.optimizer.SGD(learning_rate=0.001, parameters=mnist2.parameters())\n        train_reader2 = paddle.batch(paddle.dataset.mnist.train(), batch_size=128, drop_last=True)\n        mnist2.train()\n        dy_param_init_value2 = {}\n        for epoch in range(epoch_num):\n            for (batch_id, data) in enumerate(train_reader2()):\n                dy_x_data2 = np.array([x[0].reshape(1, 28, 28) for x in data]).astype('float32')\n                y_data2 = np.array([x[1] for x in data]).astype('int64').reshape(128, 1)\n                img2 = to_variable(dy_x_data2)\n                label2 = to_variable(y_data2)\n                label2.stop_gradient = True\n                cost2 = mnist2(img2)\n                loss2 = paddle.nn.functional.cross_entropy(cost2, label2, reduction='none', use_softmax=False)\n                avg_loss2 = paddle.mean(loss2)\n                dy_out2 = avg_loss2.numpy()\n                if epoch == 0 and batch_id == 0:\n                    for param in mnist2.parameters():\n                        dy_param_init_value2[param.name] = param.numpy()\n                avg_loss2.backward()\n                sgd2.minimize(avg_loss2)\n                mnist2.clear_gradients()\n                dy_param_value2 = {}\n                for param in mnist2.parameters():\n                    dy_param_value2[param.name] = param.numpy()\n                if batch_id == 20:\n                    break\n    with new_program_scope():\n        base.default_startup_program().random_seed = seed\n        base.default_main_program().random_seed = seed\n        exe = base.Executor(base.CPUPlace() if not core.is_compiled_with_cuda() else base.CUDAPlace(0))\n        mnist = MNIST()\n        sgd = paddle.optimizer.SGD(learning_rate=0.001)\n        train_reader = paddle.batch(paddle.dataset.mnist.train(), batch_size=128, drop_last=True)\n        img = paddle.static.data(name='pixel', shape=[-1, 1, 28, 28], dtype='float32')\n        label = paddle.static.data(name='label', shape=[-1, 1], dtype='int64')\n        cost = mnist(img)\n        loss = paddle.nn.functional.cross_entropy(cost, label, reduction='none', use_softmax=False)\n        avg_loss = paddle.mean(loss)\n        sgd.minimize(avg_loss)\n        static_param_init_value = {}\n        static_param_name_list = []\n        for param in mnist.parameters():\n            static_param_name_list.append(param.name)\n        out = exe.run(base.default_startup_program(), fetch_list=static_param_name_list)\n        for i in range(len(static_param_name_list)):\n            static_param_init_value[static_param_name_list[i]] = out[i]\n        for epoch in range(epoch_num):\n            for (batch_id, data) in enumerate(train_reader()):\n                static_x_data = np.array([x[0].reshape(1, 28, 28) for x in data]).astype('float32')\n                y_data = np.array([x[1] for x in data]).astype('int64').reshape([128, 1])\n                fetch_list = [avg_loss.name]\n                fetch_list.extend(static_param_name_list)\n                out = exe.run(base.default_main_program(), feed={'pixel': static_x_data, 'label': y_data}, fetch_list=fetch_list)\n                static_param_value = {}\n                static_out = out[0]\n                for i in range(1, len(out)):\n                    static_param_value[static_param_name_list[i - 1]] = out[i]\n                if batch_id == 20:\n                    break\n    np.testing.assert_allclose(dy_x_data2.all(), static_x_data.all(), rtol=1e-05)\n    for (key, value) in static_param_init_value.items():\n        np.testing.assert_allclose(value, dy_param_init_value2[key], rtol=1e-05)\n    np.testing.assert_allclose(static_out, dy_out2, rtol=1e-05)\n    for (key, value) in static_param_value.items():\n        np.testing.assert_allclose(value, dy_param_value2[key], rtol=1e-05, atol=1e-05)",
            "def test_mnist_sort_gradient_float32(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    seed = 90\n    epoch_num = 1\n    with base.dygraph.guard():\n        base.default_startup_program().random_seed = seed\n        base.default_main_program().random_seed = seed\n        base.set_flags({'FLAGS_sort_sum_gradient': True})\n        mnist2 = MNIST()\n        sgd2 = paddle.optimizer.SGD(learning_rate=0.001, parameters=mnist2.parameters())\n        train_reader2 = paddle.batch(paddle.dataset.mnist.train(), batch_size=128, drop_last=True)\n        mnist2.train()\n        dy_param_init_value2 = {}\n        for epoch in range(epoch_num):\n            for (batch_id, data) in enumerate(train_reader2()):\n                dy_x_data2 = np.array([x[0].reshape(1, 28, 28) for x in data]).astype('float32')\n                y_data2 = np.array([x[1] for x in data]).astype('int64').reshape(128, 1)\n                img2 = to_variable(dy_x_data2)\n                label2 = to_variable(y_data2)\n                label2.stop_gradient = True\n                cost2 = mnist2(img2)\n                loss2 = paddle.nn.functional.cross_entropy(cost2, label2, reduction='none', use_softmax=False)\n                avg_loss2 = paddle.mean(loss2)\n                dy_out2 = avg_loss2.numpy()\n                if epoch == 0 and batch_id == 0:\n                    for param in mnist2.parameters():\n                        dy_param_init_value2[param.name] = param.numpy()\n                avg_loss2.backward()\n                sgd2.minimize(avg_loss2)\n                mnist2.clear_gradients()\n                dy_param_value2 = {}\n                for param in mnist2.parameters():\n                    dy_param_value2[param.name] = param.numpy()\n                if batch_id == 20:\n                    break\n    with new_program_scope():\n        base.default_startup_program().random_seed = seed\n        base.default_main_program().random_seed = seed\n        exe = base.Executor(base.CPUPlace() if not core.is_compiled_with_cuda() else base.CUDAPlace(0))\n        mnist = MNIST()\n        sgd = paddle.optimizer.SGD(learning_rate=0.001)\n        train_reader = paddle.batch(paddle.dataset.mnist.train(), batch_size=128, drop_last=True)\n        img = paddle.static.data(name='pixel', shape=[-1, 1, 28, 28], dtype='float32')\n        label = paddle.static.data(name='label', shape=[-1, 1], dtype='int64')\n        cost = mnist(img)\n        loss = paddle.nn.functional.cross_entropy(cost, label, reduction='none', use_softmax=False)\n        avg_loss = paddle.mean(loss)\n        sgd.minimize(avg_loss)\n        static_param_init_value = {}\n        static_param_name_list = []\n        for param in mnist.parameters():\n            static_param_name_list.append(param.name)\n        out = exe.run(base.default_startup_program(), fetch_list=static_param_name_list)\n        for i in range(len(static_param_name_list)):\n            static_param_init_value[static_param_name_list[i]] = out[i]\n        for epoch in range(epoch_num):\n            for (batch_id, data) in enumerate(train_reader()):\n                static_x_data = np.array([x[0].reshape(1, 28, 28) for x in data]).astype('float32')\n                y_data = np.array([x[1] for x in data]).astype('int64').reshape([128, 1])\n                fetch_list = [avg_loss.name]\n                fetch_list.extend(static_param_name_list)\n                out = exe.run(base.default_main_program(), feed={'pixel': static_x_data, 'label': y_data}, fetch_list=fetch_list)\n                static_param_value = {}\n                static_out = out[0]\n                for i in range(1, len(out)):\n                    static_param_value[static_param_name_list[i - 1]] = out[i]\n                if batch_id == 20:\n                    break\n    np.testing.assert_allclose(dy_x_data2.all(), static_x_data.all(), rtol=1e-05)\n    for (key, value) in static_param_init_value.items():\n        np.testing.assert_allclose(value, dy_param_init_value2[key], rtol=1e-05)\n    np.testing.assert_allclose(static_out, dy_out2, rtol=1e-05)\n    for (key, value) in static_param_value.items():\n        np.testing.assert_allclose(value, dy_param_value2[key], rtol=1e-05, atol=1e-05)",
            "def test_mnist_sort_gradient_float32(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    seed = 90\n    epoch_num = 1\n    with base.dygraph.guard():\n        base.default_startup_program().random_seed = seed\n        base.default_main_program().random_seed = seed\n        base.set_flags({'FLAGS_sort_sum_gradient': True})\n        mnist2 = MNIST()\n        sgd2 = paddle.optimizer.SGD(learning_rate=0.001, parameters=mnist2.parameters())\n        train_reader2 = paddle.batch(paddle.dataset.mnist.train(), batch_size=128, drop_last=True)\n        mnist2.train()\n        dy_param_init_value2 = {}\n        for epoch in range(epoch_num):\n            for (batch_id, data) in enumerate(train_reader2()):\n                dy_x_data2 = np.array([x[0].reshape(1, 28, 28) for x in data]).astype('float32')\n                y_data2 = np.array([x[1] for x in data]).astype('int64').reshape(128, 1)\n                img2 = to_variable(dy_x_data2)\n                label2 = to_variable(y_data2)\n                label2.stop_gradient = True\n                cost2 = mnist2(img2)\n                loss2 = paddle.nn.functional.cross_entropy(cost2, label2, reduction='none', use_softmax=False)\n                avg_loss2 = paddle.mean(loss2)\n                dy_out2 = avg_loss2.numpy()\n                if epoch == 0 and batch_id == 0:\n                    for param in mnist2.parameters():\n                        dy_param_init_value2[param.name] = param.numpy()\n                avg_loss2.backward()\n                sgd2.minimize(avg_loss2)\n                mnist2.clear_gradients()\n                dy_param_value2 = {}\n                for param in mnist2.parameters():\n                    dy_param_value2[param.name] = param.numpy()\n                if batch_id == 20:\n                    break\n    with new_program_scope():\n        base.default_startup_program().random_seed = seed\n        base.default_main_program().random_seed = seed\n        exe = base.Executor(base.CPUPlace() if not core.is_compiled_with_cuda() else base.CUDAPlace(0))\n        mnist = MNIST()\n        sgd = paddle.optimizer.SGD(learning_rate=0.001)\n        train_reader = paddle.batch(paddle.dataset.mnist.train(), batch_size=128, drop_last=True)\n        img = paddle.static.data(name='pixel', shape=[-1, 1, 28, 28], dtype='float32')\n        label = paddle.static.data(name='label', shape=[-1, 1], dtype='int64')\n        cost = mnist(img)\n        loss = paddle.nn.functional.cross_entropy(cost, label, reduction='none', use_softmax=False)\n        avg_loss = paddle.mean(loss)\n        sgd.minimize(avg_loss)\n        static_param_init_value = {}\n        static_param_name_list = []\n        for param in mnist.parameters():\n            static_param_name_list.append(param.name)\n        out = exe.run(base.default_startup_program(), fetch_list=static_param_name_list)\n        for i in range(len(static_param_name_list)):\n            static_param_init_value[static_param_name_list[i]] = out[i]\n        for epoch in range(epoch_num):\n            for (batch_id, data) in enumerate(train_reader()):\n                static_x_data = np.array([x[0].reshape(1, 28, 28) for x in data]).astype('float32')\n                y_data = np.array([x[1] for x in data]).astype('int64').reshape([128, 1])\n                fetch_list = [avg_loss.name]\n                fetch_list.extend(static_param_name_list)\n                out = exe.run(base.default_main_program(), feed={'pixel': static_x_data, 'label': y_data}, fetch_list=fetch_list)\n                static_param_value = {}\n                static_out = out[0]\n                for i in range(1, len(out)):\n                    static_param_value[static_param_name_list[i - 1]] = out[i]\n                if batch_id == 20:\n                    break\n    np.testing.assert_allclose(dy_x_data2.all(), static_x_data.all(), rtol=1e-05)\n    for (key, value) in static_param_init_value.items():\n        np.testing.assert_allclose(value, dy_param_init_value2[key], rtol=1e-05)\n    np.testing.assert_allclose(static_out, dy_out2, rtol=1e-05)\n    for (key, value) in static_param_value.items():\n        np.testing.assert_allclose(value, dy_param_value2[key], rtol=1e-05, atol=1e-05)"
        ]
    }
]
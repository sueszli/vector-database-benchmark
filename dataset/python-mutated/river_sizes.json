[
    {
        "func_name": "river_sizes",
        "original": "def river_sizes(matrix):\n    n = len(matrix)\n    m = len(matrix[0])\n    results = []\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] != 0:\n                size = dfs((i, j), matrix)\n                results.append(size)\n    return results",
        "mutated": [
            "def river_sizes(matrix):\n    if False:\n        i = 10\n    n = len(matrix)\n    m = len(matrix[0])\n    results = []\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] != 0:\n                size = dfs((i, j), matrix)\n                results.append(size)\n    return results",
            "def river_sizes(matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    n = len(matrix)\n    m = len(matrix[0])\n    results = []\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] != 0:\n                size = dfs((i, j), matrix)\n                results.append(size)\n    return results",
            "def river_sizes(matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    n = len(matrix)\n    m = len(matrix[0])\n    results = []\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] != 0:\n                size = dfs((i, j), matrix)\n                results.append(size)\n    return results",
            "def river_sizes(matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    n = len(matrix)\n    m = len(matrix[0])\n    results = []\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] != 0:\n                size = dfs((i, j), matrix)\n                results.append(size)\n    return results",
            "def river_sizes(matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    n = len(matrix)\n    m = len(matrix[0])\n    results = []\n    for i in range(n):\n        for j in range(m):\n            if matrix[i][j] != 0:\n                size = dfs((i, j), matrix)\n                results.append(size)\n    return results"
        ]
    },
    {
        "func_name": "dfs",
        "original": "def dfs(coord, matrix):\n    (i, j) = coord\n    if i < 0 or j < 0:\n        return 0\n    n = len(matrix)\n    m = len(matrix[0])\n    if i == n or j == m:\n        return 0\n    if matrix[i][j] == 0:\n        return 0\n    matrix[i][j] = 0\n    size = 1\n    dirs = [(-1, 0), (0, -1), (1, 0), (0, 1)]\n    for d in dirs:\n        size += dfs((i + d[0], j + d[1]), matrix)\n    return size",
        "mutated": [
            "def dfs(coord, matrix):\n    if False:\n        i = 10\n    (i, j) = coord\n    if i < 0 or j < 0:\n        return 0\n    n = len(matrix)\n    m = len(matrix[0])\n    if i == n or j == m:\n        return 0\n    if matrix[i][j] == 0:\n        return 0\n    matrix[i][j] = 0\n    size = 1\n    dirs = [(-1, 0), (0, -1), (1, 0), (0, 1)]\n    for d in dirs:\n        size += dfs((i + d[0], j + d[1]), matrix)\n    return size",
            "def dfs(coord, matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (i, j) = coord\n    if i < 0 or j < 0:\n        return 0\n    n = len(matrix)\n    m = len(matrix[0])\n    if i == n or j == m:\n        return 0\n    if matrix[i][j] == 0:\n        return 0\n    matrix[i][j] = 0\n    size = 1\n    dirs = [(-1, 0), (0, -1), (1, 0), (0, 1)]\n    for d in dirs:\n        size += dfs((i + d[0], j + d[1]), matrix)\n    return size",
            "def dfs(coord, matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (i, j) = coord\n    if i < 0 or j < 0:\n        return 0\n    n = len(matrix)\n    m = len(matrix[0])\n    if i == n or j == m:\n        return 0\n    if matrix[i][j] == 0:\n        return 0\n    matrix[i][j] = 0\n    size = 1\n    dirs = [(-1, 0), (0, -1), (1, 0), (0, 1)]\n    for d in dirs:\n        size += dfs((i + d[0], j + d[1]), matrix)\n    return size",
            "def dfs(coord, matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (i, j) = coord\n    if i < 0 or j < 0:\n        return 0\n    n = len(matrix)\n    m = len(matrix[0])\n    if i == n or j == m:\n        return 0\n    if matrix[i][j] == 0:\n        return 0\n    matrix[i][j] = 0\n    size = 1\n    dirs = [(-1, 0), (0, -1), (1, 0), (0, 1)]\n    for d in dirs:\n        size += dfs((i + d[0], j + d[1]), matrix)\n    return size",
            "def dfs(coord, matrix):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (i, j) = coord\n    if i < 0 or j < 0:\n        return 0\n    n = len(matrix)\n    m = len(matrix[0])\n    if i == n or j == m:\n        return 0\n    if matrix[i][j] == 0:\n        return 0\n    matrix[i][j] = 0\n    size = 1\n    dirs = [(-1, 0), (0, -1), (1, 0), (0, 1)]\n    for d in dirs:\n        size += dfs((i + d[0], j + d[1]), matrix)\n    return size"
        ]
    }
]
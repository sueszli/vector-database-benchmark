[
    {
        "func_name": "create_http_task",
        "original": "def create_http_task(project: str, location: str, queue: str, url: str, json_payload: Dict, scheduled_seconds_from_now: Optional[int]=None, task_id: Optional[str]=None, deadline_in_seconds: Optional[int]=None) -> tasks_v2.Task:\n    \"\"\"Create an HTTP POST task with a JSON payload.\n    Args:\n        project: The project ID where the queue is located.\n        location: The location where the queue is located.\n        queue: The ID of the queue to add the task to.\n        url: The target URL of the task.\n        json_payload: The JSON payload to send.\n        scheduled_seconds_from_now: Seconds from now to schedule the task for.\n        task_id: ID to use for the newly created task.\n        deadline_in_seconds: The deadline in seconds for task.\n    Returns:\n        The newly created task.\n    \"\"\"\n    client = tasks_v2.CloudTasksClient()\n    task = tasks_v2.Task(http_request=tasks_v2.HttpRequest(http_method=tasks_v2.HttpMethod.POST, url=url, headers={'Content-type': 'application/json'}, body=json.dumps(json_payload).encode()), name=client.task_path(project, location, queue, task_id) if task_id is not None else None)\n    if scheduled_seconds_from_now is not None:\n        timestamp = timestamp_pb2.Timestamp()\n        timestamp.FromDatetime(datetime.datetime.utcnow() + datetime.timedelta(seconds=scheduled_seconds_from_now))\n        task.schedule_time = timestamp\n    if deadline_in_seconds is not None:\n        duration = duration_pb2.Duration()\n        duration.FromSeconds(deadline_in_seconds)\n        task.dispatch_deadline = duration\n    return client.create_task(tasks_v2.CreateTaskRequest(parent=client.queue_path(project, location, queue), task=task))",
        "mutated": [
            "def create_http_task(project: str, location: str, queue: str, url: str, json_payload: Dict, scheduled_seconds_from_now: Optional[int]=None, task_id: Optional[str]=None, deadline_in_seconds: Optional[int]=None) -> tasks_v2.Task:\n    if False:\n        i = 10\n    'Create an HTTP POST task with a JSON payload.\\n    Args:\\n        project: The project ID where the queue is located.\\n        location: The location where the queue is located.\\n        queue: The ID of the queue to add the task to.\\n        url: The target URL of the task.\\n        json_payload: The JSON payload to send.\\n        scheduled_seconds_from_now: Seconds from now to schedule the task for.\\n        task_id: ID to use for the newly created task.\\n        deadline_in_seconds: The deadline in seconds for task.\\n    Returns:\\n        The newly created task.\\n    '\n    client = tasks_v2.CloudTasksClient()\n    task = tasks_v2.Task(http_request=tasks_v2.HttpRequest(http_method=tasks_v2.HttpMethod.POST, url=url, headers={'Content-type': 'application/json'}, body=json.dumps(json_payload).encode()), name=client.task_path(project, location, queue, task_id) if task_id is not None else None)\n    if scheduled_seconds_from_now is not None:\n        timestamp = timestamp_pb2.Timestamp()\n        timestamp.FromDatetime(datetime.datetime.utcnow() + datetime.timedelta(seconds=scheduled_seconds_from_now))\n        task.schedule_time = timestamp\n    if deadline_in_seconds is not None:\n        duration = duration_pb2.Duration()\n        duration.FromSeconds(deadline_in_seconds)\n        task.dispatch_deadline = duration\n    return client.create_task(tasks_v2.CreateTaskRequest(parent=client.queue_path(project, location, queue), task=task))",
            "def create_http_task(project: str, location: str, queue: str, url: str, json_payload: Dict, scheduled_seconds_from_now: Optional[int]=None, task_id: Optional[str]=None, deadline_in_seconds: Optional[int]=None) -> tasks_v2.Task:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Create an HTTP POST task with a JSON payload.\\n    Args:\\n        project: The project ID where the queue is located.\\n        location: The location where the queue is located.\\n        queue: The ID of the queue to add the task to.\\n        url: The target URL of the task.\\n        json_payload: The JSON payload to send.\\n        scheduled_seconds_from_now: Seconds from now to schedule the task for.\\n        task_id: ID to use for the newly created task.\\n        deadline_in_seconds: The deadline in seconds for task.\\n    Returns:\\n        The newly created task.\\n    '\n    client = tasks_v2.CloudTasksClient()\n    task = tasks_v2.Task(http_request=tasks_v2.HttpRequest(http_method=tasks_v2.HttpMethod.POST, url=url, headers={'Content-type': 'application/json'}, body=json.dumps(json_payload).encode()), name=client.task_path(project, location, queue, task_id) if task_id is not None else None)\n    if scheduled_seconds_from_now is not None:\n        timestamp = timestamp_pb2.Timestamp()\n        timestamp.FromDatetime(datetime.datetime.utcnow() + datetime.timedelta(seconds=scheduled_seconds_from_now))\n        task.schedule_time = timestamp\n    if deadline_in_seconds is not None:\n        duration = duration_pb2.Duration()\n        duration.FromSeconds(deadline_in_seconds)\n        task.dispatch_deadline = duration\n    return client.create_task(tasks_v2.CreateTaskRequest(parent=client.queue_path(project, location, queue), task=task))",
            "def create_http_task(project: str, location: str, queue: str, url: str, json_payload: Dict, scheduled_seconds_from_now: Optional[int]=None, task_id: Optional[str]=None, deadline_in_seconds: Optional[int]=None) -> tasks_v2.Task:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Create an HTTP POST task with a JSON payload.\\n    Args:\\n        project: The project ID where the queue is located.\\n        location: The location where the queue is located.\\n        queue: The ID of the queue to add the task to.\\n        url: The target URL of the task.\\n        json_payload: The JSON payload to send.\\n        scheduled_seconds_from_now: Seconds from now to schedule the task for.\\n        task_id: ID to use for the newly created task.\\n        deadline_in_seconds: The deadline in seconds for task.\\n    Returns:\\n        The newly created task.\\n    '\n    client = tasks_v2.CloudTasksClient()\n    task = tasks_v2.Task(http_request=tasks_v2.HttpRequest(http_method=tasks_v2.HttpMethod.POST, url=url, headers={'Content-type': 'application/json'}, body=json.dumps(json_payload).encode()), name=client.task_path(project, location, queue, task_id) if task_id is not None else None)\n    if scheduled_seconds_from_now is not None:\n        timestamp = timestamp_pb2.Timestamp()\n        timestamp.FromDatetime(datetime.datetime.utcnow() + datetime.timedelta(seconds=scheduled_seconds_from_now))\n        task.schedule_time = timestamp\n    if deadline_in_seconds is not None:\n        duration = duration_pb2.Duration()\n        duration.FromSeconds(deadline_in_seconds)\n        task.dispatch_deadline = duration\n    return client.create_task(tasks_v2.CreateTaskRequest(parent=client.queue_path(project, location, queue), task=task))",
            "def create_http_task(project: str, location: str, queue: str, url: str, json_payload: Dict, scheduled_seconds_from_now: Optional[int]=None, task_id: Optional[str]=None, deadline_in_seconds: Optional[int]=None) -> tasks_v2.Task:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Create an HTTP POST task with a JSON payload.\\n    Args:\\n        project: The project ID where the queue is located.\\n        location: The location where the queue is located.\\n        queue: The ID of the queue to add the task to.\\n        url: The target URL of the task.\\n        json_payload: The JSON payload to send.\\n        scheduled_seconds_from_now: Seconds from now to schedule the task for.\\n        task_id: ID to use for the newly created task.\\n        deadline_in_seconds: The deadline in seconds for task.\\n    Returns:\\n        The newly created task.\\n    '\n    client = tasks_v2.CloudTasksClient()\n    task = tasks_v2.Task(http_request=tasks_v2.HttpRequest(http_method=tasks_v2.HttpMethod.POST, url=url, headers={'Content-type': 'application/json'}, body=json.dumps(json_payload).encode()), name=client.task_path(project, location, queue, task_id) if task_id is not None else None)\n    if scheduled_seconds_from_now is not None:\n        timestamp = timestamp_pb2.Timestamp()\n        timestamp.FromDatetime(datetime.datetime.utcnow() + datetime.timedelta(seconds=scheduled_seconds_from_now))\n        task.schedule_time = timestamp\n    if deadline_in_seconds is not None:\n        duration = duration_pb2.Duration()\n        duration.FromSeconds(deadline_in_seconds)\n        task.dispatch_deadline = duration\n    return client.create_task(tasks_v2.CreateTaskRequest(parent=client.queue_path(project, location, queue), task=task))",
            "def create_http_task(project: str, location: str, queue: str, url: str, json_payload: Dict, scheduled_seconds_from_now: Optional[int]=None, task_id: Optional[str]=None, deadline_in_seconds: Optional[int]=None) -> tasks_v2.Task:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Create an HTTP POST task with a JSON payload.\\n    Args:\\n        project: The project ID where the queue is located.\\n        location: The location where the queue is located.\\n        queue: The ID of the queue to add the task to.\\n        url: The target URL of the task.\\n        json_payload: The JSON payload to send.\\n        scheduled_seconds_from_now: Seconds from now to schedule the task for.\\n        task_id: ID to use for the newly created task.\\n        deadline_in_seconds: The deadline in seconds for task.\\n    Returns:\\n        The newly created task.\\n    '\n    client = tasks_v2.CloudTasksClient()\n    task = tasks_v2.Task(http_request=tasks_v2.HttpRequest(http_method=tasks_v2.HttpMethod.POST, url=url, headers={'Content-type': 'application/json'}, body=json.dumps(json_payload).encode()), name=client.task_path(project, location, queue, task_id) if task_id is not None else None)\n    if scheduled_seconds_from_now is not None:\n        timestamp = timestamp_pb2.Timestamp()\n        timestamp.FromDatetime(datetime.datetime.utcnow() + datetime.timedelta(seconds=scheduled_seconds_from_now))\n        task.schedule_time = timestamp\n    if deadline_in_seconds is not None:\n        duration = duration_pb2.Duration()\n        duration.FromSeconds(deadline_in_seconds)\n        task.dispatch_deadline = duration\n    return client.create_task(tasks_v2.CreateTaskRequest(parent=client.queue_path(project, location, queue), task=task))"
        ]
    }
]
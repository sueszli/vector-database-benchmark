[
    {
        "func_name": "bug_1",
        "original": "def bug_1(n):\n    return 'multi-lines\\n' + n / 0",
        "mutated": [
            "def bug_1(n):\n    if False:\n        i = 10\n    return 'multi-lines\\n' + n / 0",
            "def bug_1(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return 'multi-lines\\n' + n / 0",
            "def bug_1(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return 'multi-lines\\n' + n / 0",
            "def bug_1(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return 'multi-lines\\n' + n / 0",
            "def bug_1(n):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return 'multi-lines\\n' + n / 0"
        ]
    },
    {
        "func_name": "bug_2",
        "original": "def bug_2(a, b, c):\n    return 1 / 0 + a + b + c",
        "mutated": [
            "def bug_2(a, b, c):\n    if False:\n        i = 10\n    return 1 / 0 + a + b + c",
            "def bug_2(a, b, c):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return 1 / 0 + a + b + c",
            "def bug_2(a, b, c):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return 1 / 0 + a + b + c",
            "def bug_2(a, b, c):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return 1 / 0 + a + b + c",
            "def bug_2(a, b, c):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return 1 / 0 + a + b + c"
        ]
    },
    {
        "func_name": "bug_3",
        "original": "def bug_3(string):\n    return min(10, string, 20 / 0)",
        "mutated": [
            "def bug_3(string):\n    if False:\n        i = 10\n    return min(10, string, 20 / 0)",
            "def bug_3(string):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return min(10, string, 20 / 0)",
            "def bug_3(string):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return min(10, string, 20 / 0)",
            "def bug_3(string):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return min(10, string, 20 / 0)",
            "def bug_3(string):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return min(10, string, 20 / 0)"
        ]
    },
    {
        "func_name": "bug_4",
        "original": "def bug_4():\n    (a, b) = (1, 0)\n    dct = {'foo': 1, 'bar': a / b}\n    return dct",
        "mutated": [
            "def bug_4():\n    if False:\n        i = 10\n    (a, b) = (1, 0)\n    dct = {'foo': 1, 'bar': a / b}\n    return dct",
            "def bug_4():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    (a, b) = (1, 0)\n    dct = {'foo': 1, 'bar': a / b}\n    return dct",
            "def bug_4():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    (a, b) = (1, 0)\n    dct = {'foo': 1, 'bar': a / b}\n    return dct",
            "def bug_4():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    (a, b) = (1, 0)\n    dct = {'foo': 1, 'bar': a / b}\n    return dct",
            "def bug_4():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    (a, b) = (1, 0)\n    dct = {'foo': 1, 'bar': a / b}\n    return dct"
        ]
    }
]
[
    {
        "func_name": "memoization",
        "original": "def memoization(t, l, r, lookup):\n    if (t, l, r) not in lookup:\n        if l == r:\n            return (1, 1)\n        if l > r:\n            (l, r) = (r, l)\n        result = [float('inf'), 0]\n        for i in xrange(l + 1):\n            (l_win_cnt, l_lose_cnt, nt, pair_cnt) = (i + 1, l - i, (t + 1) // 2, t // 2)\n            min_j = max(l_lose_cnt, r - (pair_cnt - l_lose_cnt))\n            max_j = min(r - l_win_cnt, nt - l_win_cnt - 1)\n            for j in xrange(min_j, max_j + 1):\n                tmp = memoization(nt, i, j, lookup)\n                result = (min(result[0], tmp[0] + 1), max(result[1], tmp[1] + 1))\n        lookup[t, l, r] = result\n    return lookup[t, l, r]",
        "mutated": [
            "def memoization(t, l, r, lookup):\n    if False:\n        i = 10\n    if (t, l, r) not in lookup:\n        if l == r:\n            return (1, 1)\n        if l > r:\n            (l, r) = (r, l)\n        result = [float('inf'), 0]\n        for i in xrange(l + 1):\n            (l_win_cnt, l_lose_cnt, nt, pair_cnt) = (i + 1, l - i, (t + 1) // 2, t // 2)\n            min_j = max(l_lose_cnt, r - (pair_cnt - l_lose_cnt))\n            max_j = min(r - l_win_cnt, nt - l_win_cnt - 1)\n            for j in xrange(min_j, max_j + 1):\n                tmp = memoization(nt, i, j, lookup)\n                result = (min(result[0], tmp[0] + 1), max(result[1], tmp[1] + 1))\n        lookup[t, l, r] = result\n    return lookup[t, l, r]",
            "def memoization(t, l, r, lookup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if (t, l, r) not in lookup:\n        if l == r:\n            return (1, 1)\n        if l > r:\n            (l, r) = (r, l)\n        result = [float('inf'), 0]\n        for i in xrange(l + 1):\n            (l_win_cnt, l_lose_cnt, nt, pair_cnt) = (i + 1, l - i, (t + 1) // 2, t // 2)\n            min_j = max(l_lose_cnt, r - (pair_cnt - l_lose_cnt))\n            max_j = min(r - l_win_cnt, nt - l_win_cnt - 1)\n            for j in xrange(min_j, max_j + 1):\n                tmp = memoization(nt, i, j, lookup)\n                result = (min(result[0], tmp[0] + 1), max(result[1], tmp[1] + 1))\n        lookup[t, l, r] = result\n    return lookup[t, l, r]",
            "def memoization(t, l, r, lookup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if (t, l, r) not in lookup:\n        if l == r:\n            return (1, 1)\n        if l > r:\n            (l, r) = (r, l)\n        result = [float('inf'), 0]\n        for i in xrange(l + 1):\n            (l_win_cnt, l_lose_cnt, nt, pair_cnt) = (i + 1, l - i, (t + 1) // 2, t // 2)\n            min_j = max(l_lose_cnt, r - (pair_cnt - l_lose_cnt))\n            max_j = min(r - l_win_cnt, nt - l_win_cnt - 1)\n            for j in xrange(min_j, max_j + 1):\n                tmp = memoization(nt, i, j, lookup)\n                result = (min(result[0], tmp[0] + 1), max(result[1], tmp[1] + 1))\n        lookup[t, l, r] = result\n    return lookup[t, l, r]",
            "def memoization(t, l, r, lookup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if (t, l, r) not in lookup:\n        if l == r:\n            return (1, 1)\n        if l > r:\n            (l, r) = (r, l)\n        result = [float('inf'), 0]\n        for i in xrange(l + 1):\n            (l_win_cnt, l_lose_cnt, nt, pair_cnt) = (i + 1, l - i, (t + 1) // 2, t // 2)\n            min_j = max(l_lose_cnt, r - (pair_cnt - l_lose_cnt))\n            max_j = min(r - l_win_cnt, nt - l_win_cnt - 1)\n            for j in xrange(min_j, max_j + 1):\n                tmp = memoization(nt, i, j, lookup)\n                result = (min(result[0], tmp[0] + 1), max(result[1], tmp[1] + 1))\n        lookup[t, l, r] = result\n    return lookup[t, l, r]",
            "def memoization(t, l, r, lookup):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if (t, l, r) not in lookup:\n        if l == r:\n            return (1, 1)\n        if l > r:\n            (l, r) = (r, l)\n        result = [float('inf'), 0]\n        for i in xrange(l + 1):\n            (l_win_cnt, l_lose_cnt, nt, pair_cnt) = (i + 1, l - i, (t + 1) // 2, t // 2)\n            min_j = max(l_lose_cnt, r - (pair_cnt - l_lose_cnt))\n            max_j = min(r - l_win_cnt, nt - l_win_cnt - 1)\n            for j in xrange(min_j, max_j + 1):\n                tmp = memoization(nt, i, j, lookup)\n                result = (min(result[0], tmp[0] + 1), max(result[1], tmp[1] + 1))\n        lookup[t, l, r] = result\n    return lookup[t, l, r]"
        ]
    },
    {
        "func_name": "earliestAndLatest",
        "original": "def earliestAndLatest(self, n, firstPlayer, secondPlayer):\n    \"\"\"\n        :type n: int\n        :type firstPlayer: int\n        :type secondPlayer: int\n        :rtype: List[int]\n        \"\"\"\n\n    def memoization(t, l, r, lookup):\n        if (t, l, r) not in lookup:\n            if l == r:\n                return (1, 1)\n            if l > r:\n                (l, r) = (r, l)\n            result = [float('inf'), 0]\n            for i in xrange(l + 1):\n                (l_win_cnt, l_lose_cnt, nt, pair_cnt) = (i + 1, l - i, (t + 1) // 2, t // 2)\n                min_j = max(l_lose_cnt, r - (pair_cnt - l_lose_cnt))\n                max_j = min(r - l_win_cnt, nt - l_win_cnt - 1)\n                for j in xrange(min_j, max_j + 1):\n                    tmp = memoization(nt, i, j, lookup)\n                    result = (min(result[0], tmp[0] + 1), max(result[1], tmp[1] + 1))\n            lookup[t, l, r] = result\n        return lookup[t, l, r]\n    return memoization(n, firstPlayer - 1, n - secondPlayer, {})",
        "mutated": [
            "def earliestAndLatest(self, n, firstPlayer, secondPlayer):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type firstPlayer: int\\n        :type secondPlayer: int\\n        :rtype: List[int]\\n        '\n\n    def memoization(t, l, r, lookup):\n        if (t, l, r) not in lookup:\n            if l == r:\n                return (1, 1)\n            if l > r:\n                (l, r) = (r, l)\n            result = [float('inf'), 0]\n            for i in xrange(l + 1):\n                (l_win_cnt, l_lose_cnt, nt, pair_cnt) = (i + 1, l - i, (t + 1) // 2, t // 2)\n                min_j = max(l_lose_cnt, r - (pair_cnt - l_lose_cnt))\n                max_j = min(r - l_win_cnt, nt - l_win_cnt - 1)\n                for j in xrange(min_j, max_j + 1):\n                    tmp = memoization(nt, i, j, lookup)\n                    result = (min(result[0], tmp[0] + 1), max(result[1], tmp[1] + 1))\n            lookup[t, l, r] = result\n        return lookup[t, l, r]\n    return memoization(n, firstPlayer - 1, n - secondPlayer, {})",
            "def earliestAndLatest(self, n, firstPlayer, secondPlayer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type firstPlayer: int\\n        :type secondPlayer: int\\n        :rtype: List[int]\\n        '\n\n    def memoization(t, l, r, lookup):\n        if (t, l, r) not in lookup:\n            if l == r:\n                return (1, 1)\n            if l > r:\n                (l, r) = (r, l)\n            result = [float('inf'), 0]\n            for i in xrange(l + 1):\n                (l_win_cnt, l_lose_cnt, nt, pair_cnt) = (i + 1, l - i, (t + 1) // 2, t // 2)\n                min_j = max(l_lose_cnt, r - (pair_cnt - l_lose_cnt))\n                max_j = min(r - l_win_cnt, nt - l_win_cnt - 1)\n                for j in xrange(min_j, max_j + 1):\n                    tmp = memoization(nt, i, j, lookup)\n                    result = (min(result[0], tmp[0] + 1), max(result[1], tmp[1] + 1))\n            lookup[t, l, r] = result\n        return lookup[t, l, r]\n    return memoization(n, firstPlayer - 1, n - secondPlayer, {})",
            "def earliestAndLatest(self, n, firstPlayer, secondPlayer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type firstPlayer: int\\n        :type secondPlayer: int\\n        :rtype: List[int]\\n        '\n\n    def memoization(t, l, r, lookup):\n        if (t, l, r) not in lookup:\n            if l == r:\n                return (1, 1)\n            if l > r:\n                (l, r) = (r, l)\n            result = [float('inf'), 0]\n            for i in xrange(l + 1):\n                (l_win_cnt, l_lose_cnt, nt, pair_cnt) = (i + 1, l - i, (t + 1) // 2, t // 2)\n                min_j = max(l_lose_cnt, r - (pair_cnt - l_lose_cnt))\n                max_j = min(r - l_win_cnt, nt - l_win_cnt - 1)\n                for j in xrange(min_j, max_j + 1):\n                    tmp = memoization(nt, i, j, lookup)\n                    result = (min(result[0], tmp[0] + 1), max(result[1], tmp[1] + 1))\n            lookup[t, l, r] = result\n        return lookup[t, l, r]\n    return memoization(n, firstPlayer - 1, n - secondPlayer, {})",
            "def earliestAndLatest(self, n, firstPlayer, secondPlayer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type firstPlayer: int\\n        :type secondPlayer: int\\n        :rtype: List[int]\\n        '\n\n    def memoization(t, l, r, lookup):\n        if (t, l, r) not in lookup:\n            if l == r:\n                return (1, 1)\n            if l > r:\n                (l, r) = (r, l)\n            result = [float('inf'), 0]\n            for i in xrange(l + 1):\n                (l_win_cnt, l_lose_cnt, nt, pair_cnt) = (i + 1, l - i, (t + 1) // 2, t // 2)\n                min_j = max(l_lose_cnt, r - (pair_cnt - l_lose_cnt))\n                max_j = min(r - l_win_cnt, nt - l_win_cnt - 1)\n                for j in xrange(min_j, max_j + 1):\n                    tmp = memoization(nt, i, j, lookup)\n                    result = (min(result[0], tmp[0] + 1), max(result[1], tmp[1] + 1))\n            lookup[t, l, r] = result\n        return lookup[t, l, r]\n    return memoization(n, firstPlayer - 1, n - secondPlayer, {})",
            "def earliestAndLatest(self, n, firstPlayer, secondPlayer):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type firstPlayer: int\\n        :type secondPlayer: int\\n        :rtype: List[int]\\n        '\n\n    def memoization(t, l, r, lookup):\n        if (t, l, r) not in lookup:\n            if l == r:\n                return (1, 1)\n            if l > r:\n                (l, r) = (r, l)\n            result = [float('inf'), 0]\n            for i in xrange(l + 1):\n                (l_win_cnt, l_lose_cnt, nt, pair_cnt) = (i + 1, l - i, (t + 1) // 2, t // 2)\n                min_j = max(l_lose_cnt, r - (pair_cnt - l_lose_cnt))\n                max_j = min(r - l_win_cnt, nt - l_win_cnt - 1)\n                for j in xrange(min_j, max_j + 1):\n                    tmp = memoization(nt, i, j, lookup)\n                    result = (min(result[0], tmp[0] + 1), max(result[1], tmp[1] + 1))\n            lookup[t, l, r] = result\n        return lookup[t, l, r]\n    return memoization(n, firstPlayer - 1, n - secondPlayer, {})"
        ]
    }
]
"""``PlotlyDataSet`` generates a plot from a pandas DataFrame and saves it to a JSON
file using an underlying filesystem (e.g.: local, S3, GCS). It loads the JSON into a
plotly figure.
"""
from copy import deepcopy
from typing import Any, Dict
import pandas as pd
import plotly.express as px
from plotly import graph_objects as go
from kedro.io.core import Version
from .json_dataset import JSONDataSet

class PlotlyDataSet(JSONDataSet):
    """``PlotlyDataSet`` generates a plot from a pandas DataFrame and saves it to a JSON
    file using an underlying filesystem (e.g.: local, S3, GCS). It loads the JSON into a
    plotly figure.

    ``PlotlyDataSet`` is a convenience wrapper for ``plotly.JSONDataSet``. It generates
    the JSON file directly from a pandas DataFrame through ``plotly_args``.

    Example usage for the
    `YAML API <https://kedro.readthedocs.io/en/stable/data/    data_catalog_yaml_examples.html>`_:


    .. code-block:: yaml

        bar_plot:
          type: plotly.PlotlyDataSet
          filepath: data/08_reporting/bar_plot.json
          plotly_args:
            type: bar
            fig:
              x: features
              y: importance
              orientation: h
            layout:
              xaxis_title: x
              yaxis_title: y
              title: Title

    Example usage for the
    `Python API <https://kedro.readthedocs.io/en/stable/data/    advanced_data_catalog_usage.html>`_:
    ::

        >>> from kedro.extras.datasets.plotly import PlotlyDataSet
        >>> import plotly.express as px
        >>> import pandas as pd
        >>>
        >>> df_data = pd.DataFrame([[0, 1], [1, 0]], columns=('x1', 'x2'))
        >>>
        >>> data_set = PlotlyDataSet(
        >>>     filepath='scatter_plot.json',
        >>>     plotly_args={
        >>>         'type': 'scatter',
        >>>         'fig': {'x': 'x1', 'y': 'x2'},
        >>>     }
        >>> )
        >>> data_set.save(df_data)
        >>> reloaded = data_set.load()
        >>> assert px.scatter(df_data, x='x1', y='x2') == reloaded

    """

    def __init__(self, filepath: str, plotly_args: Dict[str, Any], load_args: Dict[str, Any]=None, save_args: Dict[str, Any]=None, version: Version=None, credentials: Dict[str, Any]=None, fs_args: Dict[str, Any]=None) -> None:
        if False:
            i = 10
            return i + 15
        'Creates a new instance of ``PlotlyDataSet`` pointing to a concrete JSON file\n        on a specific filesystem.\n\n        Args:\n            filepath: Filepath in POSIX format to a JSON file prefixed with a protocol like `s3://`.\n                If prefix is not provided `file` protocol (local filesystem) will be used.\n                The prefix should be any protocol supported by ``fsspec``.\n                Note: `http(s)` doesn\'t support versioning.\n            plotly_args: Plotly configuration for generating a plotly figure from the\n                dataframe. Keys are `type` (plotly express function, e.g. bar,\n                line, scatter), `fig` (kwargs passed to the plotting function), theme\n                (defaults to `plotly`), `layout`.\n            load_args: Plotly options for loading JSON files.\n                Here you can find all available arguments:\n                https://plotly.com/python-api-reference/generated/plotly.io.from_json.html#plotly.io.from_json\n                All defaults are preserved.\n            save_args: Plotly options for saving JSON files.\n                Here you can find all available arguments:\n                https://plotly.com/python-api-reference/generated/plotly.io.write_json.html\n                All defaults are preserved.\n            version: If specified, should be an instance of\n                ``kedro.io.core.Version``. If its ``load`` attribute is\n                None, the latest version will be loaded. If its ``save``\n                attribute is None, save version will be autogenerated.\n            credentials: Credentials required to get access to the underlying filesystem.\n                E.g. for ``GCSFileSystem`` it should look like `{\'token\': None}`.\n            fs_args: Extra arguments to pass into underlying filesystem class constructor\n                (e.g. `{"project": "my-project"}` for ``GCSFileSystem``), as well as\n                to pass to the filesystem\'s `open` method through nested keys\n                `open_args_load` and `open_args_save`.\n                Here you can find all available arguments for `open`:\n                https://filesystem-spec.readthedocs.io/en/latest/api.html#fsspec.spec.AbstractFileSystem.open\n                All defaults are preserved, except `mode`, which is set to `w` when saving.\n        '
        super().__init__(filepath, load_args, save_args, version, credentials, fs_args)
        self._plotly_args = plotly_args
        _fs_args = deepcopy(fs_args) or {}
        _fs_open_args_load = _fs_args.pop('open_args_load', {})
        _fs_open_args_save = _fs_args.pop('open_args_save', {})
        _fs_open_args_save.setdefault('mode', 'w')
        self._fs_open_args_load = _fs_open_args_load
        self._fs_open_args_save = _fs_open_args_save

    def _describe(self) -> Dict[str, Any]:
        if False:
            i = 10
            return i + 15
        return {**super()._describe(), 'plotly_args': self._plotly_args}

    def _save(self, data: pd.DataFrame) -> None:
        if False:
            for i in range(10):
                print('nop')
        fig = self._plot_dataframe(data)
        super()._save(fig)

    def _plot_dataframe(self, data: pd.DataFrame) -> go.Figure:
        if False:
            for i in range(10):
                print('nop')
        plot_type = self._plotly_args.get('type')
        fig_params = self._plotly_args.get('fig', {})
        fig = getattr(px, plot_type)(data, **fig_params)
        fig.update_layout(template=self._plotly_args.get('theme', 'plotly'))
        fig.update_layout(self._plotly_args.get('layout', {}))
        return fig
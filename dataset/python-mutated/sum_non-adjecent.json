[
    {
        "func_name": "sum_non_adjacent",
        "original": "def sum_non_adjacent(arr):\n    n = len(arr)\n    sums = [0, 0, 0]\n    if n == 0:\n        return 0\n    sums[0] = max(arr[0], 0)\n    if n == 1:\n        return sums[0]\n    sums[1] = arr[1]\n    if sums[1] <= 0:\n        sums[1] = sums[0]\n    if n == 2:\n        return max(sums[0], sums[1])\n    sums[2] = arr[2]\n    if sums[2] <= 0:\n        sums[2] = max(sums[0], sums[1])\n    else:\n        sums[2] += sums[0]\n    for i in range(3, n):\n        temp = 0\n        if arr[i] > 0:\n            temp = max(sums[0], sums[1]) + arr[i]\n        else:\n            temp = max(sums)\n        sums = sums[1:] + [temp]\n    return max(sums)",
        "mutated": [
            "def sum_non_adjacent(arr):\n    if False:\n        i = 10\n    n = len(arr)\n    sums = [0, 0, 0]\n    if n == 0:\n        return 0\n    sums[0] = max(arr[0], 0)\n    if n == 1:\n        return sums[0]\n    sums[1] = arr[1]\n    if sums[1] <= 0:\n        sums[1] = sums[0]\n    if n == 2:\n        return max(sums[0], sums[1])\n    sums[2] = arr[2]\n    if sums[2] <= 0:\n        sums[2] = max(sums[0], sums[1])\n    else:\n        sums[2] += sums[0]\n    for i in range(3, n):\n        temp = 0\n        if arr[i] > 0:\n            temp = max(sums[0], sums[1]) + arr[i]\n        else:\n            temp = max(sums)\n        sums = sums[1:] + [temp]\n    return max(sums)",
            "def sum_non_adjacent(arr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    n = len(arr)\n    sums = [0, 0, 0]\n    if n == 0:\n        return 0\n    sums[0] = max(arr[0], 0)\n    if n == 1:\n        return sums[0]\n    sums[1] = arr[1]\n    if sums[1] <= 0:\n        sums[1] = sums[0]\n    if n == 2:\n        return max(sums[0], sums[1])\n    sums[2] = arr[2]\n    if sums[2] <= 0:\n        sums[2] = max(sums[0], sums[1])\n    else:\n        sums[2] += sums[0]\n    for i in range(3, n):\n        temp = 0\n        if arr[i] > 0:\n            temp = max(sums[0], sums[1]) + arr[i]\n        else:\n            temp = max(sums)\n        sums = sums[1:] + [temp]\n    return max(sums)",
            "def sum_non_adjacent(arr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    n = len(arr)\n    sums = [0, 0, 0]\n    if n == 0:\n        return 0\n    sums[0] = max(arr[0], 0)\n    if n == 1:\n        return sums[0]\n    sums[1] = arr[1]\n    if sums[1] <= 0:\n        sums[1] = sums[0]\n    if n == 2:\n        return max(sums[0], sums[1])\n    sums[2] = arr[2]\n    if sums[2] <= 0:\n        sums[2] = max(sums[0], sums[1])\n    else:\n        sums[2] += sums[0]\n    for i in range(3, n):\n        temp = 0\n        if arr[i] > 0:\n            temp = max(sums[0], sums[1]) + arr[i]\n        else:\n            temp = max(sums)\n        sums = sums[1:] + [temp]\n    return max(sums)",
            "def sum_non_adjacent(arr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    n = len(arr)\n    sums = [0, 0, 0]\n    if n == 0:\n        return 0\n    sums[0] = max(arr[0], 0)\n    if n == 1:\n        return sums[0]\n    sums[1] = arr[1]\n    if sums[1] <= 0:\n        sums[1] = sums[0]\n    if n == 2:\n        return max(sums[0], sums[1])\n    sums[2] = arr[2]\n    if sums[2] <= 0:\n        sums[2] = max(sums[0], sums[1])\n    else:\n        sums[2] += sums[0]\n    for i in range(3, n):\n        temp = 0\n        if arr[i] > 0:\n            temp = max(sums[0], sums[1]) + arr[i]\n        else:\n            temp = max(sums)\n        sums = sums[1:] + [temp]\n    return max(sums)",
            "def sum_non_adjacent(arr):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    n = len(arr)\n    sums = [0, 0, 0]\n    if n == 0:\n        return 0\n    sums[0] = max(arr[0], 0)\n    if n == 1:\n        return sums[0]\n    sums[1] = arr[1]\n    if sums[1] <= 0:\n        sums[1] = sums[0]\n    if n == 2:\n        return max(sums[0], sums[1])\n    sums[2] = arr[2]\n    if sums[2] <= 0:\n        sums[2] = max(sums[0], sums[1])\n    else:\n        sums[2] += sums[0]\n    for i in range(3, n):\n        temp = 0\n        if arr[i] > 0:\n            temp = max(sums[0], sums[1]) + arr[i]\n        else:\n            temp = max(sums)\n        sums = sums[1:] + [temp]\n    return max(sums)"
        ]
    }
]
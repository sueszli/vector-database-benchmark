[
    {
        "func_name": "test_streaming_nested_categorical",
        "original": "def test_streaming_nested_categorical() -> None:\n    assert pl.LazyFrame({'numbers': [1, 1, 2], 'cat': [['str'], ['foo'], ['bar']]}).with_columns(pl.col('cat').cast(pl.List(pl.Categorical))).group_by('numbers').agg(pl.col('cat').first()).sort('numbers').collect(streaming=True).to_dict(as_series=False) == {'numbers': [1, 2], 'cat': [['str'], ['bar']]}",
        "mutated": [
            "def test_streaming_nested_categorical() -> None:\n    if False:\n        i = 10\n    assert pl.LazyFrame({'numbers': [1, 1, 2], 'cat': [['str'], ['foo'], ['bar']]}).with_columns(pl.col('cat').cast(pl.List(pl.Categorical))).group_by('numbers').agg(pl.col('cat').first()).sort('numbers').collect(streaming=True).to_dict(as_series=False) == {'numbers': [1, 2], 'cat': [['str'], ['bar']]}",
            "def test_streaming_nested_categorical() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    assert pl.LazyFrame({'numbers': [1, 1, 2], 'cat': [['str'], ['foo'], ['bar']]}).with_columns(pl.col('cat').cast(pl.List(pl.Categorical))).group_by('numbers').agg(pl.col('cat').first()).sort('numbers').collect(streaming=True).to_dict(as_series=False) == {'numbers': [1, 2], 'cat': [['str'], ['bar']]}",
            "def test_streaming_nested_categorical() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    assert pl.LazyFrame({'numbers': [1, 1, 2], 'cat': [['str'], ['foo'], ['bar']]}).with_columns(pl.col('cat').cast(pl.List(pl.Categorical))).group_by('numbers').agg(pl.col('cat').first()).sort('numbers').collect(streaming=True).to_dict(as_series=False) == {'numbers': [1, 2], 'cat': [['str'], ['bar']]}",
            "def test_streaming_nested_categorical() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    assert pl.LazyFrame({'numbers': [1, 1, 2], 'cat': [['str'], ['foo'], ['bar']]}).with_columns(pl.col('cat').cast(pl.List(pl.Categorical))).group_by('numbers').agg(pl.col('cat').first()).sort('numbers').collect(streaming=True).to_dict(as_series=False) == {'numbers': [1, 2], 'cat': [['str'], ['bar']]}",
            "def test_streaming_nested_categorical() -> None:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    assert pl.LazyFrame({'numbers': [1, 1, 2], 'cat': [['str'], ['foo'], ['bar']]}).with_columns(pl.col('cat').cast(pl.List(pl.Categorical))).group_by('numbers').agg(pl.col('cat').first()).sort('numbers').collect(streaming=True).to_dict(as_series=False) == {'numbers': [1, 2], 'cat': [['str'], ['bar']]}"
        ]
    }
]
[
    {
        "func_name": "read_and_save_data",
        "original": "def read_and_save_data(assets_dir, file_name, url_to_file, file_type='csv', to_numpy=False, include_index=True):\n    \"\"\"If the file exist reads it from the assets' directory, otherwise reads it from the url and saves it.\"\"\"\n    os.makedirs(assets_dir, exist_ok=True)\n    if (assets_dir / file_name).exists():\n        if file_type == 'csv':\n            data = pd.read_csv(assets_dir / file_name, index_col=0 if include_index else None)\n        elif file_type == 'npy':\n            data = np.load(assets_dir / file_name)\n        elif file_type == 'json':\n            with open(assets_dir / file_name, 'r', encoding='utf-8') as f:\n                data = json.load(f)\n        else:\n            raise ValueError('file_type must be either \"csv\" or \"npy\"')\n    elif file_type == 'csv':\n        data = pd.read_csv(url_to_file, index_col=0 if include_index else None)\n        data.to_csv(assets_dir / file_name)\n    elif file_type == 'npy':\n        data = np.load(BytesIO(requests.get(url_to_file).content))\n        np.save(assets_dir / file_name, data)\n    elif file_type == 'json':\n        data = json.loads(requests.get(url_to_file).content)\n        with open(assets_dir / file_name, 'w', encoding='utf-8') as f:\n            json.dump(data, f)\n    else:\n        raise ValueError('file_type must be either \"csv\" or \"npy\"')\n    if to_numpy and file_type in {'csv', 'npy'}:\n        if isinstance(data, pd.DataFrame):\n            data = data.to_numpy()\n        elif not isinstance(data, np.ndarray):\n            raise ValueError(f'Unknown data type - {type(data)}. Must be either pandas.DataFrame or numpy.ndarray')\n    elif to_numpy:\n        raise ValueError(f'Cannot convert {file_type} to numpy array')\n    return data",
        "mutated": [
            "def read_and_save_data(assets_dir, file_name, url_to_file, file_type='csv', to_numpy=False, include_index=True):\n    if False:\n        i = 10\n    \"If the file exist reads it from the assets' directory, otherwise reads it from the url and saves it.\"\n    os.makedirs(assets_dir, exist_ok=True)\n    if (assets_dir / file_name).exists():\n        if file_type == 'csv':\n            data = pd.read_csv(assets_dir / file_name, index_col=0 if include_index else None)\n        elif file_type == 'npy':\n            data = np.load(assets_dir / file_name)\n        elif file_type == 'json':\n            with open(assets_dir / file_name, 'r', encoding='utf-8') as f:\n                data = json.load(f)\n        else:\n            raise ValueError('file_type must be either \"csv\" or \"npy\"')\n    elif file_type == 'csv':\n        data = pd.read_csv(url_to_file, index_col=0 if include_index else None)\n        data.to_csv(assets_dir / file_name)\n    elif file_type == 'npy':\n        data = np.load(BytesIO(requests.get(url_to_file).content))\n        np.save(assets_dir / file_name, data)\n    elif file_type == 'json':\n        data = json.loads(requests.get(url_to_file).content)\n        with open(assets_dir / file_name, 'w', encoding='utf-8') as f:\n            json.dump(data, f)\n    else:\n        raise ValueError('file_type must be either \"csv\" or \"npy\"')\n    if to_numpy and file_type in {'csv', 'npy'}:\n        if isinstance(data, pd.DataFrame):\n            data = data.to_numpy()\n        elif not isinstance(data, np.ndarray):\n            raise ValueError(f'Unknown data type - {type(data)}. Must be either pandas.DataFrame or numpy.ndarray')\n    elif to_numpy:\n        raise ValueError(f'Cannot convert {file_type} to numpy array')\n    return data",
            "def read_and_save_data(assets_dir, file_name, url_to_file, file_type='csv', to_numpy=False, include_index=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"If the file exist reads it from the assets' directory, otherwise reads it from the url and saves it.\"\n    os.makedirs(assets_dir, exist_ok=True)\n    if (assets_dir / file_name).exists():\n        if file_type == 'csv':\n            data = pd.read_csv(assets_dir / file_name, index_col=0 if include_index else None)\n        elif file_type == 'npy':\n            data = np.load(assets_dir / file_name)\n        elif file_type == 'json':\n            with open(assets_dir / file_name, 'r', encoding='utf-8') as f:\n                data = json.load(f)\n        else:\n            raise ValueError('file_type must be either \"csv\" or \"npy\"')\n    elif file_type == 'csv':\n        data = pd.read_csv(url_to_file, index_col=0 if include_index else None)\n        data.to_csv(assets_dir / file_name)\n    elif file_type == 'npy':\n        data = np.load(BytesIO(requests.get(url_to_file).content))\n        np.save(assets_dir / file_name, data)\n    elif file_type == 'json':\n        data = json.loads(requests.get(url_to_file).content)\n        with open(assets_dir / file_name, 'w', encoding='utf-8') as f:\n            json.dump(data, f)\n    else:\n        raise ValueError('file_type must be either \"csv\" or \"npy\"')\n    if to_numpy and file_type in {'csv', 'npy'}:\n        if isinstance(data, pd.DataFrame):\n            data = data.to_numpy()\n        elif not isinstance(data, np.ndarray):\n            raise ValueError(f'Unknown data type - {type(data)}. Must be either pandas.DataFrame or numpy.ndarray')\n    elif to_numpy:\n        raise ValueError(f'Cannot convert {file_type} to numpy array')\n    return data",
            "def read_and_save_data(assets_dir, file_name, url_to_file, file_type='csv', to_numpy=False, include_index=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"If the file exist reads it from the assets' directory, otherwise reads it from the url and saves it.\"\n    os.makedirs(assets_dir, exist_ok=True)\n    if (assets_dir / file_name).exists():\n        if file_type == 'csv':\n            data = pd.read_csv(assets_dir / file_name, index_col=0 if include_index else None)\n        elif file_type == 'npy':\n            data = np.load(assets_dir / file_name)\n        elif file_type == 'json':\n            with open(assets_dir / file_name, 'r', encoding='utf-8') as f:\n                data = json.load(f)\n        else:\n            raise ValueError('file_type must be either \"csv\" or \"npy\"')\n    elif file_type == 'csv':\n        data = pd.read_csv(url_to_file, index_col=0 if include_index else None)\n        data.to_csv(assets_dir / file_name)\n    elif file_type == 'npy':\n        data = np.load(BytesIO(requests.get(url_to_file).content))\n        np.save(assets_dir / file_name, data)\n    elif file_type == 'json':\n        data = json.loads(requests.get(url_to_file).content)\n        with open(assets_dir / file_name, 'w', encoding='utf-8') as f:\n            json.dump(data, f)\n    else:\n        raise ValueError('file_type must be either \"csv\" or \"npy\"')\n    if to_numpy and file_type in {'csv', 'npy'}:\n        if isinstance(data, pd.DataFrame):\n            data = data.to_numpy()\n        elif not isinstance(data, np.ndarray):\n            raise ValueError(f'Unknown data type - {type(data)}. Must be either pandas.DataFrame or numpy.ndarray')\n    elif to_numpy:\n        raise ValueError(f'Cannot convert {file_type} to numpy array')\n    return data",
            "def read_and_save_data(assets_dir, file_name, url_to_file, file_type='csv', to_numpy=False, include_index=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"If the file exist reads it from the assets' directory, otherwise reads it from the url and saves it.\"\n    os.makedirs(assets_dir, exist_ok=True)\n    if (assets_dir / file_name).exists():\n        if file_type == 'csv':\n            data = pd.read_csv(assets_dir / file_name, index_col=0 if include_index else None)\n        elif file_type == 'npy':\n            data = np.load(assets_dir / file_name)\n        elif file_type == 'json':\n            with open(assets_dir / file_name, 'r', encoding='utf-8') as f:\n                data = json.load(f)\n        else:\n            raise ValueError('file_type must be either \"csv\" or \"npy\"')\n    elif file_type == 'csv':\n        data = pd.read_csv(url_to_file, index_col=0 if include_index else None)\n        data.to_csv(assets_dir / file_name)\n    elif file_type == 'npy':\n        data = np.load(BytesIO(requests.get(url_to_file).content))\n        np.save(assets_dir / file_name, data)\n    elif file_type == 'json':\n        data = json.loads(requests.get(url_to_file).content)\n        with open(assets_dir / file_name, 'w', encoding='utf-8') as f:\n            json.dump(data, f)\n    else:\n        raise ValueError('file_type must be either \"csv\" or \"npy\"')\n    if to_numpy and file_type in {'csv', 'npy'}:\n        if isinstance(data, pd.DataFrame):\n            data = data.to_numpy()\n        elif not isinstance(data, np.ndarray):\n            raise ValueError(f'Unknown data type - {type(data)}. Must be either pandas.DataFrame or numpy.ndarray')\n    elif to_numpy:\n        raise ValueError(f'Cannot convert {file_type} to numpy array')\n    return data",
            "def read_and_save_data(assets_dir, file_name, url_to_file, file_type='csv', to_numpy=False, include_index=True):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"If the file exist reads it from the assets' directory, otherwise reads it from the url and saves it.\"\n    os.makedirs(assets_dir, exist_ok=True)\n    if (assets_dir / file_name).exists():\n        if file_type == 'csv':\n            data = pd.read_csv(assets_dir / file_name, index_col=0 if include_index else None)\n        elif file_type == 'npy':\n            data = np.load(assets_dir / file_name)\n        elif file_type == 'json':\n            with open(assets_dir / file_name, 'r', encoding='utf-8') as f:\n                data = json.load(f)\n        else:\n            raise ValueError('file_type must be either \"csv\" or \"npy\"')\n    elif file_type == 'csv':\n        data = pd.read_csv(url_to_file, index_col=0 if include_index else None)\n        data.to_csv(assets_dir / file_name)\n    elif file_type == 'npy':\n        data = np.load(BytesIO(requests.get(url_to_file).content))\n        np.save(assets_dir / file_name, data)\n    elif file_type == 'json':\n        data = json.loads(requests.get(url_to_file).content)\n        with open(assets_dir / file_name, 'w', encoding='utf-8') as f:\n            json.dump(data, f)\n    else:\n        raise ValueError('file_type must be either \"csv\" or \"npy\"')\n    if to_numpy and file_type in {'csv', 'npy'}:\n        if isinstance(data, pd.DataFrame):\n            data = data.to_numpy()\n        elif not isinstance(data, np.ndarray):\n            raise ValueError(f'Unknown data type - {type(data)}. Must be either pandas.DataFrame or numpy.ndarray')\n    elif to_numpy:\n        raise ValueError(f'Cannot convert {file_type} to numpy array')\n    return data"
        ]
    }
]
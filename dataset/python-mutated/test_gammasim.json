[
    {
        "func_name": "test_gammasimp",
        "original": "def test_gammasimp():\n    R = Rational\n    assert gammasimp(gamma(x)) == gamma(x)\n    assert gammasimp(gamma(x + 1) / x) == gamma(x)\n    assert gammasimp(gamma(x) / (x - 1)) == gamma(x - 1)\n    assert gammasimp(x * gamma(x)) == gamma(x + 1)\n    assert gammasimp((x + 1) * gamma(x + 1)) == gamma(x + 2)\n    assert gammasimp(gamma(x + y) * (x + y)) == gamma(x + y + 1)\n    assert gammasimp(x / gamma(x + 1)) == 1 / gamma(x)\n    assert gammasimp((x + 1) ** 2 / gamma(x + 2)) == (x + 1) / gamma(x + 1)\n    assert gammasimp(x * gamma(x) + gamma(x + 3) / (x + 2)) == (x + 2) * gamma(x + 1)\n    assert gammasimp(gamma(2 * x) * x) == gamma(2 * x + 1) / 2\n    assert gammasimp(gamma(2 * x) / (x - S.Half)) == 2 * gamma(2 * x - 1)\n    assert gammasimp(gamma(x) * gamma(1 - x)) == pi / sin(pi * x)\n    assert gammasimp(gamma(x) * gamma(-x)) == -pi / (x * sin(pi * x))\n    assert gammasimp(1 / gamma(x + 3) / gamma(1 - x)) == sin(pi * x) / (pi * x * (x + 1) * (x + 2))\n    assert gammasimp(factorial(n + 2)) == gamma(n + 3)\n    assert gammasimp(binomial(n, k)) == gamma(n + 1) / (gamma(k + 1) * gamma(-k + n + 1))\n    assert powsimp(gammasimp(gamma(x) * gamma(x + S.Half) * gamma(y) / gamma(x + y))) == 2 ** (-2 * x + 1) * sqrt(pi) * gamma(2 * x) * gamma(y) / gamma(x + y)\n    assert gammasimp(1 / gamma(x) / gamma(x - Rational(1, 3)) / gamma(x + Rational(1, 3))) == 3 ** (3 * x - Rational(3, 2)) / (2 * pi * gamma(3 * x - 1))\n    assert simplify(gamma(S.Half + x / 2) * gamma(1 + x / 2) / gamma(1 + x) / sqrt(pi) * 2 ** x) == 1\n    assert gammasimp(gamma(Rational(-1, 4)) * gamma(Rational(-3, 4))) == 16 * sqrt(2) * pi / 3\n    assert powsimp(gammasimp(gamma(2 * x) / gamma(x))) == 2 ** (2 * x - 1) * gamma(x + S.Half) / sqrt(pi)\n    e = (-gamma(k) * gamma(k + 2) + gamma(k + 1) ** 2) / gamma(k) ** 2\n    assert gammasimp(e) == -k\n    assert gammasimp(1 / e) == -1 / k\n    e = (gamma(x) + gamma(x + 1)) / gamma(x)\n    assert gammasimp(e) == x + 1\n    assert gammasimp(1 / e) == 1 / (x + 1)\n    e = (gamma(x) + gamma(x + 2)) * (gamma(x - 1) + gamma(x)) / gamma(x)\n    assert gammasimp(e) == (x ** 2 + x + 1) * gamma(x + 1) / (x - 1)\n    e = (-gamma(k) * gamma(k + 2) + gamma(k + 1) ** 2) / gamma(k) ** 2\n    assert gammasimp(e ** 2) == k ** 2\n    assert gammasimp(e ** 2 / gamma(k + 1)) == k / gamma(k)\n    a = R(1, 2) + R(1, 3)\n    b = a + R(1, 3)\n    assert gammasimp(gamma(2 * k) / gamma(k) * gamma(k + a) * gamma(k + b)) == 3 * 2 ** (2 * k + 1) * 3 ** (-3 * k - 2) * sqrt(pi) * gamma(3 * k + R(3, 2)) / 2\n    assert gammasimp((x + 1) * factorial(x) / gamma(y)) == gamma(x + 2) / gamma(y)\n    assert gammasimp(rf(x + n, k) * binomial(n, k)).simplify() == Piecewise((gamma(n + 1) * gamma(k + n + x) / (gamma(k + 1) * gamma(n + x) * gamma(-k + n + 1)), n > -x), ((-1) ** k * gamma(n + 1) * gamma(-n - x + 1) / (gamma(k + 1) * gamma(-k + n + 1) * gamma(-k - n - x + 1)), True))\n    (A, B) = symbols('A B', commutative=False)\n    assert gammasimp(e * B * A) == gammasimp(e) * B * A\n    assert gammasimp(gamma(2 * k) / gamma(k) * gamma(-k - R(1, 2))) == -2 ** (2 * k + 1) * sqrt(pi) / (2 * ((2 * k + 1) * cos(pi * k)))\n    assert gammasimp(gamma(k) * gamma(k + R(1, 3)) * gamma(k + R(2, 3)) / gamma(k * R(3, 2))) == 3 * 2 ** (3 * k + 1) * 3 ** (-3 * k - S.Half) * sqrt(pi) * gamma(k * R(3, 2) + S.Half) / 2\n    assert gammasimp(gamma(Rational(1, 4)) / gamma(Rational(5, 4))) == 4\n    assert gammasimp(binomial(n + 2, k + S.Half)) == gamma(n + 3) / (gamma(k + R(3, 2)) * gamma(-k + n + R(5, 2)))\n    assert gammasimp(binomial(n + 2, k + 2.0)) == gamma(n + 3) / (gamma(k + 3.0) * gamma(-k + n + 1))\n    assert gammasimp(binomial(0, x)) == sin(pi * x) / (pi * x)\n    e = gamma(n + Rational(1, 3)) * gamma(n + R(2, 3))\n    assert gammasimp(e) == e\n    assert gammasimp(gamma(4 * n + S.Half) / gamma(2 * n - R(3, 4))) == 2 ** (4 * n - R(5, 2)) * (8 * n - 3) * gamma(2 * n + R(3, 4)) / sqrt(pi)\n    (i, m) = symbols('i m', integer=True)\n    e = gamma(exp(i))\n    assert gammasimp(e) == e\n    e = gamma(m + 3)\n    assert gammasimp(e) == e\n    e = gamma(m + 1) / (gamma(i + 1) * gamma(-i + m + 1))\n    assert gammasimp(e) == e\n    p = symbols('p', integer=True, positive=True)\n    assert gammasimp(gamma(-p + 4)) == gamma(-p + 4)",
        "mutated": [
            "def test_gammasimp():\n    if False:\n        i = 10\n    R = Rational\n    assert gammasimp(gamma(x)) == gamma(x)\n    assert gammasimp(gamma(x + 1) / x) == gamma(x)\n    assert gammasimp(gamma(x) / (x - 1)) == gamma(x - 1)\n    assert gammasimp(x * gamma(x)) == gamma(x + 1)\n    assert gammasimp((x + 1) * gamma(x + 1)) == gamma(x + 2)\n    assert gammasimp(gamma(x + y) * (x + y)) == gamma(x + y + 1)\n    assert gammasimp(x / gamma(x + 1)) == 1 / gamma(x)\n    assert gammasimp((x + 1) ** 2 / gamma(x + 2)) == (x + 1) / gamma(x + 1)\n    assert gammasimp(x * gamma(x) + gamma(x + 3) / (x + 2)) == (x + 2) * gamma(x + 1)\n    assert gammasimp(gamma(2 * x) * x) == gamma(2 * x + 1) / 2\n    assert gammasimp(gamma(2 * x) / (x - S.Half)) == 2 * gamma(2 * x - 1)\n    assert gammasimp(gamma(x) * gamma(1 - x)) == pi / sin(pi * x)\n    assert gammasimp(gamma(x) * gamma(-x)) == -pi / (x * sin(pi * x))\n    assert gammasimp(1 / gamma(x + 3) / gamma(1 - x)) == sin(pi * x) / (pi * x * (x + 1) * (x + 2))\n    assert gammasimp(factorial(n + 2)) == gamma(n + 3)\n    assert gammasimp(binomial(n, k)) == gamma(n + 1) / (gamma(k + 1) * gamma(-k + n + 1))\n    assert powsimp(gammasimp(gamma(x) * gamma(x + S.Half) * gamma(y) / gamma(x + y))) == 2 ** (-2 * x + 1) * sqrt(pi) * gamma(2 * x) * gamma(y) / gamma(x + y)\n    assert gammasimp(1 / gamma(x) / gamma(x - Rational(1, 3)) / gamma(x + Rational(1, 3))) == 3 ** (3 * x - Rational(3, 2)) / (2 * pi * gamma(3 * x - 1))\n    assert simplify(gamma(S.Half + x / 2) * gamma(1 + x / 2) / gamma(1 + x) / sqrt(pi) * 2 ** x) == 1\n    assert gammasimp(gamma(Rational(-1, 4)) * gamma(Rational(-3, 4))) == 16 * sqrt(2) * pi / 3\n    assert powsimp(gammasimp(gamma(2 * x) / gamma(x))) == 2 ** (2 * x - 1) * gamma(x + S.Half) / sqrt(pi)\n    e = (-gamma(k) * gamma(k + 2) + gamma(k + 1) ** 2) / gamma(k) ** 2\n    assert gammasimp(e) == -k\n    assert gammasimp(1 / e) == -1 / k\n    e = (gamma(x) + gamma(x + 1)) / gamma(x)\n    assert gammasimp(e) == x + 1\n    assert gammasimp(1 / e) == 1 / (x + 1)\n    e = (gamma(x) + gamma(x + 2)) * (gamma(x - 1) + gamma(x)) / gamma(x)\n    assert gammasimp(e) == (x ** 2 + x + 1) * gamma(x + 1) / (x - 1)\n    e = (-gamma(k) * gamma(k + 2) + gamma(k + 1) ** 2) / gamma(k) ** 2\n    assert gammasimp(e ** 2) == k ** 2\n    assert gammasimp(e ** 2 / gamma(k + 1)) == k / gamma(k)\n    a = R(1, 2) + R(1, 3)\n    b = a + R(1, 3)\n    assert gammasimp(gamma(2 * k) / gamma(k) * gamma(k + a) * gamma(k + b)) == 3 * 2 ** (2 * k + 1) * 3 ** (-3 * k - 2) * sqrt(pi) * gamma(3 * k + R(3, 2)) / 2\n    assert gammasimp((x + 1) * factorial(x) / gamma(y)) == gamma(x + 2) / gamma(y)\n    assert gammasimp(rf(x + n, k) * binomial(n, k)).simplify() == Piecewise((gamma(n + 1) * gamma(k + n + x) / (gamma(k + 1) * gamma(n + x) * gamma(-k + n + 1)), n > -x), ((-1) ** k * gamma(n + 1) * gamma(-n - x + 1) / (gamma(k + 1) * gamma(-k + n + 1) * gamma(-k - n - x + 1)), True))\n    (A, B) = symbols('A B', commutative=False)\n    assert gammasimp(e * B * A) == gammasimp(e) * B * A\n    assert gammasimp(gamma(2 * k) / gamma(k) * gamma(-k - R(1, 2))) == -2 ** (2 * k + 1) * sqrt(pi) / (2 * ((2 * k + 1) * cos(pi * k)))\n    assert gammasimp(gamma(k) * gamma(k + R(1, 3)) * gamma(k + R(2, 3)) / gamma(k * R(3, 2))) == 3 * 2 ** (3 * k + 1) * 3 ** (-3 * k - S.Half) * sqrt(pi) * gamma(k * R(3, 2) + S.Half) / 2\n    assert gammasimp(gamma(Rational(1, 4)) / gamma(Rational(5, 4))) == 4\n    assert gammasimp(binomial(n + 2, k + S.Half)) == gamma(n + 3) / (gamma(k + R(3, 2)) * gamma(-k + n + R(5, 2)))\n    assert gammasimp(binomial(n + 2, k + 2.0)) == gamma(n + 3) / (gamma(k + 3.0) * gamma(-k + n + 1))\n    assert gammasimp(binomial(0, x)) == sin(pi * x) / (pi * x)\n    e = gamma(n + Rational(1, 3)) * gamma(n + R(2, 3))\n    assert gammasimp(e) == e\n    assert gammasimp(gamma(4 * n + S.Half) / gamma(2 * n - R(3, 4))) == 2 ** (4 * n - R(5, 2)) * (8 * n - 3) * gamma(2 * n + R(3, 4)) / sqrt(pi)\n    (i, m) = symbols('i m', integer=True)\n    e = gamma(exp(i))\n    assert gammasimp(e) == e\n    e = gamma(m + 3)\n    assert gammasimp(e) == e\n    e = gamma(m + 1) / (gamma(i + 1) * gamma(-i + m + 1))\n    assert gammasimp(e) == e\n    p = symbols('p', integer=True, positive=True)\n    assert gammasimp(gamma(-p + 4)) == gamma(-p + 4)",
            "def test_gammasimp():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    R = Rational\n    assert gammasimp(gamma(x)) == gamma(x)\n    assert gammasimp(gamma(x + 1) / x) == gamma(x)\n    assert gammasimp(gamma(x) / (x - 1)) == gamma(x - 1)\n    assert gammasimp(x * gamma(x)) == gamma(x + 1)\n    assert gammasimp((x + 1) * gamma(x + 1)) == gamma(x + 2)\n    assert gammasimp(gamma(x + y) * (x + y)) == gamma(x + y + 1)\n    assert gammasimp(x / gamma(x + 1)) == 1 / gamma(x)\n    assert gammasimp((x + 1) ** 2 / gamma(x + 2)) == (x + 1) / gamma(x + 1)\n    assert gammasimp(x * gamma(x) + gamma(x + 3) / (x + 2)) == (x + 2) * gamma(x + 1)\n    assert gammasimp(gamma(2 * x) * x) == gamma(2 * x + 1) / 2\n    assert gammasimp(gamma(2 * x) / (x - S.Half)) == 2 * gamma(2 * x - 1)\n    assert gammasimp(gamma(x) * gamma(1 - x)) == pi / sin(pi * x)\n    assert gammasimp(gamma(x) * gamma(-x)) == -pi / (x * sin(pi * x))\n    assert gammasimp(1 / gamma(x + 3) / gamma(1 - x)) == sin(pi * x) / (pi * x * (x + 1) * (x + 2))\n    assert gammasimp(factorial(n + 2)) == gamma(n + 3)\n    assert gammasimp(binomial(n, k)) == gamma(n + 1) / (gamma(k + 1) * gamma(-k + n + 1))\n    assert powsimp(gammasimp(gamma(x) * gamma(x + S.Half) * gamma(y) / gamma(x + y))) == 2 ** (-2 * x + 1) * sqrt(pi) * gamma(2 * x) * gamma(y) / gamma(x + y)\n    assert gammasimp(1 / gamma(x) / gamma(x - Rational(1, 3)) / gamma(x + Rational(1, 3))) == 3 ** (3 * x - Rational(3, 2)) / (2 * pi * gamma(3 * x - 1))\n    assert simplify(gamma(S.Half + x / 2) * gamma(1 + x / 2) / gamma(1 + x) / sqrt(pi) * 2 ** x) == 1\n    assert gammasimp(gamma(Rational(-1, 4)) * gamma(Rational(-3, 4))) == 16 * sqrt(2) * pi / 3\n    assert powsimp(gammasimp(gamma(2 * x) / gamma(x))) == 2 ** (2 * x - 1) * gamma(x + S.Half) / sqrt(pi)\n    e = (-gamma(k) * gamma(k + 2) + gamma(k + 1) ** 2) / gamma(k) ** 2\n    assert gammasimp(e) == -k\n    assert gammasimp(1 / e) == -1 / k\n    e = (gamma(x) + gamma(x + 1)) / gamma(x)\n    assert gammasimp(e) == x + 1\n    assert gammasimp(1 / e) == 1 / (x + 1)\n    e = (gamma(x) + gamma(x + 2)) * (gamma(x - 1) + gamma(x)) / gamma(x)\n    assert gammasimp(e) == (x ** 2 + x + 1) * gamma(x + 1) / (x - 1)\n    e = (-gamma(k) * gamma(k + 2) + gamma(k + 1) ** 2) / gamma(k) ** 2\n    assert gammasimp(e ** 2) == k ** 2\n    assert gammasimp(e ** 2 / gamma(k + 1)) == k / gamma(k)\n    a = R(1, 2) + R(1, 3)\n    b = a + R(1, 3)\n    assert gammasimp(gamma(2 * k) / gamma(k) * gamma(k + a) * gamma(k + b)) == 3 * 2 ** (2 * k + 1) * 3 ** (-3 * k - 2) * sqrt(pi) * gamma(3 * k + R(3, 2)) / 2\n    assert gammasimp((x + 1) * factorial(x) / gamma(y)) == gamma(x + 2) / gamma(y)\n    assert gammasimp(rf(x + n, k) * binomial(n, k)).simplify() == Piecewise((gamma(n + 1) * gamma(k + n + x) / (gamma(k + 1) * gamma(n + x) * gamma(-k + n + 1)), n > -x), ((-1) ** k * gamma(n + 1) * gamma(-n - x + 1) / (gamma(k + 1) * gamma(-k + n + 1) * gamma(-k - n - x + 1)), True))\n    (A, B) = symbols('A B', commutative=False)\n    assert gammasimp(e * B * A) == gammasimp(e) * B * A\n    assert gammasimp(gamma(2 * k) / gamma(k) * gamma(-k - R(1, 2))) == -2 ** (2 * k + 1) * sqrt(pi) / (2 * ((2 * k + 1) * cos(pi * k)))\n    assert gammasimp(gamma(k) * gamma(k + R(1, 3)) * gamma(k + R(2, 3)) / gamma(k * R(3, 2))) == 3 * 2 ** (3 * k + 1) * 3 ** (-3 * k - S.Half) * sqrt(pi) * gamma(k * R(3, 2) + S.Half) / 2\n    assert gammasimp(gamma(Rational(1, 4)) / gamma(Rational(5, 4))) == 4\n    assert gammasimp(binomial(n + 2, k + S.Half)) == gamma(n + 3) / (gamma(k + R(3, 2)) * gamma(-k + n + R(5, 2)))\n    assert gammasimp(binomial(n + 2, k + 2.0)) == gamma(n + 3) / (gamma(k + 3.0) * gamma(-k + n + 1))\n    assert gammasimp(binomial(0, x)) == sin(pi * x) / (pi * x)\n    e = gamma(n + Rational(1, 3)) * gamma(n + R(2, 3))\n    assert gammasimp(e) == e\n    assert gammasimp(gamma(4 * n + S.Half) / gamma(2 * n - R(3, 4))) == 2 ** (4 * n - R(5, 2)) * (8 * n - 3) * gamma(2 * n + R(3, 4)) / sqrt(pi)\n    (i, m) = symbols('i m', integer=True)\n    e = gamma(exp(i))\n    assert gammasimp(e) == e\n    e = gamma(m + 3)\n    assert gammasimp(e) == e\n    e = gamma(m + 1) / (gamma(i + 1) * gamma(-i + m + 1))\n    assert gammasimp(e) == e\n    p = symbols('p', integer=True, positive=True)\n    assert gammasimp(gamma(-p + 4)) == gamma(-p + 4)",
            "def test_gammasimp():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    R = Rational\n    assert gammasimp(gamma(x)) == gamma(x)\n    assert gammasimp(gamma(x + 1) / x) == gamma(x)\n    assert gammasimp(gamma(x) / (x - 1)) == gamma(x - 1)\n    assert gammasimp(x * gamma(x)) == gamma(x + 1)\n    assert gammasimp((x + 1) * gamma(x + 1)) == gamma(x + 2)\n    assert gammasimp(gamma(x + y) * (x + y)) == gamma(x + y + 1)\n    assert gammasimp(x / gamma(x + 1)) == 1 / gamma(x)\n    assert gammasimp((x + 1) ** 2 / gamma(x + 2)) == (x + 1) / gamma(x + 1)\n    assert gammasimp(x * gamma(x) + gamma(x + 3) / (x + 2)) == (x + 2) * gamma(x + 1)\n    assert gammasimp(gamma(2 * x) * x) == gamma(2 * x + 1) / 2\n    assert gammasimp(gamma(2 * x) / (x - S.Half)) == 2 * gamma(2 * x - 1)\n    assert gammasimp(gamma(x) * gamma(1 - x)) == pi / sin(pi * x)\n    assert gammasimp(gamma(x) * gamma(-x)) == -pi / (x * sin(pi * x))\n    assert gammasimp(1 / gamma(x + 3) / gamma(1 - x)) == sin(pi * x) / (pi * x * (x + 1) * (x + 2))\n    assert gammasimp(factorial(n + 2)) == gamma(n + 3)\n    assert gammasimp(binomial(n, k)) == gamma(n + 1) / (gamma(k + 1) * gamma(-k + n + 1))\n    assert powsimp(gammasimp(gamma(x) * gamma(x + S.Half) * gamma(y) / gamma(x + y))) == 2 ** (-2 * x + 1) * sqrt(pi) * gamma(2 * x) * gamma(y) / gamma(x + y)\n    assert gammasimp(1 / gamma(x) / gamma(x - Rational(1, 3)) / gamma(x + Rational(1, 3))) == 3 ** (3 * x - Rational(3, 2)) / (2 * pi * gamma(3 * x - 1))\n    assert simplify(gamma(S.Half + x / 2) * gamma(1 + x / 2) / gamma(1 + x) / sqrt(pi) * 2 ** x) == 1\n    assert gammasimp(gamma(Rational(-1, 4)) * gamma(Rational(-3, 4))) == 16 * sqrt(2) * pi / 3\n    assert powsimp(gammasimp(gamma(2 * x) / gamma(x))) == 2 ** (2 * x - 1) * gamma(x + S.Half) / sqrt(pi)\n    e = (-gamma(k) * gamma(k + 2) + gamma(k + 1) ** 2) / gamma(k) ** 2\n    assert gammasimp(e) == -k\n    assert gammasimp(1 / e) == -1 / k\n    e = (gamma(x) + gamma(x + 1)) / gamma(x)\n    assert gammasimp(e) == x + 1\n    assert gammasimp(1 / e) == 1 / (x + 1)\n    e = (gamma(x) + gamma(x + 2)) * (gamma(x - 1) + gamma(x)) / gamma(x)\n    assert gammasimp(e) == (x ** 2 + x + 1) * gamma(x + 1) / (x - 1)\n    e = (-gamma(k) * gamma(k + 2) + gamma(k + 1) ** 2) / gamma(k) ** 2\n    assert gammasimp(e ** 2) == k ** 2\n    assert gammasimp(e ** 2 / gamma(k + 1)) == k / gamma(k)\n    a = R(1, 2) + R(1, 3)\n    b = a + R(1, 3)\n    assert gammasimp(gamma(2 * k) / gamma(k) * gamma(k + a) * gamma(k + b)) == 3 * 2 ** (2 * k + 1) * 3 ** (-3 * k - 2) * sqrt(pi) * gamma(3 * k + R(3, 2)) / 2\n    assert gammasimp((x + 1) * factorial(x) / gamma(y)) == gamma(x + 2) / gamma(y)\n    assert gammasimp(rf(x + n, k) * binomial(n, k)).simplify() == Piecewise((gamma(n + 1) * gamma(k + n + x) / (gamma(k + 1) * gamma(n + x) * gamma(-k + n + 1)), n > -x), ((-1) ** k * gamma(n + 1) * gamma(-n - x + 1) / (gamma(k + 1) * gamma(-k + n + 1) * gamma(-k - n - x + 1)), True))\n    (A, B) = symbols('A B', commutative=False)\n    assert gammasimp(e * B * A) == gammasimp(e) * B * A\n    assert gammasimp(gamma(2 * k) / gamma(k) * gamma(-k - R(1, 2))) == -2 ** (2 * k + 1) * sqrt(pi) / (2 * ((2 * k + 1) * cos(pi * k)))\n    assert gammasimp(gamma(k) * gamma(k + R(1, 3)) * gamma(k + R(2, 3)) / gamma(k * R(3, 2))) == 3 * 2 ** (3 * k + 1) * 3 ** (-3 * k - S.Half) * sqrt(pi) * gamma(k * R(3, 2) + S.Half) / 2\n    assert gammasimp(gamma(Rational(1, 4)) / gamma(Rational(5, 4))) == 4\n    assert gammasimp(binomial(n + 2, k + S.Half)) == gamma(n + 3) / (gamma(k + R(3, 2)) * gamma(-k + n + R(5, 2)))\n    assert gammasimp(binomial(n + 2, k + 2.0)) == gamma(n + 3) / (gamma(k + 3.0) * gamma(-k + n + 1))\n    assert gammasimp(binomial(0, x)) == sin(pi * x) / (pi * x)\n    e = gamma(n + Rational(1, 3)) * gamma(n + R(2, 3))\n    assert gammasimp(e) == e\n    assert gammasimp(gamma(4 * n + S.Half) / gamma(2 * n - R(3, 4))) == 2 ** (4 * n - R(5, 2)) * (8 * n - 3) * gamma(2 * n + R(3, 4)) / sqrt(pi)\n    (i, m) = symbols('i m', integer=True)\n    e = gamma(exp(i))\n    assert gammasimp(e) == e\n    e = gamma(m + 3)\n    assert gammasimp(e) == e\n    e = gamma(m + 1) / (gamma(i + 1) * gamma(-i + m + 1))\n    assert gammasimp(e) == e\n    p = symbols('p', integer=True, positive=True)\n    assert gammasimp(gamma(-p + 4)) == gamma(-p + 4)",
            "def test_gammasimp():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    R = Rational\n    assert gammasimp(gamma(x)) == gamma(x)\n    assert gammasimp(gamma(x + 1) / x) == gamma(x)\n    assert gammasimp(gamma(x) / (x - 1)) == gamma(x - 1)\n    assert gammasimp(x * gamma(x)) == gamma(x + 1)\n    assert gammasimp((x + 1) * gamma(x + 1)) == gamma(x + 2)\n    assert gammasimp(gamma(x + y) * (x + y)) == gamma(x + y + 1)\n    assert gammasimp(x / gamma(x + 1)) == 1 / gamma(x)\n    assert gammasimp((x + 1) ** 2 / gamma(x + 2)) == (x + 1) / gamma(x + 1)\n    assert gammasimp(x * gamma(x) + gamma(x + 3) / (x + 2)) == (x + 2) * gamma(x + 1)\n    assert gammasimp(gamma(2 * x) * x) == gamma(2 * x + 1) / 2\n    assert gammasimp(gamma(2 * x) / (x - S.Half)) == 2 * gamma(2 * x - 1)\n    assert gammasimp(gamma(x) * gamma(1 - x)) == pi / sin(pi * x)\n    assert gammasimp(gamma(x) * gamma(-x)) == -pi / (x * sin(pi * x))\n    assert gammasimp(1 / gamma(x + 3) / gamma(1 - x)) == sin(pi * x) / (pi * x * (x + 1) * (x + 2))\n    assert gammasimp(factorial(n + 2)) == gamma(n + 3)\n    assert gammasimp(binomial(n, k)) == gamma(n + 1) / (gamma(k + 1) * gamma(-k + n + 1))\n    assert powsimp(gammasimp(gamma(x) * gamma(x + S.Half) * gamma(y) / gamma(x + y))) == 2 ** (-2 * x + 1) * sqrt(pi) * gamma(2 * x) * gamma(y) / gamma(x + y)\n    assert gammasimp(1 / gamma(x) / gamma(x - Rational(1, 3)) / gamma(x + Rational(1, 3))) == 3 ** (3 * x - Rational(3, 2)) / (2 * pi * gamma(3 * x - 1))\n    assert simplify(gamma(S.Half + x / 2) * gamma(1 + x / 2) / gamma(1 + x) / sqrt(pi) * 2 ** x) == 1\n    assert gammasimp(gamma(Rational(-1, 4)) * gamma(Rational(-3, 4))) == 16 * sqrt(2) * pi / 3\n    assert powsimp(gammasimp(gamma(2 * x) / gamma(x))) == 2 ** (2 * x - 1) * gamma(x + S.Half) / sqrt(pi)\n    e = (-gamma(k) * gamma(k + 2) + gamma(k + 1) ** 2) / gamma(k) ** 2\n    assert gammasimp(e) == -k\n    assert gammasimp(1 / e) == -1 / k\n    e = (gamma(x) + gamma(x + 1)) / gamma(x)\n    assert gammasimp(e) == x + 1\n    assert gammasimp(1 / e) == 1 / (x + 1)\n    e = (gamma(x) + gamma(x + 2)) * (gamma(x - 1) + gamma(x)) / gamma(x)\n    assert gammasimp(e) == (x ** 2 + x + 1) * gamma(x + 1) / (x - 1)\n    e = (-gamma(k) * gamma(k + 2) + gamma(k + 1) ** 2) / gamma(k) ** 2\n    assert gammasimp(e ** 2) == k ** 2\n    assert gammasimp(e ** 2 / gamma(k + 1)) == k / gamma(k)\n    a = R(1, 2) + R(1, 3)\n    b = a + R(1, 3)\n    assert gammasimp(gamma(2 * k) / gamma(k) * gamma(k + a) * gamma(k + b)) == 3 * 2 ** (2 * k + 1) * 3 ** (-3 * k - 2) * sqrt(pi) * gamma(3 * k + R(3, 2)) / 2\n    assert gammasimp((x + 1) * factorial(x) / gamma(y)) == gamma(x + 2) / gamma(y)\n    assert gammasimp(rf(x + n, k) * binomial(n, k)).simplify() == Piecewise((gamma(n + 1) * gamma(k + n + x) / (gamma(k + 1) * gamma(n + x) * gamma(-k + n + 1)), n > -x), ((-1) ** k * gamma(n + 1) * gamma(-n - x + 1) / (gamma(k + 1) * gamma(-k + n + 1) * gamma(-k - n - x + 1)), True))\n    (A, B) = symbols('A B', commutative=False)\n    assert gammasimp(e * B * A) == gammasimp(e) * B * A\n    assert gammasimp(gamma(2 * k) / gamma(k) * gamma(-k - R(1, 2))) == -2 ** (2 * k + 1) * sqrt(pi) / (2 * ((2 * k + 1) * cos(pi * k)))\n    assert gammasimp(gamma(k) * gamma(k + R(1, 3)) * gamma(k + R(2, 3)) / gamma(k * R(3, 2))) == 3 * 2 ** (3 * k + 1) * 3 ** (-3 * k - S.Half) * sqrt(pi) * gamma(k * R(3, 2) + S.Half) / 2\n    assert gammasimp(gamma(Rational(1, 4)) / gamma(Rational(5, 4))) == 4\n    assert gammasimp(binomial(n + 2, k + S.Half)) == gamma(n + 3) / (gamma(k + R(3, 2)) * gamma(-k + n + R(5, 2)))\n    assert gammasimp(binomial(n + 2, k + 2.0)) == gamma(n + 3) / (gamma(k + 3.0) * gamma(-k + n + 1))\n    assert gammasimp(binomial(0, x)) == sin(pi * x) / (pi * x)\n    e = gamma(n + Rational(1, 3)) * gamma(n + R(2, 3))\n    assert gammasimp(e) == e\n    assert gammasimp(gamma(4 * n + S.Half) / gamma(2 * n - R(3, 4))) == 2 ** (4 * n - R(5, 2)) * (8 * n - 3) * gamma(2 * n + R(3, 4)) / sqrt(pi)\n    (i, m) = symbols('i m', integer=True)\n    e = gamma(exp(i))\n    assert gammasimp(e) == e\n    e = gamma(m + 3)\n    assert gammasimp(e) == e\n    e = gamma(m + 1) / (gamma(i + 1) * gamma(-i + m + 1))\n    assert gammasimp(e) == e\n    p = symbols('p', integer=True, positive=True)\n    assert gammasimp(gamma(-p + 4)) == gamma(-p + 4)",
            "def test_gammasimp():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    R = Rational\n    assert gammasimp(gamma(x)) == gamma(x)\n    assert gammasimp(gamma(x + 1) / x) == gamma(x)\n    assert gammasimp(gamma(x) / (x - 1)) == gamma(x - 1)\n    assert gammasimp(x * gamma(x)) == gamma(x + 1)\n    assert gammasimp((x + 1) * gamma(x + 1)) == gamma(x + 2)\n    assert gammasimp(gamma(x + y) * (x + y)) == gamma(x + y + 1)\n    assert gammasimp(x / gamma(x + 1)) == 1 / gamma(x)\n    assert gammasimp((x + 1) ** 2 / gamma(x + 2)) == (x + 1) / gamma(x + 1)\n    assert gammasimp(x * gamma(x) + gamma(x + 3) / (x + 2)) == (x + 2) * gamma(x + 1)\n    assert gammasimp(gamma(2 * x) * x) == gamma(2 * x + 1) / 2\n    assert gammasimp(gamma(2 * x) / (x - S.Half)) == 2 * gamma(2 * x - 1)\n    assert gammasimp(gamma(x) * gamma(1 - x)) == pi / sin(pi * x)\n    assert gammasimp(gamma(x) * gamma(-x)) == -pi / (x * sin(pi * x))\n    assert gammasimp(1 / gamma(x + 3) / gamma(1 - x)) == sin(pi * x) / (pi * x * (x + 1) * (x + 2))\n    assert gammasimp(factorial(n + 2)) == gamma(n + 3)\n    assert gammasimp(binomial(n, k)) == gamma(n + 1) / (gamma(k + 1) * gamma(-k + n + 1))\n    assert powsimp(gammasimp(gamma(x) * gamma(x + S.Half) * gamma(y) / gamma(x + y))) == 2 ** (-2 * x + 1) * sqrt(pi) * gamma(2 * x) * gamma(y) / gamma(x + y)\n    assert gammasimp(1 / gamma(x) / gamma(x - Rational(1, 3)) / gamma(x + Rational(1, 3))) == 3 ** (3 * x - Rational(3, 2)) / (2 * pi * gamma(3 * x - 1))\n    assert simplify(gamma(S.Half + x / 2) * gamma(1 + x / 2) / gamma(1 + x) / sqrt(pi) * 2 ** x) == 1\n    assert gammasimp(gamma(Rational(-1, 4)) * gamma(Rational(-3, 4))) == 16 * sqrt(2) * pi / 3\n    assert powsimp(gammasimp(gamma(2 * x) / gamma(x))) == 2 ** (2 * x - 1) * gamma(x + S.Half) / sqrt(pi)\n    e = (-gamma(k) * gamma(k + 2) + gamma(k + 1) ** 2) / gamma(k) ** 2\n    assert gammasimp(e) == -k\n    assert gammasimp(1 / e) == -1 / k\n    e = (gamma(x) + gamma(x + 1)) / gamma(x)\n    assert gammasimp(e) == x + 1\n    assert gammasimp(1 / e) == 1 / (x + 1)\n    e = (gamma(x) + gamma(x + 2)) * (gamma(x - 1) + gamma(x)) / gamma(x)\n    assert gammasimp(e) == (x ** 2 + x + 1) * gamma(x + 1) / (x - 1)\n    e = (-gamma(k) * gamma(k + 2) + gamma(k + 1) ** 2) / gamma(k) ** 2\n    assert gammasimp(e ** 2) == k ** 2\n    assert gammasimp(e ** 2 / gamma(k + 1)) == k / gamma(k)\n    a = R(1, 2) + R(1, 3)\n    b = a + R(1, 3)\n    assert gammasimp(gamma(2 * k) / gamma(k) * gamma(k + a) * gamma(k + b)) == 3 * 2 ** (2 * k + 1) * 3 ** (-3 * k - 2) * sqrt(pi) * gamma(3 * k + R(3, 2)) / 2\n    assert gammasimp((x + 1) * factorial(x) / gamma(y)) == gamma(x + 2) / gamma(y)\n    assert gammasimp(rf(x + n, k) * binomial(n, k)).simplify() == Piecewise((gamma(n + 1) * gamma(k + n + x) / (gamma(k + 1) * gamma(n + x) * gamma(-k + n + 1)), n > -x), ((-1) ** k * gamma(n + 1) * gamma(-n - x + 1) / (gamma(k + 1) * gamma(-k + n + 1) * gamma(-k - n - x + 1)), True))\n    (A, B) = symbols('A B', commutative=False)\n    assert gammasimp(e * B * A) == gammasimp(e) * B * A\n    assert gammasimp(gamma(2 * k) / gamma(k) * gamma(-k - R(1, 2))) == -2 ** (2 * k + 1) * sqrt(pi) / (2 * ((2 * k + 1) * cos(pi * k)))\n    assert gammasimp(gamma(k) * gamma(k + R(1, 3)) * gamma(k + R(2, 3)) / gamma(k * R(3, 2))) == 3 * 2 ** (3 * k + 1) * 3 ** (-3 * k - S.Half) * sqrt(pi) * gamma(k * R(3, 2) + S.Half) / 2\n    assert gammasimp(gamma(Rational(1, 4)) / gamma(Rational(5, 4))) == 4\n    assert gammasimp(binomial(n + 2, k + S.Half)) == gamma(n + 3) / (gamma(k + R(3, 2)) * gamma(-k + n + R(5, 2)))\n    assert gammasimp(binomial(n + 2, k + 2.0)) == gamma(n + 3) / (gamma(k + 3.0) * gamma(-k + n + 1))\n    assert gammasimp(binomial(0, x)) == sin(pi * x) / (pi * x)\n    e = gamma(n + Rational(1, 3)) * gamma(n + R(2, 3))\n    assert gammasimp(e) == e\n    assert gammasimp(gamma(4 * n + S.Half) / gamma(2 * n - R(3, 4))) == 2 ** (4 * n - R(5, 2)) * (8 * n - 3) * gamma(2 * n + R(3, 4)) / sqrt(pi)\n    (i, m) = symbols('i m', integer=True)\n    e = gamma(exp(i))\n    assert gammasimp(e) == e\n    e = gamma(m + 3)\n    assert gammasimp(e) == e\n    e = gamma(m + 1) / (gamma(i + 1) * gamma(-i + m + 1))\n    assert gammasimp(e) == e\n    p = symbols('p', integer=True, positive=True)\n    assert gammasimp(gamma(-p + 4)) == gamma(-p + 4)"
        ]
    },
    {
        "func_name": "test_issue_22606",
        "original": "def test_issue_22606():\n    fx = Function('f')(x)\n    eq = x + gamma(y)\n    ans = gammasimp(eq)\n    assert gammasimp(eq.subs(x, fx)).subs(fx, x) == ans\n    assert gammasimp(eq.subs(x, cos(x))).subs(cos(x), x) == ans\n    assert 1 / gammasimp(1 / eq) == ans\n    assert gammasimp(fx.subs(x, eq)).args[0] == ans",
        "mutated": [
            "def test_issue_22606():\n    if False:\n        i = 10\n    fx = Function('f')(x)\n    eq = x + gamma(y)\n    ans = gammasimp(eq)\n    assert gammasimp(eq.subs(x, fx)).subs(fx, x) == ans\n    assert gammasimp(eq.subs(x, cos(x))).subs(cos(x), x) == ans\n    assert 1 / gammasimp(1 / eq) == ans\n    assert gammasimp(fx.subs(x, eq)).args[0] == ans",
            "def test_issue_22606():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    fx = Function('f')(x)\n    eq = x + gamma(y)\n    ans = gammasimp(eq)\n    assert gammasimp(eq.subs(x, fx)).subs(fx, x) == ans\n    assert gammasimp(eq.subs(x, cos(x))).subs(cos(x), x) == ans\n    assert 1 / gammasimp(1 / eq) == ans\n    assert gammasimp(fx.subs(x, eq)).args[0] == ans",
            "def test_issue_22606():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    fx = Function('f')(x)\n    eq = x + gamma(y)\n    ans = gammasimp(eq)\n    assert gammasimp(eq.subs(x, fx)).subs(fx, x) == ans\n    assert gammasimp(eq.subs(x, cos(x))).subs(cos(x), x) == ans\n    assert 1 / gammasimp(1 / eq) == ans\n    assert gammasimp(fx.subs(x, eq)).args[0] == ans",
            "def test_issue_22606():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    fx = Function('f')(x)\n    eq = x + gamma(y)\n    ans = gammasimp(eq)\n    assert gammasimp(eq.subs(x, fx)).subs(fx, x) == ans\n    assert gammasimp(eq.subs(x, cos(x))).subs(cos(x), x) == ans\n    assert 1 / gammasimp(1 / eq) == ans\n    assert gammasimp(fx.subs(x, eq)).args[0] == ans",
            "def test_issue_22606():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    fx = Function('f')(x)\n    eq = x + gamma(y)\n    ans = gammasimp(eq)\n    assert gammasimp(eq.subs(x, fx)).subs(fx, x) == ans\n    assert gammasimp(eq.subs(x, cos(x))).subs(cos(x), x) == ans\n    assert 1 / gammasimp(1 / eq) == ans\n    assert gammasimp(fx.subs(x, eq)).args[0] == ans"
        ]
    }
]
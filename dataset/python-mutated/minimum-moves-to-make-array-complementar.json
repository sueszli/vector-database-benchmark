[
    {
        "func_name": "minMoves",
        "original": "def minMoves(self, nums, limit):\n    \"\"\"\n        :type nums: List[int]\n        :type limit: int\n        :rtype: int\n        \"\"\"\n    diff = [0] * (2 * (limit + 1))\n    for i in xrange(len(nums) // 2):\n        (left, right) = (nums[i], nums[-1 - i])\n        diff[min(left, right) + 1] -= 1\n        diff[left + right] -= 1\n        diff[left + right + 1] += 1\n        diff[max(left, right) + limit + 1] += 1\n    result = count = len(nums)\n    for total in xrange(2, 2 * limit + 1):\n        count += diff[total]\n        result = min(result, count)\n    return result",
        "mutated": [
            "def minMoves(self, nums, limit):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :type limit: int\\n        :rtype: int\\n        '\n    diff = [0] * (2 * (limit + 1))\n    for i in xrange(len(nums) // 2):\n        (left, right) = (nums[i], nums[-1 - i])\n        diff[min(left, right) + 1] -= 1\n        diff[left + right] -= 1\n        diff[left + right + 1] += 1\n        diff[max(left, right) + limit + 1] += 1\n    result = count = len(nums)\n    for total in xrange(2, 2 * limit + 1):\n        count += diff[total]\n        result = min(result, count)\n    return result",
            "def minMoves(self, nums, limit):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :type limit: int\\n        :rtype: int\\n        '\n    diff = [0] * (2 * (limit + 1))\n    for i in xrange(len(nums) // 2):\n        (left, right) = (nums[i], nums[-1 - i])\n        diff[min(left, right) + 1] -= 1\n        diff[left + right] -= 1\n        diff[left + right + 1] += 1\n        diff[max(left, right) + limit + 1] += 1\n    result = count = len(nums)\n    for total in xrange(2, 2 * limit + 1):\n        count += diff[total]\n        result = min(result, count)\n    return result",
            "def minMoves(self, nums, limit):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :type limit: int\\n        :rtype: int\\n        '\n    diff = [0] * (2 * (limit + 1))\n    for i in xrange(len(nums) // 2):\n        (left, right) = (nums[i], nums[-1 - i])\n        diff[min(left, right) + 1] -= 1\n        diff[left + right] -= 1\n        diff[left + right + 1] += 1\n        diff[max(left, right) + limit + 1] += 1\n    result = count = len(nums)\n    for total in xrange(2, 2 * limit + 1):\n        count += diff[total]\n        result = min(result, count)\n    return result",
            "def minMoves(self, nums, limit):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :type limit: int\\n        :rtype: int\\n        '\n    diff = [0] * (2 * (limit + 1))\n    for i in xrange(len(nums) // 2):\n        (left, right) = (nums[i], nums[-1 - i])\n        diff[min(left, right) + 1] -= 1\n        diff[left + right] -= 1\n        diff[left + right + 1] += 1\n        diff[max(left, right) + limit + 1] += 1\n    result = count = len(nums)\n    for total in xrange(2, 2 * limit + 1):\n        count += diff[total]\n        result = min(result, count)\n    return result",
            "def minMoves(self, nums, limit):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :type limit: int\\n        :rtype: int\\n        '\n    diff = [0] * (2 * (limit + 1))\n    for i in xrange(len(nums) // 2):\n        (left, right) = (nums[i], nums[-1 - i])\n        diff[min(left, right) + 1] -= 1\n        diff[left + right] -= 1\n        diff[left + right + 1] += 1\n        diff[max(left, right) + limit + 1] += 1\n    result = count = len(nums)\n    for total in xrange(2, 2 * limit + 1):\n        count += diff[total]\n        result = min(result, count)\n    return result"
        ]
    }
]
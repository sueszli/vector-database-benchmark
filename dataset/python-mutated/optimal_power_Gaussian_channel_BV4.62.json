[
    {
        "func_name": "optimal_power",
        "original": "def optimal_power(n, a_val, b_val, P_tot: float=1.0, W_tot: float=1.0):\n    \"\"\"\nBoyd and Vandenberghe, Convex Optimization, exercise 4.62 page 210\nOptimal power and bandwidth allocation in a Gaussian broadcast channel.\n\nWe consider a communication system in which a central node transmits messages\nto n receivers. Each receiver channel is characterized by its (transmit) power\nlevel Pi \u2265 0 and its bandwidth Wi \u2265 0. The power and bandwidth of a receiver\nchannel determine its bit rate Ri (the rate at which information can be sent)\nvia\n   Ri=\u03b1iWi log(1 + \u03b2iPi/Wi),\nwhere \u03b1i and \u03b2i are known positive constants. For Wi=0, we take Ri=0 (which\nis what you get if you take the limit as Wi \u2192 0).  The powers must satisfy a\ntotal power constraint, which has the form\nP1 + \u00b7 \u00b7 \u00b7 + Pn = Ptot,\nwhere Ptot > 0 is a given total power available to allocate among the channels.\nSimilarly, the bandwidths must satisfy\nW1 + \u00b7 \u00b7 \u00b7 +Wn = Wtot,\nwhere Wtot > 0 is the (given) total available bandwidth. The optimization\nvariables in this problem are the powers and bandwidths, i.e.,\nP1, . . . , Pn, W1, . . . ,Wn.\nThe objective is to maximize the total utility, sum(ui(Ri),i=1..n)\nwhere ui: R \u2192 R is the utility function associated with the ith receiver.\n  \"\"\"\n    n = len(a_val)\n    if n != len(b_val):\n        print('alpha and beta vectors must have same length!')\n        return ('failed', np.nan, np.nan, np.nan)\n    P = cvx.Variable(n)\n    W = cvx.Variable(n)\n    alpha = cvx.Parameter(n)\n    beta = cvx.Parameter(n)\n    alpha.value = np.array(a_val)\n    beta.value = np.array(b_val)\n    R = cvx.kl_div(cvx.multiply(alpha, W), cvx.multiply(alpha, W + cvx.multiply(beta, P))) - cvx.multiply(alpha, cvx.multiply(beta, P))\n    objective = cvx.Minimize(cvx.sum(R))\n    constraints = [P >= 0.0, W >= 0.0, cvx.sum(P) - P_tot == 0.0, cvx.sum(W) - W_tot == 0.0]\n    prob = cvx.Problem(objective, constraints)\n    prob.solve()\n    return (prob.status, -prob.value, P.value, W.value)",
        "mutated": [
            "def optimal_power(n, a_val, b_val, P_tot: float=1.0, W_tot: float=1.0):\n    if False:\n        i = 10\n    '\\nBoyd and Vandenberghe, Convex Optimization, exercise 4.62 page 210\\nOptimal power and bandwidth allocation in a Gaussian broadcast channel.\\n\\nWe consider a communication system in which a central node transmits messages\\nto n receivers. Each receiver channel is characterized by its (transmit) power\\nlevel Pi \u2265 0 and its bandwidth Wi \u2265 0. The power and bandwidth of a receiver\\nchannel determine its bit rate Ri (the rate at which information can be sent)\\nvia\\n   Ri=\u03b1iWi log(1 + \u03b2iPi/Wi),\\nwhere \u03b1i and \u03b2i are known positive constants. For Wi=0, we take Ri=0 (which\\nis what you get if you take the limit as Wi \u2192 0).  The powers must satisfy a\\ntotal power constraint, which has the form\\nP1 + \u00b7 \u00b7 \u00b7 + Pn = Ptot,\\nwhere Ptot > 0 is a given total power available to allocate among the channels.\\nSimilarly, the bandwidths must satisfy\\nW1 + \u00b7 \u00b7 \u00b7 +Wn = Wtot,\\nwhere Wtot > 0 is the (given) total available bandwidth. The optimization\\nvariables in this problem are the powers and bandwidths, i.e.,\\nP1, . . . , Pn, W1, . . . ,Wn.\\nThe objective is to maximize the total utility, sum(ui(Ri),i=1..n)\\nwhere ui: R \u2192 R is the utility function associated with the ith receiver.\\n  '\n    n = len(a_val)\n    if n != len(b_val):\n        print('alpha and beta vectors must have same length!')\n        return ('failed', np.nan, np.nan, np.nan)\n    P = cvx.Variable(n)\n    W = cvx.Variable(n)\n    alpha = cvx.Parameter(n)\n    beta = cvx.Parameter(n)\n    alpha.value = np.array(a_val)\n    beta.value = np.array(b_val)\n    R = cvx.kl_div(cvx.multiply(alpha, W), cvx.multiply(alpha, W + cvx.multiply(beta, P))) - cvx.multiply(alpha, cvx.multiply(beta, P))\n    objective = cvx.Minimize(cvx.sum(R))\n    constraints = [P >= 0.0, W >= 0.0, cvx.sum(P) - P_tot == 0.0, cvx.sum(W) - W_tot == 0.0]\n    prob = cvx.Problem(objective, constraints)\n    prob.solve()\n    return (prob.status, -prob.value, P.value, W.value)",
            "def optimal_power(n, a_val, b_val, P_tot: float=1.0, W_tot: float=1.0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\nBoyd and Vandenberghe, Convex Optimization, exercise 4.62 page 210\\nOptimal power and bandwidth allocation in a Gaussian broadcast channel.\\n\\nWe consider a communication system in which a central node transmits messages\\nto n receivers. Each receiver channel is characterized by its (transmit) power\\nlevel Pi \u2265 0 and its bandwidth Wi \u2265 0. The power and bandwidth of a receiver\\nchannel determine its bit rate Ri (the rate at which information can be sent)\\nvia\\n   Ri=\u03b1iWi log(1 + \u03b2iPi/Wi),\\nwhere \u03b1i and \u03b2i are known positive constants. For Wi=0, we take Ri=0 (which\\nis what you get if you take the limit as Wi \u2192 0).  The powers must satisfy a\\ntotal power constraint, which has the form\\nP1 + \u00b7 \u00b7 \u00b7 + Pn = Ptot,\\nwhere Ptot > 0 is a given total power available to allocate among the channels.\\nSimilarly, the bandwidths must satisfy\\nW1 + \u00b7 \u00b7 \u00b7 +Wn = Wtot,\\nwhere Wtot > 0 is the (given) total available bandwidth. The optimization\\nvariables in this problem are the powers and bandwidths, i.e.,\\nP1, . . . , Pn, W1, . . . ,Wn.\\nThe objective is to maximize the total utility, sum(ui(Ri),i=1..n)\\nwhere ui: R \u2192 R is the utility function associated with the ith receiver.\\n  '\n    n = len(a_val)\n    if n != len(b_val):\n        print('alpha and beta vectors must have same length!')\n        return ('failed', np.nan, np.nan, np.nan)\n    P = cvx.Variable(n)\n    W = cvx.Variable(n)\n    alpha = cvx.Parameter(n)\n    beta = cvx.Parameter(n)\n    alpha.value = np.array(a_val)\n    beta.value = np.array(b_val)\n    R = cvx.kl_div(cvx.multiply(alpha, W), cvx.multiply(alpha, W + cvx.multiply(beta, P))) - cvx.multiply(alpha, cvx.multiply(beta, P))\n    objective = cvx.Minimize(cvx.sum(R))\n    constraints = [P >= 0.0, W >= 0.0, cvx.sum(P) - P_tot == 0.0, cvx.sum(W) - W_tot == 0.0]\n    prob = cvx.Problem(objective, constraints)\n    prob.solve()\n    return (prob.status, -prob.value, P.value, W.value)",
            "def optimal_power(n, a_val, b_val, P_tot: float=1.0, W_tot: float=1.0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\nBoyd and Vandenberghe, Convex Optimization, exercise 4.62 page 210\\nOptimal power and bandwidth allocation in a Gaussian broadcast channel.\\n\\nWe consider a communication system in which a central node transmits messages\\nto n receivers. Each receiver channel is characterized by its (transmit) power\\nlevel Pi \u2265 0 and its bandwidth Wi \u2265 0. The power and bandwidth of a receiver\\nchannel determine its bit rate Ri (the rate at which information can be sent)\\nvia\\n   Ri=\u03b1iWi log(1 + \u03b2iPi/Wi),\\nwhere \u03b1i and \u03b2i are known positive constants. For Wi=0, we take Ri=0 (which\\nis what you get if you take the limit as Wi \u2192 0).  The powers must satisfy a\\ntotal power constraint, which has the form\\nP1 + \u00b7 \u00b7 \u00b7 + Pn = Ptot,\\nwhere Ptot > 0 is a given total power available to allocate among the channels.\\nSimilarly, the bandwidths must satisfy\\nW1 + \u00b7 \u00b7 \u00b7 +Wn = Wtot,\\nwhere Wtot > 0 is the (given) total available bandwidth. The optimization\\nvariables in this problem are the powers and bandwidths, i.e.,\\nP1, . . . , Pn, W1, . . . ,Wn.\\nThe objective is to maximize the total utility, sum(ui(Ri),i=1..n)\\nwhere ui: R \u2192 R is the utility function associated with the ith receiver.\\n  '\n    n = len(a_val)\n    if n != len(b_val):\n        print('alpha and beta vectors must have same length!')\n        return ('failed', np.nan, np.nan, np.nan)\n    P = cvx.Variable(n)\n    W = cvx.Variable(n)\n    alpha = cvx.Parameter(n)\n    beta = cvx.Parameter(n)\n    alpha.value = np.array(a_val)\n    beta.value = np.array(b_val)\n    R = cvx.kl_div(cvx.multiply(alpha, W), cvx.multiply(alpha, W + cvx.multiply(beta, P))) - cvx.multiply(alpha, cvx.multiply(beta, P))\n    objective = cvx.Minimize(cvx.sum(R))\n    constraints = [P >= 0.0, W >= 0.0, cvx.sum(P) - P_tot == 0.0, cvx.sum(W) - W_tot == 0.0]\n    prob = cvx.Problem(objective, constraints)\n    prob.solve()\n    return (prob.status, -prob.value, P.value, W.value)",
            "def optimal_power(n, a_val, b_val, P_tot: float=1.0, W_tot: float=1.0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\nBoyd and Vandenberghe, Convex Optimization, exercise 4.62 page 210\\nOptimal power and bandwidth allocation in a Gaussian broadcast channel.\\n\\nWe consider a communication system in which a central node transmits messages\\nto n receivers. Each receiver channel is characterized by its (transmit) power\\nlevel Pi \u2265 0 and its bandwidth Wi \u2265 0. The power and bandwidth of a receiver\\nchannel determine its bit rate Ri (the rate at which information can be sent)\\nvia\\n   Ri=\u03b1iWi log(1 + \u03b2iPi/Wi),\\nwhere \u03b1i and \u03b2i are known positive constants. For Wi=0, we take Ri=0 (which\\nis what you get if you take the limit as Wi \u2192 0).  The powers must satisfy a\\ntotal power constraint, which has the form\\nP1 + \u00b7 \u00b7 \u00b7 + Pn = Ptot,\\nwhere Ptot > 0 is a given total power available to allocate among the channels.\\nSimilarly, the bandwidths must satisfy\\nW1 + \u00b7 \u00b7 \u00b7 +Wn = Wtot,\\nwhere Wtot > 0 is the (given) total available bandwidth. The optimization\\nvariables in this problem are the powers and bandwidths, i.e.,\\nP1, . . . , Pn, W1, . . . ,Wn.\\nThe objective is to maximize the total utility, sum(ui(Ri),i=1..n)\\nwhere ui: R \u2192 R is the utility function associated with the ith receiver.\\n  '\n    n = len(a_val)\n    if n != len(b_val):\n        print('alpha and beta vectors must have same length!')\n        return ('failed', np.nan, np.nan, np.nan)\n    P = cvx.Variable(n)\n    W = cvx.Variable(n)\n    alpha = cvx.Parameter(n)\n    beta = cvx.Parameter(n)\n    alpha.value = np.array(a_val)\n    beta.value = np.array(b_val)\n    R = cvx.kl_div(cvx.multiply(alpha, W), cvx.multiply(alpha, W + cvx.multiply(beta, P))) - cvx.multiply(alpha, cvx.multiply(beta, P))\n    objective = cvx.Minimize(cvx.sum(R))\n    constraints = [P >= 0.0, W >= 0.0, cvx.sum(P) - P_tot == 0.0, cvx.sum(W) - W_tot == 0.0]\n    prob = cvx.Problem(objective, constraints)\n    prob.solve()\n    return (prob.status, -prob.value, P.value, W.value)",
            "def optimal_power(n, a_val, b_val, P_tot: float=1.0, W_tot: float=1.0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\nBoyd and Vandenberghe, Convex Optimization, exercise 4.62 page 210\\nOptimal power and bandwidth allocation in a Gaussian broadcast channel.\\n\\nWe consider a communication system in which a central node transmits messages\\nto n receivers. Each receiver channel is characterized by its (transmit) power\\nlevel Pi \u2265 0 and its bandwidth Wi \u2265 0. The power and bandwidth of a receiver\\nchannel determine its bit rate Ri (the rate at which information can be sent)\\nvia\\n   Ri=\u03b1iWi log(1 + \u03b2iPi/Wi),\\nwhere \u03b1i and \u03b2i are known positive constants. For Wi=0, we take Ri=0 (which\\nis what you get if you take the limit as Wi \u2192 0).  The powers must satisfy a\\ntotal power constraint, which has the form\\nP1 + \u00b7 \u00b7 \u00b7 + Pn = Ptot,\\nwhere Ptot > 0 is a given total power available to allocate among the channels.\\nSimilarly, the bandwidths must satisfy\\nW1 + \u00b7 \u00b7 \u00b7 +Wn = Wtot,\\nwhere Wtot > 0 is the (given) total available bandwidth. The optimization\\nvariables in this problem are the powers and bandwidths, i.e.,\\nP1, . . . , Pn, W1, . . . ,Wn.\\nThe objective is to maximize the total utility, sum(ui(Ri),i=1..n)\\nwhere ui: R \u2192 R is the utility function associated with the ith receiver.\\n  '\n    n = len(a_val)\n    if n != len(b_val):\n        print('alpha and beta vectors must have same length!')\n        return ('failed', np.nan, np.nan, np.nan)\n    P = cvx.Variable(n)\n    W = cvx.Variable(n)\n    alpha = cvx.Parameter(n)\n    beta = cvx.Parameter(n)\n    alpha.value = np.array(a_val)\n    beta.value = np.array(b_val)\n    R = cvx.kl_div(cvx.multiply(alpha, W), cvx.multiply(alpha, W + cvx.multiply(beta, P))) - cvx.multiply(alpha, cvx.multiply(beta, P))\n    objective = cvx.Minimize(cvx.sum(R))\n    constraints = [P >= 0.0, W >= 0.0, cvx.sum(P) - P_tot == 0.0, cvx.sum(W) - W_tot == 0.0]\n    prob = cvx.Problem(objective, constraints)\n    prob.solve()\n    return (prob.status, -prob.value, P.value, W.value)"
        ]
    }
]
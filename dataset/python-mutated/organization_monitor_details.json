[
    {
        "func_name": "get",
        "original": "@extend_schema(operation_id='Retrieve a Monitor', parameters=[GlobalParams.ORG_SLUG, MonitorParams.MONITOR_SLUG, GlobalParams.ENVIRONMENT], responses={200: MonitorSerializer, 401: RESPONSE_UNAUTHORIZED, 403: RESPONSE_FORBIDDEN, 404: RESPONSE_NOT_FOUND})\ndef get(self, request: Request, organization, project, monitor) -> Response:\n    \"\"\"\n        Retrieves details for a monitor.\n        \"\"\"\n    environments = get_environments(request, organization)\n    expand = request.GET.getlist('expand', [])\n    return self.respond(serialize(monitor, request.user, MonitorSerializer(environments=environments, expand=expand)))",
        "mutated": [
            "@extend_schema(operation_id='Retrieve a Monitor', parameters=[GlobalParams.ORG_SLUG, MonitorParams.MONITOR_SLUG, GlobalParams.ENVIRONMENT], responses={200: MonitorSerializer, 401: RESPONSE_UNAUTHORIZED, 403: RESPONSE_FORBIDDEN, 404: RESPONSE_NOT_FOUND})\ndef get(self, request: Request, organization, project, monitor) -> Response:\n    if False:\n        i = 10\n    '\\n        Retrieves details for a monitor.\\n        '\n    environments = get_environments(request, organization)\n    expand = request.GET.getlist('expand', [])\n    return self.respond(serialize(monitor, request.user, MonitorSerializer(environments=environments, expand=expand)))",
            "@extend_schema(operation_id='Retrieve a Monitor', parameters=[GlobalParams.ORG_SLUG, MonitorParams.MONITOR_SLUG, GlobalParams.ENVIRONMENT], responses={200: MonitorSerializer, 401: RESPONSE_UNAUTHORIZED, 403: RESPONSE_FORBIDDEN, 404: RESPONSE_NOT_FOUND})\ndef get(self, request: Request, organization, project, monitor) -> Response:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Retrieves details for a monitor.\\n        '\n    environments = get_environments(request, organization)\n    expand = request.GET.getlist('expand', [])\n    return self.respond(serialize(monitor, request.user, MonitorSerializer(environments=environments, expand=expand)))",
            "@extend_schema(operation_id='Retrieve a Monitor', parameters=[GlobalParams.ORG_SLUG, MonitorParams.MONITOR_SLUG, GlobalParams.ENVIRONMENT], responses={200: MonitorSerializer, 401: RESPONSE_UNAUTHORIZED, 403: RESPONSE_FORBIDDEN, 404: RESPONSE_NOT_FOUND})\ndef get(self, request: Request, organization, project, monitor) -> Response:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Retrieves details for a monitor.\\n        '\n    environments = get_environments(request, organization)\n    expand = request.GET.getlist('expand', [])\n    return self.respond(serialize(monitor, request.user, MonitorSerializer(environments=environments, expand=expand)))",
            "@extend_schema(operation_id='Retrieve a Monitor', parameters=[GlobalParams.ORG_SLUG, MonitorParams.MONITOR_SLUG, GlobalParams.ENVIRONMENT], responses={200: MonitorSerializer, 401: RESPONSE_UNAUTHORIZED, 403: RESPONSE_FORBIDDEN, 404: RESPONSE_NOT_FOUND})\ndef get(self, request: Request, organization, project, monitor) -> Response:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Retrieves details for a monitor.\\n        '\n    environments = get_environments(request, organization)\n    expand = request.GET.getlist('expand', [])\n    return self.respond(serialize(monitor, request.user, MonitorSerializer(environments=environments, expand=expand)))",
            "@extend_schema(operation_id='Retrieve a Monitor', parameters=[GlobalParams.ORG_SLUG, MonitorParams.MONITOR_SLUG, GlobalParams.ENVIRONMENT], responses={200: MonitorSerializer, 401: RESPONSE_UNAUTHORIZED, 403: RESPONSE_FORBIDDEN, 404: RESPONSE_NOT_FOUND})\ndef get(self, request: Request, organization, project, monitor) -> Response:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Retrieves details for a monitor.\\n        '\n    environments = get_environments(request, organization)\n    expand = request.GET.getlist('expand', [])\n    return self.respond(serialize(monitor, request.user, MonitorSerializer(environments=environments, expand=expand)))"
        ]
    },
    {
        "func_name": "put",
        "original": "@extend_schema(operation_id='Update a Monitor', parameters=[GlobalParams.ORG_SLUG, MonitorParams.MONITOR_SLUG], request=MonitorValidator, responses={200: MonitorSerializer, 400: RESPONSE_BAD_REQUEST, 401: RESPONSE_UNAUTHORIZED, 403: RESPONSE_FORBIDDEN, 404: RESPONSE_NOT_FOUND})\ndef put(self, request: Request, organization, project, monitor) -> Response:\n    \"\"\"\n        Update a monitor.\n        \"\"\"\n    validator = MonitorValidator(data=request.data, partial=True, instance={'name': monitor.name, 'slug': monitor.slug, 'status': monitor.status, 'type': monitor.type, 'config': monitor.config, 'project': project}, context={'organization': organization, 'access': request.access})\n    if not validator.is_valid():\n        return self.respond(validator.errors, status=400)\n    result = validator.save()\n    params = {}\n    if 'name' in result:\n        params['name'] = result['name']\n    if 'slug' in result:\n        params['slug'] = result['slug']\n    if 'status' in result:\n        params['status'] = result['status']\n    if 'config' in result:\n        params['config'] = result['config']\n    if 'project' in result and result['project'].id != monitor.project_id:\n        raise ParameterValidationError('existing monitors may not be moved between projects')\n    if 'alert_rule' in result:\n        alert_rule = monitor.get_alert_rule()\n        if alert_rule:\n            alert_rule_id = update_alert_rule(request, project, alert_rule, result['alert_rule'])\n        else:\n            alert_rule_id = create_alert_rule(request, project, monitor, result['alert_rule'])\n        if alert_rule_id:\n            if 'config' not in params:\n                params['config'] = monitor.config\n            params['config']['alert_rule_id'] = alert_rule_id\n    if params:\n        monitor.update(**params)\n        self.create_audit_entry(request=request, organization=organization, target_object=monitor.id, event=audit_log.get_event_id('MONITOR_EDIT'), data=monitor.get_audit_log_data())\n    return self.respond(serialize(monitor, request.user))",
        "mutated": [
            "@extend_schema(operation_id='Update a Monitor', parameters=[GlobalParams.ORG_SLUG, MonitorParams.MONITOR_SLUG], request=MonitorValidator, responses={200: MonitorSerializer, 400: RESPONSE_BAD_REQUEST, 401: RESPONSE_UNAUTHORIZED, 403: RESPONSE_FORBIDDEN, 404: RESPONSE_NOT_FOUND})\ndef put(self, request: Request, organization, project, monitor) -> Response:\n    if False:\n        i = 10\n    '\\n        Update a monitor.\\n        '\n    validator = MonitorValidator(data=request.data, partial=True, instance={'name': monitor.name, 'slug': monitor.slug, 'status': monitor.status, 'type': monitor.type, 'config': monitor.config, 'project': project}, context={'organization': organization, 'access': request.access})\n    if not validator.is_valid():\n        return self.respond(validator.errors, status=400)\n    result = validator.save()\n    params = {}\n    if 'name' in result:\n        params['name'] = result['name']\n    if 'slug' in result:\n        params['slug'] = result['slug']\n    if 'status' in result:\n        params['status'] = result['status']\n    if 'config' in result:\n        params['config'] = result['config']\n    if 'project' in result and result['project'].id != monitor.project_id:\n        raise ParameterValidationError('existing monitors may not be moved between projects')\n    if 'alert_rule' in result:\n        alert_rule = monitor.get_alert_rule()\n        if alert_rule:\n            alert_rule_id = update_alert_rule(request, project, alert_rule, result['alert_rule'])\n        else:\n            alert_rule_id = create_alert_rule(request, project, monitor, result['alert_rule'])\n        if alert_rule_id:\n            if 'config' not in params:\n                params['config'] = monitor.config\n            params['config']['alert_rule_id'] = alert_rule_id\n    if params:\n        monitor.update(**params)\n        self.create_audit_entry(request=request, organization=organization, target_object=monitor.id, event=audit_log.get_event_id('MONITOR_EDIT'), data=monitor.get_audit_log_data())\n    return self.respond(serialize(monitor, request.user))",
            "@extend_schema(operation_id='Update a Monitor', parameters=[GlobalParams.ORG_SLUG, MonitorParams.MONITOR_SLUG], request=MonitorValidator, responses={200: MonitorSerializer, 400: RESPONSE_BAD_REQUEST, 401: RESPONSE_UNAUTHORIZED, 403: RESPONSE_FORBIDDEN, 404: RESPONSE_NOT_FOUND})\ndef put(self, request: Request, organization, project, monitor) -> Response:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Update a monitor.\\n        '\n    validator = MonitorValidator(data=request.data, partial=True, instance={'name': monitor.name, 'slug': monitor.slug, 'status': monitor.status, 'type': monitor.type, 'config': monitor.config, 'project': project}, context={'organization': organization, 'access': request.access})\n    if not validator.is_valid():\n        return self.respond(validator.errors, status=400)\n    result = validator.save()\n    params = {}\n    if 'name' in result:\n        params['name'] = result['name']\n    if 'slug' in result:\n        params['slug'] = result['slug']\n    if 'status' in result:\n        params['status'] = result['status']\n    if 'config' in result:\n        params['config'] = result['config']\n    if 'project' in result and result['project'].id != monitor.project_id:\n        raise ParameterValidationError('existing monitors may not be moved between projects')\n    if 'alert_rule' in result:\n        alert_rule = monitor.get_alert_rule()\n        if alert_rule:\n            alert_rule_id = update_alert_rule(request, project, alert_rule, result['alert_rule'])\n        else:\n            alert_rule_id = create_alert_rule(request, project, monitor, result['alert_rule'])\n        if alert_rule_id:\n            if 'config' not in params:\n                params['config'] = monitor.config\n            params['config']['alert_rule_id'] = alert_rule_id\n    if params:\n        monitor.update(**params)\n        self.create_audit_entry(request=request, organization=organization, target_object=monitor.id, event=audit_log.get_event_id('MONITOR_EDIT'), data=monitor.get_audit_log_data())\n    return self.respond(serialize(monitor, request.user))",
            "@extend_schema(operation_id='Update a Monitor', parameters=[GlobalParams.ORG_SLUG, MonitorParams.MONITOR_SLUG], request=MonitorValidator, responses={200: MonitorSerializer, 400: RESPONSE_BAD_REQUEST, 401: RESPONSE_UNAUTHORIZED, 403: RESPONSE_FORBIDDEN, 404: RESPONSE_NOT_FOUND})\ndef put(self, request: Request, organization, project, monitor) -> Response:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Update a monitor.\\n        '\n    validator = MonitorValidator(data=request.data, partial=True, instance={'name': monitor.name, 'slug': monitor.slug, 'status': monitor.status, 'type': monitor.type, 'config': monitor.config, 'project': project}, context={'organization': organization, 'access': request.access})\n    if not validator.is_valid():\n        return self.respond(validator.errors, status=400)\n    result = validator.save()\n    params = {}\n    if 'name' in result:\n        params['name'] = result['name']\n    if 'slug' in result:\n        params['slug'] = result['slug']\n    if 'status' in result:\n        params['status'] = result['status']\n    if 'config' in result:\n        params['config'] = result['config']\n    if 'project' in result and result['project'].id != monitor.project_id:\n        raise ParameterValidationError('existing monitors may not be moved between projects')\n    if 'alert_rule' in result:\n        alert_rule = monitor.get_alert_rule()\n        if alert_rule:\n            alert_rule_id = update_alert_rule(request, project, alert_rule, result['alert_rule'])\n        else:\n            alert_rule_id = create_alert_rule(request, project, monitor, result['alert_rule'])\n        if alert_rule_id:\n            if 'config' not in params:\n                params['config'] = monitor.config\n            params['config']['alert_rule_id'] = alert_rule_id\n    if params:\n        monitor.update(**params)\n        self.create_audit_entry(request=request, organization=organization, target_object=monitor.id, event=audit_log.get_event_id('MONITOR_EDIT'), data=monitor.get_audit_log_data())\n    return self.respond(serialize(monitor, request.user))",
            "@extend_schema(operation_id='Update a Monitor', parameters=[GlobalParams.ORG_SLUG, MonitorParams.MONITOR_SLUG], request=MonitorValidator, responses={200: MonitorSerializer, 400: RESPONSE_BAD_REQUEST, 401: RESPONSE_UNAUTHORIZED, 403: RESPONSE_FORBIDDEN, 404: RESPONSE_NOT_FOUND})\ndef put(self, request: Request, organization, project, monitor) -> Response:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Update a monitor.\\n        '\n    validator = MonitorValidator(data=request.data, partial=True, instance={'name': monitor.name, 'slug': monitor.slug, 'status': monitor.status, 'type': monitor.type, 'config': monitor.config, 'project': project}, context={'organization': organization, 'access': request.access})\n    if not validator.is_valid():\n        return self.respond(validator.errors, status=400)\n    result = validator.save()\n    params = {}\n    if 'name' in result:\n        params['name'] = result['name']\n    if 'slug' in result:\n        params['slug'] = result['slug']\n    if 'status' in result:\n        params['status'] = result['status']\n    if 'config' in result:\n        params['config'] = result['config']\n    if 'project' in result and result['project'].id != monitor.project_id:\n        raise ParameterValidationError('existing monitors may not be moved between projects')\n    if 'alert_rule' in result:\n        alert_rule = monitor.get_alert_rule()\n        if alert_rule:\n            alert_rule_id = update_alert_rule(request, project, alert_rule, result['alert_rule'])\n        else:\n            alert_rule_id = create_alert_rule(request, project, monitor, result['alert_rule'])\n        if alert_rule_id:\n            if 'config' not in params:\n                params['config'] = monitor.config\n            params['config']['alert_rule_id'] = alert_rule_id\n    if params:\n        monitor.update(**params)\n        self.create_audit_entry(request=request, organization=organization, target_object=monitor.id, event=audit_log.get_event_id('MONITOR_EDIT'), data=monitor.get_audit_log_data())\n    return self.respond(serialize(monitor, request.user))",
            "@extend_schema(operation_id='Update a Monitor', parameters=[GlobalParams.ORG_SLUG, MonitorParams.MONITOR_SLUG], request=MonitorValidator, responses={200: MonitorSerializer, 400: RESPONSE_BAD_REQUEST, 401: RESPONSE_UNAUTHORIZED, 403: RESPONSE_FORBIDDEN, 404: RESPONSE_NOT_FOUND})\ndef put(self, request: Request, organization, project, monitor) -> Response:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Update a monitor.\\n        '\n    validator = MonitorValidator(data=request.data, partial=True, instance={'name': monitor.name, 'slug': monitor.slug, 'status': monitor.status, 'type': monitor.type, 'config': monitor.config, 'project': project}, context={'organization': organization, 'access': request.access})\n    if not validator.is_valid():\n        return self.respond(validator.errors, status=400)\n    result = validator.save()\n    params = {}\n    if 'name' in result:\n        params['name'] = result['name']\n    if 'slug' in result:\n        params['slug'] = result['slug']\n    if 'status' in result:\n        params['status'] = result['status']\n    if 'config' in result:\n        params['config'] = result['config']\n    if 'project' in result and result['project'].id != monitor.project_id:\n        raise ParameterValidationError('existing monitors may not be moved between projects')\n    if 'alert_rule' in result:\n        alert_rule = monitor.get_alert_rule()\n        if alert_rule:\n            alert_rule_id = update_alert_rule(request, project, alert_rule, result['alert_rule'])\n        else:\n            alert_rule_id = create_alert_rule(request, project, monitor, result['alert_rule'])\n        if alert_rule_id:\n            if 'config' not in params:\n                params['config'] = monitor.config\n            params['config']['alert_rule_id'] = alert_rule_id\n    if params:\n        monitor.update(**params)\n        self.create_audit_entry(request=request, organization=organization, target_object=monitor.id, event=audit_log.get_event_id('MONITOR_EDIT'), data=monitor.get_audit_log_data())\n    return self.respond(serialize(monitor, request.user))"
        ]
    },
    {
        "func_name": "delete",
        "original": "@extend_schema(operation_id='Delete a Monitor or Monitor Environments', parameters=[GlobalParams.ORG_SLUG, MonitorParams.MONITOR_SLUG, GlobalParams.ENVIRONMENT], request=MonitorValidator, responses={202: RESPONSE_ACCEPTED, 401: RESPONSE_UNAUTHORIZED, 403: RESPONSE_FORBIDDEN, 404: RESPONSE_NOT_FOUND})\ndef delete(self, request: Request, organization, project, monitor) -> Response:\n    \"\"\"\n        Delete a monitor or monitor environments.\n        \"\"\"\n    environment_names = request.query_params.getlist('environment')\n    with transaction.atomic(router.db_for_write(MonitorEnvironment)):\n        if environment_names:\n            monitor_objects = MonitorEnvironment.objects.filter(environment__name__in=environment_names, monitor__id=monitor.id).exclude(monitor__status__in=[MonitorObjectStatus.PENDING_DELETION, MonitorObjectStatus.DELETION_IN_PROGRESS]).exclude(status__in=[MonitorStatus.PENDING_DELETION, MonitorStatus.DELETION_IN_PROGRESS])\n            event = audit_log.get_event_id('MONITOR_ENVIRONMENT_REMOVE')\n        else:\n            monitor_objects = Monitor.objects.filter(id=monitor.id).exclude(status__in=[MonitorObjectStatus.PENDING_DELETION, MonitorObjectStatus.DELETION_IN_PROGRESS])\n            event = audit_log.get_event_id('MONITOR_REMOVE')\n            monitor = monitor_objects.first()\n            alert_rule_id = monitor.config.get('alert_rule_id') if monitor else None\n            if alert_rule_id:\n                rule = Rule.objects.filter(project_id=monitor.project_id, id=alert_rule_id).exclude(status__in=[MonitorObjectStatus.PENDING_DELETION, MonitorObjectStatus.DELETION_IN_PROGRESS]).first()\n                if rule:\n                    rule.update(status=MonitorObjectStatus.PENDING_DELETION)\n                    RuleActivity.objects.create(rule=rule, user_id=request.user.id, type=RuleActivityType.DELETED.value)\n                    scheduled_rule = RegionScheduledDeletion.schedule(rule, days=0, actor=request.user)\n                    self.create_audit_entry(request=request, organization=project.organization, target_object=rule.id, event=audit_log.get_event_id('RULE_REMOVE'), data=rule.get_audit_log_data(), transaction_id=scheduled_rule)\n        monitor_objects_list = list(monitor_objects)\n        if not monitor_objects or not monitor_objects.update(status=MonitorObjectStatus.PENDING_DELETION):\n            return self.respond(status=404)\n        for monitor_object in monitor_objects_list:\n            if isinstance(monitor_object, Monitor):\n                monitor_object.update(slug=get_random_string(length=24))\n            schedule = RegionScheduledDeletion.schedule(monitor_object, days=0, actor=request.user)\n            self.create_audit_entry(request=request, organization=project.organization, target_object=monitor_object.id, event=event, data=monitor_object.get_audit_log_data(), transaction_id=schedule.guid)\n    return self.respond(status=202)",
        "mutated": [
            "@extend_schema(operation_id='Delete a Monitor or Monitor Environments', parameters=[GlobalParams.ORG_SLUG, MonitorParams.MONITOR_SLUG, GlobalParams.ENVIRONMENT], request=MonitorValidator, responses={202: RESPONSE_ACCEPTED, 401: RESPONSE_UNAUTHORIZED, 403: RESPONSE_FORBIDDEN, 404: RESPONSE_NOT_FOUND})\ndef delete(self, request: Request, organization, project, monitor) -> Response:\n    if False:\n        i = 10\n    '\\n        Delete a monitor or monitor environments.\\n        '\n    environment_names = request.query_params.getlist('environment')\n    with transaction.atomic(router.db_for_write(MonitorEnvironment)):\n        if environment_names:\n            monitor_objects = MonitorEnvironment.objects.filter(environment__name__in=environment_names, monitor__id=monitor.id).exclude(monitor__status__in=[MonitorObjectStatus.PENDING_DELETION, MonitorObjectStatus.DELETION_IN_PROGRESS]).exclude(status__in=[MonitorStatus.PENDING_DELETION, MonitorStatus.DELETION_IN_PROGRESS])\n            event = audit_log.get_event_id('MONITOR_ENVIRONMENT_REMOVE')\n        else:\n            monitor_objects = Monitor.objects.filter(id=monitor.id).exclude(status__in=[MonitorObjectStatus.PENDING_DELETION, MonitorObjectStatus.DELETION_IN_PROGRESS])\n            event = audit_log.get_event_id('MONITOR_REMOVE')\n            monitor = monitor_objects.first()\n            alert_rule_id = monitor.config.get('alert_rule_id') if monitor else None\n            if alert_rule_id:\n                rule = Rule.objects.filter(project_id=monitor.project_id, id=alert_rule_id).exclude(status__in=[MonitorObjectStatus.PENDING_DELETION, MonitorObjectStatus.DELETION_IN_PROGRESS]).first()\n                if rule:\n                    rule.update(status=MonitorObjectStatus.PENDING_DELETION)\n                    RuleActivity.objects.create(rule=rule, user_id=request.user.id, type=RuleActivityType.DELETED.value)\n                    scheduled_rule = RegionScheduledDeletion.schedule(rule, days=0, actor=request.user)\n                    self.create_audit_entry(request=request, organization=project.organization, target_object=rule.id, event=audit_log.get_event_id('RULE_REMOVE'), data=rule.get_audit_log_data(), transaction_id=scheduled_rule)\n        monitor_objects_list = list(monitor_objects)\n        if not monitor_objects or not monitor_objects.update(status=MonitorObjectStatus.PENDING_DELETION):\n            return self.respond(status=404)\n        for monitor_object in monitor_objects_list:\n            if isinstance(monitor_object, Monitor):\n                monitor_object.update(slug=get_random_string(length=24))\n            schedule = RegionScheduledDeletion.schedule(monitor_object, days=0, actor=request.user)\n            self.create_audit_entry(request=request, organization=project.organization, target_object=monitor_object.id, event=event, data=monitor_object.get_audit_log_data(), transaction_id=schedule.guid)\n    return self.respond(status=202)",
            "@extend_schema(operation_id='Delete a Monitor or Monitor Environments', parameters=[GlobalParams.ORG_SLUG, MonitorParams.MONITOR_SLUG, GlobalParams.ENVIRONMENT], request=MonitorValidator, responses={202: RESPONSE_ACCEPTED, 401: RESPONSE_UNAUTHORIZED, 403: RESPONSE_FORBIDDEN, 404: RESPONSE_NOT_FOUND})\ndef delete(self, request: Request, organization, project, monitor) -> Response:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Delete a monitor or monitor environments.\\n        '\n    environment_names = request.query_params.getlist('environment')\n    with transaction.atomic(router.db_for_write(MonitorEnvironment)):\n        if environment_names:\n            monitor_objects = MonitorEnvironment.objects.filter(environment__name__in=environment_names, monitor__id=monitor.id).exclude(monitor__status__in=[MonitorObjectStatus.PENDING_DELETION, MonitorObjectStatus.DELETION_IN_PROGRESS]).exclude(status__in=[MonitorStatus.PENDING_DELETION, MonitorStatus.DELETION_IN_PROGRESS])\n            event = audit_log.get_event_id('MONITOR_ENVIRONMENT_REMOVE')\n        else:\n            monitor_objects = Monitor.objects.filter(id=monitor.id).exclude(status__in=[MonitorObjectStatus.PENDING_DELETION, MonitorObjectStatus.DELETION_IN_PROGRESS])\n            event = audit_log.get_event_id('MONITOR_REMOVE')\n            monitor = monitor_objects.first()\n            alert_rule_id = monitor.config.get('alert_rule_id') if monitor else None\n            if alert_rule_id:\n                rule = Rule.objects.filter(project_id=monitor.project_id, id=alert_rule_id).exclude(status__in=[MonitorObjectStatus.PENDING_DELETION, MonitorObjectStatus.DELETION_IN_PROGRESS]).first()\n                if rule:\n                    rule.update(status=MonitorObjectStatus.PENDING_DELETION)\n                    RuleActivity.objects.create(rule=rule, user_id=request.user.id, type=RuleActivityType.DELETED.value)\n                    scheduled_rule = RegionScheduledDeletion.schedule(rule, days=0, actor=request.user)\n                    self.create_audit_entry(request=request, organization=project.organization, target_object=rule.id, event=audit_log.get_event_id('RULE_REMOVE'), data=rule.get_audit_log_data(), transaction_id=scheduled_rule)\n        monitor_objects_list = list(monitor_objects)\n        if not monitor_objects or not monitor_objects.update(status=MonitorObjectStatus.PENDING_DELETION):\n            return self.respond(status=404)\n        for monitor_object in monitor_objects_list:\n            if isinstance(monitor_object, Monitor):\n                monitor_object.update(slug=get_random_string(length=24))\n            schedule = RegionScheduledDeletion.schedule(monitor_object, days=0, actor=request.user)\n            self.create_audit_entry(request=request, organization=project.organization, target_object=monitor_object.id, event=event, data=monitor_object.get_audit_log_data(), transaction_id=schedule.guid)\n    return self.respond(status=202)",
            "@extend_schema(operation_id='Delete a Monitor or Monitor Environments', parameters=[GlobalParams.ORG_SLUG, MonitorParams.MONITOR_SLUG, GlobalParams.ENVIRONMENT], request=MonitorValidator, responses={202: RESPONSE_ACCEPTED, 401: RESPONSE_UNAUTHORIZED, 403: RESPONSE_FORBIDDEN, 404: RESPONSE_NOT_FOUND})\ndef delete(self, request: Request, organization, project, monitor) -> Response:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Delete a monitor or monitor environments.\\n        '\n    environment_names = request.query_params.getlist('environment')\n    with transaction.atomic(router.db_for_write(MonitorEnvironment)):\n        if environment_names:\n            monitor_objects = MonitorEnvironment.objects.filter(environment__name__in=environment_names, monitor__id=monitor.id).exclude(monitor__status__in=[MonitorObjectStatus.PENDING_DELETION, MonitorObjectStatus.DELETION_IN_PROGRESS]).exclude(status__in=[MonitorStatus.PENDING_DELETION, MonitorStatus.DELETION_IN_PROGRESS])\n            event = audit_log.get_event_id('MONITOR_ENVIRONMENT_REMOVE')\n        else:\n            monitor_objects = Monitor.objects.filter(id=monitor.id).exclude(status__in=[MonitorObjectStatus.PENDING_DELETION, MonitorObjectStatus.DELETION_IN_PROGRESS])\n            event = audit_log.get_event_id('MONITOR_REMOVE')\n            monitor = monitor_objects.first()\n            alert_rule_id = monitor.config.get('alert_rule_id') if monitor else None\n            if alert_rule_id:\n                rule = Rule.objects.filter(project_id=monitor.project_id, id=alert_rule_id).exclude(status__in=[MonitorObjectStatus.PENDING_DELETION, MonitorObjectStatus.DELETION_IN_PROGRESS]).first()\n                if rule:\n                    rule.update(status=MonitorObjectStatus.PENDING_DELETION)\n                    RuleActivity.objects.create(rule=rule, user_id=request.user.id, type=RuleActivityType.DELETED.value)\n                    scheduled_rule = RegionScheduledDeletion.schedule(rule, days=0, actor=request.user)\n                    self.create_audit_entry(request=request, organization=project.organization, target_object=rule.id, event=audit_log.get_event_id('RULE_REMOVE'), data=rule.get_audit_log_data(), transaction_id=scheduled_rule)\n        monitor_objects_list = list(monitor_objects)\n        if not monitor_objects or not monitor_objects.update(status=MonitorObjectStatus.PENDING_DELETION):\n            return self.respond(status=404)\n        for monitor_object in monitor_objects_list:\n            if isinstance(monitor_object, Monitor):\n                monitor_object.update(slug=get_random_string(length=24))\n            schedule = RegionScheduledDeletion.schedule(monitor_object, days=0, actor=request.user)\n            self.create_audit_entry(request=request, organization=project.organization, target_object=monitor_object.id, event=event, data=monitor_object.get_audit_log_data(), transaction_id=schedule.guid)\n    return self.respond(status=202)",
            "@extend_schema(operation_id='Delete a Monitor or Monitor Environments', parameters=[GlobalParams.ORG_SLUG, MonitorParams.MONITOR_SLUG, GlobalParams.ENVIRONMENT], request=MonitorValidator, responses={202: RESPONSE_ACCEPTED, 401: RESPONSE_UNAUTHORIZED, 403: RESPONSE_FORBIDDEN, 404: RESPONSE_NOT_FOUND})\ndef delete(self, request: Request, organization, project, monitor) -> Response:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Delete a monitor or monitor environments.\\n        '\n    environment_names = request.query_params.getlist('environment')\n    with transaction.atomic(router.db_for_write(MonitorEnvironment)):\n        if environment_names:\n            monitor_objects = MonitorEnvironment.objects.filter(environment__name__in=environment_names, monitor__id=monitor.id).exclude(monitor__status__in=[MonitorObjectStatus.PENDING_DELETION, MonitorObjectStatus.DELETION_IN_PROGRESS]).exclude(status__in=[MonitorStatus.PENDING_DELETION, MonitorStatus.DELETION_IN_PROGRESS])\n            event = audit_log.get_event_id('MONITOR_ENVIRONMENT_REMOVE')\n        else:\n            monitor_objects = Monitor.objects.filter(id=monitor.id).exclude(status__in=[MonitorObjectStatus.PENDING_DELETION, MonitorObjectStatus.DELETION_IN_PROGRESS])\n            event = audit_log.get_event_id('MONITOR_REMOVE')\n            monitor = monitor_objects.first()\n            alert_rule_id = monitor.config.get('alert_rule_id') if monitor else None\n            if alert_rule_id:\n                rule = Rule.objects.filter(project_id=monitor.project_id, id=alert_rule_id).exclude(status__in=[MonitorObjectStatus.PENDING_DELETION, MonitorObjectStatus.DELETION_IN_PROGRESS]).first()\n                if rule:\n                    rule.update(status=MonitorObjectStatus.PENDING_DELETION)\n                    RuleActivity.objects.create(rule=rule, user_id=request.user.id, type=RuleActivityType.DELETED.value)\n                    scheduled_rule = RegionScheduledDeletion.schedule(rule, days=0, actor=request.user)\n                    self.create_audit_entry(request=request, organization=project.organization, target_object=rule.id, event=audit_log.get_event_id('RULE_REMOVE'), data=rule.get_audit_log_data(), transaction_id=scheduled_rule)\n        monitor_objects_list = list(monitor_objects)\n        if not monitor_objects or not monitor_objects.update(status=MonitorObjectStatus.PENDING_DELETION):\n            return self.respond(status=404)\n        for monitor_object in monitor_objects_list:\n            if isinstance(monitor_object, Monitor):\n                monitor_object.update(slug=get_random_string(length=24))\n            schedule = RegionScheduledDeletion.schedule(monitor_object, days=0, actor=request.user)\n            self.create_audit_entry(request=request, organization=project.organization, target_object=monitor_object.id, event=event, data=monitor_object.get_audit_log_data(), transaction_id=schedule.guid)\n    return self.respond(status=202)",
            "@extend_schema(operation_id='Delete a Monitor or Monitor Environments', parameters=[GlobalParams.ORG_SLUG, MonitorParams.MONITOR_SLUG, GlobalParams.ENVIRONMENT], request=MonitorValidator, responses={202: RESPONSE_ACCEPTED, 401: RESPONSE_UNAUTHORIZED, 403: RESPONSE_FORBIDDEN, 404: RESPONSE_NOT_FOUND})\ndef delete(self, request: Request, organization, project, monitor) -> Response:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Delete a monitor or monitor environments.\\n        '\n    environment_names = request.query_params.getlist('environment')\n    with transaction.atomic(router.db_for_write(MonitorEnvironment)):\n        if environment_names:\n            monitor_objects = MonitorEnvironment.objects.filter(environment__name__in=environment_names, monitor__id=monitor.id).exclude(monitor__status__in=[MonitorObjectStatus.PENDING_DELETION, MonitorObjectStatus.DELETION_IN_PROGRESS]).exclude(status__in=[MonitorStatus.PENDING_DELETION, MonitorStatus.DELETION_IN_PROGRESS])\n            event = audit_log.get_event_id('MONITOR_ENVIRONMENT_REMOVE')\n        else:\n            monitor_objects = Monitor.objects.filter(id=monitor.id).exclude(status__in=[MonitorObjectStatus.PENDING_DELETION, MonitorObjectStatus.DELETION_IN_PROGRESS])\n            event = audit_log.get_event_id('MONITOR_REMOVE')\n            monitor = monitor_objects.first()\n            alert_rule_id = monitor.config.get('alert_rule_id') if monitor else None\n            if alert_rule_id:\n                rule = Rule.objects.filter(project_id=monitor.project_id, id=alert_rule_id).exclude(status__in=[MonitorObjectStatus.PENDING_DELETION, MonitorObjectStatus.DELETION_IN_PROGRESS]).first()\n                if rule:\n                    rule.update(status=MonitorObjectStatus.PENDING_DELETION)\n                    RuleActivity.objects.create(rule=rule, user_id=request.user.id, type=RuleActivityType.DELETED.value)\n                    scheduled_rule = RegionScheduledDeletion.schedule(rule, days=0, actor=request.user)\n                    self.create_audit_entry(request=request, organization=project.organization, target_object=rule.id, event=audit_log.get_event_id('RULE_REMOVE'), data=rule.get_audit_log_data(), transaction_id=scheduled_rule)\n        monitor_objects_list = list(monitor_objects)\n        if not monitor_objects or not monitor_objects.update(status=MonitorObjectStatus.PENDING_DELETION):\n            return self.respond(status=404)\n        for monitor_object in monitor_objects_list:\n            if isinstance(monitor_object, Monitor):\n                monitor_object.update(slug=get_random_string(length=24))\n            schedule = RegionScheduledDeletion.schedule(monitor_object, days=0, actor=request.user)\n            self.create_audit_entry(request=request, organization=project.organization, target_object=monitor_object.id, event=event, data=monitor_object.get_audit_log_data(), transaction_id=schedule.guid)\n    return self.respond(status=202)"
        ]
    }
]
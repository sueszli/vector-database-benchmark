"""
Tests for Markov Regression models

Author: Chad Fulton
License: BSD-3
"""
import os
import warnings
import numpy as np
from numpy.testing import assert_allclose, assert_raises
import pandas as pd
import pytest
from statsmodels.tsa.regime_switching import markov_switching, markov_regression
current_path = os.path.dirname(os.path.abspath(__file__))
fedfunds = [1.03, 0.99, 1.34, 1.5, 1.94, 2.36, 2.48, 2.69, 2.81, 2.93, 2.93, 3.0, 3.23, 3.25, 1.86, 0.94, 1.32, 2.16, 2.57, 3.08, 3.58, 3.99, 3.93, 3.7, 2.94, 2.3, 2.0, 1.73, 1.68, 2.4, 2.46, 2.61, 2.85, 2.92, 2.97, 2.96, 3.33, 3.45, 3.46, 3.49, 3.46, 3.58, 3.97, 4.08, 4.07, 4.17, 4.56, 4.91, 5.41, 5.56, 4.82, 3.99, 3.89, 4.17, 4.79, 5.98, 5.94, 5.92, 6.57, 8.33, 8.98, 8.94, 8.57, 7.88, 6.7, 5.57, 3.86, 4.56, 5.47, 4.75, 3.54, 4.3, 4.74, 5.14, 6.54, 7.82, 10.56, 10.0, 9.32, 11.25, 12.09, 9.35, 6.3, 5.42, 6.16, 5.41, 4.83, 5.2, 5.28, 4.87, 4.66, 5.16, 5.82, 6.51, 6.76, 7.28, 8.1, 9.58, 10.07, 10.18, 10.95, 13.58, 15.05, 12.69, 9.84, 15.85, 16.57, 17.78, 17.58, 13.59, 14.23, 14.51, 11.01, 9.29, 8.65, 8.8, 9.46, 9.43, 9.69, 10.56, 11.39, 9.27, 8.48, 7.92, 7.9, 8.1, 7.83, 6.92, 6.21, 6.27, 6.22, 6.65, 6.84, 6.92, 6.66, 7.16, 7.98, 8.47, 9.44, 9.73, 9.08, 8.61, 8.25, 8.24, 8.16, 7.74, 6.43, 5.86, 5.64, 4.82, 4.02, 3.77, 3.26, 3.04, 3.04, 3.0, 3.06, 2.99, 3.21, 3.94, 4.49, 5.17, 5.81, 6.02, 5.8, 5.72, 5.36, 5.24, 5.31, 5.28, 5.28, 5.52, 5.53, 5.51, 5.52, 5.5, 5.53, 4.86, 4.73, 4.75, 5.09, 5.31, 5.68, 6.27, 6.52, 6.47, 5.59, 4.33, 3.5, 2.13, 1.73, 1.75, 1.74, 1.44, 1.25, 1.25, 1.02, 1.0, 1.0, 1.01, 1.43, 1.95, 2.47, 2.94, 3.46, 3.98, 4.46, 4.91, 5.25, 5.25, 5.26, 5.25, 5.07, 4.5, 3.18, 2.09, 1.94, 0.51, 0.18, 0.18, 0.16, 0.12, 0.13, 0.19, 0.19, 0.19]
ogap = [-0.53340107, 0.72974336, 2.93532324, 3.58194304, 4.15760183, 4.28775644, 3.01683831, 2.64185619, 1.82473528, 2.37461162, 2.39338565, 1.24197006, 1.1370815, -1.28657401, -4.46665335, -4.79258966, -3.06711817, -1.3212384, -0.54485309, 0.86588413, -0.2469136, -0.75004685, 0.7417022, -0.71350163, -1.5151515, -3.80444455, -4.02601957, -3.17873883, -2.48841596, -1.42372882, -0.61779928, -0.6430338, -0.73277968, -1.38330388, -1.31537247, -0.95626277, 0.0, -0.15248552, 0.93233085, 1.03888392, 1.27174389, 0.63400578, 2.13007665, 2.44789481, 3.37605071, 4.72771597, 6.20753956, 5.39234877, 5.0825758, 4.8605876, 4.65116262, 3.52755141, 3.35122228, 3.09326482, 4.10191917, 4.69641066, 4.38452244, 3.79841614, 4.38338947, 3.63766766, 3.24129653, 1.84967709, 0.75554705, -0.02802691, -0.03673432, -1.90527546, -0.14918824, -0.42940569, -0.46382189, -0.97892815, -0.12142799, 1.37281513, 1.5143193, 2.47730422, 3.9762032, 4.08987427, 2.62857127, 2.90107131, 0.97277576, 0.42547619, -1.60488391, -2.97784758, -4.98650694, -5.03382635, -4.25698328, -3.74993205, -2.39661908, -2.41223454, -2.66694117, -2.62232494, -2.29969597, -1.38809109, -0.67855304, -1.08100712, -1.82682908, 0.92868561, 0.87040615, 1.32669306, 0.56407404, -0.13848817, -0.13089494, -0.58975571, -1.00534534, -3.55482054, -4.20365095, -2.97225475, -1.57762408, -2.77206445, -2.32418823, -4.01929235, -6.25393772, -6.46356869, -7.47437572, -8.06377602, -7.57157278, -6.14639282, -5.00167227, -3.74511886, -2.54788184, -1.64858043, -1.47994602, -1.44707143, -1.31824112, -1.20102882, -0.57691002, -0.64480144, -0.57239723, -0.93083948, -0.8392899, -1.19972074, -1.18918467, -0.87174636, -0.78151888, 0.10762761, -0.10596547, 0.40488175, 0.17958413, 0.67704558, 0.99767941, 1.00495291, 0.98304421, 0.47067845, 0.80427116, 0.45058677, -0.26300991, -1.84629929, -2.99437666, -2.90482664, -3.09490418, -3.32399321, -2.87384319, -2.47262239, -2.19618678, -1.91843009, -2.46574545, -2.58180451, -2.72212362, -2.17548561, -1.96046102, -1.3287729, -1.42521954, -1.04951096, -1.47037697, -1.87099183, -1.72912872, -1.76828432, -1.85885167, -0.9193368, -0.95776832, -0.62119246, -0.53508854, -0.04090983, 0.47511154, 0.41246772, 0.57928383, 0.67604625, 1.1378212, 1.96481478, 2.05066752, 1.93714142, 2.34412026, 3.16807413, 2.57455897, 3.59218717, 2.79711962, 2.41787243, 1.19362748, 0.82524049, -0.36692095, -1.00542021, -0.89346135, -1.23166943, -1.56921482, -2.29188299, -2.56877398, -2.37549472, -1.4183135, -1.00017595, -1.03901041, -0.86736482, -0.63541794, -0.38296556, 0.11404825, 0.07249562, 0.30608681, 0.27121997, 0.90333837, 0.595429, 0.08057959, 0.25154814, -0.27741581, -0.14053501, -0.06035376, -0.2722317, -1.5122633, -1.5272249, -2.5325017, -5.14671373, -6.88223982, -7.36753035, -7.43927145, -6.89403868, -6.8306222, -6.26507998, -5.93287086, -5.59370756]
inf = [np.nan, np.nan, np.nan, np.nan, -0.2347243, 0.37373397, 0.25006533, 1.04645514, 2.01665616, 2.58033299, 3.41399837, 3.60986805, 3.46304512, 3.08529949, 3.45609665, 3.27347994, 2.29982662, 1.91197193, 0.89083761, 0.390598, 0.96842253, 1.47531354, 1.39343977, 1.82488036, 1.35991514, 1.39598227, 1.50695646, 0.8690359, 1.20648873, 0.70517123, 0.89477205, 1.30740857, 1.20212376, 1.30043352, 1.22895002, 1.03573787, 1.36272156, 1.39236343, 1.48636675, 1.46398985, 1.07421875, 1.26611042, 1.1639185, 1.64622331, 1.71658623, 1.78565705, 2.41930342, 2.6897428, 3.27391338, 3.5685041, 2.87078357, 2.56671929, 2.70717716, 2.99242783, 3.74010396, 4.11855173, 4.47761202, 4.62397051, 4.87426901, 5.50198364, 5.52285719, 5.83354473, 6.22577858, 6.03848171, 5.68597221, 5.60000038, 4.81102371, 4.31496382, 4.27074528, 3.53535342, 3.50587225, 3.22580624, 3.02948403, 3.33414626, 4.1129365, 5.60817289, 6.83709764, 8.41692829, 9.91564655, 10.54788017, 11.45758915, 12.04798317, 11.13530636, 9.53939915, 8.67963028, 7.38337183, 6.34047985, 6.01503754, 5.58903217, 5.18573475, 5.90339899, 6.79609919, 6.57417107, 6.59522104, 6.47466183, 7.02936935, 8.02397346, 8.9289465, 9.78376389, 10.75433922, 11.72252846, 12.64148235, 14.20953751, 14.42577076, 12.93487072, 12.53929329, 11.26111889, 9.87392902, 10.85386753, 9.5831337, 7.58190918, 6.90676928, 5.81573057, 4.44292784, 3.59408045, 3.29905081, 2.52680969, 3.23384356, 4.62551022, 4.40519285, 4.29570436, 4.1543026, 3.64175439, 3.60676312, 3.35249043, 3.5137701, 3.1053853, 1.67858768, 1.66821122, 1.34587157, 2.03802228, 3.69979739, 4.16317225, 4.40493536, 3.96511626, 3.97994113, 4.1420536, 4.3066597, 4.67509222, 5.15961123, 4.70588255, 4.62759781, 5.23231459, 4.58372736, 5.56420517, 6.27646685, 5.25958157, 4.84686804, 3.85226536, 2.96485686, 2.89388347, 3.07301927, 3.07467055, 3.12198234, 3.17306924, 3.12524581, 2.8174715, 2.76977897, 2.53936958, 2.38237333, 2.85493255, 2.60332823, 2.84049082, 3.09557867, 2.66420412, 2.62607908, 2.78390908, 2.8270874, 2.8999064, 3.23162007, 2.94453382, 2.30179024, 2.22504783, 1.89075232, 1.48277605, 1.58312511, 1.59639311, 1.5253576, 1.68703699, 2.11280179, 2.34625125, 2.61982656, 3.25799918, 3.29342604, 3.46889949, 3.44350553, 3.40975904, 3.32491398, 2.67803454, 1.87507534, 1.23194993, 1.31765401, 1.57628381, 2.25352097, 2.97640777, 2.00593972, 2.21688938, 2.00165296, 1.81766617, 2.78586531, 2.67522621, 3.38513398, 3.0353508, 2.92293549, 3.81956744, 3.6745038, 3.69086194, 3.92426181, 3.34028482, 1.96539891, 2.43147993, 2.66511655, 2.34880662, 4.03147316, 4.13719845, 4.31058264, 5.25250196, 1.59580016, -0.1842365, -0.94229329, -1.60695589, 1.48749816, 2.33687115, 1.78588998, 1.22873163, 1.21550024]
areturns = [1.60864139, 0.6581642, 0.91177338, 1.88970506, 0.76378739, 0.10790635, 0.29509732, 0.16913767, 1.30772412, 0.85901159, 0.92307973, 0.9833895, 0.9116146, 2.58575296, 0.36441925, 1.89720023, 0.65161127, 1.17255056, 0.53518051, 0.00534112, 1.25064528, 2.00023437, 0.79801333, 1.42980587, 0.02078664, 2.31948757, 2.78705025, 1.36003578, 0.15257211, 0.30815724, 0.40030465, 0.89941251, 0.36925647, 0.75660467, 0.87896836, 1.07261622, 0.1137321, 1.32838523, 1.03085732, 1.33930087, 0.66706187, 0.94959277, 1.07173061, 0.80687243, 1.35347247, 1.56781077, 0.71599048, 0.50293237, 0.33926481, 2.94415998, 0.72026408, 0.28967711, 1.05362082, 0.3702977, 2.05277085, 0.49342933, 0.03423685, 0.34392089, 1.01741159, 1.43457139, 0.03759775, 1.54626679, 1.07742834, 0.28664029, 0.72592038, 0.91093767, 0.06915179, 0.88005662, 0.47802091, 1.2907486, 0.57604247, 0.71046084, 0.81753206, 0.26241753, 2.57300162, 0.16590172, 0.2918649, 0.96136051, 1.6711514, 0.94229084, 1.83614326, 0.28854966, 0.35050908, 0.04593768, 0.07599987, 0.09888303, 0.12907109, 2.0099268, 0.23006552, 1.18803704, 0.99970037, 1.32702613, 0.45646569, 1.43720019, 0.04425191, 0.53156406, 0.45951003, 1.26583254, 0.26994073, 0.1238014, 0.53068936, 0.21927625, 0.73882329, 0.13153869, 0.97837049, 2.36890459, 2.29313374, 0.75562358, 0.08656374, 2.4979558, 0.64189923, 0.22916116, 2.27840376, 0.46641645, 2.02508688, 1.25530422, 1.27711689, 0.07773363, 0.23380435, 1.58663058, 0.19108967, 0.52218717, 0.18055375, 1.18262017, 0.47418493, 0.88282752, 0.98944044, 1.04560554, 0.65470523, 0.2604697, 0.14658713, 0.77688956, 1.10911596, 0.69967973, 1.04578161, 0.29641318, 0.98087156, 0.46531865, 0.11846001, 0.44440377, 1.11066306, 0.02238905, 0.19865835, 1.48028743, 0.27695858, 0.9391492, 1.70575404, 2.94507742, 0.35386264, 0.72816408, 1.80369282, 0.12440593, 1.04197288, 1.2957871, 1.35031664, 0.55384284, 1.13915396, 0.29186234, 1.21344364, 0.23005128, 0.85578758, 1.80613887, 1.55996382, 1.46395147, 0.59826899, 0.65880769, 1.68974137, 1.12778795, 4.19566727, 0.14379959, 2.09945345, 0.29264972, 1.25936544, 0.84738803, 0.54094779, 2.27655816, 1.48392296, 1.13808954, 1.16038692, 0.46204364, 2.09433556, 1.16782069, 2.0192802, 2.6190269, 1.63471925, 0.25279006, 2.64083171, 1.64290273, 2.42852569, 1.54714262, 1.14975035, 3.59362221, 1.16689992, 5.11030865, 1.81326246, 0.93489766, 1.38605726, 0.53841805, 1.02298951, 2.03038621, 2.8340385, 0.13691254, 3.18769765, 0.23076122, 1.95332313, 1.63122225, 2.66484141, 0.86377442, 1.1782372, 0.57231718, 1.11979997, 2.07001758, 0.08726255, 1.71130466, 1.04979181, 1.9825747, 3.43235064, 1.50204682, 1.75699294, 2.56816769, 0.75786251, 0.93131924, 1.45494628, 0.49975556, 0.32756457, 0.47183469, 3.3737793, 2.25759649, 0.34138981, 3.09048033, 10.32189178, 10.15319347, 0.12398402, 4.65263939, 7.62032652, 7.04052448, 4.55579329, 3.52704573, 3.38968754, 3.00466204, 0.46617937, 1.42808878, 1.00660408, 4.65142584, 5.20996618, 4.80301046, 0.99780792, 1.15280604, 1.87296033, 4.60985804, 5.41294718, 6.06733084, 3.18375754, 10.0548315, 4.22182512, 1.24640226, 2.66358495, 2.60049844, 0.00352026, 1.02208447, 4.09924603, 1.27764511, 0.90124834, 0.5303241, 3.84383249, 1.24640775, 1.39796948, 2.34609175, 1.7742399, 3.56689548, 1.27681601, 5.32056713, 3.19770503, 1.89575887, 0.59274858, 0.64010525, 2.65920091, 0.81912726, 0.4868626, 3.13063931, 1.3960743, 1.03451502, 1.28983963, 3.27489519, 1.41772103, 2.00014663, 2.02787399, 3.50289273, 1.65296888, 0.02450024, 0.04084374, 0.17252181, 0.78132814, 0.20216605, 1.48436368, 0.3301619, 1.12080252, 0.00699845, 3.87074757, 0.84627002, 2.26680374, 2.07992935, 1.62452054, 0.66078293, 2.26608515, 1.58540344, 0.98763937, 0.25370923, 1.2576412, 1.07146478, 0.48786601, 0.02327727, 1.29385257, 3.52217674, 1.05305433, 5.13598871, 1.43351507, 2.12951326, 3.03700447, 0.65843326, 4.28524971, 2.3428576, 4.72853422, 0.58606911, 2.70345545, 0.8207835, 0.16228235, 2.80714321, 1.97183621, 0.5928334, 3.61601782, 1.82700455, 1.52638936, 0.72525144, 0.6499536, 1.58741212, 0.72647524, 0.65064299, 0.43771812, 2.68048692, 2.20902133, 0.0988697, 0.31138307, 2.79860616, 1.13209391, 0.91427463, 0.69550049, 0.68990183, 0.65359998, 1.04932129, 0.00310441, 0.48663121, 1.68144464, 0.99051267, 0.22263506, 0.97846323, 0.55040002, 2.56734443, 0.12510587, 2.15363359, 1.18440747, 0.66974002, 0.48981813, 2.08285856, 1.03952742, 1.00747502, 0.52523118, 0.81593889, 0.22168602, 2.73786068, 1.21678591, 0.235705, 0.56248677, 3.66057348, 0.35822684, 0.97550339, 1.21677041, 4.03415823, 9.10342026, 2.24355674, 3.6120553, 4.36456299, 0.83891636, 1.07712805, 2.28685427, 4.04548168, 1.67408013, 4.57762337, 2.47123241, 1.88890803, 1.62245703, 0.02149973, 0.48483402, 4.40716505, 0.28621164, 4.56798553, 1.6255945, 0.6124717, 2.72943926, 0.80645156, 1.26738918, 0.91451788, 1.59959269, 0.0356785, 1.93719864, 0.42164543, 0.87313241, 0.52508104, 0.44771862, 1.38226497, 1.83891225, 0.00711749, 0.26621303, 2.25254321, 0.27307722, 0.26436633, 1.80608702, 2.29477572, 2.0931437, 2.2915051, 0.82041657, 2.09074521, 1.87793779, 2.15142703, 1.549685, 2.44940472, 0.45297864, 0.35515305, 0.23224437, 1.77138305, 0.98827285, 0.98435384, 0.80031335, 0.49445853, 0.36061874, 2.15444446, 1.92558503, 0.75404048, 0.31921348, 0.32092738, 0.48054051, 0.98650485, 1.1810472, 0.28533801, 3.02953291, 0.16818592, 2.20164418, 0.3911584, 0.6942575, 0.55016953, 0.06157291, 0.19509397, 2.3744297, 0.73775989, 1.12842739, 0.87197775, 0.30168825, 0.71310955, 0.27689508, 1.13476491, 1.60331428, 1.56165123, 0.31513214, 0.02698154, 0.49029687, 0.17265303, 0.36386153, 0.56225872, 1.59077382, 1.84919345, 1.4230696, 1.28607559, 0.57890779, 1.14760947, 0.22594096, 0.43510813, 2.90668917, 1.49716794, 1.9549973, 2.10786223, 0.71948445, 0.19396119, 0.86563414, 0.63498968, 2.3593328, 0.18950517, 0.45737442, 1.82937241, 1.72589195, 0.29414186, 0.74434268, 1.22564518, 2.01444268, 2.32068515, 0.98414028, 0.1174908, 0.22450124, 1.24669802, 0.70953292, 0.21857196, 0.11119327, 0.60500813, 2.04446197, 1.146896, 0.54849964, 0.23402978, 0.32219616, 2.7076292, 1.57800817, 2.08260155, 1.81090641, 0.45189673, 1.01260054, 0.65379494, 0.94736898, 0.37556711, 0.44287458, 0.34578958, 1.48449266, 1.95924711, 0.09717447]
mumpspc = [0.29791319, 0.41467956, 1.13061404, 1.23267496, 1.55659747, 1.41078568, 0.45335022, 0.1419628, 0.03802268, 0.04621375, 0.01261204, 0.04653099, 0.10195512, 0.18079406, -0.1898452, -0.24501109, -0.71440864, -0.82188988, -0.32300544, -0.07680188, -0.0183593, -0.02145147, -0.14442876, -0.13897884, -0.41970083, -0.53978181, -0.81733, -0.77516699, -0.6827361, -0.27539611, 0.01427381, -0.02352227, 0.00223821, -0.00509738, 0.03753691, 0.05826023, 0.34700248, 0.53648567, 0.56336415, 0.73740566, 0.68290168, 0.80702746, 0.47288245, 0.22873914, 0.1323263, 0.18721257, 0.38872179, 0.5571546, 0.62545192, 0.51162982, 1.28496778, 0.91240239, 0.44763446, -0.34558165, -0.32126725, -0.13707247, -0.11812115, -0.14246191, -0.33914241, -0.59595251, -0.76603931, -0.95292002, -1.69234133, -1.44532502, -0.8163048, -0.27210402, -0.05841839, 0.02669862, 0.06060357, 0.04068814, 0.17806116, 0.25716701, 0.58398741, 0.95062274, 2.00101161, 2.05761814, 1.74057662, 0.76864243, 0.3566184, 0.01938879, 0.01129906, -0.00691494, -0.11471844, -0.12220788, -0.46378085, -0.76668882, -1.8203615, -1.80084801, -1.58501005, -0.5208298, -0.27426577, -0.01387694, -0.04243414, -0.07133579, -0.10209171, -0.04366681, -0.06109473, -0.03943163, 0.3148942, 0.57496029, 0.60446811, 0.73262405, 0.37140131, 0.18555129, 0.08227628, 0.11913572, 0.22764499, 0.35582894, 0.60779673, 0.85310715, 1.23990095, 0.89678788, 0.23346186, -0.24769557, -0.28325707, -0.13954946, -0.09492368, -0.07607545, -0.23001991, -0.42238122, -0.68010765, -0.90599316, -1.69077659, -1.67265296, -1.00972712, -0.67655402, 0.01419702, -0.00304723, 0.06103691, 0.09834027, 0.18685167, 0.29223168, 0.52865916, 0.54262394, 0.64842945, 0.95841271, 1.24009287, 1.16617942, 0.80071652, 0.3447271, 0.1351914, 0.04118001, 0.1700764, 0.39442945, 0.35222113, 0.21554053, 0.4189862, 0.01172769, -0.86072814, -1.04859877, -0.81989408, -0.35956979, -0.13597609, -0.10660569, -0.25517979, -0.39934713, -0.48581338, -0.33558851, -0.32364452, 0.02615488, 0.53735149, 0.43695128, 0.12556195, 0.04231615, 0.00691247, -0.03409019, -0.05299731, -0.1705423, -0.23371273, -0.13540632, -0.13686514, -0.28611076, -0.2569176, -0.15721166, -0.12167645, -0.0396246, -0.03912748, -0.03107409, 0.02763657, -0.03745994, -0.0960384, -0.16005671, -0.23481375, -0.2919997, -0.28406811, -0.23517478, -0.10721764, -0.05092888, -0.04520934, 0.01234692, -0.03137775, -0.01226076, 0.00540099, 0.0410589, -0.06418979, -0.23792684, -0.19889355, 0.15362859, 0.19808075, 0.09901999, 0.08383148, 0.1328882, 0.1155429, 0.06566355, 0.13103351, -0.00214756, 0.11389524, 0.60455656, 0.43063915, -0.11312306, 0.00848174, -0.04416773, -0.03458966, -0.11635408, -0.09985384, -0.10910749, -0.03021795, 0.00818002, -0.20921308, -0.42517149, -0.26740992, 0.21723568, 0.19341183, 0.03723881, 0.0800474, 0.1313054, 0.17315492, 0.60613275, 0.88496959, 1.29391515, 1.67872524, 1.1444242, 0.56303668, 0.21097398, -0.29172775, -0.07173294, -0.10594339, -0.13427913, -0.23306128, -0.63841069, -1.01829767, -1.37716746, -1.74518943, -1.48689389, -1.00245714, -0.67613804, -0.09916437, 0.01034598, 0.00059676, -0.02620511, 0.07644644, 0.21421635, 0.36779583, 0.44090557, 0.65572244, 0.69319898, 1.03741217, 1.03150916, 0.48106751, 0.19878693, 0.08993446, 0.10016203, 0.08885416, 0.01304582, 0.01628131, -0.16743767, -0.3889482, -0.25320077, -0.41278255, -0.64387393, -0.24642634, -0.09595281, 0.00029226, -0.03017606, -0.09989822, -0.10608336, -0.12089968, -0.02303368, -0.07865107, -0.07976627, -0.27282, -0.00616729, 0.12162459, 0.01441428, 0.01936977, 0.04224043, 0.10971794, 0.31981739, 0.37371701, 0.21740788, 0.66436541, 0.8377074, 1.11139965, 0.89899027, 0.63889956, 0.26021931, 0.10602421, 0.05764158, 0.03996068, 0.13342732, -0.01258349, 0.20526713, -0.05639255, -0.51611507, -1.10225511, -1.04906142, -0.82814342, -0.32945809, -0.16659749, -0.13606755, -0.156371, -0.44539213, -0.54849428, -0.57765388, -0.46875834, -0.20867264, 0.11628377, 0.30508852, 0.18076879, 0.15996796, 0.09090945, 0.13049443, 0.37585843, 0.47701722, 0.8886351, 1.12534606, 1.0532701, 1.1787746, 1.19929063, 0.67156017, 0.26693404, 0.08880523, -0.0367229, 0.01958427, -0.2178995, -0.35959432, -0.61479795, -1.12488365, -1.24093127, -1.37260103, -1.34592342, -1.1085875, -0.48515847, -0.22466549, -0.01377375, -0.15326615, -0.20697775, -0.21839607, -0.37820193, -0.18108195, -0.23839343, 0.00777894, -0.01658171, 0.14208788, 0.21352491, 0.08116969, 0.0220954, 0.05151662, 0.15160444, 0.46347663, 0.59711337, 0.69609326, 0.85816896, 0.44160861, 0.29913878, 0.35687125, 0.02410281, -0.00206721, 0.04784113, 0.01441422, 0.01972398, -0.19168586, -0.31085777, -0.38792318, -0.59203249, -0.4652282, -0.36413753, -0.41189915, -0.27989927, -0.06170946, -0.09512204, -0.05406281, -0.04524729, -0.19567066, -0.19209856, -0.30510414, -0.21937585, -0.34253049, -0.08848315, 0.0628857, 0.12370691, 0.08033729, 0.02536885, 0.06512444, -0.00683796, 0.01617461, 0.09414208, 0.17485267, 0.01436073, 0.15278709, 0.21909434, -0.13190985, 0.1297549, 0.00458425, 0.00097814, 0.0419029, 0.09299085, 0.30784416, 0.3420583, 0.31633973, 0.6052171, 0.59994769, 0.19161701, 0.14463156, -0.00356764, 0.03013593, -0.00030272, -0.04639405, -0.11171955, -0.26541206, -0.46245131, -0.59785151, -0.93805957, -1.02102923, -0.85468853, -0.57457525, -0.43376198, -0.22778665, -0.08325937, -0.07688884, -0.10757375, -0.04266521, -0.07971251, 0.19849321, 0.46367952, 0.45219129, 0.5286305, 0.82308269, 0.62806904, 0.44585282, 0.2649036, 0.18073915, 0.24439827, 0.33583486, 0.36763605, 0.31510991, 0.44708037, 0.27008474, 0.06621343, -0.20664448, -0.34370041, -0.30381745, -0.18254732, -0.16462031, -0.20288868, -0.47805107, -0.42589119, -0.52396262, -0.80304122, -0.54068702, -0.32430774, -0.41455108, -0.18256193, -0.11230741, -0.05113308, -0.00785848, -0.00410898, 0.02002721, 0.04911622, 0.11129829, 0.03739616, 0.23160917, 0.09051466, 0.0703001, 0.15306205, 0.092351, 0.04038295, -0.00022292, -0.0345473, -0.104352, -0.14002147, -0.25555477, -0.15546834, -0.12915748, -0.00736588, 0.18039131, 0.03981721, 0.05406788, -0.00028329, 0.12522104, 0.09731361, 0.29498664, 0.20997131, 0.16853192, 0.07126871, 0.02766478, -0.13036358, -0.26429421, -0.18460721, -0.17133695, -0.06757163, -0.16766661, -0.17020702, -0.26582304, -0.23111637, -0.16535208, -0.13117793, -0.28425765, -0.30206084, -0.16778651, -0.0795947, -0.0456669, -0.01921733, -0.02716412, 0.01525059, 0.01458484, 0.00587094, 0.01239279, -0.03418982, -0.09835899, 0.05628902, 0.00924054]

class MarkovRegression:

    @classmethod
    def setup_class(cls, true, endog, atol=1e-05, rtol=1e-07, **kwargs):
        if False:
            print('Hello World!')
        cls.model = markov_regression.MarkovRegression(endog, **kwargs)
        cls.true = true
        cls.result = cls.model.smooth(cls.true['params'])
        cls.atol = atol
        cls.rtol = rtol

    @pytest.mark.smoke
    def test_summary(self):
        if False:
            print('Hello World!')
        self.result.summary()

    def test_llf(self):
        if False:
            for i in range(10):
                print('nop')
        assert_allclose(self.result.llf, self.true['llf'], atol=self.atol, rtol=self.rtol)

    def test_fit(self, **kwargs):
        if False:
            print('Hello World!')
        with warnings.catch_warnings():
            warnings.simplefilter('ignore')
            res = self.model.fit(disp=False, **kwargs)
        assert_allclose(res.llf, self.true['llf_fit'], atol=self.atol, rtol=self.rtol)

    @pytest.mark.smoke
    def test_fit_em(self, **kwargs):
        if False:
            print('Hello World!')
        res_em = self.model._fit_em(**kwargs)
        assert_allclose(res_em.llf, self.true['llf_fit_em'], atol=self.atol, rtol=self.rtol)
fedfunds_const_filtered_joint_probabilities = np.array([[[0.981875427, 0.999977639, 0.999982269, 0.999977917, 0.999961064, 0.999932206, 0.999919386, 0.999894144, 0.999875287, 0.999853807, 0.9998526, 0.999839056, 0.999783848, 0.999774884, 0.999954588, 0.999988082, 0.999982757, 0.99994859, 0.999910525, 0.999825195, 0.999660841, 0.999411534, 0.999435921, 0.999578212, 0.999835797, 0.999931424, 0.999955815, 0.999969158, 0.999971638, 0.999929247, 0.999921198, 0.999904441, 0.999869417, 0.999855264, 0.999845124, 0.999846496, 0.999755048, 0.999708382, 0.999701905, 0.999690188, 0.999700859, 0.999653041, 0.99942622, 0.999320494, 0.999321052, 0.999230758, 0.998727025, 0.997930031, 0.995880407, 0.994433855, 0.997574246, 0.999263821, 0.999459141, 0.999242937, 0.998291614, 0.991580774, 0.989101309, 0.988455096, 0.973457493, 0.707858812, 0.0984830417, 0.00548777905, 0.000648064326, 0.000948013715, 0.0100281851, 0.169325148, 0.857820523, 0.993211456, 0.994962561, 0.997835285, 0.99955928, 0.999122588, 0.998381004, 0.997159054, 0.981694661, 0.852237392, 0.0298185003, 0.000380317793, 3.03223798e-05, 3.72338821e-06, 9.81252727e-08, 1.16279423e-06, 0.00219178686, 0.25468843, 0.545485941, 0.849963514, 0.979591871, 0.99453552, 0.995920695, 0.99765234, 0.998379085, 0.99709784, 0.992715379, 0.9786689, 0.954978984, 0.87003244, 0.473445558, 0.0187649267, 0.00022621756, 7.75338336e-06, 1.7741082e-06, 2.00686803e-08, 9.02595322e-11, 2.90324859e-10, 2.76383741e-07, 4.31669137e-09, 6.21472832e-13, 4.82334762e-14, 1.27598134e-14, 3.17409414e-12, 2.61276609e-10, 7.78226008e-11, 5.39702646e-09, 5.20281165e-06, 0.00011643005, 0.00022827563, 8.20520602e-05, 3.54392208e-05, 2.5269063e-05, 5.71223049e-06, 6.04760361e-07, 3.25802367e-06, 0.000149189117, 0.000903616681, 0.00205169327, 0.00179174202, 0.00200293091, 0.00880162479, 0.0698800266, 0.210894169, 0.378257683, 0.416997707, 0.374555143, 0.309162817, 0.319673213, 0.213371614, 0.0500408396, 0.005651314, 0.000267174854, 2.77281533e-05, 3.81188091e-05, 0.000164157087, 0.000499719207, 0.000842437704, 0.000994072768, 0.00192236077, 0.0177274131, 0.180694204, 0.559064015, 0.922767369, 0.995149639, 0.999418123, 0.999755674, 0.999825956, 0.999829396, 0.999837748, 0.999825597, 0.999839509, 0.999789371, 0.999458023, 0.998857894, 0.99713633, 0.992814933, 0.988571, 0.989824082, 0.99127701, 0.994688346, 0.996090383, 0.996010189, 0.996126138, 0.996152552, 0.994805484, 0.99436592, 0.994404335, 0.994350015, 0.994473588, 0.994298374, 0.997447776, 0.998217589, 0.998253594, 0.997319145, 0.996244465, 0.993650638, 0.984885276, 0.97180797, 0.963220269, 0.984748123, 0.99779575, 0.999604178, 0.999934302, 0.999968719, 0.999969041, 0.999969388, 0.999978903, 0.999983737, 0.999983963, 0.999987949, 0.999988448, 0.999988464, 0.999988318, 0.9999801, 0.999960662, 0.999921917, 0.999854499, 0.999711016, 0.999422933, 0.998897716, 0.997954476, 0.996644185, 0.996382036, 0.996295075, 0.996325086, 0.997066095, 0.998599288, 0.99972902, 0.999942853, 0.999959712, 0.999992291, 0.999995977, 0.999996082, 0.999996179, 0.99999637, 0.999996334, 0.999996045, 0.99999603, 0.99999603], [0.0179021167, 1.14091306e-05, 5.61557959e-07, 8.80398735e-07, 1.08717798e-06, 1.94073468e-06, 3.37670187e-06, 3.96039606e-06, 5.22475895e-06, 6.12683114e-06, 7.18211108e-06, 7.18979687e-06, 7.88353588e-06, 1.06791533e-05, 1.09974873e-05, 1.76468607e-06, 5.2060318e-07, 8.57457507e-07, 2.5920683e-06, 4.45469808e-06, 8.73353814e-06, 1.69387908e-05, 2.93063475e-05, 2.74245464e-05, 2.02263872e-05, 7.3832462e-06, 3.13785014e-06, 2.1047842e-06, 1.47354829e-06, 1.3787133e-06, 3.55723955e-06, 3.85823009e-06, 4.70191999e-06, 6.45467678e-06, 7.09050564e-06, 7.57792773e-06, 7.48186721e-06, 1.21760845e-05, 1.43286436e-05, 1.45502695e-05, 1.51400501e-05, 1.45617528e-05, 1.70401707e-05, 2.85443698e-05, 3.33783376e-05, 3.30986931e-05, 3.77268239e-05, 6.32867451e-05, 0.000102678523, 0.000205654391, 0.000275680178, 0.000110405281, 3.20904634e-05, 2.6081561e-05, 3.74458003e-05, 8.5101422e-05, 0.000426242634, 0.000536412357, 0.000555614723, 0.000968406481, 0.00207440399, 0.00251696579, 0.00411814576, 0.0101505143, 0.0458175094, 0.146789923, 0.0951602906, 0.00251277827, 0.000219080166, 0.000247729179, 9.84424301e-05, 1.75415066e-05, 4.40579693e-05, 8.06554966e-05, 0.000139332709, 0.000808543683, 0.000263400428, 0.00062877886, 0.00153926554, 0.000121448448, 4.01921637e-05, 0.0014798118, 0.0757754547, 0.154441814, 0.040395709, 0.0308060743, 0.0067997258, 0.000703557513, 0.000244292397, 0.000196941023, 0.000110340666, 7.73495785e-05, 0.00014419962, 0.000360905335, 0.00104887049, 0.00205193714, 0.00356087416, 0.0010549709, 0.000573656986, 0.000496641901, 0.000180265024, 5.65192629e-06, 8.15973913e-07, 1.82423614e-05, 0.000776851662, 2.84604839e-07, 1.10296978e-07, 2.24235284e-08, 2.91783631e-08, 5.57802135e-06, 2.40181297e-06, 1.66126826e-06, 0.000166577067, 0.00160124567, 0.00371040697, 0.0030470243, 0.00128036894, 0.0013319939, 0.00094625953, 0.000301196207, 0.000101009606, 0.00164390413, 0.00463667164, 0.00963523286, 0.00987732797, 0.00760992378, 0.0108213202, 0.0347413597, 0.0787085339, 0.0619641042, 0.0516881745, 0.0283502897, 0.0239198441, 0.0239310293, 0.0328190388, 0.020098032, 0.00842451713, 0.00466668659, 0.00131406606, 0.000897753552, 0.00211004086, 0.00391003494, 0.00626373002, 0.00634371628, 0.00704224256, 0.0121673274, 0.0636067034, 0.104652728, 0.0717968006, 0.0276866443, 0.00266003442, 0.000112494156, 2.40738814e-05, 1.1294361e-05, 8.34520559e-06, 8.32013406e-06, 7.89300655e-06, 8.53818448e-06, 7.79122759e-06, 1.03973423e-05, 2.72411101e-05, 5.70666949e-05, 0.000143281927, 0.000359485298, 0.000568122941, 0.000493097756, 0.000423244829, 0.000250908844, 0.000187544775, 0.000194954279, 0.000188610947, 0.000187324551, 0.000256591337, 0.000275680269, 0.00027270168, 0.000275688894, 0.000269118592, 0.000279368706, 0.000116602211, 8.54105771e-05, 8.50836389e-05, 0.000132948236, 0.000185246543, 0.000313229937, 0.00074865849, 0.00139370122, 0.00185235809, 0.000694881963, 7.74820062e-05, 1.63275933e-05, 2.53162706e-06, 1.47419297e-06, 1.5118776e-06, 1.49217514e-06, 1.00525815e-06, 7.82384697e-07, 7.82207824e-07, 5.77845546e-07, 5.62709744e-07, 5.62700867e-07, 5.70153586e-07, 9.91143211e-07, 1.96623986e-06, 3.90276412e-06, 7.25964578e-06, 1.444165e-05, 2.88341084e-05, 5.498957e-05, 0.000101928727, 0.000166788149, 0.000176920424, 0.000180878376, 0.000179263902, 0.000141441142, 6.46353467e-05, 1.05822848e-05, 2.38770925e-06, 1.94345661e-06, 2.95614088e-07, 1.91116221e-07, 1.9109561e-07, 1.86129447e-07, 1.76579974e-07, 1.78918351e-07, 1.93625709e-07, 1.93628651e-07]], [[1.12025955e-05, 1.08238349e-05, 1.71596282e-05, 2.11831999e-05, 3.78067714e-05, 6.57213848e-05, 7.69689076e-05, 0.000101479702, 0.000118846167, 0.000139184231, 0.000139184063, 0.000152618987, 0.000206583251, 0.000212093282, 3.40270257e-05, 1.01343628e-05, 1.67136918e-05, 5.05076133e-05, 8.66507075e-05, 0.000169568562, 0.000327466124, 0.000561681158, 0.000519031075, 0.000383481719, 0.000141026283, 6.07294396e-05, 4.09142321e-05, 2.86746604e-05, 2.68478873e-05, 6.92750449e-05, 7.49687747e-05, 9.1335764e-05, 0.000125272004, 0.000137363965, 0.000146709304, 0.000144790612, 0.00023564655, 0.000275965631, 0.00027962116, 0.0002908831, 0.000279620868, 0.000327463569, 0.000547092221, 0.000632282164, 0.000624012551, 0.000711758349, 0.00118880242, 0.00188316198, 0.00362983774, 0.004415945, 0.00167213822, 0.000561598141, 0.000492415886, 0.000711767023, 0.00160853614, 0.00765465286, 0.00724380556, 0.00705094383, 0.0163405802, 0.12056979, 0.0394742135, 0.00208678283, 0.000151404348, 8.92900957e-05, 0.00019975831, 0.000761880868, 0.000406265456, 0.00118223714, 0.00392458604, 0.00152531964, 0.000310635338, 0.000844534873, 0.00150619244, 0.00254719705, 0.0158406633, 0.0741723708, 0.0956881006, 0.000583874154, 1.90161316e-05, 2.9637531e-05, 2.36039059e-06, 7.58604311e-07, 2.57849849e-05, 0.000940604577, 0.00533706193, 0.0030979921, 0.00166375727, 0.0027493213, 0.00305895259, 0.00178605741, 0.00135561648, 0.00261499931, 0.00620778364, 0.0151802588, 0.0205865429, 0.037192313, 0.0595732628, 0.0165718056, 0.000380823607, 1.50863835e-05, 9.51367568e-06, 3.4330591e-06, 1.06949636e-07, 1.53871486e-08, 3.43715817e-07, 1.46644282e-05, 5.44780299e-09, 2.07973264e-09, 4.22811016e-10, 5.50174068e-10, 1.05177578e-07, 4.52926927e-08, 3.1320586e-08, 3.13648669e-06, 3.02223414e-05, 7.21922046e-05, 6.18725853e-05, 2.56885381e-05, 2.57933905e-05, 1.83306498e-05, 5.78811168e-06, 1.91303926e-06, 3.09596995e-05, 8.97107118e-05, 0.000198397776, 0.000225453416, 0.000176630376, 0.000234227583, 0.00073023221, 0.00238495171, 0.00400510154, 0.0077772657, 0.00897115089, 0.00822739679, 0.00604111865, 0.00778825566, 0.00537640212, 0.00115742054, 0.000196231469, 2.98340104e-05, 1.74288946e-05, 4.04251152e-05, 7.66081747e-05, 0.000127458564, 0.000135365069, 0.000150582215, 0.000247483336, 0.00119104299, 0.00275836722, 0.00154674662, 0.000581818376, 0.000420436146, 0.0002149, 0.000160869708, 0.000160870261, 0.000152618788, 0.000165161879, 0.000150622869, 0.000201215675, 0.000525921364, 0.00108428049, 0.00264975788, 0.00612720308, 0.00804408524, 0.00602884531, 0.00543410929, 0.0033945156, 0.0029025208, 0.00318247731, 0.00305958361, 0.00305966473, 0.00419096979, 0.00424463587, 0.00413448594, 0.00418905097, 0.00408069293, 0.00424434753, 0.00176233516, 0.00148624883, 0.00152595908, 0.00238530006, 0.00318322588, 0.0051676805, 0.011137832, 0.0152736098, 0.014174169, 0.00454911025, 0.000877392678, 0.000294712782, 4.85508787e-05, 2.86746478e-05, 2.94397372e-05, 2.9054689e-05, 1.95742396e-05, 1.52422076e-05, 1.52422111e-05, 1.12600205e-05, 1.09674004e-05, 1.09674006e-05, 1.11127487e-05, 1.93182406e-05, 3.83078048e-05, 7.59623818e-05, 0.000141028921, 0.000279623709, 0.000554340948, 0.00104233041, 0.00188320811, 0.00294262269, 0.00294184869, 0.00298057651, 0.00294168054, 0.00232272136, 0.00109836589, 0.00019341139, 4.60605812e-05, 3.78067203e-05, 5.75348228e-06, 3.72600447e-06, 3.72600486e-06, 3.62917375e-06, 3.44299546e-06, 3.48862495e-06, 3.77538503e-06, 3.77538498e-06, 3.77538498e-06], [0.000211253415, 1.27726353e-07, 9.96660517e-09, 1.92893528e-08, 4.25132434e-08, 1.31928738e-07, 2.68831493e-07, 4.15719953e-07, 6.42307057e-07, 8.82117691e-07, 1.03405286e-06, 1.13509493e-06, 1.68479526e-06, 2.34314197e-06, 3.87056416e-07, 1.84972077e-08, 8.999612e-09, 4.47949311e-08, 2.3232423e-07, 7.81405794e-07, 2.95897306e-06, 9.84611707e-06, 1.57411766e-05, 1.08818924e-05, 2.95071175e-06, 4.63781583e-07, 1.3278924e-07, 6.24246828e-08, 4.0918895e-08, 9.87912777e-08, 2.75844825e-07, 3.64508436e-07, 6.09288617e-07, 9.17164574e-07, 1.07606678e-06, 1.13499677e-06, 1.82395688e-06, 3.47637333e-06, 4.1451637e-06, 4.37886128e-06, 4.37989719e-06, 4.9336058e-06, 9.64763432e-06, 1.86794329e-05, 2.15570874e-05, 2.43845482e-05, 4.64462028e-05, 0.000123520043, 0.000387076429, 0.00094454539, 0.000477935817, 6.41759692e-05, 1.63523468e-05, 1.92148699e-05, 6.24041695e-05, 0.000679471603, 0.0032286427, 0.00395754786, 0.00964631226, 0.170602991, 0.859968341, 0.989908472, 0.995082386, 0.988812182, 0.943954547, 0.683123048, 0.0466129206, 0.00309352861, 0.000893773079, 0.000391666349, 3.16418394e-05, 1.53356713e-05, 6.87457292e-05, 0.000213092992, 0.00232534345, 0.0727816933, 0.874229999, 0.998407029, 0.998411396, 0.999845191, 0.999957349, 0.998518267, 0.922006973, 0.589929152, 0.408781288, 0.116132419, 0.0119446461, 0.00201160124, 0.00077605952, 0.000364661127, 0.00015495802, 0.000209811287, 0.000932637836, 0.00578993623, 0.0233856026, 0.0907233098, 0.463420305, 0.963608297, 0.998819302, 0.999480518, 0.999808447, 0.999990895, 0.999999077, 0.999981742, 0.999222528, 0.999985047, 0.999999884, 0.999999975, 0.99999997, 0.999994421, 0.999997493, 0.999998293, 0.999833386, 0.998390415, 0.996142941, 0.996652508, 0.998575706, 0.998606878, 0.999002678, 0.999674761, 0.999892598, 0.998350925, 0.99518318, 0.98937144, 0.987872581, 0.990372881, 0.986999118, 0.956222788, 0.850681207, 0.724756775, 0.566049041, 0.546874738, 0.592553862, 0.658678757, 0.641466629, 0.758742098, 0.936158241, 0.988524579, 0.998222528, 0.999044684, 0.997834411, 0.995885383, 0.993159943, 0.992686387, 0.99182832, 0.98575973, 0.9184184, 0.713462025, 0.366380818, 0.0479992398, 0.00160850862, 4.89463014e-05, 5.35211883e-06, 1.87952723e-06, 1.38874976e-06, 1.31354781e-06, 1.34854399e-06, 1.33034183e-06, 1.62179619e-06, 5.65868721e-06, 3.05843904e-05, 0.000156845284, 0.000914581641, 0.0030254294, 0.00357894927, 0.00279578295, 0.00149389314, 0.000756187782, 0.000619788616, 0.000619323917, 0.000599172642, 0.000816221729, 0.0011328523, 0.00118549926, 0.00118823205, 0.00117003007, 0.0011881602, 0.000510520503, 0.000179560242, 0.000135036369, 0.000210470876, 0.000439360698, 0.000996435388, 0.00366366176, 0.0121697619, 0.0212118606, 0.00885040895, 0.000631975856, 2.3627015e-05, 8.19945322e-07, 7.50841896e-08, 4.48888835e-08, 4.54342381e-08, 3.0210016e-08, 1.58478237e-08, 1.23342395e-08, 9.10969133e-09, 6.55477183e-09, 6.38307937e-09, 6.46757155e-09, 1.13921361e-08, 3.92715328e-08, 1.54492028e-07, 5.69351898e-07, 2.10015832e-06, 8.28479101e-06, 3.11191703e-05, 0.000107326014, 0.000311263455, 0.000509327027, 0.000547428437, 0.000552354866, 0.000431919788, 0.000160904664, 1.29332277e-05, 5.04162769e-07, 9.33695004e-08, 1.15650115e-08, 1.13921931e-09, 7.36511886e-10, 7.17294041e-10, 6.62811758e-10, 6.37139329e-10, 6.9864241e-10, 7.56071871e-10, 7.56083358e-10]]])

class TestFedFundsConst(MarkovRegression):

    @classmethod
    def setup_class(cls):
        if False:
            for i in range(10):
                print('nop')
        path = os.path.join(current_path, 'results', 'results_predict_fedfunds.csv')
        results = pd.read_csv(path)
        true = {'params': np.r_[0.9820939, 0.0503587, 3.70877, 9.556793, 2.107562 ** 2], 'llf': -508.63592, 'llf_fit': -508.63592, 'llf_fit_em': -508.65852, 'bse_oim': np.r_[0.0104002, 0.0268434, 0.1767083, 0.2999889, np.nan], 'smoothed0': results['const_sm1'], 'smoothed1': results['const_sm2'], 'predict0': results['const_yhat1'], 'predict1': results['const_yhat2'], 'predict_predicted': results['const_pyhat'], 'predict_filtered': results['const_fyhat'], 'predict_smoothed': results['const_syhat']}
        super(TestFedFundsConst, cls).setup_class(true, fedfunds, k_regimes=2)

    def test_filter_output(self, **kwargs):
        if False:
            print('Hello World!')
        res = self.result
        assert_allclose(res.filtered_joint_probabilities, fedfunds_const_filtered_joint_probabilities)

    def test_smoothed_marginal_probabilities(self):
        if False:
            i = 10
            return i + 15
        assert_allclose(self.result.smoothed_marginal_probabilities[:, 0], self.true['smoothed0'], atol=1e-06)
        assert_allclose(self.result.smoothed_marginal_probabilities[:, 1], self.true['smoothed1'], atol=1e-06)

    def test_predict(self):
        if False:
            while True:
                i = 10
        for name in ['predicted', 'filtered', 'smoothed', None]:
            actual = self.model.predict(self.true['params'], probabilities=name, conditional=True)
            assert_allclose(actual[0], self.true['predict0'], atol=1e-06)
            assert_allclose(actual[1], self.true['predict1'], atol=1e-06)
        actual = self.model.predict(self.true['params'], probabilities='predicted')
        assert_allclose(actual, self.true['predict_predicted'], atol=1e-05)
        actual = self.model.predict(self.true['params'], probabilities='filtered')
        assert_allclose(self.model.predict(self.true['params'], probabilities='filtered'), self.true['predict_filtered'], atol=1e-05)
        actual = self.model.predict(self.true['params'], probabilities='smoothed')
        assert_allclose(actual, self.true['predict_smoothed'], atol=1e-06)
        actual = self.model.predict(self.true['params'], probabilities=None)
        assert_allclose(actual, self.true['predict_smoothed'], atol=1e-06)

    def test_bse(self):
        if False:
            return 10
        bse = self.result.cov_params_approx.diagonal() ** 0.5
        assert_allclose(bse[:-1], self.true['bse_oim'][:-1], atol=1e-07)
fedfunds_const_short_filtered_joint_probabilities = np.array([[[0.981370301, 0.999956215, 0.999995966, 0.999996082, 0.999996179, 0.99999637, 0.999996334, 0.999996045, 0.99999603, 0.99999603], [0.0178929069, 3.78065881e-05, 3.0654664e-07, 1.91118379e-07, 1.91095611e-07, 1.86129447e-07, 1.76579974e-07, 1.78918351e-07, 1.93625709e-07, 1.93628651e-07]], [[3.71038873e-05, 5.75327472e-06, 3.72600443e-06, 3.72600486e-06, 3.62917375e-06, 3.44299546e-06, 3.48862495e-06, 3.77538503e-06, 3.77538498e-06, 3.77538498e-06], [0.000699688113, 2.24977302e-07, 1.1813505e-09, 7.36520203e-10, 7.17294043e-10, 6.62811758e-10, 6.37139329e-10, 6.9864241e-10, 7.56071871e-10, 7.56083358e-10]]])
fedfunds_const_short_predicted_joint_probabilities = np.array([[[[0.711514435, 0.963797786, 0.982050899, 0.982089938, 0.982090052, 0.982090147, 0.982090335, 0.9820903, 0.982090016, 0.982090001], [0.0129727398, 0.0175725147, 3.71296195e-05, 3.01057585e-07, 1.87696195e-07, 1.87673833e-07, 1.82796594e-07, 1.73418115e-07, 1.75714621e-07, 1.90158628e-07]], [[0.000665201476, 1.86850353e-06, 2.89727435e-07, 1.87636739e-07, 1.87636761e-07, 1.82760472e-07, 1.73384775e-07, 1.75682617e-07, 1.90123482e-07, 1.90123479e-07], [0.0125440648, 3.52353838e-05, 1.13295645e-08, 5.94912755e-11, 3.70902e-11, 3.61219955e-11, 3.33783385e-11, 3.20855083e-11, 3.51827235e-11, 3.80747965e-11]]], [[[0.0129727398, 0.0175725147, 0.017905316, 0.0179060278, 0.0179060298, 0.0179060316, 0.017906035, 0.0179060344, 0.0179060292, 0.0179060289], [0.000236526442, 0.000320392181, 6.76968547e-07, 5.48905479e-09, 3.42218481e-09, 3.42177711e-09, 3.33285249e-09, 3.16185867e-09, 3.20372988e-09, 3.46708131e-09]], [[0.0125440648, 3.52353838e-05, 5.46354728e-06, 3.53836769e-06, 3.5383681e-06, 3.44641328e-06, 3.26961068e-06, 3.31294233e-06, 3.58526155e-06, 3.5852615e-06], [0.236550228, 0.000664452729, 2.13647738e-07, 1.12185923e-09, 6.99430003e-10, 6.81172047e-10, 6.2943342e-10, 6.05053821e-10, 6.63459686e-10, 7.17997074e-10]]]])
fedfunds_const_short_smoothed_joint_probabilities = np.array([[[0.982056759, 0.999961887, 0.999999502, 0.999999618, 0.999999623, 0.999999637, 0.999999644, 0.999999627, 0.999999612, 0.99999603], [0.0179054228, 3.78068025e-05, 3.06547724e-07, 1.91119055e-07, 1.91096269e-07, 1.86130055e-07, 1.76580558e-07, 1.78918992e-07, 1.93626403e-07, 1.93628651e-07]], [[1.90448249e-06, 2.95069837e-07, 1.91096241e-07, 1.91095282e-07, 1.86127261e-07, 1.76579242e-07, 1.78922146e-07, 1.93629492e-07, 1.94345814e-07, 3.77538498e-06], [3.59138585e-05, 1.15384749e-08, 6.05881299e-11, 3.77738466e-11, 3.678743e-11, 3.3993306e-11, 3.26771544e-11, 3.58315175e-11, 3.89203762e-11, 7.56083358e-10]]])

class TestFedFundsConstShort(MarkovRegression):

    @classmethod
    def setup_class(cls):
        if False:
            i = 10
            return i + 15
        true = {'params': np.r_[0.9820939, 0.0503587, 3.70877, 9.556793, 2.107562 ** 2], 'llf': -29.909297, 'llf_fit': -7.855337, 'llf_fit_em': -7.8554974}
        super(TestFedFundsConstShort, cls).setup_class(true, fedfunds[-10:], k_regimes=2)

    def test_filter_output(self, **kwargs):
        if False:
            for i in range(10):
                print('nop')
        res = self.result
        assert_allclose(res.filtered_joint_probabilities, fedfunds_const_short_filtered_joint_probabilities)
        desired = fedfunds_const_short_predicted_joint_probabilities
        if desired.ndim > res.predicted_joint_probabilities.ndim:
            desired = desired.sum(axis=-2)
        assert_allclose(res.predicted_joint_probabilities, desired)

    def test_smoother_output(self, **kwargs):
        if False:
            i = 10
            return i + 15
        res = self.result
        assert_allclose(res.filtered_joint_probabilities, fedfunds_const_short_filtered_joint_probabilities)
        desired = fedfunds_const_short_predicted_joint_probabilities
        if desired.ndim > res.predicted_joint_probabilities.ndim:
            desired = desired.sum(axis=-2)
        assert_allclose(res.predicted_joint_probabilities, desired)
        assert_allclose(res.smoothed_joint_probabilities, fedfunds_const_short_smoothed_joint_probabilities)

    def test_hamilton_filter_order_zero(self):
        if False:
            while True:
                i = 10
        k_regimes = 3
        nobs = 4
        initial_probabilities = np.ones(k_regimes) / k_regimes
        regime_transition = np.eye(k_regimes)[:, :, np.newaxis]
        conditional_likelihoods = np.ones((k_regimes, nobs)) / 2
        conditional_likelihoods[:, 2] = [0, 1, 0]
        expected_marginals = np.empty((k_regimes, nobs))
        expected_marginals[:, :2] = [[1 / 3], [1 / 3], [1 / 3]]
        expected_marginals[:, 2:] = [[0], [1], [0]]
        cy_results = markov_switching.cy_hamilton_filter_log(initial_probabilities, regime_transition, np.log(conditional_likelihoods + 1e-20), model_order=0)
        assert_allclose(cy_results[0], expected_marginals, atol=1e-15)

    def test_hamilton_filter_order_zero_with_tvtp(self):
        if False:
            print('Hello World!')
        k_regimes = 3
        nobs = 8
        initial_probabilities = np.ones(k_regimes) / k_regimes
        regime_transition = np.zeros((k_regimes, k_regimes, nobs))
        regime_transition[...] = np.eye(k_regimes)[:, :, np.newaxis]
        regime_transition[..., 4] = [[0, 0, 0], [1 / 2, 1 / 2, 1 / 2], [1 / 2, 1 / 2, 1 / 2]]
        conditional_likelihoods = np.empty((k_regimes, nobs))
        conditional_likelihoods[:, 0] = [1 / 3, 1 / 3, 1 / 3]
        conditional_likelihoods[:, 1] = [1 / 3, 1 / 3, 0]
        conditional_likelihoods[:, 2] = [0, 1 / 3, 1 / 3]
        conditional_likelihoods[:, 3:5] = [[1 / 3], [1 / 3], [1 / 3]]
        conditional_likelihoods[:, 5] = [0, 1 / 3, 1 / 3]
        conditional_likelihoods[:, 6] = [0, 0, 1 / 3]
        conditional_likelihoods[:, 7] = [1 / 3, 1 / 3, 1 / 3]
        expected_marginals = np.empty((k_regimes, nobs))
        expected_marginals[:, 0] = [1 / 3, 1 / 3, 1 / 3]
        expected_marginals[:, 1] = [1 / 2, 1 / 2, 0]
        expected_marginals[:, 2:4] = [[0], [1], [0]]
        expected_marginals[:, 4:6] = [[0], [1 / 2], [1 / 2]]
        expected_marginals[:, 6:8] = [[0], [0], [1]]
        cy_results = markov_switching.cy_hamilton_filter_log(initial_probabilities, regime_transition, np.log(conditional_likelihoods + 1e-20), model_order=0)
        assert_allclose(cy_results[0], expected_marginals, atol=1e-15)

    def test_hamilton_filter_shape_checks(self):
        if False:
            while True:
                i = 10
        k_regimes = 3
        nobs = 8
        order = 3
        initial_probabilities = np.ones(k_regimes) / k_regimes
        regime_transition = np.ones((k_regimes, k_regimes, nobs)) / k_regimes
        conditional_loglikelihoods = np.ones(order * (k_regimes,) + (nobs,))
        with assert_raises(ValueError):
            markov_switching.cy_hamilton_filter_log(initial_probabilities, regime_transition, conditional_loglikelihoods, model_order=order)

class TestFedFundsConstL1(MarkovRegression):

    @classmethod
    def setup_class(cls):
        if False:
            while True:
                i = 10
        true = {'params': np.r_[0.6378175, 0.1306295, 0.724457, -0.0988764, 0.7631424, 1.061174, 0.6915759 ** 2], 'llf': -264.71069, 'llf_fit': -264.71069, 'llf_fit_em': -264.71153, 'bse_oim': np.r_[0.1202616, 0.0495924, 0.2886657, 0.1183838, 0.0337234, 0.0185031, np.nan]}
        super(TestFedFundsConstL1, cls).setup_class(true, fedfunds[1:], k_regimes=2, exog=fedfunds[:-1])

    def test_bse(self):
        if False:
            i = 10
            return i + 15
        bse = self.result.cov_params_approx.diagonal() ** 0.5
        assert_allclose(bse[:-1], self.true['bse_oim'][:-1], atol=1e-06)

class TestFedFundsConstL1Exog(MarkovRegression):

    @classmethod
    def setup_class(cls):
        if False:
            for i in range(10):
                print('nop')
        path = os.path.join(current_path, 'results', 'results_predict_fedfunds.csv')
        results = pd.read_csv(path)
        true = {'params': np.r_[0.7279288, 0.2114578, 0.6554954, -0.0944924, 0.8314458, 0.9292574, 0.1355425, 0.0343072, -0.0273928, 0.2125275, 0.5764495 ** 2], 'llf': -229.25614, 'llf_fit': -229.25614, 'llf_fit_em': -229.25624, 'bse_oim': np.r_[0.0929915, 0.0641179, 0.1373889, 0.1279231, 0.0333236, 0.0270852, 0.0294113, 0.0240138, 0.0408057, 0.0297351, np.nan], 'predict0': results.iloc[4:]['constL1exog_syhat1'], 'predict1': results.iloc[4:]['constL1exog_syhat2'], 'predict_smoothed': results.iloc[4:]['constL1exog_syhat']}
        super(TestFedFundsConstL1Exog, cls).setup_class(true, fedfunds[4:], k_regimes=2, exog=np.c_[fedfunds[3:-1], ogap[4:], inf[4:]])

    def test_fit(self, **kwargs):
        if False:
            for i in range(10):
                print('nop')
        kwargs.setdefault('em_iter', 10)
        kwargs.setdefault('maxiter', 100)
        super(TestFedFundsConstL1Exog, self).test_fit(**kwargs)

    def test_predict(self):
        if False:
            return 10
        for name in ['predicted', 'filtered', 'smoothed', None]:
            actual = self.model.predict(self.true['params'], probabilities=name, conditional=True)
            assert_allclose(actual[0], self.true['predict0'], atol=1e-05)
            assert_allclose(actual[1], self.true['predict1'], atol=1e-05)
        actual = self.model.predict(self.true['params'], probabilities='smoothed')
        assert_allclose(actual, self.true['predict_smoothed'], atol=1e-05)
        actual = self.model.predict(self.true['params'], probabilities=None)
        assert_allclose(actual, self.true['predict_smoothed'], atol=1e-05)
        actual = self.result.predict(probabilities='smoothed')
        assert_allclose(actual, self.true['predict_smoothed'], atol=1e-05)
        actual = self.result.predict(probabilities=None)
        assert_allclose(actual, self.true['predict_smoothed'], atol=1e-05)

    def test_bse(self):
        if False:
            for i in range(10):
                print('nop')
        bse = self.result.cov_params_approx.diagonal() ** 0.5
        assert_allclose(bse[:-1], self.true['bse_oim'][:-1], atol=1e-07)

class TestFedFundsConstL1Exog3(MarkovRegression):

    @classmethod
    def setup_class(cls):
        if False:
            for i in range(10):
                print('nop')
        true = {'params': np.r_[0.7253684, 0.1641252, 0.6178282, 0.2564055, 0.7994204, 0.3821718, 0.5261292, -0.0034106, 0.6015991, 0.8464551, 0.9690088, 0.4178913, 0.1201952, 0.0464136, 0.1075357, -0.0425603, 0.1298906, 0.9099168, 0.438375 ** 2], 'llf': -189.89493, 'llf_fit': -182.27188, 'llf_fit_em': -226.88581}
        super(TestFedFundsConstL1Exog3, cls).setup_class(true, fedfunds[4:], k_regimes=3, exog=np.c_[fedfunds[3:-1], ogap[4:], inf[4:]])

    def test_fit(self, **kwargs):
        if False:
            i = 10
            return i + 15
        kwargs['search_reps'] = 20
        np.random.seed(1234)
        super(TestFedFundsConstL1Exog3, self).test_fit(**kwargs)

class TestAreturnsConstL1Variance(MarkovRegression):

    @classmethod
    def setup_class(cls):
        if False:
            i = 10
            return i + 15
        true = {'params': np.r_[0.7530865, 0.6825357, 0.7641424, 1.972771, 0.0790744, 0.527953, 0.5895792 ** 2, 1.605333 ** 2], 'llf': -745.7977, 'llf_fit': -745.7977, 'llf_fit_em': -745.83654, 'bse_oim': np.r_[0.0634387, 0.0662574, 0.0782852, 0.2784204, 0.0301862, 0.0857841, np.nan, np.nan]}
        super(TestAreturnsConstL1Variance, cls).setup_class(true, areturns[1:], k_regimes=2, exog=areturns[:-1], switching_variance=True)

    def test_fit(self, **kwargs):
        if False:
            for i in range(10):
                print('nop')
        kwargs.setdefault('em_iter', 10)
        kwargs.setdefault('maxiter', 100)
        super(TestAreturnsConstL1Variance, self).test_fit(**kwargs)

    def test_bse(self):
        if False:
            i = 10
            return i + 15
        bse = self.result.cov_params_approx.diagonal() ** 0.5
        assert_allclose(bse[:-2], self.true['bse_oim'][:-2], atol=1e-07)

class TestMumpspcNoconstL1Variance(MarkovRegression):

    @classmethod
    def setup_class(cls):
        if False:
            for i in range(10):
                print('nop')
        true = {'params': np.r_[0.762733, 0.1473767, 0.420275, 0.9847369, 0.0562405 ** 2, 0.2611362 ** 2], 'llf': 131.7225, 'llf_fit': 131.7225, 'llf_fit_em': 131.7175}
        super(TestMumpspcNoconstL1Variance, cls).setup_class(true, mumpspc[1:], k_regimes=2, trend='n', exog=mumpspc[:-1], switching_variance=True, atol=0.0001)
gh5380_series = [-0.000228833689, -4.83175915e-05, -0.000493236435, -0.000292251109, -0.000403295179, -0.000201009784, 0.000285109215, 0.000185710827, -0.00020450393, -9.06050944e-05, 0.00106177818, -0.000497251569, 0.000716669183, 0.000181161945, -0.000687139289, -4.85979721e-05, -1.68387973e-05, -0.000443257154, 0.000537457383, -0.000817822909, 0.00060681404, -1.05481968e-05, -0.00011569873, -0.000857638924, 8.98143953e-05, 0.000170216877, -0.000284874742, -2.8199991e-05, -0.00034378751, -0.000574808548, -6.47844682e-05, 0.000108667397, -0.000128790034, 7.07615608e-05, 0.000117633886, 8.98163443e-07, 1.03860559e-05, -2.5029843e-06, -9.09673045e-07, -1.94645227e-05, -5.21373877e-05, -0.000138431813, 0.000111092157, 3.09541647e-05, -0.000157756488, 4.93176285e-05, -4.87488913e-05, 0.000208097182, -7.08581132e-05, -8.12182224e-06, 8.03090891e-05, -1.02981093e-05, 2.07550066e-05, 3.75383116e-05, -3.96307514e-05, -1.12007982e-05, -4.00958429e-05, 2.01206738e-05, -2.95802891e-05, 0.000126422639, -3.95617289e-05, 0.000194523738, 4.6396427e-05, 2.07712951e-05, 0.000292417981, 0.000215111259, 0.000123762736, 7.78305555e-05, -0.000344022033, -2.84249114e-05, -0.000108351559, -0.000176944408, 7.99332875e-05, 0.000509785758, 0.000324506365, -0.000247943721, 0.000222346033, -6.66164024e-05, 0.000200911206, 0.000458750048, -0.000155390954, 0.000367913831, 0.000108274314, -0.000127400351, 0.000150654063, 0.000269976025, 4.51532804e-05, -0.000221579419, 0.000154792373, 0.00019839763, 0.000396943388, 0.000618663277, 0.000886151537, 0.000616949774, 0.00544538857, 7.33282114e-05, 0.00393393013, 0.000666556165, 0.00618815111, -0.00640775088, -0.00198864768, -3.42828364e-05, -0.000792023127, -0.00164656177, -0.00331112273, -0.00263499766, -0.000255118821, -0.0003638585, -0.000658065806, -0.000338492405, -0.00110458161, -2.0822862e-07, -7.21562092e-05, 7.92946105e-05, 1.25472212e-05, -0.000127190212, 3.94913196e-05, -1.87353437e-05, -6.57929565e-06, 1.61597869e-05, 1.90031845e-05, 0.00876129739, -0.00834566734, -5.82053353e-05, 0.000128770725, 0.000238160836, -1.84590083e-05, 3.10903734e-05, 1.89366264e-05, 7.61985181e-05, 0.000320208326, -6.90388272e-05, 2.09928647e-05, -3.14720707e-05, 0.000132614437, 0.00011038571, -4.91256074e-05, -0.000116967974, 4.88977021e-05, 6.19231048e-05, 0.000295994863, 0.00191592526, -0.000222511393, -0.000804871984, -0.000666886069, -0.000380754506, -4.06613941e-05, -0.0004661646, -0.000148077847, 0.000131787219, 5.12392307e-05, -2.61346302e-05, -0.000146071993, -0.000317839957, -0.000252143621, -0.000173768102, -6.88107229e-05, -2.1413043e-05, 5.2534817e-07, -9.80972737e-05, -6.90120785e-05, -0.000128208365, 2.09816018e-05, 1.02199123e-05, 2.08633684e-05, 1.05609818e-05, 1.35835269e-05, 0.000150357742, 5.72303827e-05, 0.000127501839, 0.000120706157, 8.27340411e-06, 3.7743054e-05, 8.10426523e-05, 9.99617511e-05, 0.000121103273, 0.000110255996, 6.89558159e-05, 3.22442426e-05, 8.49416109e-05, 0.000405396296, 0.00016969917, 0.000110892701, 7.2118615e-05, 0.00012497857, -0.000291922347, 5.50447651e-05, -0.000168467417, -7.06084859e-05, -0.000373250482, -0.000149829854, -7.23752254e-05, -9.80670951e-05, -3.0017905e-05, 4.15704679e-05, 2.87503307e-05, -5.09988933e-05, -9.55791344e-06, -2.74369249e-05, -2.23330122e-05, 9.74727035e-06, -8.58146574e-06, 2.9770434e-05, -1.12990428e-05, -5.90507361e-05, 9.50772649e-07, -7.35502474e-07, 5.66683332e-07, -9.81320792e-06, -6.60845729e-07, -3.19848073e-05, -0.000110779191]

@pytest.mark.smoke
def test_avoid_underflow():
    if False:
        return 10
    m = markov_regression.MarkovRegression(gh5380_series, k_regimes=2, switching_variance=True)
    params = np.array([0.697337611, 0.626116329, -6.41266551e-06, 3.81141202e-06, 4.72462327e-08, 4.45291473e-06])
    res = m.smooth(params)
    assert not np.any(np.isnan(res.predicted_joint_probabilities))
    assert not np.any(np.isnan(res.filtered_joint_probabilities))
    assert not np.any(np.isnan(res.smoothed_joint_probabilities))

def test_exog_tvtp():
    if False:
        return 10
    exog = np.ones_like(fedfunds)
    mod1 = markov_regression.MarkovRegression(fedfunds, k_regimes=2)
    mod2 = markov_regression.MarkovRegression(fedfunds, k_regimes=2, exog_tvtp=exog)
    params = np.r_[0.98209618, 0.05036498, 3.70877542, 9.55676298, 4.44181911]
    params_tvtp = params.copy()
    params_tvtp[0] = np.squeeze(mod2._untransform_logistic(np.r_[0.0], np.r_[1 - params[0]]))
    params_tvtp[1] = np.squeeze(mod2._untransform_logistic(np.r_[0.0], np.r_[1 - params[1]]))
    res1 = mod1.smooth(params)
    res2 = mod2.smooth(params_tvtp)
    assert_allclose(res2.llf_obs, res1.llf_obs)
    assert_allclose(res2.regime_transition - res1.regime_transition, 0, atol=1e-15)
    assert_allclose(res2.predicted_joint_probabilities, res1.predicted_joint_probabilities)
    assert_allclose(res2.filtered_joint_probabilities, res1.filtered_joint_probabilities)
    assert_allclose(res2.smoothed_joint_probabilities, res1.smoothed_joint_probabilities)
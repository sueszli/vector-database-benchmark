[
    {
        "func_name": "maxCandies",
        "original": "def maxCandies(self, status, candies, keys, containedBoxes, initialBoxes):\n    \"\"\"\n        :type status: List[int]\n        :type candies: List[int]\n        :type keys: List[List[int]]\n        :type containedBoxes: List[List[int]]\n        :type initialBoxes: List[int]\n        :rtype: int\n        \"\"\"\n    result = 0\n    q = collections.deque(initialBoxes)\n    while q:\n        changed = False\n        for _ in xrange(len(q)):\n            box = q.popleft()\n            if not status[box]:\n                q.append(box)\n                continue\n            changed = True\n            result += candies[box]\n            for contained_key in keys[box]:\n                status[contained_key] = 1\n            for contained_box in containedBoxes[box]:\n                q.append(contained_box)\n        if not changed:\n            break\n    return result",
        "mutated": [
            "def maxCandies(self, status, candies, keys, containedBoxes, initialBoxes):\n    if False:\n        i = 10\n    '\\n        :type status: List[int]\\n        :type candies: List[int]\\n        :type keys: List[List[int]]\\n        :type containedBoxes: List[List[int]]\\n        :type initialBoxes: List[int]\\n        :rtype: int\\n        '\n    result = 0\n    q = collections.deque(initialBoxes)\n    while q:\n        changed = False\n        for _ in xrange(len(q)):\n            box = q.popleft()\n            if not status[box]:\n                q.append(box)\n                continue\n            changed = True\n            result += candies[box]\n            for contained_key in keys[box]:\n                status[contained_key] = 1\n            for contained_box in containedBoxes[box]:\n                q.append(contained_box)\n        if not changed:\n            break\n    return result",
            "def maxCandies(self, status, candies, keys, containedBoxes, initialBoxes):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type status: List[int]\\n        :type candies: List[int]\\n        :type keys: List[List[int]]\\n        :type containedBoxes: List[List[int]]\\n        :type initialBoxes: List[int]\\n        :rtype: int\\n        '\n    result = 0\n    q = collections.deque(initialBoxes)\n    while q:\n        changed = False\n        for _ in xrange(len(q)):\n            box = q.popleft()\n            if not status[box]:\n                q.append(box)\n                continue\n            changed = True\n            result += candies[box]\n            for contained_key in keys[box]:\n                status[contained_key] = 1\n            for contained_box in containedBoxes[box]:\n                q.append(contained_box)\n        if not changed:\n            break\n    return result",
            "def maxCandies(self, status, candies, keys, containedBoxes, initialBoxes):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type status: List[int]\\n        :type candies: List[int]\\n        :type keys: List[List[int]]\\n        :type containedBoxes: List[List[int]]\\n        :type initialBoxes: List[int]\\n        :rtype: int\\n        '\n    result = 0\n    q = collections.deque(initialBoxes)\n    while q:\n        changed = False\n        for _ in xrange(len(q)):\n            box = q.popleft()\n            if not status[box]:\n                q.append(box)\n                continue\n            changed = True\n            result += candies[box]\n            for contained_key in keys[box]:\n                status[contained_key] = 1\n            for contained_box in containedBoxes[box]:\n                q.append(contained_box)\n        if not changed:\n            break\n    return result",
            "def maxCandies(self, status, candies, keys, containedBoxes, initialBoxes):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type status: List[int]\\n        :type candies: List[int]\\n        :type keys: List[List[int]]\\n        :type containedBoxes: List[List[int]]\\n        :type initialBoxes: List[int]\\n        :rtype: int\\n        '\n    result = 0\n    q = collections.deque(initialBoxes)\n    while q:\n        changed = False\n        for _ in xrange(len(q)):\n            box = q.popleft()\n            if not status[box]:\n                q.append(box)\n                continue\n            changed = True\n            result += candies[box]\n            for contained_key in keys[box]:\n                status[contained_key] = 1\n            for contained_box in containedBoxes[box]:\n                q.append(contained_box)\n        if not changed:\n            break\n    return result",
            "def maxCandies(self, status, candies, keys, containedBoxes, initialBoxes):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type status: List[int]\\n        :type candies: List[int]\\n        :type keys: List[List[int]]\\n        :type containedBoxes: List[List[int]]\\n        :type initialBoxes: List[int]\\n        :rtype: int\\n        '\n    result = 0\n    q = collections.deque(initialBoxes)\n    while q:\n        changed = False\n        for _ in xrange(len(q)):\n            box = q.popleft()\n            if not status[box]:\n                q.append(box)\n                continue\n            changed = True\n            result += candies[box]\n            for contained_key in keys[box]:\n                status[contained_key] = 1\n            for contained_box in containedBoxes[box]:\n                q.append(contained_box)\n        if not changed:\n            break\n    return result"
        ]
    }
]
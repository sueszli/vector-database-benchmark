[
    {
        "func_name": "validateBinaryTreeNodes",
        "original": "def validateBinaryTreeNodes(self, n, leftChild, rightChild):\n    \"\"\"\n        :type n: int\n        :type leftChild: List[int]\n        :type rightChild: List[int]\n        :rtype: bool\n        \"\"\"\n    roots = set(range(n)) - set(leftChild) - set(rightChild)\n    if len(roots) != 1:\n        return False\n    (root,) = roots\n    stk = [root]\n    lookup = set([root])\n    while stk:\n        node = stk.pop()\n        for c in (leftChild[node], rightChild[node]):\n            if c < 0:\n                continue\n            if c in lookup:\n                return False\n            lookup.add(c)\n            stk.append(c)\n    return len(lookup) == n",
        "mutated": [
            "def validateBinaryTreeNodes(self, n, leftChild, rightChild):\n    if False:\n        i = 10\n    '\\n        :type n: int\\n        :type leftChild: List[int]\\n        :type rightChild: List[int]\\n        :rtype: bool\\n        '\n    roots = set(range(n)) - set(leftChild) - set(rightChild)\n    if len(roots) != 1:\n        return False\n    (root,) = roots\n    stk = [root]\n    lookup = set([root])\n    while stk:\n        node = stk.pop()\n        for c in (leftChild[node], rightChild[node]):\n            if c < 0:\n                continue\n            if c in lookup:\n                return False\n            lookup.add(c)\n            stk.append(c)\n    return len(lookup) == n",
            "def validateBinaryTreeNodes(self, n, leftChild, rightChild):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type n: int\\n        :type leftChild: List[int]\\n        :type rightChild: List[int]\\n        :rtype: bool\\n        '\n    roots = set(range(n)) - set(leftChild) - set(rightChild)\n    if len(roots) != 1:\n        return False\n    (root,) = roots\n    stk = [root]\n    lookup = set([root])\n    while stk:\n        node = stk.pop()\n        for c in (leftChild[node], rightChild[node]):\n            if c < 0:\n                continue\n            if c in lookup:\n                return False\n            lookup.add(c)\n            stk.append(c)\n    return len(lookup) == n",
            "def validateBinaryTreeNodes(self, n, leftChild, rightChild):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type n: int\\n        :type leftChild: List[int]\\n        :type rightChild: List[int]\\n        :rtype: bool\\n        '\n    roots = set(range(n)) - set(leftChild) - set(rightChild)\n    if len(roots) != 1:\n        return False\n    (root,) = roots\n    stk = [root]\n    lookup = set([root])\n    while stk:\n        node = stk.pop()\n        for c in (leftChild[node], rightChild[node]):\n            if c < 0:\n                continue\n            if c in lookup:\n                return False\n            lookup.add(c)\n            stk.append(c)\n    return len(lookup) == n",
            "def validateBinaryTreeNodes(self, n, leftChild, rightChild):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type n: int\\n        :type leftChild: List[int]\\n        :type rightChild: List[int]\\n        :rtype: bool\\n        '\n    roots = set(range(n)) - set(leftChild) - set(rightChild)\n    if len(roots) != 1:\n        return False\n    (root,) = roots\n    stk = [root]\n    lookup = set([root])\n    while stk:\n        node = stk.pop()\n        for c in (leftChild[node], rightChild[node]):\n            if c < 0:\n                continue\n            if c in lookup:\n                return False\n            lookup.add(c)\n            stk.append(c)\n    return len(lookup) == n",
            "def validateBinaryTreeNodes(self, n, leftChild, rightChild):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type n: int\\n        :type leftChild: List[int]\\n        :type rightChild: List[int]\\n        :rtype: bool\\n        '\n    roots = set(range(n)) - set(leftChild) - set(rightChild)\n    if len(roots) != 1:\n        return False\n    (root,) = roots\n    stk = [root]\n    lookup = set([root])\n    while stk:\n        node = stk.pop()\n        for c in (leftChild[node], rightChild[node]):\n            if c < 0:\n                continue\n            if c in lookup:\n                return False\n            lookup.add(c)\n            stk.append(c)\n    return len(lookup) == n"
        ]
    }
]
[
    {
        "func_name": "__init__",
        "original": "def __init__(self, dyn_resource):\n    \"\"\"\n        :param dyn_resource: A Boto3 DynamoDB resource.\n        \"\"\"\n    self.dyn_resource = dyn_resource",
        "mutated": [
            "def __init__(self, dyn_resource):\n    if False:\n        i = 10\n    '\\n        :param dyn_resource: A Boto3 DynamoDB resource.\\n        '\n    self.dyn_resource = dyn_resource",
            "def __init__(self, dyn_resource):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :param dyn_resource: A Boto3 DynamoDB resource.\\n        '\n    self.dyn_resource = dyn_resource",
            "def __init__(self, dyn_resource):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :param dyn_resource: A Boto3 DynamoDB resource.\\n        '\n    self.dyn_resource = dyn_resource",
            "def __init__(self, dyn_resource):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :param dyn_resource: A Boto3 DynamoDB resource.\\n        '\n    self.dyn_resource = dyn_resource",
            "def __init__(self, dyn_resource):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :param dyn_resource: A Boto3 DynamoDB resource.\\n        '\n    self.dyn_resource = dyn_resource"
        ]
    },
    {
        "func_name": "run_partiql",
        "original": "def run_partiql(self, statement, params):\n    \"\"\"\n        Runs a PartiQL statement. A Boto3 resource is used even though\n        `execute_statement` is called on the underlying `client` object because the\n        resource transforms input and output from plain old Python objects (POPOs) to\n        the DynamoDB format. If you create the client directly, you must do these\n        transforms yourself.\n\n        :param statement: The PartiQL statement.\n        :param params: The list of PartiQL parameters. These are applied to the\n                       statement in the order they are listed.\n        :return: The items returned from the statement, if any.\n        \"\"\"\n    try:\n        output = self.dyn_resource.meta.client.execute_statement(Statement=statement, Parameters=params)\n    except ClientError as err:\n        if err.response['Error']['Code'] == 'ResourceNotFoundException':\n            logger.error(\"Couldn't execute PartiQL '%s' because the table does not exist.\", statement)\n        else:\n            logger.error(\"Couldn't execute PartiQL '%s'. Here's why: %s: %s\", statement, err.response['Error']['Code'], err.response['Error']['Message'])\n        raise\n    else:\n        return output",
        "mutated": [
            "def run_partiql(self, statement, params):\n    if False:\n        i = 10\n    '\\n        Runs a PartiQL statement. A Boto3 resource is used even though\\n        `execute_statement` is called on the underlying `client` object because the\\n        resource transforms input and output from plain old Python objects (POPOs) to\\n        the DynamoDB format. If you create the client directly, you must do these\\n        transforms yourself.\\n\\n        :param statement: The PartiQL statement.\\n        :param params: The list of PartiQL parameters. These are applied to the\\n                       statement in the order they are listed.\\n        :return: The items returned from the statement, if any.\\n        '\n    try:\n        output = self.dyn_resource.meta.client.execute_statement(Statement=statement, Parameters=params)\n    except ClientError as err:\n        if err.response['Error']['Code'] == 'ResourceNotFoundException':\n            logger.error(\"Couldn't execute PartiQL '%s' because the table does not exist.\", statement)\n        else:\n            logger.error(\"Couldn't execute PartiQL '%s'. Here's why: %s: %s\", statement, err.response['Error']['Code'], err.response['Error']['Message'])\n        raise\n    else:\n        return output",
            "def run_partiql(self, statement, params):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        Runs a PartiQL statement. A Boto3 resource is used even though\\n        `execute_statement` is called on the underlying `client` object because the\\n        resource transforms input and output from plain old Python objects (POPOs) to\\n        the DynamoDB format. If you create the client directly, you must do these\\n        transforms yourself.\\n\\n        :param statement: The PartiQL statement.\\n        :param params: The list of PartiQL parameters. These are applied to the\\n                       statement in the order they are listed.\\n        :return: The items returned from the statement, if any.\\n        '\n    try:\n        output = self.dyn_resource.meta.client.execute_statement(Statement=statement, Parameters=params)\n    except ClientError as err:\n        if err.response['Error']['Code'] == 'ResourceNotFoundException':\n            logger.error(\"Couldn't execute PartiQL '%s' because the table does not exist.\", statement)\n        else:\n            logger.error(\"Couldn't execute PartiQL '%s'. Here's why: %s: %s\", statement, err.response['Error']['Code'], err.response['Error']['Message'])\n        raise\n    else:\n        return output",
            "def run_partiql(self, statement, params):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        Runs a PartiQL statement. A Boto3 resource is used even though\\n        `execute_statement` is called on the underlying `client` object because the\\n        resource transforms input and output from plain old Python objects (POPOs) to\\n        the DynamoDB format. If you create the client directly, you must do these\\n        transforms yourself.\\n\\n        :param statement: The PartiQL statement.\\n        :param params: The list of PartiQL parameters. These are applied to the\\n                       statement in the order they are listed.\\n        :return: The items returned from the statement, if any.\\n        '\n    try:\n        output = self.dyn_resource.meta.client.execute_statement(Statement=statement, Parameters=params)\n    except ClientError as err:\n        if err.response['Error']['Code'] == 'ResourceNotFoundException':\n            logger.error(\"Couldn't execute PartiQL '%s' because the table does not exist.\", statement)\n        else:\n            logger.error(\"Couldn't execute PartiQL '%s'. Here's why: %s: %s\", statement, err.response['Error']['Code'], err.response['Error']['Message'])\n        raise\n    else:\n        return output",
            "def run_partiql(self, statement, params):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        Runs a PartiQL statement. A Boto3 resource is used even though\\n        `execute_statement` is called on the underlying `client` object because the\\n        resource transforms input and output from plain old Python objects (POPOs) to\\n        the DynamoDB format. If you create the client directly, you must do these\\n        transforms yourself.\\n\\n        :param statement: The PartiQL statement.\\n        :param params: The list of PartiQL parameters. These are applied to the\\n                       statement in the order they are listed.\\n        :return: The items returned from the statement, if any.\\n        '\n    try:\n        output = self.dyn_resource.meta.client.execute_statement(Statement=statement, Parameters=params)\n    except ClientError as err:\n        if err.response['Error']['Code'] == 'ResourceNotFoundException':\n            logger.error(\"Couldn't execute PartiQL '%s' because the table does not exist.\", statement)\n        else:\n            logger.error(\"Couldn't execute PartiQL '%s'. Here's why: %s: %s\", statement, err.response['Error']['Code'], err.response['Error']['Message'])\n        raise\n    else:\n        return output",
            "def run_partiql(self, statement, params):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        Runs a PartiQL statement. A Boto3 resource is used even though\\n        `execute_statement` is called on the underlying `client` object because the\\n        resource transforms input and output from plain old Python objects (POPOs) to\\n        the DynamoDB format. If you create the client directly, you must do these\\n        transforms yourself.\\n\\n        :param statement: The PartiQL statement.\\n        :param params: The list of PartiQL parameters. These are applied to the\\n                       statement in the order they are listed.\\n        :return: The items returned from the statement, if any.\\n        '\n    try:\n        output = self.dyn_resource.meta.client.execute_statement(Statement=statement, Parameters=params)\n    except ClientError as err:\n        if err.response['Error']['Code'] == 'ResourceNotFoundException':\n            logger.error(\"Couldn't execute PartiQL '%s' because the table does not exist.\", statement)\n        else:\n            logger.error(\"Couldn't execute PartiQL '%s'. Here's why: %s: %s\", statement, err.response['Error']['Code'], err.response['Error']['Message'])\n        raise\n    else:\n        return output"
        ]
    },
    {
        "func_name": "run_scenario",
        "original": "def run_scenario(scaffold, wrapper, table_name):\n    logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')\n    print('-' * 88)\n    print('Welcome to the Amazon DynamoDB PartiQL single statement demo.')\n    print('-' * 88)\n    print(f\"Creating table '{table_name}' for the demo...\")\n    scaffold.create_table(table_name)\n    print('-' * 88)\n    title = '24 Hour PartiQL People'\n    year = datetime.now().year\n    plot = \"A group of data developers discover a new query language they can't stop using.\"\n    rating = Decimal('9.9')\n    print(f\"Inserting movie '{title}' released in {year}.\")\n    wrapper.run_partiql(f'''INSERT INTO \"{table_name}\" VALUE {{'title': ?, 'year': ?, 'info': ?}}''', [title, year, {'plot': plot, 'rating': rating}])\n    print('Success!')\n    print('-' * 88)\n    print(f\"Getting data for movie '{title}' released in {year}.\")\n    output = wrapper.run_partiql(f'SELECT * FROM \"{table_name}\" WHERE title=? AND year=?', [title, year])\n    for item in output['Items']:\n        print(f\"\\n{item['title']}, {item['year']}\")\n        pprint(output['Items'])\n    print('-' * 88)\n    rating = Decimal('2.4')\n    print(f\"Updating movie '{title}' with a rating of {float(rating)}.\")\n    wrapper.run_partiql(f'UPDATE \"{table_name}\" SET info.rating=? WHERE title=? AND year=?', [rating, title, year])\n    print('Success!')\n    print('-' * 88)\n    print(f'Getting data again to verify our update.')\n    output = wrapper.run_partiql(f'SELECT * FROM \"{table_name}\" WHERE title=? AND year=?', [title, year])\n    for item in output['Items']:\n        print(f\"\\n{item['title']}, {item['year']}\")\n        pprint(output['Items'])\n    print('-' * 88)\n    print(f\"Deleting movie '{title}' released in {year}.\")\n    wrapper.run_partiql(f'DELETE FROM \"{table_name}\" WHERE title=? AND year=?', [title, year])\n    print('Success!')\n    print('-' * 88)\n    print(f\"Deleting table '{table_name}'...\")\n    scaffold.delete_table()\n    print('-' * 88)\n    print('\\nThanks for watching!')\n    print('-' * 88)",
        "mutated": [
            "def run_scenario(scaffold, wrapper, table_name):\n    if False:\n        i = 10\n    logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')\n    print('-' * 88)\n    print('Welcome to the Amazon DynamoDB PartiQL single statement demo.')\n    print('-' * 88)\n    print(f\"Creating table '{table_name}' for the demo...\")\n    scaffold.create_table(table_name)\n    print('-' * 88)\n    title = '24 Hour PartiQL People'\n    year = datetime.now().year\n    plot = \"A group of data developers discover a new query language they can't stop using.\"\n    rating = Decimal('9.9')\n    print(f\"Inserting movie '{title}' released in {year}.\")\n    wrapper.run_partiql(f'''INSERT INTO \"{table_name}\" VALUE {{'title': ?, 'year': ?, 'info': ?}}''', [title, year, {'plot': plot, 'rating': rating}])\n    print('Success!')\n    print('-' * 88)\n    print(f\"Getting data for movie '{title}' released in {year}.\")\n    output = wrapper.run_partiql(f'SELECT * FROM \"{table_name}\" WHERE title=? AND year=?', [title, year])\n    for item in output['Items']:\n        print(f\"\\n{item['title']}, {item['year']}\")\n        pprint(output['Items'])\n    print('-' * 88)\n    rating = Decimal('2.4')\n    print(f\"Updating movie '{title}' with a rating of {float(rating)}.\")\n    wrapper.run_partiql(f'UPDATE \"{table_name}\" SET info.rating=? WHERE title=? AND year=?', [rating, title, year])\n    print('Success!')\n    print('-' * 88)\n    print(f'Getting data again to verify our update.')\n    output = wrapper.run_partiql(f'SELECT * FROM \"{table_name}\" WHERE title=? AND year=?', [title, year])\n    for item in output['Items']:\n        print(f\"\\n{item['title']}, {item['year']}\")\n        pprint(output['Items'])\n    print('-' * 88)\n    print(f\"Deleting movie '{title}' released in {year}.\")\n    wrapper.run_partiql(f'DELETE FROM \"{table_name}\" WHERE title=? AND year=?', [title, year])\n    print('Success!')\n    print('-' * 88)\n    print(f\"Deleting table '{table_name}'...\")\n    scaffold.delete_table()\n    print('-' * 88)\n    print('\\nThanks for watching!')\n    print('-' * 88)",
            "def run_scenario(scaffold, wrapper, table_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')\n    print('-' * 88)\n    print('Welcome to the Amazon DynamoDB PartiQL single statement demo.')\n    print('-' * 88)\n    print(f\"Creating table '{table_name}' for the demo...\")\n    scaffold.create_table(table_name)\n    print('-' * 88)\n    title = '24 Hour PartiQL People'\n    year = datetime.now().year\n    plot = \"A group of data developers discover a new query language they can't stop using.\"\n    rating = Decimal('9.9')\n    print(f\"Inserting movie '{title}' released in {year}.\")\n    wrapper.run_partiql(f'''INSERT INTO \"{table_name}\" VALUE {{'title': ?, 'year': ?, 'info': ?}}''', [title, year, {'plot': plot, 'rating': rating}])\n    print('Success!')\n    print('-' * 88)\n    print(f\"Getting data for movie '{title}' released in {year}.\")\n    output = wrapper.run_partiql(f'SELECT * FROM \"{table_name}\" WHERE title=? AND year=?', [title, year])\n    for item in output['Items']:\n        print(f\"\\n{item['title']}, {item['year']}\")\n        pprint(output['Items'])\n    print('-' * 88)\n    rating = Decimal('2.4')\n    print(f\"Updating movie '{title}' with a rating of {float(rating)}.\")\n    wrapper.run_partiql(f'UPDATE \"{table_name}\" SET info.rating=? WHERE title=? AND year=?', [rating, title, year])\n    print('Success!')\n    print('-' * 88)\n    print(f'Getting data again to verify our update.')\n    output = wrapper.run_partiql(f'SELECT * FROM \"{table_name}\" WHERE title=? AND year=?', [title, year])\n    for item in output['Items']:\n        print(f\"\\n{item['title']}, {item['year']}\")\n        pprint(output['Items'])\n    print('-' * 88)\n    print(f\"Deleting movie '{title}' released in {year}.\")\n    wrapper.run_partiql(f'DELETE FROM \"{table_name}\" WHERE title=? AND year=?', [title, year])\n    print('Success!')\n    print('-' * 88)\n    print(f\"Deleting table '{table_name}'...\")\n    scaffold.delete_table()\n    print('-' * 88)\n    print('\\nThanks for watching!')\n    print('-' * 88)",
            "def run_scenario(scaffold, wrapper, table_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')\n    print('-' * 88)\n    print('Welcome to the Amazon DynamoDB PartiQL single statement demo.')\n    print('-' * 88)\n    print(f\"Creating table '{table_name}' for the demo...\")\n    scaffold.create_table(table_name)\n    print('-' * 88)\n    title = '24 Hour PartiQL People'\n    year = datetime.now().year\n    plot = \"A group of data developers discover a new query language they can't stop using.\"\n    rating = Decimal('9.9')\n    print(f\"Inserting movie '{title}' released in {year}.\")\n    wrapper.run_partiql(f'''INSERT INTO \"{table_name}\" VALUE {{'title': ?, 'year': ?, 'info': ?}}''', [title, year, {'plot': plot, 'rating': rating}])\n    print('Success!')\n    print('-' * 88)\n    print(f\"Getting data for movie '{title}' released in {year}.\")\n    output = wrapper.run_partiql(f'SELECT * FROM \"{table_name}\" WHERE title=? AND year=?', [title, year])\n    for item in output['Items']:\n        print(f\"\\n{item['title']}, {item['year']}\")\n        pprint(output['Items'])\n    print('-' * 88)\n    rating = Decimal('2.4')\n    print(f\"Updating movie '{title}' with a rating of {float(rating)}.\")\n    wrapper.run_partiql(f'UPDATE \"{table_name}\" SET info.rating=? WHERE title=? AND year=?', [rating, title, year])\n    print('Success!')\n    print('-' * 88)\n    print(f'Getting data again to verify our update.')\n    output = wrapper.run_partiql(f'SELECT * FROM \"{table_name}\" WHERE title=? AND year=?', [title, year])\n    for item in output['Items']:\n        print(f\"\\n{item['title']}, {item['year']}\")\n        pprint(output['Items'])\n    print('-' * 88)\n    print(f\"Deleting movie '{title}' released in {year}.\")\n    wrapper.run_partiql(f'DELETE FROM \"{table_name}\" WHERE title=? AND year=?', [title, year])\n    print('Success!')\n    print('-' * 88)\n    print(f\"Deleting table '{table_name}'...\")\n    scaffold.delete_table()\n    print('-' * 88)\n    print('\\nThanks for watching!')\n    print('-' * 88)",
            "def run_scenario(scaffold, wrapper, table_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')\n    print('-' * 88)\n    print('Welcome to the Amazon DynamoDB PartiQL single statement demo.')\n    print('-' * 88)\n    print(f\"Creating table '{table_name}' for the demo...\")\n    scaffold.create_table(table_name)\n    print('-' * 88)\n    title = '24 Hour PartiQL People'\n    year = datetime.now().year\n    plot = \"A group of data developers discover a new query language they can't stop using.\"\n    rating = Decimal('9.9')\n    print(f\"Inserting movie '{title}' released in {year}.\")\n    wrapper.run_partiql(f'''INSERT INTO \"{table_name}\" VALUE {{'title': ?, 'year': ?, 'info': ?}}''', [title, year, {'plot': plot, 'rating': rating}])\n    print('Success!')\n    print('-' * 88)\n    print(f\"Getting data for movie '{title}' released in {year}.\")\n    output = wrapper.run_partiql(f'SELECT * FROM \"{table_name}\" WHERE title=? AND year=?', [title, year])\n    for item in output['Items']:\n        print(f\"\\n{item['title']}, {item['year']}\")\n        pprint(output['Items'])\n    print('-' * 88)\n    rating = Decimal('2.4')\n    print(f\"Updating movie '{title}' with a rating of {float(rating)}.\")\n    wrapper.run_partiql(f'UPDATE \"{table_name}\" SET info.rating=? WHERE title=? AND year=?', [rating, title, year])\n    print('Success!')\n    print('-' * 88)\n    print(f'Getting data again to verify our update.')\n    output = wrapper.run_partiql(f'SELECT * FROM \"{table_name}\" WHERE title=? AND year=?', [title, year])\n    for item in output['Items']:\n        print(f\"\\n{item['title']}, {item['year']}\")\n        pprint(output['Items'])\n    print('-' * 88)\n    print(f\"Deleting movie '{title}' released in {year}.\")\n    wrapper.run_partiql(f'DELETE FROM \"{table_name}\" WHERE title=? AND year=?', [title, year])\n    print('Success!')\n    print('-' * 88)\n    print(f\"Deleting table '{table_name}'...\")\n    scaffold.delete_table()\n    print('-' * 88)\n    print('\\nThanks for watching!')\n    print('-' * 88)",
            "def run_scenario(scaffold, wrapper, table_name):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    logging.basicConfig(level=logging.INFO, format='%(levelname)s: %(message)s')\n    print('-' * 88)\n    print('Welcome to the Amazon DynamoDB PartiQL single statement demo.')\n    print('-' * 88)\n    print(f\"Creating table '{table_name}' for the demo...\")\n    scaffold.create_table(table_name)\n    print('-' * 88)\n    title = '24 Hour PartiQL People'\n    year = datetime.now().year\n    plot = \"A group of data developers discover a new query language they can't stop using.\"\n    rating = Decimal('9.9')\n    print(f\"Inserting movie '{title}' released in {year}.\")\n    wrapper.run_partiql(f'''INSERT INTO \"{table_name}\" VALUE {{'title': ?, 'year': ?, 'info': ?}}''', [title, year, {'plot': plot, 'rating': rating}])\n    print('Success!')\n    print('-' * 88)\n    print(f\"Getting data for movie '{title}' released in {year}.\")\n    output = wrapper.run_partiql(f'SELECT * FROM \"{table_name}\" WHERE title=? AND year=?', [title, year])\n    for item in output['Items']:\n        print(f\"\\n{item['title']}, {item['year']}\")\n        pprint(output['Items'])\n    print('-' * 88)\n    rating = Decimal('2.4')\n    print(f\"Updating movie '{title}' with a rating of {float(rating)}.\")\n    wrapper.run_partiql(f'UPDATE \"{table_name}\" SET info.rating=? WHERE title=? AND year=?', [rating, title, year])\n    print('Success!')\n    print('-' * 88)\n    print(f'Getting data again to verify our update.')\n    output = wrapper.run_partiql(f'SELECT * FROM \"{table_name}\" WHERE title=? AND year=?', [title, year])\n    for item in output['Items']:\n        print(f\"\\n{item['title']}, {item['year']}\")\n        pprint(output['Items'])\n    print('-' * 88)\n    print(f\"Deleting movie '{title}' released in {year}.\")\n    wrapper.run_partiql(f'DELETE FROM \"{table_name}\" WHERE title=? AND year=?', [title, year])\n    print('Success!')\n    print('-' * 88)\n    print(f\"Deleting table '{table_name}'...\")\n    scaffold.delete_table()\n    print('-' * 88)\n    print('\\nThanks for watching!')\n    print('-' * 88)"
        ]
    }
]
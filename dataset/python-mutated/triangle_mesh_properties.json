[
    {
        "func_name": "check_properties",
        "original": "def check_properties(name, mesh):\n    mesh.compute_vertex_normals()\n    edge_manifold = mesh.is_edge_manifold(allow_boundary_edges=True)\n    edge_manifold_boundary = mesh.is_edge_manifold(allow_boundary_edges=False)\n    vertex_manifold = mesh.is_vertex_manifold()\n    self_intersecting = mesh.is_self_intersecting()\n    watertight = mesh.is_watertight()\n    orientable = mesh.is_orientable()\n    print(name)\n    print(f'  edge_manifold:          {edge_manifold}')\n    print(f'  edge_manifold_boundary: {edge_manifold_boundary}')\n    print(f'  vertex_manifold:        {vertex_manifold}')\n    print(f'  self_intersecting:      {self_intersecting}')\n    print(f'  watertight:             {watertight}')\n    print(f'  orientable:             {orientable}')\n    geoms = [mesh]\n    if not edge_manifold:\n        edges = mesh.get_non_manifold_edges(allow_boundary_edges=True)\n        geoms.append(o3dex.edges_to_lineset(mesh, edges, (1, 0, 0)))\n    if not edge_manifold_boundary:\n        edges = mesh.get_non_manifold_edges(allow_boundary_edges=False)\n        geoms.append(o3dex.edges_to_lineset(mesh, edges, (0, 1, 0)))\n    if not vertex_manifold:\n        verts = np.asarray(mesh.get_non_manifold_vertices())\n        pcl = o3d.geometry.PointCloud(points=o3d.utility.Vector3dVector(np.asarray(mesh.vertices)[verts]))\n        pcl.paint_uniform_color((0, 0, 1))\n        geoms.append(pcl)\n    if self_intersecting:\n        intersecting_triangles = np.asarray(mesh.get_self_intersecting_triangles())\n        intersecting_triangles = intersecting_triangles[0:1]\n        intersecting_triangles = np.unique(intersecting_triangles)\n        print('  # visualize self-intersecting triangles')\n        triangles = np.asarray(mesh.triangles)[intersecting_triangles]\n        edges = [np.vstack((triangles[:, i], triangles[:, j])) for (i, j) in [(0, 1), (1, 2), (2, 0)]]\n        edges = np.hstack(edges).T\n        edges = o3d.utility.Vector2iVector(edges)\n        geoms.append(o3dex.edges_to_lineset(mesh, edges, (1, 0, 1)))\n    o3d.visualization.draw_geometries(geoms, mesh_show_back_face=True)",
        "mutated": [
            "def check_properties(name, mesh):\n    if False:\n        i = 10\n    mesh.compute_vertex_normals()\n    edge_manifold = mesh.is_edge_manifold(allow_boundary_edges=True)\n    edge_manifold_boundary = mesh.is_edge_manifold(allow_boundary_edges=False)\n    vertex_manifold = mesh.is_vertex_manifold()\n    self_intersecting = mesh.is_self_intersecting()\n    watertight = mesh.is_watertight()\n    orientable = mesh.is_orientable()\n    print(name)\n    print(f'  edge_manifold:          {edge_manifold}')\n    print(f'  edge_manifold_boundary: {edge_manifold_boundary}')\n    print(f'  vertex_manifold:        {vertex_manifold}')\n    print(f'  self_intersecting:      {self_intersecting}')\n    print(f'  watertight:             {watertight}')\n    print(f'  orientable:             {orientable}')\n    geoms = [mesh]\n    if not edge_manifold:\n        edges = mesh.get_non_manifold_edges(allow_boundary_edges=True)\n        geoms.append(o3dex.edges_to_lineset(mesh, edges, (1, 0, 0)))\n    if not edge_manifold_boundary:\n        edges = mesh.get_non_manifold_edges(allow_boundary_edges=False)\n        geoms.append(o3dex.edges_to_lineset(mesh, edges, (0, 1, 0)))\n    if not vertex_manifold:\n        verts = np.asarray(mesh.get_non_manifold_vertices())\n        pcl = o3d.geometry.PointCloud(points=o3d.utility.Vector3dVector(np.asarray(mesh.vertices)[verts]))\n        pcl.paint_uniform_color((0, 0, 1))\n        geoms.append(pcl)\n    if self_intersecting:\n        intersecting_triangles = np.asarray(mesh.get_self_intersecting_triangles())\n        intersecting_triangles = intersecting_triangles[0:1]\n        intersecting_triangles = np.unique(intersecting_triangles)\n        print('  # visualize self-intersecting triangles')\n        triangles = np.asarray(mesh.triangles)[intersecting_triangles]\n        edges = [np.vstack((triangles[:, i], triangles[:, j])) for (i, j) in [(0, 1), (1, 2), (2, 0)]]\n        edges = np.hstack(edges).T\n        edges = o3d.utility.Vector2iVector(edges)\n        geoms.append(o3dex.edges_to_lineset(mesh, edges, (1, 0, 1)))\n    o3d.visualization.draw_geometries(geoms, mesh_show_back_face=True)",
            "def check_properties(name, mesh):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    mesh.compute_vertex_normals()\n    edge_manifold = mesh.is_edge_manifold(allow_boundary_edges=True)\n    edge_manifold_boundary = mesh.is_edge_manifold(allow_boundary_edges=False)\n    vertex_manifold = mesh.is_vertex_manifold()\n    self_intersecting = mesh.is_self_intersecting()\n    watertight = mesh.is_watertight()\n    orientable = mesh.is_orientable()\n    print(name)\n    print(f'  edge_manifold:          {edge_manifold}')\n    print(f'  edge_manifold_boundary: {edge_manifold_boundary}')\n    print(f'  vertex_manifold:        {vertex_manifold}')\n    print(f'  self_intersecting:      {self_intersecting}')\n    print(f'  watertight:             {watertight}')\n    print(f'  orientable:             {orientable}')\n    geoms = [mesh]\n    if not edge_manifold:\n        edges = mesh.get_non_manifold_edges(allow_boundary_edges=True)\n        geoms.append(o3dex.edges_to_lineset(mesh, edges, (1, 0, 0)))\n    if not edge_manifold_boundary:\n        edges = mesh.get_non_manifold_edges(allow_boundary_edges=False)\n        geoms.append(o3dex.edges_to_lineset(mesh, edges, (0, 1, 0)))\n    if not vertex_manifold:\n        verts = np.asarray(mesh.get_non_manifold_vertices())\n        pcl = o3d.geometry.PointCloud(points=o3d.utility.Vector3dVector(np.asarray(mesh.vertices)[verts]))\n        pcl.paint_uniform_color((0, 0, 1))\n        geoms.append(pcl)\n    if self_intersecting:\n        intersecting_triangles = np.asarray(mesh.get_self_intersecting_triangles())\n        intersecting_triangles = intersecting_triangles[0:1]\n        intersecting_triangles = np.unique(intersecting_triangles)\n        print('  # visualize self-intersecting triangles')\n        triangles = np.asarray(mesh.triangles)[intersecting_triangles]\n        edges = [np.vstack((triangles[:, i], triangles[:, j])) for (i, j) in [(0, 1), (1, 2), (2, 0)]]\n        edges = np.hstack(edges).T\n        edges = o3d.utility.Vector2iVector(edges)\n        geoms.append(o3dex.edges_to_lineset(mesh, edges, (1, 0, 1)))\n    o3d.visualization.draw_geometries(geoms, mesh_show_back_face=True)",
            "def check_properties(name, mesh):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    mesh.compute_vertex_normals()\n    edge_manifold = mesh.is_edge_manifold(allow_boundary_edges=True)\n    edge_manifold_boundary = mesh.is_edge_manifold(allow_boundary_edges=False)\n    vertex_manifold = mesh.is_vertex_manifold()\n    self_intersecting = mesh.is_self_intersecting()\n    watertight = mesh.is_watertight()\n    orientable = mesh.is_orientable()\n    print(name)\n    print(f'  edge_manifold:          {edge_manifold}')\n    print(f'  edge_manifold_boundary: {edge_manifold_boundary}')\n    print(f'  vertex_manifold:        {vertex_manifold}')\n    print(f'  self_intersecting:      {self_intersecting}')\n    print(f'  watertight:             {watertight}')\n    print(f'  orientable:             {orientable}')\n    geoms = [mesh]\n    if not edge_manifold:\n        edges = mesh.get_non_manifold_edges(allow_boundary_edges=True)\n        geoms.append(o3dex.edges_to_lineset(mesh, edges, (1, 0, 0)))\n    if not edge_manifold_boundary:\n        edges = mesh.get_non_manifold_edges(allow_boundary_edges=False)\n        geoms.append(o3dex.edges_to_lineset(mesh, edges, (0, 1, 0)))\n    if not vertex_manifold:\n        verts = np.asarray(mesh.get_non_manifold_vertices())\n        pcl = o3d.geometry.PointCloud(points=o3d.utility.Vector3dVector(np.asarray(mesh.vertices)[verts]))\n        pcl.paint_uniform_color((0, 0, 1))\n        geoms.append(pcl)\n    if self_intersecting:\n        intersecting_triangles = np.asarray(mesh.get_self_intersecting_triangles())\n        intersecting_triangles = intersecting_triangles[0:1]\n        intersecting_triangles = np.unique(intersecting_triangles)\n        print('  # visualize self-intersecting triangles')\n        triangles = np.asarray(mesh.triangles)[intersecting_triangles]\n        edges = [np.vstack((triangles[:, i], triangles[:, j])) for (i, j) in [(0, 1), (1, 2), (2, 0)]]\n        edges = np.hstack(edges).T\n        edges = o3d.utility.Vector2iVector(edges)\n        geoms.append(o3dex.edges_to_lineset(mesh, edges, (1, 0, 1)))\n    o3d.visualization.draw_geometries(geoms, mesh_show_back_face=True)",
            "def check_properties(name, mesh):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    mesh.compute_vertex_normals()\n    edge_manifold = mesh.is_edge_manifold(allow_boundary_edges=True)\n    edge_manifold_boundary = mesh.is_edge_manifold(allow_boundary_edges=False)\n    vertex_manifold = mesh.is_vertex_manifold()\n    self_intersecting = mesh.is_self_intersecting()\n    watertight = mesh.is_watertight()\n    orientable = mesh.is_orientable()\n    print(name)\n    print(f'  edge_manifold:          {edge_manifold}')\n    print(f'  edge_manifold_boundary: {edge_manifold_boundary}')\n    print(f'  vertex_manifold:        {vertex_manifold}')\n    print(f'  self_intersecting:      {self_intersecting}')\n    print(f'  watertight:             {watertight}')\n    print(f'  orientable:             {orientable}')\n    geoms = [mesh]\n    if not edge_manifold:\n        edges = mesh.get_non_manifold_edges(allow_boundary_edges=True)\n        geoms.append(o3dex.edges_to_lineset(mesh, edges, (1, 0, 0)))\n    if not edge_manifold_boundary:\n        edges = mesh.get_non_manifold_edges(allow_boundary_edges=False)\n        geoms.append(o3dex.edges_to_lineset(mesh, edges, (0, 1, 0)))\n    if not vertex_manifold:\n        verts = np.asarray(mesh.get_non_manifold_vertices())\n        pcl = o3d.geometry.PointCloud(points=o3d.utility.Vector3dVector(np.asarray(mesh.vertices)[verts]))\n        pcl.paint_uniform_color((0, 0, 1))\n        geoms.append(pcl)\n    if self_intersecting:\n        intersecting_triangles = np.asarray(mesh.get_self_intersecting_triangles())\n        intersecting_triangles = intersecting_triangles[0:1]\n        intersecting_triangles = np.unique(intersecting_triangles)\n        print('  # visualize self-intersecting triangles')\n        triangles = np.asarray(mesh.triangles)[intersecting_triangles]\n        edges = [np.vstack((triangles[:, i], triangles[:, j])) for (i, j) in [(0, 1), (1, 2), (2, 0)]]\n        edges = np.hstack(edges).T\n        edges = o3d.utility.Vector2iVector(edges)\n        geoms.append(o3dex.edges_to_lineset(mesh, edges, (1, 0, 1)))\n    o3d.visualization.draw_geometries(geoms, mesh_show_back_face=True)",
            "def check_properties(name, mesh):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    mesh.compute_vertex_normals()\n    edge_manifold = mesh.is_edge_manifold(allow_boundary_edges=True)\n    edge_manifold_boundary = mesh.is_edge_manifold(allow_boundary_edges=False)\n    vertex_manifold = mesh.is_vertex_manifold()\n    self_intersecting = mesh.is_self_intersecting()\n    watertight = mesh.is_watertight()\n    orientable = mesh.is_orientable()\n    print(name)\n    print(f'  edge_manifold:          {edge_manifold}')\n    print(f'  edge_manifold_boundary: {edge_manifold_boundary}')\n    print(f'  vertex_manifold:        {vertex_manifold}')\n    print(f'  self_intersecting:      {self_intersecting}')\n    print(f'  watertight:             {watertight}')\n    print(f'  orientable:             {orientable}')\n    geoms = [mesh]\n    if not edge_manifold:\n        edges = mesh.get_non_manifold_edges(allow_boundary_edges=True)\n        geoms.append(o3dex.edges_to_lineset(mesh, edges, (1, 0, 0)))\n    if not edge_manifold_boundary:\n        edges = mesh.get_non_manifold_edges(allow_boundary_edges=False)\n        geoms.append(o3dex.edges_to_lineset(mesh, edges, (0, 1, 0)))\n    if not vertex_manifold:\n        verts = np.asarray(mesh.get_non_manifold_vertices())\n        pcl = o3d.geometry.PointCloud(points=o3d.utility.Vector3dVector(np.asarray(mesh.vertices)[verts]))\n        pcl.paint_uniform_color((0, 0, 1))\n        geoms.append(pcl)\n    if self_intersecting:\n        intersecting_triangles = np.asarray(mesh.get_self_intersecting_triangles())\n        intersecting_triangles = intersecting_triangles[0:1]\n        intersecting_triangles = np.unique(intersecting_triangles)\n        print('  # visualize self-intersecting triangles')\n        triangles = np.asarray(mesh.triangles)[intersecting_triangles]\n        edges = [np.vstack((triangles[:, i], triangles[:, j])) for (i, j) in [(0, 1), (1, 2), (2, 0)]]\n        edges = np.hstack(edges).T\n        edges = o3d.utility.Vector2iVector(edges)\n        geoms.append(o3dex.edges_to_lineset(mesh, edges, (1, 0, 1)))\n    o3d.visualization.draw_geometries(geoms, mesh_show_back_face=True)"
        ]
    }
]
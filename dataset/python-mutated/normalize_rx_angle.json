[
    {
        "func_name": "__init__",
        "original": "def __init__(self, target=None, resolution_in_radian=0):\n    \"\"\"NormalizeRXAngle initializer.\n\n        Args:\n            target (Target): The :class:`~.Target` representing the target backend.\n                If the target contains SX and X calibrations, this pass will replace the\n                corresponding RX gates with SX and X gates.\n            resolution_in_radian (float): Resolution for RX rotation angle quantization.\n                If set to zero, this pass won't modify the rotation angles in the given DAG.\n                (=Provides arbitrary-angle RX)\n        \"\"\"\n    super().__init__()\n    self.target = target\n    self.resolution_in_radian = resolution_in_radian\n    self.already_generated = {}",
        "mutated": [
            "def __init__(self, target=None, resolution_in_radian=0):\n    if False:\n        i = 10\n    \"NormalizeRXAngle initializer.\\n\\n        Args:\\n            target (Target): The :class:`~.Target` representing the target backend.\\n                If the target contains SX and X calibrations, this pass will replace the\\n                corresponding RX gates with SX and X gates.\\n            resolution_in_radian (float): Resolution for RX rotation angle quantization.\\n                If set to zero, this pass won't modify the rotation angles in the given DAG.\\n                (=Provides arbitrary-angle RX)\\n        \"\n    super().__init__()\n    self.target = target\n    self.resolution_in_radian = resolution_in_radian\n    self.already_generated = {}",
            "def __init__(self, target=None, resolution_in_radian=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"NormalizeRXAngle initializer.\\n\\n        Args:\\n            target (Target): The :class:`~.Target` representing the target backend.\\n                If the target contains SX and X calibrations, this pass will replace the\\n                corresponding RX gates with SX and X gates.\\n            resolution_in_radian (float): Resolution for RX rotation angle quantization.\\n                If set to zero, this pass won't modify the rotation angles in the given DAG.\\n                (=Provides arbitrary-angle RX)\\n        \"\n    super().__init__()\n    self.target = target\n    self.resolution_in_radian = resolution_in_radian\n    self.already_generated = {}",
            "def __init__(self, target=None, resolution_in_radian=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"NormalizeRXAngle initializer.\\n\\n        Args:\\n            target (Target): The :class:`~.Target` representing the target backend.\\n                If the target contains SX and X calibrations, this pass will replace the\\n                corresponding RX gates with SX and X gates.\\n            resolution_in_radian (float): Resolution for RX rotation angle quantization.\\n                If set to zero, this pass won't modify the rotation angles in the given DAG.\\n                (=Provides arbitrary-angle RX)\\n        \"\n    super().__init__()\n    self.target = target\n    self.resolution_in_radian = resolution_in_radian\n    self.already_generated = {}",
            "def __init__(self, target=None, resolution_in_radian=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"NormalizeRXAngle initializer.\\n\\n        Args:\\n            target (Target): The :class:`~.Target` representing the target backend.\\n                If the target contains SX and X calibrations, this pass will replace the\\n                corresponding RX gates with SX and X gates.\\n            resolution_in_radian (float): Resolution for RX rotation angle quantization.\\n                If set to zero, this pass won't modify the rotation angles in the given DAG.\\n                (=Provides arbitrary-angle RX)\\n        \"\n    super().__init__()\n    self.target = target\n    self.resolution_in_radian = resolution_in_radian\n    self.already_generated = {}",
            "def __init__(self, target=None, resolution_in_radian=0):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"NormalizeRXAngle initializer.\\n\\n        Args:\\n            target (Target): The :class:`~.Target` representing the target backend.\\n                If the target contains SX and X calibrations, this pass will replace the\\n                corresponding RX gates with SX and X gates.\\n            resolution_in_radian (float): Resolution for RX rotation angle quantization.\\n                If set to zero, this pass won't modify the rotation angles in the given DAG.\\n                (=Provides arbitrary-angle RX)\\n        \"\n    super().__init__()\n    self.target = target\n    self.resolution_in_radian = resolution_in_radian\n    self.already_generated = {}"
        ]
    },
    {
        "func_name": "quantize_angles",
        "original": "def quantize_angles(self, qubit, original_angle):\n    \"\"\"Quantize the RX rotation angles by assigning the same value for the angles\n        that differ within a resolution provided by the user.\n\n        Args:\n            qubit (qiskit.circuit.Qubit): This will be the dict key to access the list of\n                quantized rotation angles.\n            original_angle (float): Original rotation angle, before quantization.\n\n        Returns:\n            float: Quantized angle.\n        \"\"\"\n    if (angles := self.already_generated.get(qubit)) is None:\n        self.already_generated[qubit] = np.array([original_angle])\n        return original_angle\n    similar_angles = angles[np.isclose(angles, original_angle, atol=self.resolution_in_radian / 2)]\n    if similar_angles.size == 0:\n        self.already_generated[qubit] = np.append(angles, original_angle)\n        return original_angle\n    return float(similar_angles[0])",
        "mutated": [
            "def quantize_angles(self, qubit, original_angle):\n    if False:\n        i = 10\n    'Quantize the RX rotation angles by assigning the same value for the angles\\n        that differ within a resolution provided by the user.\\n\\n        Args:\\n            qubit (qiskit.circuit.Qubit): This will be the dict key to access the list of\\n                quantized rotation angles.\\n            original_angle (float): Original rotation angle, before quantization.\\n\\n        Returns:\\n            float: Quantized angle.\\n        '\n    if (angles := self.already_generated.get(qubit)) is None:\n        self.already_generated[qubit] = np.array([original_angle])\n        return original_angle\n    similar_angles = angles[np.isclose(angles, original_angle, atol=self.resolution_in_radian / 2)]\n    if similar_angles.size == 0:\n        self.already_generated[qubit] = np.append(angles, original_angle)\n        return original_angle\n    return float(similar_angles[0])",
            "def quantize_angles(self, qubit, original_angle):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Quantize the RX rotation angles by assigning the same value for the angles\\n        that differ within a resolution provided by the user.\\n\\n        Args:\\n            qubit (qiskit.circuit.Qubit): This will be the dict key to access the list of\\n                quantized rotation angles.\\n            original_angle (float): Original rotation angle, before quantization.\\n\\n        Returns:\\n            float: Quantized angle.\\n        '\n    if (angles := self.already_generated.get(qubit)) is None:\n        self.already_generated[qubit] = np.array([original_angle])\n        return original_angle\n    similar_angles = angles[np.isclose(angles, original_angle, atol=self.resolution_in_radian / 2)]\n    if similar_angles.size == 0:\n        self.already_generated[qubit] = np.append(angles, original_angle)\n        return original_angle\n    return float(similar_angles[0])",
            "def quantize_angles(self, qubit, original_angle):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Quantize the RX rotation angles by assigning the same value for the angles\\n        that differ within a resolution provided by the user.\\n\\n        Args:\\n            qubit (qiskit.circuit.Qubit): This will be the dict key to access the list of\\n                quantized rotation angles.\\n            original_angle (float): Original rotation angle, before quantization.\\n\\n        Returns:\\n            float: Quantized angle.\\n        '\n    if (angles := self.already_generated.get(qubit)) is None:\n        self.already_generated[qubit] = np.array([original_angle])\n        return original_angle\n    similar_angles = angles[np.isclose(angles, original_angle, atol=self.resolution_in_radian / 2)]\n    if similar_angles.size == 0:\n        self.already_generated[qubit] = np.append(angles, original_angle)\n        return original_angle\n    return float(similar_angles[0])",
            "def quantize_angles(self, qubit, original_angle):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Quantize the RX rotation angles by assigning the same value for the angles\\n        that differ within a resolution provided by the user.\\n\\n        Args:\\n            qubit (qiskit.circuit.Qubit): This will be the dict key to access the list of\\n                quantized rotation angles.\\n            original_angle (float): Original rotation angle, before quantization.\\n\\n        Returns:\\n            float: Quantized angle.\\n        '\n    if (angles := self.already_generated.get(qubit)) is None:\n        self.already_generated[qubit] = np.array([original_angle])\n        return original_angle\n    similar_angles = angles[np.isclose(angles, original_angle, atol=self.resolution_in_radian / 2)]\n    if similar_angles.size == 0:\n        self.already_generated[qubit] = np.append(angles, original_angle)\n        return original_angle\n    return float(similar_angles[0])",
            "def quantize_angles(self, qubit, original_angle):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Quantize the RX rotation angles by assigning the same value for the angles\\n        that differ within a resolution provided by the user.\\n\\n        Args:\\n            qubit (qiskit.circuit.Qubit): This will be the dict key to access the list of\\n                quantized rotation angles.\\n            original_angle (float): Original rotation angle, before quantization.\\n\\n        Returns:\\n            float: Quantized angle.\\n        '\n    if (angles := self.already_generated.get(qubit)) is None:\n        self.already_generated[qubit] = np.array([original_angle])\n        return original_angle\n    similar_angles = angles[np.isclose(angles, original_angle, atol=self.resolution_in_radian / 2)]\n    if similar_angles.size == 0:\n        self.already_generated[qubit] = np.append(angles, original_angle)\n        return original_angle\n    return float(similar_angles[0])"
        ]
    },
    {
        "func_name": "run",
        "original": "def run(self, dag):\n    \"\"\"Run the NormalizeRXAngle pass on ``dag``.\n\n        Args:\n            dag (DAGCircuit): The DAG to be optimized.\n\n        Returns:\n            DAGCircuit: A DAG with RX gate calibration.\n        \"\"\"\n    for op_node in dag.op_nodes():\n        if not isinstance(op_node.op, RXGate):\n            continue\n        raw_theta = op_node.op.params[0]\n        wrapped_theta = np.arctan2(np.sin(raw_theta), np.cos(raw_theta))\n        if self.resolution_in_radian:\n            wrapped_theta = self.quantize_angles(op_node.qargs[0], wrapped_theta)\n        half_pi_rotation = np.isclose(abs(wrapped_theta), np.pi / 2, atol=self.resolution_in_radian / 2)\n        pi_rotation = np.isclose(abs(wrapped_theta), np.pi, atol=self.resolution_in_radian / 2)\n        should_modify_node = wrapped_theta != raw_theta or wrapped_theta < 0 or half_pi_rotation or pi_rotation\n        if should_modify_node:\n            mini_dag = DAGCircuit()\n            mini_dag.add_qubits(op_node.qargs)\n            if half_pi_rotation:\n                physical_qubit_idx = dag.find_bit(op_node.qargs[0]).index\n                if self.target.instruction_supported('sx', (physical_qubit_idx,)):\n                    mini_dag.apply_operation_back(SXGate(), qargs=op_node.qargs)\n            elif pi_rotation:\n                physical_qubit_idx = dag.find_bit(op_node.qargs[0]).index\n                if self.target.instruction_supported('x', (physical_qubit_idx,)):\n                    mini_dag.apply_operation_back(XGate(), qargs=op_node.qargs)\n            else:\n                mini_dag.apply_operation_back(RXGate(np.abs(wrapped_theta)), qargs=op_node.qargs)\n            if wrapped_theta < 0:\n                mini_dag.apply_operation_front(RZGate(np.pi), qargs=op_node.qargs)\n                mini_dag.apply_operation_back(RZGate(-np.pi), qargs=op_node.qargs)\n            dag.substitute_node_with_dag(node=op_node, input_dag=mini_dag, wires=op_node.qargs)\n    return dag",
        "mutated": [
            "def run(self, dag):\n    if False:\n        i = 10\n    'Run the NormalizeRXAngle pass on ``dag``.\\n\\n        Args:\\n            dag (DAGCircuit): The DAG to be optimized.\\n\\n        Returns:\\n            DAGCircuit: A DAG with RX gate calibration.\\n        '\n    for op_node in dag.op_nodes():\n        if not isinstance(op_node.op, RXGate):\n            continue\n        raw_theta = op_node.op.params[0]\n        wrapped_theta = np.arctan2(np.sin(raw_theta), np.cos(raw_theta))\n        if self.resolution_in_radian:\n            wrapped_theta = self.quantize_angles(op_node.qargs[0], wrapped_theta)\n        half_pi_rotation = np.isclose(abs(wrapped_theta), np.pi / 2, atol=self.resolution_in_radian / 2)\n        pi_rotation = np.isclose(abs(wrapped_theta), np.pi, atol=self.resolution_in_radian / 2)\n        should_modify_node = wrapped_theta != raw_theta or wrapped_theta < 0 or half_pi_rotation or pi_rotation\n        if should_modify_node:\n            mini_dag = DAGCircuit()\n            mini_dag.add_qubits(op_node.qargs)\n            if half_pi_rotation:\n                physical_qubit_idx = dag.find_bit(op_node.qargs[0]).index\n                if self.target.instruction_supported('sx', (physical_qubit_idx,)):\n                    mini_dag.apply_operation_back(SXGate(), qargs=op_node.qargs)\n            elif pi_rotation:\n                physical_qubit_idx = dag.find_bit(op_node.qargs[0]).index\n                if self.target.instruction_supported('x', (physical_qubit_idx,)):\n                    mini_dag.apply_operation_back(XGate(), qargs=op_node.qargs)\n            else:\n                mini_dag.apply_operation_back(RXGate(np.abs(wrapped_theta)), qargs=op_node.qargs)\n            if wrapped_theta < 0:\n                mini_dag.apply_operation_front(RZGate(np.pi), qargs=op_node.qargs)\n                mini_dag.apply_operation_back(RZGate(-np.pi), qargs=op_node.qargs)\n            dag.substitute_node_with_dag(node=op_node, input_dag=mini_dag, wires=op_node.qargs)\n    return dag",
            "def run(self, dag):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'Run the NormalizeRXAngle pass on ``dag``.\\n\\n        Args:\\n            dag (DAGCircuit): The DAG to be optimized.\\n\\n        Returns:\\n            DAGCircuit: A DAG with RX gate calibration.\\n        '\n    for op_node in dag.op_nodes():\n        if not isinstance(op_node.op, RXGate):\n            continue\n        raw_theta = op_node.op.params[0]\n        wrapped_theta = np.arctan2(np.sin(raw_theta), np.cos(raw_theta))\n        if self.resolution_in_radian:\n            wrapped_theta = self.quantize_angles(op_node.qargs[0], wrapped_theta)\n        half_pi_rotation = np.isclose(abs(wrapped_theta), np.pi / 2, atol=self.resolution_in_radian / 2)\n        pi_rotation = np.isclose(abs(wrapped_theta), np.pi, atol=self.resolution_in_radian / 2)\n        should_modify_node = wrapped_theta != raw_theta or wrapped_theta < 0 or half_pi_rotation or pi_rotation\n        if should_modify_node:\n            mini_dag = DAGCircuit()\n            mini_dag.add_qubits(op_node.qargs)\n            if half_pi_rotation:\n                physical_qubit_idx = dag.find_bit(op_node.qargs[0]).index\n                if self.target.instruction_supported('sx', (physical_qubit_idx,)):\n                    mini_dag.apply_operation_back(SXGate(), qargs=op_node.qargs)\n            elif pi_rotation:\n                physical_qubit_idx = dag.find_bit(op_node.qargs[0]).index\n                if self.target.instruction_supported('x', (physical_qubit_idx,)):\n                    mini_dag.apply_operation_back(XGate(), qargs=op_node.qargs)\n            else:\n                mini_dag.apply_operation_back(RXGate(np.abs(wrapped_theta)), qargs=op_node.qargs)\n            if wrapped_theta < 0:\n                mini_dag.apply_operation_front(RZGate(np.pi), qargs=op_node.qargs)\n                mini_dag.apply_operation_back(RZGate(-np.pi), qargs=op_node.qargs)\n            dag.substitute_node_with_dag(node=op_node, input_dag=mini_dag, wires=op_node.qargs)\n    return dag",
            "def run(self, dag):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'Run the NormalizeRXAngle pass on ``dag``.\\n\\n        Args:\\n            dag (DAGCircuit): The DAG to be optimized.\\n\\n        Returns:\\n            DAGCircuit: A DAG with RX gate calibration.\\n        '\n    for op_node in dag.op_nodes():\n        if not isinstance(op_node.op, RXGate):\n            continue\n        raw_theta = op_node.op.params[0]\n        wrapped_theta = np.arctan2(np.sin(raw_theta), np.cos(raw_theta))\n        if self.resolution_in_radian:\n            wrapped_theta = self.quantize_angles(op_node.qargs[0], wrapped_theta)\n        half_pi_rotation = np.isclose(abs(wrapped_theta), np.pi / 2, atol=self.resolution_in_radian / 2)\n        pi_rotation = np.isclose(abs(wrapped_theta), np.pi, atol=self.resolution_in_radian / 2)\n        should_modify_node = wrapped_theta != raw_theta or wrapped_theta < 0 or half_pi_rotation or pi_rotation\n        if should_modify_node:\n            mini_dag = DAGCircuit()\n            mini_dag.add_qubits(op_node.qargs)\n            if half_pi_rotation:\n                physical_qubit_idx = dag.find_bit(op_node.qargs[0]).index\n                if self.target.instruction_supported('sx', (physical_qubit_idx,)):\n                    mini_dag.apply_operation_back(SXGate(), qargs=op_node.qargs)\n            elif pi_rotation:\n                physical_qubit_idx = dag.find_bit(op_node.qargs[0]).index\n                if self.target.instruction_supported('x', (physical_qubit_idx,)):\n                    mini_dag.apply_operation_back(XGate(), qargs=op_node.qargs)\n            else:\n                mini_dag.apply_operation_back(RXGate(np.abs(wrapped_theta)), qargs=op_node.qargs)\n            if wrapped_theta < 0:\n                mini_dag.apply_operation_front(RZGate(np.pi), qargs=op_node.qargs)\n                mini_dag.apply_operation_back(RZGate(-np.pi), qargs=op_node.qargs)\n            dag.substitute_node_with_dag(node=op_node, input_dag=mini_dag, wires=op_node.qargs)\n    return dag",
            "def run(self, dag):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'Run the NormalizeRXAngle pass on ``dag``.\\n\\n        Args:\\n            dag (DAGCircuit): The DAG to be optimized.\\n\\n        Returns:\\n            DAGCircuit: A DAG with RX gate calibration.\\n        '\n    for op_node in dag.op_nodes():\n        if not isinstance(op_node.op, RXGate):\n            continue\n        raw_theta = op_node.op.params[0]\n        wrapped_theta = np.arctan2(np.sin(raw_theta), np.cos(raw_theta))\n        if self.resolution_in_radian:\n            wrapped_theta = self.quantize_angles(op_node.qargs[0], wrapped_theta)\n        half_pi_rotation = np.isclose(abs(wrapped_theta), np.pi / 2, atol=self.resolution_in_radian / 2)\n        pi_rotation = np.isclose(abs(wrapped_theta), np.pi, atol=self.resolution_in_radian / 2)\n        should_modify_node = wrapped_theta != raw_theta or wrapped_theta < 0 or half_pi_rotation or pi_rotation\n        if should_modify_node:\n            mini_dag = DAGCircuit()\n            mini_dag.add_qubits(op_node.qargs)\n            if half_pi_rotation:\n                physical_qubit_idx = dag.find_bit(op_node.qargs[0]).index\n                if self.target.instruction_supported('sx', (physical_qubit_idx,)):\n                    mini_dag.apply_operation_back(SXGate(), qargs=op_node.qargs)\n            elif pi_rotation:\n                physical_qubit_idx = dag.find_bit(op_node.qargs[0]).index\n                if self.target.instruction_supported('x', (physical_qubit_idx,)):\n                    mini_dag.apply_operation_back(XGate(), qargs=op_node.qargs)\n            else:\n                mini_dag.apply_operation_back(RXGate(np.abs(wrapped_theta)), qargs=op_node.qargs)\n            if wrapped_theta < 0:\n                mini_dag.apply_operation_front(RZGate(np.pi), qargs=op_node.qargs)\n                mini_dag.apply_operation_back(RZGate(-np.pi), qargs=op_node.qargs)\n            dag.substitute_node_with_dag(node=op_node, input_dag=mini_dag, wires=op_node.qargs)\n    return dag",
            "def run(self, dag):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'Run the NormalizeRXAngle pass on ``dag``.\\n\\n        Args:\\n            dag (DAGCircuit): The DAG to be optimized.\\n\\n        Returns:\\n            DAGCircuit: A DAG with RX gate calibration.\\n        '\n    for op_node in dag.op_nodes():\n        if not isinstance(op_node.op, RXGate):\n            continue\n        raw_theta = op_node.op.params[0]\n        wrapped_theta = np.arctan2(np.sin(raw_theta), np.cos(raw_theta))\n        if self.resolution_in_radian:\n            wrapped_theta = self.quantize_angles(op_node.qargs[0], wrapped_theta)\n        half_pi_rotation = np.isclose(abs(wrapped_theta), np.pi / 2, atol=self.resolution_in_radian / 2)\n        pi_rotation = np.isclose(abs(wrapped_theta), np.pi, atol=self.resolution_in_radian / 2)\n        should_modify_node = wrapped_theta != raw_theta or wrapped_theta < 0 or half_pi_rotation or pi_rotation\n        if should_modify_node:\n            mini_dag = DAGCircuit()\n            mini_dag.add_qubits(op_node.qargs)\n            if half_pi_rotation:\n                physical_qubit_idx = dag.find_bit(op_node.qargs[0]).index\n                if self.target.instruction_supported('sx', (physical_qubit_idx,)):\n                    mini_dag.apply_operation_back(SXGate(), qargs=op_node.qargs)\n            elif pi_rotation:\n                physical_qubit_idx = dag.find_bit(op_node.qargs[0]).index\n                if self.target.instruction_supported('x', (physical_qubit_idx,)):\n                    mini_dag.apply_operation_back(XGate(), qargs=op_node.qargs)\n            else:\n                mini_dag.apply_operation_back(RXGate(np.abs(wrapped_theta)), qargs=op_node.qargs)\n            if wrapped_theta < 0:\n                mini_dag.apply_operation_front(RZGate(np.pi), qargs=op_node.qargs)\n                mini_dag.apply_operation_back(RZGate(-np.pi), qargs=op_node.qargs)\n            dag.substitute_node_with_dag(node=op_node, input_dag=mini_dag, wires=op_node.qargs)\n    return dag"
        ]
    }
]
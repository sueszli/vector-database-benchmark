[
    {
        "func_name": "test_simple",
        "original": "def test_simple(self):\n    self.login_as(user=self.user)\n    team = self.create_team()\n    project1 = self.create_project(teams=[team], name='foo')\n    raw_event = RawEvent.objects.create(project_id=project1.id, event_id='abc')\n    (issue, _) = ProcessingIssue.objects.get_or_create(project_id=project1.id, checksum='abc', type=EventError.NATIVE_MISSING_DSYM)\n    EventProcessingIssue.objects.get_or_create(raw_event=raw_event, processing_issue=issue)\n    url = reverse('sentry-api-0-project-processing-issues', kwargs={'organization_slug': project1.organization.slug, 'project_slug': project1.slug})\n    response = self.client.get(url, format='json')\n    assert response.status_code == 200, response.content\n    assert response.data['hasIssues'] is True\n    assert response.data['hasMoreResolveableIssues'] is False\n    assert response.data['numIssues'] == 1\n    assert response.data['issuesProcessing'] == 0\n    assert response.data['resolveableIssues'] == 0",
        "mutated": [
            "def test_simple(self):\n    if False:\n        i = 10\n    self.login_as(user=self.user)\n    team = self.create_team()\n    project1 = self.create_project(teams=[team], name='foo')\n    raw_event = RawEvent.objects.create(project_id=project1.id, event_id='abc')\n    (issue, _) = ProcessingIssue.objects.get_or_create(project_id=project1.id, checksum='abc', type=EventError.NATIVE_MISSING_DSYM)\n    EventProcessingIssue.objects.get_or_create(raw_event=raw_event, processing_issue=issue)\n    url = reverse('sentry-api-0-project-processing-issues', kwargs={'organization_slug': project1.organization.slug, 'project_slug': project1.slug})\n    response = self.client.get(url, format='json')\n    assert response.status_code == 200, response.content\n    assert response.data['hasIssues'] is True\n    assert response.data['hasMoreResolveableIssues'] is False\n    assert response.data['numIssues'] == 1\n    assert response.data['issuesProcessing'] == 0\n    assert response.data['resolveableIssues'] == 0",
            "def test_simple(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.login_as(user=self.user)\n    team = self.create_team()\n    project1 = self.create_project(teams=[team], name='foo')\n    raw_event = RawEvent.objects.create(project_id=project1.id, event_id='abc')\n    (issue, _) = ProcessingIssue.objects.get_or_create(project_id=project1.id, checksum='abc', type=EventError.NATIVE_MISSING_DSYM)\n    EventProcessingIssue.objects.get_or_create(raw_event=raw_event, processing_issue=issue)\n    url = reverse('sentry-api-0-project-processing-issues', kwargs={'organization_slug': project1.organization.slug, 'project_slug': project1.slug})\n    response = self.client.get(url, format='json')\n    assert response.status_code == 200, response.content\n    assert response.data['hasIssues'] is True\n    assert response.data['hasMoreResolveableIssues'] is False\n    assert response.data['numIssues'] == 1\n    assert response.data['issuesProcessing'] == 0\n    assert response.data['resolveableIssues'] == 0",
            "def test_simple(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.login_as(user=self.user)\n    team = self.create_team()\n    project1 = self.create_project(teams=[team], name='foo')\n    raw_event = RawEvent.objects.create(project_id=project1.id, event_id='abc')\n    (issue, _) = ProcessingIssue.objects.get_or_create(project_id=project1.id, checksum='abc', type=EventError.NATIVE_MISSING_DSYM)\n    EventProcessingIssue.objects.get_or_create(raw_event=raw_event, processing_issue=issue)\n    url = reverse('sentry-api-0-project-processing-issues', kwargs={'organization_slug': project1.organization.slug, 'project_slug': project1.slug})\n    response = self.client.get(url, format='json')\n    assert response.status_code == 200, response.content\n    assert response.data['hasIssues'] is True\n    assert response.data['hasMoreResolveableIssues'] is False\n    assert response.data['numIssues'] == 1\n    assert response.data['issuesProcessing'] == 0\n    assert response.data['resolveableIssues'] == 0",
            "def test_simple(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.login_as(user=self.user)\n    team = self.create_team()\n    project1 = self.create_project(teams=[team], name='foo')\n    raw_event = RawEvent.objects.create(project_id=project1.id, event_id='abc')\n    (issue, _) = ProcessingIssue.objects.get_or_create(project_id=project1.id, checksum='abc', type=EventError.NATIVE_MISSING_DSYM)\n    EventProcessingIssue.objects.get_or_create(raw_event=raw_event, processing_issue=issue)\n    url = reverse('sentry-api-0-project-processing-issues', kwargs={'organization_slug': project1.organization.slug, 'project_slug': project1.slug})\n    response = self.client.get(url, format='json')\n    assert response.status_code == 200, response.content\n    assert response.data['hasIssues'] is True\n    assert response.data['hasMoreResolveableIssues'] is False\n    assert response.data['numIssues'] == 1\n    assert response.data['issuesProcessing'] == 0\n    assert response.data['resolveableIssues'] == 0",
            "def test_simple(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.login_as(user=self.user)\n    team = self.create_team()\n    project1 = self.create_project(teams=[team], name='foo')\n    raw_event = RawEvent.objects.create(project_id=project1.id, event_id='abc')\n    (issue, _) = ProcessingIssue.objects.get_or_create(project_id=project1.id, checksum='abc', type=EventError.NATIVE_MISSING_DSYM)\n    EventProcessingIssue.objects.get_or_create(raw_event=raw_event, processing_issue=issue)\n    url = reverse('sentry-api-0-project-processing-issues', kwargs={'organization_slug': project1.organization.slug, 'project_slug': project1.slug})\n    response = self.client.get(url, format='json')\n    assert response.status_code == 200, response.content\n    assert response.data['hasIssues'] is True\n    assert response.data['hasMoreResolveableIssues'] is False\n    assert response.data['numIssues'] == 1\n    assert response.data['issuesProcessing'] == 0\n    assert response.data['resolveableIssues'] == 0"
        ]
    },
    {
        "func_name": "test_issues",
        "original": "def test_issues(self):\n    self.login_as(user=self.user)\n    team = self.create_team()\n    project1 = self.create_project(teams=[team], name='foo')\n    raw_event = RawEvent.objects.create(project_id=project1.id, event_id='abc')\n    (issue, _) = ProcessingIssue.objects.get_or_create(project_id=project1.id, checksum='abc', type=EventError.NATIVE_MISSING_DSYM, datetime=datetime(2013, 8, 13, 3, 8, 25, tzinfo=timezone.utc))\n    (issue2, _) = ProcessingIssue.objects.get_or_create(project_id=project1.id, checksum='abcd', type=EventError.NATIVE_MISSING_DSYM, datetime=datetime(2014, 8, 13, 3, 8, 25, tzinfo=timezone.utc))\n    EventProcessingIssue.objects.get_or_create(raw_event=raw_event, processing_issue=issue)\n    url = reverse('sentry-api-0-project-processing-issues', kwargs={'organization_slug': project1.organization.slug, 'project_slug': project1.slug})\n    response = self.client.get(url + '?detailed=1', format='json')\n    assert response.status_code == 200, response.content\n    assert len(response.data['issues']) == 2\n    assert response.data['numIssues'] == 2\n    assert response.data['lastSeen'] == issue2.datetime\n    assert response.data['hasIssues'] is True\n    assert response.data['hasMoreResolveableIssues'] is False\n    assert response.data['issuesProcessing'] == 0\n    assert response.data['resolveableIssues'] == 0\n    assert response.data['issues'][0]['checksum'] == issue.checksum\n    assert response.data['issues'][0]['numEvents'] == 1\n    assert response.data['issues'][0]['type'] == EventError.NATIVE_MISSING_DSYM\n    assert response.data['issues'][1]['checksum'] == issue2.checksum",
        "mutated": [
            "def test_issues(self):\n    if False:\n        i = 10\n    self.login_as(user=self.user)\n    team = self.create_team()\n    project1 = self.create_project(teams=[team], name='foo')\n    raw_event = RawEvent.objects.create(project_id=project1.id, event_id='abc')\n    (issue, _) = ProcessingIssue.objects.get_or_create(project_id=project1.id, checksum='abc', type=EventError.NATIVE_MISSING_DSYM, datetime=datetime(2013, 8, 13, 3, 8, 25, tzinfo=timezone.utc))\n    (issue2, _) = ProcessingIssue.objects.get_or_create(project_id=project1.id, checksum='abcd', type=EventError.NATIVE_MISSING_DSYM, datetime=datetime(2014, 8, 13, 3, 8, 25, tzinfo=timezone.utc))\n    EventProcessingIssue.objects.get_or_create(raw_event=raw_event, processing_issue=issue)\n    url = reverse('sentry-api-0-project-processing-issues', kwargs={'organization_slug': project1.organization.slug, 'project_slug': project1.slug})\n    response = self.client.get(url + '?detailed=1', format='json')\n    assert response.status_code == 200, response.content\n    assert len(response.data['issues']) == 2\n    assert response.data['numIssues'] == 2\n    assert response.data['lastSeen'] == issue2.datetime\n    assert response.data['hasIssues'] is True\n    assert response.data['hasMoreResolveableIssues'] is False\n    assert response.data['issuesProcessing'] == 0\n    assert response.data['resolveableIssues'] == 0\n    assert response.data['issues'][0]['checksum'] == issue.checksum\n    assert response.data['issues'][0]['numEvents'] == 1\n    assert response.data['issues'][0]['type'] == EventError.NATIVE_MISSING_DSYM\n    assert response.data['issues'][1]['checksum'] == issue2.checksum",
            "def test_issues(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.login_as(user=self.user)\n    team = self.create_team()\n    project1 = self.create_project(teams=[team], name='foo')\n    raw_event = RawEvent.objects.create(project_id=project1.id, event_id='abc')\n    (issue, _) = ProcessingIssue.objects.get_or_create(project_id=project1.id, checksum='abc', type=EventError.NATIVE_MISSING_DSYM, datetime=datetime(2013, 8, 13, 3, 8, 25, tzinfo=timezone.utc))\n    (issue2, _) = ProcessingIssue.objects.get_or_create(project_id=project1.id, checksum='abcd', type=EventError.NATIVE_MISSING_DSYM, datetime=datetime(2014, 8, 13, 3, 8, 25, tzinfo=timezone.utc))\n    EventProcessingIssue.objects.get_or_create(raw_event=raw_event, processing_issue=issue)\n    url = reverse('sentry-api-0-project-processing-issues', kwargs={'organization_slug': project1.organization.slug, 'project_slug': project1.slug})\n    response = self.client.get(url + '?detailed=1', format='json')\n    assert response.status_code == 200, response.content\n    assert len(response.data['issues']) == 2\n    assert response.data['numIssues'] == 2\n    assert response.data['lastSeen'] == issue2.datetime\n    assert response.data['hasIssues'] is True\n    assert response.data['hasMoreResolveableIssues'] is False\n    assert response.data['issuesProcessing'] == 0\n    assert response.data['resolveableIssues'] == 0\n    assert response.data['issues'][0]['checksum'] == issue.checksum\n    assert response.data['issues'][0]['numEvents'] == 1\n    assert response.data['issues'][0]['type'] == EventError.NATIVE_MISSING_DSYM\n    assert response.data['issues'][1]['checksum'] == issue2.checksum",
            "def test_issues(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.login_as(user=self.user)\n    team = self.create_team()\n    project1 = self.create_project(teams=[team], name='foo')\n    raw_event = RawEvent.objects.create(project_id=project1.id, event_id='abc')\n    (issue, _) = ProcessingIssue.objects.get_or_create(project_id=project1.id, checksum='abc', type=EventError.NATIVE_MISSING_DSYM, datetime=datetime(2013, 8, 13, 3, 8, 25, tzinfo=timezone.utc))\n    (issue2, _) = ProcessingIssue.objects.get_or_create(project_id=project1.id, checksum='abcd', type=EventError.NATIVE_MISSING_DSYM, datetime=datetime(2014, 8, 13, 3, 8, 25, tzinfo=timezone.utc))\n    EventProcessingIssue.objects.get_or_create(raw_event=raw_event, processing_issue=issue)\n    url = reverse('sentry-api-0-project-processing-issues', kwargs={'organization_slug': project1.organization.slug, 'project_slug': project1.slug})\n    response = self.client.get(url + '?detailed=1', format='json')\n    assert response.status_code == 200, response.content\n    assert len(response.data['issues']) == 2\n    assert response.data['numIssues'] == 2\n    assert response.data['lastSeen'] == issue2.datetime\n    assert response.data['hasIssues'] is True\n    assert response.data['hasMoreResolveableIssues'] is False\n    assert response.data['issuesProcessing'] == 0\n    assert response.data['resolveableIssues'] == 0\n    assert response.data['issues'][0]['checksum'] == issue.checksum\n    assert response.data['issues'][0]['numEvents'] == 1\n    assert response.data['issues'][0]['type'] == EventError.NATIVE_MISSING_DSYM\n    assert response.data['issues'][1]['checksum'] == issue2.checksum",
            "def test_issues(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.login_as(user=self.user)\n    team = self.create_team()\n    project1 = self.create_project(teams=[team], name='foo')\n    raw_event = RawEvent.objects.create(project_id=project1.id, event_id='abc')\n    (issue, _) = ProcessingIssue.objects.get_or_create(project_id=project1.id, checksum='abc', type=EventError.NATIVE_MISSING_DSYM, datetime=datetime(2013, 8, 13, 3, 8, 25, tzinfo=timezone.utc))\n    (issue2, _) = ProcessingIssue.objects.get_or_create(project_id=project1.id, checksum='abcd', type=EventError.NATIVE_MISSING_DSYM, datetime=datetime(2014, 8, 13, 3, 8, 25, tzinfo=timezone.utc))\n    EventProcessingIssue.objects.get_or_create(raw_event=raw_event, processing_issue=issue)\n    url = reverse('sentry-api-0-project-processing-issues', kwargs={'organization_slug': project1.organization.slug, 'project_slug': project1.slug})\n    response = self.client.get(url + '?detailed=1', format='json')\n    assert response.status_code == 200, response.content\n    assert len(response.data['issues']) == 2\n    assert response.data['numIssues'] == 2\n    assert response.data['lastSeen'] == issue2.datetime\n    assert response.data['hasIssues'] is True\n    assert response.data['hasMoreResolveableIssues'] is False\n    assert response.data['issuesProcessing'] == 0\n    assert response.data['resolveableIssues'] == 0\n    assert response.data['issues'][0]['checksum'] == issue.checksum\n    assert response.data['issues'][0]['numEvents'] == 1\n    assert response.data['issues'][0]['type'] == EventError.NATIVE_MISSING_DSYM\n    assert response.data['issues'][1]['checksum'] == issue2.checksum",
            "def test_issues(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.login_as(user=self.user)\n    team = self.create_team()\n    project1 = self.create_project(teams=[team], name='foo')\n    raw_event = RawEvent.objects.create(project_id=project1.id, event_id='abc')\n    (issue, _) = ProcessingIssue.objects.get_or_create(project_id=project1.id, checksum='abc', type=EventError.NATIVE_MISSING_DSYM, datetime=datetime(2013, 8, 13, 3, 8, 25, tzinfo=timezone.utc))\n    (issue2, _) = ProcessingIssue.objects.get_or_create(project_id=project1.id, checksum='abcd', type=EventError.NATIVE_MISSING_DSYM, datetime=datetime(2014, 8, 13, 3, 8, 25, tzinfo=timezone.utc))\n    EventProcessingIssue.objects.get_or_create(raw_event=raw_event, processing_issue=issue)\n    url = reverse('sentry-api-0-project-processing-issues', kwargs={'organization_slug': project1.organization.slug, 'project_slug': project1.slug})\n    response = self.client.get(url + '?detailed=1', format='json')\n    assert response.status_code == 200, response.content\n    assert len(response.data['issues']) == 2\n    assert response.data['numIssues'] == 2\n    assert response.data['lastSeen'] == issue2.datetime\n    assert response.data['hasIssues'] is True\n    assert response.data['hasMoreResolveableIssues'] is False\n    assert response.data['issuesProcessing'] == 0\n    assert response.data['resolveableIssues'] == 0\n    assert response.data['issues'][0]['checksum'] == issue.checksum\n    assert response.data['issues'][0]['numEvents'] == 1\n    assert response.data['issues'][0]['type'] == EventError.NATIVE_MISSING_DSYM\n    assert response.data['issues'][1]['checksum'] == issue2.checksum"
        ]
    },
    {
        "func_name": "test_resolvable_issues",
        "original": "def test_resolvable_issues(self):\n    self.login_as(user=self.user)\n    team = self.create_team()\n    project1 = self.create_project(teams=[team], name='foo')\n    RawEvent.objects.create(project_id=project1.id, event_id='abc')\n    url = reverse('sentry-api-0-project-processing-issues', kwargs={'organization_slug': project1.organization.slug, 'project_slug': project1.slug})\n    response = self.client.get(url + '?detailed=1', format='json')\n    assert response.status_code == 200, response.content\n    assert response.data['numIssues'] == 0\n    assert response.data['resolveableIssues'] == 1\n    assert response.data['lastSeen'] is None\n    assert response.data['hasIssues'] is False\n    assert response.data['hasMoreResolveableIssues'] is False\n    assert response.data['numIssues'] == 0\n    assert response.data['issuesProcessing'] == 0",
        "mutated": [
            "def test_resolvable_issues(self):\n    if False:\n        i = 10\n    self.login_as(user=self.user)\n    team = self.create_team()\n    project1 = self.create_project(teams=[team], name='foo')\n    RawEvent.objects.create(project_id=project1.id, event_id='abc')\n    url = reverse('sentry-api-0-project-processing-issues', kwargs={'organization_slug': project1.organization.slug, 'project_slug': project1.slug})\n    response = self.client.get(url + '?detailed=1', format='json')\n    assert response.status_code == 200, response.content\n    assert response.data['numIssues'] == 0\n    assert response.data['resolveableIssues'] == 1\n    assert response.data['lastSeen'] is None\n    assert response.data['hasIssues'] is False\n    assert response.data['hasMoreResolveableIssues'] is False\n    assert response.data['numIssues'] == 0\n    assert response.data['issuesProcessing'] == 0",
            "def test_resolvable_issues(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    self.login_as(user=self.user)\n    team = self.create_team()\n    project1 = self.create_project(teams=[team], name='foo')\n    RawEvent.objects.create(project_id=project1.id, event_id='abc')\n    url = reverse('sentry-api-0-project-processing-issues', kwargs={'organization_slug': project1.organization.slug, 'project_slug': project1.slug})\n    response = self.client.get(url + '?detailed=1', format='json')\n    assert response.status_code == 200, response.content\n    assert response.data['numIssues'] == 0\n    assert response.data['resolveableIssues'] == 1\n    assert response.data['lastSeen'] is None\n    assert response.data['hasIssues'] is False\n    assert response.data['hasMoreResolveableIssues'] is False\n    assert response.data['numIssues'] == 0\n    assert response.data['issuesProcessing'] == 0",
            "def test_resolvable_issues(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    self.login_as(user=self.user)\n    team = self.create_team()\n    project1 = self.create_project(teams=[team], name='foo')\n    RawEvent.objects.create(project_id=project1.id, event_id='abc')\n    url = reverse('sentry-api-0-project-processing-issues', kwargs={'organization_slug': project1.organization.slug, 'project_slug': project1.slug})\n    response = self.client.get(url + '?detailed=1', format='json')\n    assert response.status_code == 200, response.content\n    assert response.data['numIssues'] == 0\n    assert response.data['resolveableIssues'] == 1\n    assert response.data['lastSeen'] is None\n    assert response.data['hasIssues'] is False\n    assert response.data['hasMoreResolveableIssues'] is False\n    assert response.data['numIssues'] == 0\n    assert response.data['issuesProcessing'] == 0",
            "def test_resolvable_issues(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    self.login_as(user=self.user)\n    team = self.create_team()\n    project1 = self.create_project(teams=[team], name='foo')\n    RawEvent.objects.create(project_id=project1.id, event_id='abc')\n    url = reverse('sentry-api-0-project-processing-issues', kwargs={'organization_slug': project1.organization.slug, 'project_slug': project1.slug})\n    response = self.client.get(url + '?detailed=1', format='json')\n    assert response.status_code == 200, response.content\n    assert response.data['numIssues'] == 0\n    assert response.data['resolveableIssues'] == 1\n    assert response.data['lastSeen'] is None\n    assert response.data['hasIssues'] is False\n    assert response.data['hasMoreResolveableIssues'] is False\n    assert response.data['numIssues'] == 0\n    assert response.data['issuesProcessing'] == 0",
            "def test_resolvable_issues(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    self.login_as(user=self.user)\n    team = self.create_team()\n    project1 = self.create_project(teams=[team], name='foo')\n    RawEvent.objects.create(project_id=project1.id, event_id='abc')\n    url = reverse('sentry-api-0-project-processing-issues', kwargs={'organization_slug': project1.organization.slug, 'project_slug': project1.slug})\n    response = self.client.get(url + '?detailed=1', format='json')\n    assert response.status_code == 200, response.content\n    assert response.data['numIssues'] == 0\n    assert response.data['resolveableIssues'] == 1\n    assert response.data['lastSeen'] is None\n    assert response.data['hasIssues'] is False\n    assert response.data['hasMoreResolveableIssues'] is False\n    assert response.data['numIssues'] == 0\n    assert response.data['issuesProcessing'] == 0"
        ]
    }
]
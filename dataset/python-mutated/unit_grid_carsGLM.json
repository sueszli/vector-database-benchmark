[
    {
        "func_name": "grid_cars_GLM",
        "original": "def grid_cars_GLM():\n    cars = h2o.import_file(path=pyunit_utils.locate('smalldata/junit/cars_20mpg.csv'))\n    r = cars[0].runif(seed=42)\n    train = cars[r > 0.2]\n    validation_scheme = random.randint(1, 3)\n    print('Validation scheme: {0}'.format(validation_scheme))\n    if validation_scheme == 2:\n        nfolds = 2\n        print('Nfolds: 2')\n    if validation_scheme == 3:\n        valid = cars[r <= 0.2]\n    grid_space = pyunit_utils.make_random_grid_space(algo='glm')\n    print('Grid space: {0}'.format(grid_space))\n    predictors = ['displacement', 'power', 'weight', 'acceleration', 'year']\n    if grid_space['family'][0] == 'binomial':\n        response_col = 'economy_20mpg'\n        true_model_type = 'classifier'\n    elif grid_space['family'][0] == 'gaussian':\n        response_col = 'economy'\n        true_model_type = 'regressor'\n    else:\n        response_col = 'cylinders'\n        true_model_type = 'regressor'\n    print('Predictors: {0}'.format(predictors))\n    print('Response: {0}'.format(response_col))\n    if grid_space['family'][0] in ['binomial', 'multinomial']:\n        print('Converting the response column to a factor...')\n        train[response_col] = train[response_col].asfactor()\n        if validation_scheme == 3:\n            valid[response_col] = valid[response_col].asfactor()\n    family = grid_space.pop('family')[0]\n    print('Grid space: {0}'.format(grid_space))\n    print('Constructing the grid of glm models...')\n    print('family = ', family)\n    cars_glm_grid = H2OGridSearch(H2OGeneralizedLinearEstimator, hyper_params=grid_space)\n    if validation_scheme == 1:\n        cars_glm_grid.train(x=predictors, y=response_col, training_frame=train, family=family)\n    elif validation_scheme == 2:\n        cars_glm_grid.train(x=predictors, y=response_col, training_frame=train, nfolds=nfolds, family=family)\n    else:\n        cars_glm_grid.train(x=predictors, y=response_col, training_frame=train, validation_frame=valid, family=family)\n    for model in cars_glm_grid:\n        assert isinstance(model, H2OGeneralizedLinearEstimator)\n    print('Performing various checks of the constructed grid...')\n    print('Check cardinality of grid, that is, the correct number of models have been created...')\n    size_of_grid_space = 1\n    for v in list(grid_space.values()):\n        size_of_grid_space = size_of_grid_space * len(v)\n    actual_size = len(cars_glm_grid)\n    assert size_of_grid_space == actual_size, 'Expected size of grid to be {0}, but got {1}'.format(size_of_grid_space, actual_size)\n    print('Check correct type value....')\n    model_type = cars_glm_grid[0].type\n    assert model_type == true_model_type, 'Type of model ({0}) is incorrect, expected value is {1}.'.format(model_type, true_model_type)\n    print('Duplicate-entries-in-grid-space check')\n    new_grid_space = copy.deepcopy(grid_space)\n    for name in list(grid_space.keys()):\n        if not name == 'family':\n            new_grid_space[name] = grid_space[name] + grid_space[name]\n    print('The new search space: {0}'.format(new_grid_space))\n    print('Constructing the new grid of glm models...')\n    cars_glm_grid2 = H2OGridSearch(H2OGeneralizedLinearEstimator, hyper_params=new_grid_space)\n    if validation_scheme == 1:\n        cars_glm_grid2.train(x=predictors, y=response_col, training_frame=train, family=family)\n    elif validation_scheme == 2:\n        cars_glm_grid2.train(x=predictors, y=response_col, training_frame=train, nfolds=nfolds, family=family)\n    else:\n        cars_glm_grid2.train(x=predictors, y=response_col, training_frame=train, validation_frame=valid, family=family)\n    actual_size2 = len(cars_glm_grid2)\n    assert actual_size == actual_size2, 'Expected duplicates to be ignored. Without dups grid size: {0}. With dups size: {1}'.format(actual_size, actual_size2)\n    print('Check that the hyper_params that were passed to grid, were used to construct the models...')\n    for name in list(grid_space.keys()):\n        print(name)\n        pyunit_utils.expect_model_param(cars_glm_grid, name, grid_space[name])",
        "mutated": [
            "def grid_cars_GLM():\n    if False:\n        i = 10\n    cars = h2o.import_file(path=pyunit_utils.locate('smalldata/junit/cars_20mpg.csv'))\n    r = cars[0].runif(seed=42)\n    train = cars[r > 0.2]\n    validation_scheme = random.randint(1, 3)\n    print('Validation scheme: {0}'.format(validation_scheme))\n    if validation_scheme == 2:\n        nfolds = 2\n        print('Nfolds: 2')\n    if validation_scheme == 3:\n        valid = cars[r <= 0.2]\n    grid_space = pyunit_utils.make_random_grid_space(algo='glm')\n    print('Grid space: {0}'.format(grid_space))\n    predictors = ['displacement', 'power', 'weight', 'acceleration', 'year']\n    if grid_space['family'][0] == 'binomial':\n        response_col = 'economy_20mpg'\n        true_model_type = 'classifier'\n    elif grid_space['family'][0] == 'gaussian':\n        response_col = 'economy'\n        true_model_type = 'regressor'\n    else:\n        response_col = 'cylinders'\n        true_model_type = 'regressor'\n    print('Predictors: {0}'.format(predictors))\n    print('Response: {0}'.format(response_col))\n    if grid_space['family'][0] in ['binomial', 'multinomial']:\n        print('Converting the response column to a factor...')\n        train[response_col] = train[response_col].asfactor()\n        if validation_scheme == 3:\n            valid[response_col] = valid[response_col].asfactor()\n    family = grid_space.pop('family')[0]\n    print('Grid space: {0}'.format(grid_space))\n    print('Constructing the grid of glm models...')\n    print('family = ', family)\n    cars_glm_grid = H2OGridSearch(H2OGeneralizedLinearEstimator, hyper_params=grid_space)\n    if validation_scheme == 1:\n        cars_glm_grid.train(x=predictors, y=response_col, training_frame=train, family=family)\n    elif validation_scheme == 2:\n        cars_glm_grid.train(x=predictors, y=response_col, training_frame=train, nfolds=nfolds, family=family)\n    else:\n        cars_glm_grid.train(x=predictors, y=response_col, training_frame=train, validation_frame=valid, family=family)\n    for model in cars_glm_grid:\n        assert isinstance(model, H2OGeneralizedLinearEstimator)\n    print('Performing various checks of the constructed grid...')\n    print('Check cardinality of grid, that is, the correct number of models have been created...')\n    size_of_grid_space = 1\n    for v in list(grid_space.values()):\n        size_of_grid_space = size_of_grid_space * len(v)\n    actual_size = len(cars_glm_grid)\n    assert size_of_grid_space == actual_size, 'Expected size of grid to be {0}, but got {1}'.format(size_of_grid_space, actual_size)\n    print('Check correct type value....')\n    model_type = cars_glm_grid[0].type\n    assert model_type == true_model_type, 'Type of model ({0}) is incorrect, expected value is {1}.'.format(model_type, true_model_type)\n    print('Duplicate-entries-in-grid-space check')\n    new_grid_space = copy.deepcopy(grid_space)\n    for name in list(grid_space.keys()):\n        if not name == 'family':\n            new_grid_space[name] = grid_space[name] + grid_space[name]\n    print('The new search space: {0}'.format(new_grid_space))\n    print('Constructing the new grid of glm models...')\n    cars_glm_grid2 = H2OGridSearch(H2OGeneralizedLinearEstimator, hyper_params=new_grid_space)\n    if validation_scheme == 1:\n        cars_glm_grid2.train(x=predictors, y=response_col, training_frame=train, family=family)\n    elif validation_scheme == 2:\n        cars_glm_grid2.train(x=predictors, y=response_col, training_frame=train, nfolds=nfolds, family=family)\n    else:\n        cars_glm_grid2.train(x=predictors, y=response_col, training_frame=train, validation_frame=valid, family=family)\n    actual_size2 = len(cars_glm_grid2)\n    assert actual_size == actual_size2, 'Expected duplicates to be ignored. Without dups grid size: {0}. With dups size: {1}'.format(actual_size, actual_size2)\n    print('Check that the hyper_params that were passed to grid, were used to construct the models...')\n    for name in list(grid_space.keys()):\n        print(name)\n        pyunit_utils.expect_model_param(cars_glm_grid, name, grid_space[name])",
            "def grid_cars_GLM():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    cars = h2o.import_file(path=pyunit_utils.locate('smalldata/junit/cars_20mpg.csv'))\n    r = cars[0].runif(seed=42)\n    train = cars[r > 0.2]\n    validation_scheme = random.randint(1, 3)\n    print('Validation scheme: {0}'.format(validation_scheme))\n    if validation_scheme == 2:\n        nfolds = 2\n        print('Nfolds: 2')\n    if validation_scheme == 3:\n        valid = cars[r <= 0.2]\n    grid_space = pyunit_utils.make_random_grid_space(algo='glm')\n    print('Grid space: {0}'.format(grid_space))\n    predictors = ['displacement', 'power', 'weight', 'acceleration', 'year']\n    if grid_space['family'][0] == 'binomial':\n        response_col = 'economy_20mpg'\n        true_model_type = 'classifier'\n    elif grid_space['family'][0] == 'gaussian':\n        response_col = 'economy'\n        true_model_type = 'regressor'\n    else:\n        response_col = 'cylinders'\n        true_model_type = 'regressor'\n    print('Predictors: {0}'.format(predictors))\n    print('Response: {0}'.format(response_col))\n    if grid_space['family'][0] in ['binomial', 'multinomial']:\n        print('Converting the response column to a factor...')\n        train[response_col] = train[response_col].asfactor()\n        if validation_scheme == 3:\n            valid[response_col] = valid[response_col].asfactor()\n    family = grid_space.pop('family')[0]\n    print('Grid space: {0}'.format(grid_space))\n    print('Constructing the grid of glm models...')\n    print('family = ', family)\n    cars_glm_grid = H2OGridSearch(H2OGeneralizedLinearEstimator, hyper_params=grid_space)\n    if validation_scheme == 1:\n        cars_glm_grid.train(x=predictors, y=response_col, training_frame=train, family=family)\n    elif validation_scheme == 2:\n        cars_glm_grid.train(x=predictors, y=response_col, training_frame=train, nfolds=nfolds, family=family)\n    else:\n        cars_glm_grid.train(x=predictors, y=response_col, training_frame=train, validation_frame=valid, family=family)\n    for model in cars_glm_grid:\n        assert isinstance(model, H2OGeneralizedLinearEstimator)\n    print('Performing various checks of the constructed grid...')\n    print('Check cardinality of grid, that is, the correct number of models have been created...')\n    size_of_grid_space = 1\n    for v in list(grid_space.values()):\n        size_of_grid_space = size_of_grid_space * len(v)\n    actual_size = len(cars_glm_grid)\n    assert size_of_grid_space == actual_size, 'Expected size of grid to be {0}, but got {1}'.format(size_of_grid_space, actual_size)\n    print('Check correct type value....')\n    model_type = cars_glm_grid[0].type\n    assert model_type == true_model_type, 'Type of model ({0}) is incorrect, expected value is {1}.'.format(model_type, true_model_type)\n    print('Duplicate-entries-in-grid-space check')\n    new_grid_space = copy.deepcopy(grid_space)\n    for name in list(grid_space.keys()):\n        if not name == 'family':\n            new_grid_space[name] = grid_space[name] + grid_space[name]\n    print('The new search space: {0}'.format(new_grid_space))\n    print('Constructing the new grid of glm models...')\n    cars_glm_grid2 = H2OGridSearch(H2OGeneralizedLinearEstimator, hyper_params=new_grid_space)\n    if validation_scheme == 1:\n        cars_glm_grid2.train(x=predictors, y=response_col, training_frame=train, family=family)\n    elif validation_scheme == 2:\n        cars_glm_grid2.train(x=predictors, y=response_col, training_frame=train, nfolds=nfolds, family=family)\n    else:\n        cars_glm_grid2.train(x=predictors, y=response_col, training_frame=train, validation_frame=valid, family=family)\n    actual_size2 = len(cars_glm_grid2)\n    assert actual_size == actual_size2, 'Expected duplicates to be ignored. Without dups grid size: {0}. With dups size: {1}'.format(actual_size, actual_size2)\n    print('Check that the hyper_params that were passed to grid, were used to construct the models...')\n    for name in list(grid_space.keys()):\n        print(name)\n        pyunit_utils.expect_model_param(cars_glm_grid, name, grid_space[name])",
            "def grid_cars_GLM():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    cars = h2o.import_file(path=pyunit_utils.locate('smalldata/junit/cars_20mpg.csv'))\n    r = cars[0].runif(seed=42)\n    train = cars[r > 0.2]\n    validation_scheme = random.randint(1, 3)\n    print('Validation scheme: {0}'.format(validation_scheme))\n    if validation_scheme == 2:\n        nfolds = 2\n        print('Nfolds: 2')\n    if validation_scheme == 3:\n        valid = cars[r <= 0.2]\n    grid_space = pyunit_utils.make_random_grid_space(algo='glm')\n    print('Grid space: {0}'.format(grid_space))\n    predictors = ['displacement', 'power', 'weight', 'acceleration', 'year']\n    if grid_space['family'][0] == 'binomial':\n        response_col = 'economy_20mpg'\n        true_model_type = 'classifier'\n    elif grid_space['family'][0] == 'gaussian':\n        response_col = 'economy'\n        true_model_type = 'regressor'\n    else:\n        response_col = 'cylinders'\n        true_model_type = 'regressor'\n    print('Predictors: {0}'.format(predictors))\n    print('Response: {0}'.format(response_col))\n    if grid_space['family'][0] in ['binomial', 'multinomial']:\n        print('Converting the response column to a factor...')\n        train[response_col] = train[response_col].asfactor()\n        if validation_scheme == 3:\n            valid[response_col] = valid[response_col].asfactor()\n    family = grid_space.pop('family')[0]\n    print('Grid space: {0}'.format(grid_space))\n    print('Constructing the grid of glm models...')\n    print('family = ', family)\n    cars_glm_grid = H2OGridSearch(H2OGeneralizedLinearEstimator, hyper_params=grid_space)\n    if validation_scheme == 1:\n        cars_glm_grid.train(x=predictors, y=response_col, training_frame=train, family=family)\n    elif validation_scheme == 2:\n        cars_glm_grid.train(x=predictors, y=response_col, training_frame=train, nfolds=nfolds, family=family)\n    else:\n        cars_glm_grid.train(x=predictors, y=response_col, training_frame=train, validation_frame=valid, family=family)\n    for model in cars_glm_grid:\n        assert isinstance(model, H2OGeneralizedLinearEstimator)\n    print('Performing various checks of the constructed grid...')\n    print('Check cardinality of grid, that is, the correct number of models have been created...')\n    size_of_grid_space = 1\n    for v in list(grid_space.values()):\n        size_of_grid_space = size_of_grid_space * len(v)\n    actual_size = len(cars_glm_grid)\n    assert size_of_grid_space == actual_size, 'Expected size of grid to be {0}, but got {1}'.format(size_of_grid_space, actual_size)\n    print('Check correct type value....')\n    model_type = cars_glm_grid[0].type\n    assert model_type == true_model_type, 'Type of model ({0}) is incorrect, expected value is {1}.'.format(model_type, true_model_type)\n    print('Duplicate-entries-in-grid-space check')\n    new_grid_space = copy.deepcopy(grid_space)\n    for name in list(grid_space.keys()):\n        if not name == 'family':\n            new_grid_space[name] = grid_space[name] + grid_space[name]\n    print('The new search space: {0}'.format(new_grid_space))\n    print('Constructing the new grid of glm models...')\n    cars_glm_grid2 = H2OGridSearch(H2OGeneralizedLinearEstimator, hyper_params=new_grid_space)\n    if validation_scheme == 1:\n        cars_glm_grid2.train(x=predictors, y=response_col, training_frame=train, family=family)\n    elif validation_scheme == 2:\n        cars_glm_grid2.train(x=predictors, y=response_col, training_frame=train, nfolds=nfolds, family=family)\n    else:\n        cars_glm_grid2.train(x=predictors, y=response_col, training_frame=train, validation_frame=valid, family=family)\n    actual_size2 = len(cars_glm_grid2)\n    assert actual_size == actual_size2, 'Expected duplicates to be ignored. Without dups grid size: {0}. With dups size: {1}'.format(actual_size, actual_size2)\n    print('Check that the hyper_params that were passed to grid, were used to construct the models...')\n    for name in list(grid_space.keys()):\n        print(name)\n        pyunit_utils.expect_model_param(cars_glm_grid, name, grid_space[name])",
            "def grid_cars_GLM():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    cars = h2o.import_file(path=pyunit_utils.locate('smalldata/junit/cars_20mpg.csv'))\n    r = cars[0].runif(seed=42)\n    train = cars[r > 0.2]\n    validation_scheme = random.randint(1, 3)\n    print('Validation scheme: {0}'.format(validation_scheme))\n    if validation_scheme == 2:\n        nfolds = 2\n        print('Nfolds: 2')\n    if validation_scheme == 3:\n        valid = cars[r <= 0.2]\n    grid_space = pyunit_utils.make_random_grid_space(algo='glm')\n    print('Grid space: {0}'.format(grid_space))\n    predictors = ['displacement', 'power', 'weight', 'acceleration', 'year']\n    if grid_space['family'][0] == 'binomial':\n        response_col = 'economy_20mpg'\n        true_model_type = 'classifier'\n    elif grid_space['family'][0] == 'gaussian':\n        response_col = 'economy'\n        true_model_type = 'regressor'\n    else:\n        response_col = 'cylinders'\n        true_model_type = 'regressor'\n    print('Predictors: {0}'.format(predictors))\n    print('Response: {0}'.format(response_col))\n    if grid_space['family'][0] in ['binomial', 'multinomial']:\n        print('Converting the response column to a factor...')\n        train[response_col] = train[response_col].asfactor()\n        if validation_scheme == 3:\n            valid[response_col] = valid[response_col].asfactor()\n    family = grid_space.pop('family')[0]\n    print('Grid space: {0}'.format(grid_space))\n    print('Constructing the grid of glm models...')\n    print('family = ', family)\n    cars_glm_grid = H2OGridSearch(H2OGeneralizedLinearEstimator, hyper_params=grid_space)\n    if validation_scheme == 1:\n        cars_glm_grid.train(x=predictors, y=response_col, training_frame=train, family=family)\n    elif validation_scheme == 2:\n        cars_glm_grid.train(x=predictors, y=response_col, training_frame=train, nfolds=nfolds, family=family)\n    else:\n        cars_glm_grid.train(x=predictors, y=response_col, training_frame=train, validation_frame=valid, family=family)\n    for model in cars_glm_grid:\n        assert isinstance(model, H2OGeneralizedLinearEstimator)\n    print('Performing various checks of the constructed grid...')\n    print('Check cardinality of grid, that is, the correct number of models have been created...')\n    size_of_grid_space = 1\n    for v in list(grid_space.values()):\n        size_of_grid_space = size_of_grid_space * len(v)\n    actual_size = len(cars_glm_grid)\n    assert size_of_grid_space == actual_size, 'Expected size of grid to be {0}, but got {1}'.format(size_of_grid_space, actual_size)\n    print('Check correct type value....')\n    model_type = cars_glm_grid[0].type\n    assert model_type == true_model_type, 'Type of model ({0}) is incorrect, expected value is {1}.'.format(model_type, true_model_type)\n    print('Duplicate-entries-in-grid-space check')\n    new_grid_space = copy.deepcopy(grid_space)\n    for name in list(grid_space.keys()):\n        if not name == 'family':\n            new_grid_space[name] = grid_space[name] + grid_space[name]\n    print('The new search space: {0}'.format(new_grid_space))\n    print('Constructing the new grid of glm models...')\n    cars_glm_grid2 = H2OGridSearch(H2OGeneralizedLinearEstimator, hyper_params=new_grid_space)\n    if validation_scheme == 1:\n        cars_glm_grid2.train(x=predictors, y=response_col, training_frame=train, family=family)\n    elif validation_scheme == 2:\n        cars_glm_grid2.train(x=predictors, y=response_col, training_frame=train, nfolds=nfolds, family=family)\n    else:\n        cars_glm_grid2.train(x=predictors, y=response_col, training_frame=train, validation_frame=valid, family=family)\n    actual_size2 = len(cars_glm_grid2)\n    assert actual_size == actual_size2, 'Expected duplicates to be ignored. Without dups grid size: {0}. With dups size: {1}'.format(actual_size, actual_size2)\n    print('Check that the hyper_params that were passed to grid, were used to construct the models...')\n    for name in list(grid_space.keys()):\n        print(name)\n        pyunit_utils.expect_model_param(cars_glm_grid, name, grid_space[name])",
            "def grid_cars_GLM():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    cars = h2o.import_file(path=pyunit_utils.locate('smalldata/junit/cars_20mpg.csv'))\n    r = cars[0].runif(seed=42)\n    train = cars[r > 0.2]\n    validation_scheme = random.randint(1, 3)\n    print('Validation scheme: {0}'.format(validation_scheme))\n    if validation_scheme == 2:\n        nfolds = 2\n        print('Nfolds: 2')\n    if validation_scheme == 3:\n        valid = cars[r <= 0.2]\n    grid_space = pyunit_utils.make_random_grid_space(algo='glm')\n    print('Grid space: {0}'.format(grid_space))\n    predictors = ['displacement', 'power', 'weight', 'acceleration', 'year']\n    if grid_space['family'][0] == 'binomial':\n        response_col = 'economy_20mpg'\n        true_model_type = 'classifier'\n    elif grid_space['family'][0] == 'gaussian':\n        response_col = 'economy'\n        true_model_type = 'regressor'\n    else:\n        response_col = 'cylinders'\n        true_model_type = 'regressor'\n    print('Predictors: {0}'.format(predictors))\n    print('Response: {0}'.format(response_col))\n    if grid_space['family'][0] in ['binomial', 'multinomial']:\n        print('Converting the response column to a factor...')\n        train[response_col] = train[response_col].asfactor()\n        if validation_scheme == 3:\n            valid[response_col] = valid[response_col].asfactor()\n    family = grid_space.pop('family')[0]\n    print('Grid space: {0}'.format(grid_space))\n    print('Constructing the grid of glm models...')\n    print('family = ', family)\n    cars_glm_grid = H2OGridSearch(H2OGeneralizedLinearEstimator, hyper_params=grid_space)\n    if validation_scheme == 1:\n        cars_glm_grid.train(x=predictors, y=response_col, training_frame=train, family=family)\n    elif validation_scheme == 2:\n        cars_glm_grid.train(x=predictors, y=response_col, training_frame=train, nfolds=nfolds, family=family)\n    else:\n        cars_glm_grid.train(x=predictors, y=response_col, training_frame=train, validation_frame=valid, family=family)\n    for model in cars_glm_grid:\n        assert isinstance(model, H2OGeneralizedLinearEstimator)\n    print('Performing various checks of the constructed grid...')\n    print('Check cardinality of grid, that is, the correct number of models have been created...')\n    size_of_grid_space = 1\n    for v in list(grid_space.values()):\n        size_of_grid_space = size_of_grid_space * len(v)\n    actual_size = len(cars_glm_grid)\n    assert size_of_grid_space == actual_size, 'Expected size of grid to be {0}, but got {1}'.format(size_of_grid_space, actual_size)\n    print('Check correct type value....')\n    model_type = cars_glm_grid[0].type\n    assert model_type == true_model_type, 'Type of model ({0}) is incorrect, expected value is {1}.'.format(model_type, true_model_type)\n    print('Duplicate-entries-in-grid-space check')\n    new_grid_space = copy.deepcopy(grid_space)\n    for name in list(grid_space.keys()):\n        if not name == 'family':\n            new_grid_space[name] = grid_space[name] + grid_space[name]\n    print('The new search space: {0}'.format(new_grid_space))\n    print('Constructing the new grid of glm models...')\n    cars_glm_grid2 = H2OGridSearch(H2OGeneralizedLinearEstimator, hyper_params=new_grid_space)\n    if validation_scheme == 1:\n        cars_glm_grid2.train(x=predictors, y=response_col, training_frame=train, family=family)\n    elif validation_scheme == 2:\n        cars_glm_grid2.train(x=predictors, y=response_col, training_frame=train, nfolds=nfolds, family=family)\n    else:\n        cars_glm_grid2.train(x=predictors, y=response_col, training_frame=train, validation_frame=valid, family=family)\n    actual_size2 = len(cars_glm_grid2)\n    assert actual_size == actual_size2, 'Expected duplicates to be ignored. Without dups grid size: {0}. With dups size: {1}'.format(actual_size, actual_size2)\n    print('Check that the hyper_params that were passed to grid, were used to construct the models...')\n    for name in list(grid_space.keys()):\n        print(name)\n        pyunit_utils.expect_model_param(cars_glm_grid, name, grid_space[name])"
        ]
    }
]
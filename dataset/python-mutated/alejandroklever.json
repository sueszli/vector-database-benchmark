[
    {
        "func_name": "spiral_matrix",
        "original": "def spiral_matrix(n: int, is_first: bool=True) -> list[list[str]]:\n    if n <= 0:\n        return []\n    if n == 1:\n        return [['\u2557']]\n    if n == 2:\n        return [['\u2550', '\u2557'], ['\u255a', '\u255d']]\n    matrix = [[' ' for _ in range(n)] for _ in range(n)]\n    for i in range(n - 1):\n        matrix[0][i] = '\u2550'\n    matrix[0][-1] = '\u2557'\n    for i in range(1, n - 1):\n        matrix[i][-1] = '\u2551'\n    matrix[-1][-1] = '\u255d'\n    for i in range(n - 1):\n        matrix[-1][i] = '\u2550'\n    matrix[-1][0] = '\u255a'\n    for i in range(2, n - 1):\n        matrix[i][0] = '\u2551'\n    matrix[1][0] = '\u2554'\n    submatrix = spiral_matrix(n - 2, is_first=False)\n    for i in range(n - 2):\n        for j in range(n - 2):\n            matrix[i + 1][j + 1] = submatrix[i][j]\n    return matrix",
        "mutated": [
            "def spiral_matrix(n: int, is_first: bool=True) -> list[list[str]]:\n    if False:\n        i = 10\n    if n <= 0:\n        return []\n    if n == 1:\n        return [['\u2557']]\n    if n == 2:\n        return [['\u2550', '\u2557'], ['\u255a', '\u255d']]\n    matrix = [[' ' for _ in range(n)] for _ in range(n)]\n    for i in range(n - 1):\n        matrix[0][i] = '\u2550'\n    matrix[0][-1] = '\u2557'\n    for i in range(1, n - 1):\n        matrix[i][-1] = '\u2551'\n    matrix[-1][-1] = '\u255d'\n    for i in range(n - 1):\n        matrix[-1][i] = '\u2550'\n    matrix[-1][0] = '\u255a'\n    for i in range(2, n - 1):\n        matrix[i][0] = '\u2551'\n    matrix[1][0] = '\u2554'\n    submatrix = spiral_matrix(n - 2, is_first=False)\n    for i in range(n - 2):\n        for j in range(n - 2):\n            matrix[i + 1][j + 1] = submatrix[i][j]\n    return matrix",
            "def spiral_matrix(n: int, is_first: bool=True) -> list[list[str]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if n <= 0:\n        return []\n    if n == 1:\n        return [['\u2557']]\n    if n == 2:\n        return [['\u2550', '\u2557'], ['\u255a', '\u255d']]\n    matrix = [[' ' for _ in range(n)] for _ in range(n)]\n    for i in range(n - 1):\n        matrix[0][i] = '\u2550'\n    matrix[0][-1] = '\u2557'\n    for i in range(1, n - 1):\n        matrix[i][-1] = '\u2551'\n    matrix[-1][-1] = '\u255d'\n    for i in range(n - 1):\n        matrix[-1][i] = '\u2550'\n    matrix[-1][0] = '\u255a'\n    for i in range(2, n - 1):\n        matrix[i][0] = '\u2551'\n    matrix[1][0] = '\u2554'\n    submatrix = spiral_matrix(n - 2, is_first=False)\n    for i in range(n - 2):\n        for j in range(n - 2):\n            matrix[i + 1][j + 1] = submatrix[i][j]\n    return matrix",
            "def spiral_matrix(n: int, is_first: bool=True) -> list[list[str]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if n <= 0:\n        return []\n    if n == 1:\n        return [['\u2557']]\n    if n == 2:\n        return [['\u2550', '\u2557'], ['\u255a', '\u255d']]\n    matrix = [[' ' for _ in range(n)] for _ in range(n)]\n    for i in range(n - 1):\n        matrix[0][i] = '\u2550'\n    matrix[0][-1] = '\u2557'\n    for i in range(1, n - 1):\n        matrix[i][-1] = '\u2551'\n    matrix[-1][-1] = '\u255d'\n    for i in range(n - 1):\n        matrix[-1][i] = '\u2550'\n    matrix[-1][0] = '\u255a'\n    for i in range(2, n - 1):\n        matrix[i][0] = '\u2551'\n    matrix[1][0] = '\u2554'\n    submatrix = spiral_matrix(n - 2, is_first=False)\n    for i in range(n - 2):\n        for j in range(n - 2):\n            matrix[i + 1][j + 1] = submatrix[i][j]\n    return matrix",
            "def spiral_matrix(n: int, is_first: bool=True) -> list[list[str]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if n <= 0:\n        return []\n    if n == 1:\n        return [['\u2557']]\n    if n == 2:\n        return [['\u2550', '\u2557'], ['\u255a', '\u255d']]\n    matrix = [[' ' for _ in range(n)] for _ in range(n)]\n    for i in range(n - 1):\n        matrix[0][i] = '\u2550'\n    matrix[0][-1] = '\u2557'\n    for i in range(1, n - 1):\n        matrix[i][-1] = '\u2551'\n    matrix[-1][-1] = '\u255d'\n    for i in range(n - 1):\n        matrix[-1][i] = '\u2550'\n    matrix[-1][0] = '\u255a'\n    for i in range(2, n - 1):\n        matrix[i][0] = '\u2551'\n    matrix[1][0] = '\u2554'\n    submatrix = spiral_matrix(n - 2, is_first=False)\n    for i in range(n - 2):\n        for j in range(n - 2):\n            matrix[i + 1][j + 1] = submatrix[i][j]\n    return matrix",
            "def spiral_matrix(n: int, is_first: bool=True) -> list[list[str]]:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if n <= 0:\n        return []\n    if n == 1:\n        return [['\u2557']]\n    if n == 2:\n        return [['\u2550', '\u2557'], ['\u255a', '\u255d']]\n    matrix = [[' ' for _ in range(n)] for _ in range(n)]\n    for i in range(n - 1):\n        matrix[0][i] = '\u2550'\n    matrix[0][-1] = '\u2557'\n    for i in range(1, n - 1):\n        matrix[i][-1] = '\u2551'\n    matrix[-1][-1] = '\u255d'\n    for i in range(n - 1):\n        matrix[-1][i] = '\u2550'\n    matrix[-1][0] = '\u255a'\n    for i in range(2, n - 1):\n        matrix[i][0] = '\u2551'\n    matrix[1][0] = '\u2554'\n    submatrix = spiral_matrix(n - 2, is_first=False)\n    for i in range(n - 2):\n        for j in range(n - 2):\n            matrix[i + 1][j + 1] = submatrix[i][j]\n    return matrix"
        ]
    },
    {
        "func_name": "spiral_matrix_to_str",
        "original": "def spiral_matrix_to_str(matrix: list[list[str]]) -> str:\n    return '\\n'.join([''.join(row) for row in matrix])",
        "mutated": [
            "def spiral_matrix_to_str(matrix: list[list[str]]) -> str:\n    if False:\n        i = 10\n    return '\\n'.join([''.join(row) for row in matrix])",
            "def spiral_matrix_to_str(matrix: list[list[str]]) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return '\\n'.join([''.join(row) for row in matrix])",
            "def spiral_matrix_to_str(matrix: list[list[str]]) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return '\\n'.join([''.join(row) for row in matrix])",
            "def spiral_matrix_to_str(matrix: list[list[str]]) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return '\\n'.join([''.join(row) for row in matrix])",
            "def spiral_matrix_to_str(matrix: list[list[str]]) -> str:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return '\\n'.join([''.join(row) for row in matrix])"
        ]
    }
]
[
    {
        "func_name": "findUnsortedSubarray",
        "original": "def findUnsortedSubarray(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n    n = len(nums)\n    (left, right) = (-1, -2)\n    (min_from_right, max_from_left) = (nums[-1], nums[0])\n    for i in xrange(1, n):\n        max_from_left = max(max_from_left, nums[i])\n        min_from_right = min(min_from_right, nums[n - 1 - i])\n        if nums[i] < max_from_left:\n            right = i\n        if nums[n - 1 - i] > min_from_right:\n            left = n - 1 - i",
        "mutated": [
            "def findUnsortedSubarray(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    n = len(nums)\n    (left, right) = (-1, -2)\n    (min_from_right, max_from_left) = (nums[-1], nums[0])\n    for i in xrange(1, n):\n        max_from_left = max(max_from_left, nums[i])\n        min_from_right = min(min_from_right, nums[n - 1 - i])\n        if nums[i] < max_from_left:\n            right = i\n        if nums[n - 1 - i] > min_from_right:\n            left = n - 1 - i",
            "def findUnsortedSubarray(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    n = len(nums)\n    (left, right) = (-1, -2)\n    (min_from_right, max_from_left) = (nums[-1], nums[0])\n    for i in xrange(1, n):\n        max_from_left = max(max_from_left, nums[i])\n        min_from_right = min(min_from_right, nums[n - 1 - i])\n        if nums[i] < max_from_left:\n            right = i\n        if nums[n - 1 - i] > min_from_right:\n            left = n - 1 - i",
            "def findUnsortedSubarray(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    n = len(nums)\n    (left, right) = (-1, -2)\n    (min_from_right, max_from_left) = (nums[-1], nums[0])\n    for i in xrange(1, n):\n        max_from_left = max(max_from_left, nums[i])\n        min_from_right = min(min_from_right, nums[n - 1 - i])\n        if nums[i] < max_from_left:\n            right = i\n        if nums[n - 1 - i] > min_from_right:\n            left = n - 1 - i",
            "def findUnsortedSubarray(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    n = len(nums)\n    (left, right) = (-1, -2)\n    (min_from_right, max_from_left) = (nums[-1], nums[0])\n    for i in xrange(1, n):\n        max_from_left = max(max_from_left, nums[i])\n        min_from_right = min(min_from_right, nums[n - 1 - i])\n        if nums[i] < max_from_left:\n            right = i\n        if nums[n - 1 - i] > min_from_right:\n            left = n - 1 - i",
            "def findUnsortedSubarray(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    n = len(nums)\n    (left, right) = (-1, -2)\n    (min_from_right, max_from_left) = (nums[-1], nums[0])\n    for i in xrange(1, n):\n        max_from_left = max(max_from_left, nums[i])\n        min_from_right = min(min_from_right, nums[n - 1 - i])\n        if nums[i] < max_from_left:\n            right = i\n        if nums[n - 1 - i] > min_from_right:\n            left = n - 1 - i"
        ]
    },
    {
        "func_name": "findUnsortedSubarray",
        "original": "def findUnsortedSubarray(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n    a = sorted(nums)\n    (left, right) = (0, len(nums) - 1)\n    while nums[left] == a[left] or nums[right] == a[right]:\n        if right - left <= 1:\n            return 0\n        if nums[left] == a[left]:\n            left += 1\n        if nums[right] == a[right]:\n            right -= 1\n    return right - left + 1",
        "mutated": [
            "def findUnsortedSubarray(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    a = sorted(nums)\n    (left, right) = (0, len(nums) - 1)\n    while nums[left] == a[left] or nums[right] == a[right]:\n        if right - left <= 1:\n            return 0\n        if nums[left] == a[left]:\n            left += 1\n        if nums[right] == a[right]:\n            right -= 1\n    return right - left + 1",
            "def findUnsortedSubarray(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    a = sorted(nums)\n    (left, right) = (0, len(nums) - 1)\n    while nums[left] == a[left] or nums[right] == a[right]:\n        if right - left <= 1:\n            return 0\n        if nums[left] == a[left]:\n            left += 1\n        if nums[right] == a[right]:\n            right -= 1\n    return right - left + 1",
            "def findUnsortedSubarray(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    a = sorted(nums)\n    (left, right) = (0, len(nums) - 1)\n    while nums[left] == a[left] or nums[right] == a[right]:\n        if right - left <= 1:\n            return 0\n        if nums[left] == a[left]:\n            left += 1\n        if nums[right] == a[right]:\n            right -= 1\n    return right - left + 1",
            "def findUnsortedSubarray(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    a = sorted(nums)\n    (left, right) = (0, len(nums) - 1)\n    while nums[left] == a[left] or nums[right] == a[right]:\n        if right - left <= 1:\n            return 0\n        if nums[left] == a[left]:\n            left += 1\n        if nums[right] == a[right]:\n            right -= 1\n    return right - left + 1",
            "def findUnsortedSubarray(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n    a = sorted(nums)\n    (left, right) = (0, len(nums) - 1)\n    while nums[left] == a[left] or nums[right] == a[right]:\n        if right - left <= 1:\n            return 0\n        if nums[left] == a[left]:\n            left += 1\n        if nums[right] == a[right]:\n            right -= 1\n    return right - left + 1"
        ]
    }
]
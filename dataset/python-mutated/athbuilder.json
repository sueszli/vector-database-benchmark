[
    {
        "func_name": "build",
        "original": "@classmethod\ndef build(cls, video_dirs, feature_dir, ext, shards=0, split=None):\n    meta_fn = os.path.join(feature_dir, 'meta_plan.json')\n    os.makedirs(feature_dir, exist_ok=True)\n    if os.path.isfile(meta_fn):\n        with open(meta_fn) as fr:\n            meta = json.load(fr)\n            return meta\n    print('searching videos...')\n    video_id_to_path = {}\n    for video_dir in video_dirs.split(','):\n        if video_dir in supported_formats:\n            supported_formats[video_dir].load(video_dir, video_id_to_path)\n        else:\n            for (idx, fn) in enumerate(tqdm(os.listdir(video_dir))):\n                video_fn = os.path.join(video_dir, fn)\n                if os.path.isfile(video_fn):\n                    video_id = os.path.splitext(fn)[0]\n                    video_id_to_path[video_id] = video_fn\n                elif os.path.isdir(video_fn):\n                    shard_dir = video_fn\n                    for (idx, fn) in enumerate(os.listdir(shard_dir)):\n                        video_fn = os.path.join(shard_dir, fn)\n                        if os.path.isfile(video_fn):\n                            video_id = os.path.splitext(fn)[0]\n                            video_id_to_path[video_id] = video_fn\n    (video_path, feature_path) = ([], [])\n    valid_ext = set()\n    for (idx, video_id) in enumerate(video_id_to_path):\n        video_path.append(video_id_to_path[video_id])\n        if ext is None:\n            video_id_to_path[video_id]\n            path = urllib.parse.urlparse(video_id_to_path[video_id]).path\n            ext = os.path.splitext(path)[1]\n        if ext not in valid_ext:\n            valid_ext.add(ext)\n            print('adding', ext)\n        if shards:\n            shard_id = str(idx % shards)\n            feature_fn = os.path.join(feature_dir, shard_id, video_id + ext)\n        else:\n            feature_fn = os.path.join(feature_dir, video_id + ext)\n        feature_path.append(feature_fn)\n    print('targeting', len(feature_path), 'videos')\n    meta = {'video_path': video_path, 'feature_path': feature_path}\n    with open(meta_fn, 'w') as fw:\n        json.dump(meta, fw)\n    if split is not None:\n        splits = split.split('/')\n        assert len(splits) == 2\n        (cur, total) = (int(splits[0]), int(splits[1]))\n        assert cur < total\n        import math\n        chunk = math.ceil(len(meta['video_path']) / total)\n        start = cur * chunk\n        end = (cur + 1) * chunk\n        meta = {'video_path': meta['video_path'][start:end], 'feature_path': meta['feature_path'][start:end]}\n    return meta",
        "mutated": [
            "@classmethod\ndef build(cls, video_dirs, feature_dir, ext, shards=0, split=None):\n    if False:\n        i = 10\n    meta_fn = os.path.join(feature_dir, 'meta_plan.json')\n    os.makedirs(feature_dir, exist_ok=True)\n    if os.path.isfile(meta_fn):\n        with open(meta_fn) as fr:\n            meta = json.load(fr)\n            return meta\n    print('searching videos...')\n    video_id_to_path = {}\n    for video_dir in video_dirs.split(','):\n        if video_dir in supported_formats:\n            supported_formats[video_dir].load(video_dir, video_id_to_path)\n        else:\n            for (idx, fn) in enumerate(tqdm(os.listdir(video_dir))):\n                video_fn = os.path.join(video_dir, fn)\n                if os.path.isfile(video_fn):\n                    video_id = os.path.splitext(fn)[0]\n                    video_id_to_path[video_id] = video_fn\n                elif os.path.isdir(video_fn):\n                    shard_dir = video_fn\n                    for (idx, fn) in enumerate(os.listdir(shard_dir)):\n                        video_fn = os.path.join(shard_dir, fn)\n                        if os.path.isfile(video_fn):\n                            video_id = os.path.splitext(fn)[0]\n                            video_id_to_path[video_id] = video_fn\n    (video_path, feature_path) = ([], [])\n    valid_ext = set()\n    for (idx, video_id) in enumerate(video_id_to_path):\n        video_path.append(video_id_to_path[video_id])\n        if ext is None:\n            video_id_to_path[video_id]\n            path = urllib.parse.urlparse(video_id_to_path[video_id]).path\n            ext = os.path.splitext(path)[1]\n        if ext not in valid_ext:\n            valid_ext.add(ext)\n            print('adding', ext)\n        if shards:\n            shard_id = str(idx % shards)\n            feature_fn = os.path.join(feature_dir, shard_id, video_id + ext)\n        else:\n            feature_fn = os.path.join(feature_dir, video_id + ext)\n        feature_path.append(feature_fn)\n    print('targeting', len(feature_path), 'videos')\n    meta = {'video_path': video_path, 'feature_path': feature_path}\n    with open(meta_fn, 'w') as fw:\n        json.dump(meta, fw)\n    if split is not None:\n        splits = split.split('/')\n        assert len(splits) == 2\n        (cur, total) = (int(splits[0]), int(splits[1]))\n        assert cur < total\n        import math\n        chunk = math.ceil(len(meta['video_path']) / total)\n        start = cur * chunk\n        end = (cur + 1) * chunk\n        meta = {'video_path': meta['video_path'][start:end], 'feature_path': meta['feature_path'][start:end]}\n    return meta",
            "@classmethod\ndef build(cls, video_dirs, feature_dir, ext, shards=0, split=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    meta_fn = os.path.join(feature_dir, 'meta_plan.json')\n    os.makedirs(feature_dir, exist_ok=True)\n    if os.path.isfile(meta_fn):\n        with open(meta_fn) as fr:\n            meta = json.load(fr)\n            return meta\n    print('searching videos...')\n    video_id_to_path = {}\n    for video_dir in video_dirs.split(','):\n        if video_dir in supported_formats:\n            supported_formats[video_dir].load(video_dir, video_id_to_path)\n        else:\n            for (idx, fn) in enumerate(tqdm(os.listdir(video_dir))):\n                video_fn = os.path.join(video_dir, fn)\n                if os.path.isfile(video_fn):\n                    video_id = os.path.splitext(fn)[0]\n                    video_id_to_path[video_id] = video_fn\n                elif os.path.isdir(video_fn):\n                    shard_dir = video_fn\n                    for (idx, fn) in enumerate(os.listdir(shard_dir)):\n                        video_fn = os.path.join(shard_dir, fn)\n                        if os.path.isfile(video_fn):\n                            video_id = os.path.splitext(fn)[0]\n                            video_id_to_path[video_id] = video_fn\n    (video_path, feature_path) = ([], [])\n    valid_ext = set()\n    for (idx, video_id) in enumerate(video_id_to_path):\n        video_path.append(video_id_to_path[video_id])\n        if ext is None:\n            video_id_to_path[video_id]\n            path = urllib.parse.urlparse(video_id_to_path[video_id]).path\n            ext = os.path.splitext(path)[1]\n        if ext not in valid_ext:\n            valid_ext.add(ext)\n            print('adding', ext)\n        if shards:\n            shard_id = str(idx % shards)\n            feature_fn = os.path.join(feature_dir, shard_id, video_id + ext)\n        else:\n            feature_fn = os.path.join(feature_dir, video_id + ext)\n        feature_path.append(feature_fn)\n    print('targeting', len(feature_path), 'videos')\n    meta = {'video_path': video_path, 'feature_path': feature_path}\n    with open(meta_fn, 'w') as fw:\n        json.dump(meta, fw)\n    if split is not None:\n        splits = split.split('/')\n        assert len(splits) == 2\n        (cur, total) = (int(splits[0]), int(splits[1]))\n        assert cur < total\n        import math\n        chunk = math.ceil(len(meta['video_path']) / total)\n        start = cur * chunk\n        end = (cur + 1) * chunk\n        meta = {'video_path': meta['video_path'][start:end], 'feature_path': meta['feature_path'][start:end]}\n    return meta",
            "@classmethod\ndef build(cls, video_dirs, feature_dir, ext, shards=0, split=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    meta_fn = os.path.join(feature_dir, 'meta_plan.json')\n    os.makedirs(feature_dir, exist_ok=True)\n    if os.path.isfile(meta_fn):\n        with open(meta_fn) as fr:\n            meta = json.load(fr)\n            return meta\n    print('searching videos...')\n    video_id_to_path = {}\n    for video_dir in video_dirs.split(','):\n        if video_dir in supported_formats:\n            supported_formats[video_dir].load(video_dir, video_id_to_path)\n        else:\n            for (idx, fn) in enumerate(tqdm(os.listdir(video_dir))):\n                video_fn = os.path.join(video_dir, fn)\n                if os.path.isfile(video_fn):\n                    video_id = os.path.splitext(fn)[0]\n                    video_id_to_path[video_id] = video_fn\n                elif os.path.isdir(video_fn):\n                    shard_dir = video_fn\n                    for (idx, fn) in enumerate(os.listdir(shard_dir)):\n                        video_fn = os.path.join(shard_dir, fn)\n                        if os.path.isfile(video_fn):\n                            video_id = os.path.splitext(fn)[0]\n                            video_id_to_path[video_id] = video_fn\n    (video_path, feature_path) = ([], [])\n    valid_ext = set()\n    for (idx, video_id) in enumerate(video_id_to_path):\n        video_path.append(video_id_to_path[video_id])\n        if ext is None:\n            video_id_to_path[video_id]\n            path = urllib.parse.urlparse(video_id_to_path[video_id]).path\n            ext = os.path.splitext(path)[1]\n        if ext not in valid_ext:\n            valid_ext.add(ext)\n            print('adding', ext)\n        if shards:\n            shard_id = str(idx % shards)\n            feature_fn = os.path.join(feature_dir, shard_id, video_id + ext)\n        else:\n            feature_fn = os.path.join(feature_dir, video_id + ext)\n        feature_path.append(feature_fn)\n    print('targeting', len(feature_path), 'videos')\n    meta = {'video_path': video_path, 'feature_path': feature_path}\n    with open(meta_fn, 'w') as fw:\n        json.dump(meta, fw)\n    if split is not None:\n        splits = split.split('/')\n        assert len(splits) == 2\n        (cur, total) = (int(splits[0]), int(splits[1]))\n        assert cur < total\n        import math\n        chunk = math.ceil(len(meta['video_path']) / total)\n        start = cur * chunk\n        end = (cur + 1) * chunk\n        meta = {'video_path': meta['video_path'][start:end], 'feature_path': meta['feature_path'][start:end]}\n    return meta",
            "@classmethod\ndef build(cls, video_dirs, feature_dir, ext, shards=0, split=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    meta_fn = os.path.join(feature_dir, 'meta_plan.json')\n    os.makedirs(feature_dir, exist_ok=True)\n    if os.path.isfile(meta_fn):\n        with open(meta_fn) as fr:\n            meta = json.load(fr)\n            return meta\n    print('searching videos...')\n    video_id_to_path = {}\n    for video_dir in video_dirs.split(','):\n        if video_dir in supported_formats:\n            supported_formats[video_dir].load(video_dir, video_id_to_path)\n        else:\n            for (idx, fn) in enumerate(tqdm(os.listdir(video_dir))):\n                video_fn = os.path.join(video_dir, fn)\n                if os.path.isfile(video_fn):\n                    video_id = os.path.splitext(fn)[0]\n                    video_id_to_path[video_id] = video_fn\n                elif os.path.isdir(video_fn):\n                    shard_dir = video_fn\n                    for (idx, fn) in enumerate(os.listdir(shard_dir)):\n                        video_fn = os.path.join(shard_dir, fn)\n                        if os.path.isfile(video_fn):\n                            video_id = os.path.splitext(fn)[0]\n                            video_id_to_path[video_id] = video_fn\n    (video_path, feature_path) = ([], [])\n    valid_ext = set()\n    for (idx, video_id) in enumerate(video_id_to_path):\n        video_path.append(video_id_to_path[video_id])\n        if ext is None:\n            video_id_to_path[video_id]\n            path = urllib.parse.urlparse(video_id_to_path[video_id]).path\n            ext = os.path.splitext(path)[1]\n        if ext not in valid_ext:\n            valid_ext.add(ext)\n            print('adding', ext)\n        if shards:\n            shard_id = str(idx % shards)\n            feature_fn = os.path.join(feature_dir, shard_id, video_id + ext)\n        else:\n            feature_fn = os.path.join(feature_dir, video_id + ext)\n        feature_path.append(feature_fn)\n    print('targeting', len(feature_path), 'videos')\n    meta = {'video_path': video_path, 'feature_path': feature_path}\n    with open(meta_fn, 'w') as fw:\n        json.dump(meta, fw)\n    if split is not None:\n        splits = split.split('/')\n        assert len(splits) == 2\n        (cur, total) = (int(splits[0]), int(splits[1]))\n        assert cur < total\n        import math\n        chunk = math.ceil(len(meta['video_path']) / total)\n        start = cur * chunk\n        end = (cur + 1) * chunk\n        meta = {'video_path': meta['video_path'][start:end], 'feature_path': meta['feature_path'][start:end]}\n    return meta",
            "@classmethod\ndef build(cls, video_dirs, feature_dir, ext, shards=0, split=None):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    meta_fn = os.path.join(feature_dir, 'meta_plan.json')\n    os.makedirs(feature_dir, exist_ok=True)\n    if os.path.isfile(meta_fn):\n        with open(meta_fn) as fr:\n            meta = json.load(fr)\n            return meta\n    print('searching videos...')\n    video_id_to_path = {}\n    for video_dir in video_dirs.split(','):\n        if video_dir in supported_formats:\n            supported_formats[video_dir].load(video_dir, video_id_to_path)\n        else:\n            for (idx, fn) in enumerate(tqdm(os.listdir(video_dir))):\n                video_fn = os.path.join(video_dir, fn)\n                if os.path.isfile(video_fn):\n                    video_id = os.path.splitext(fn)[0]\n                    video_id_to_path[video_id] = video_fn\n                elif os.path.isdir(video_fn):\n                    shard_dir = video_fn\n                    for (idx, fn) in enumerate(os.listdir(shard_dir)):\n                        video_fn = os.path.join(shard_dir, fn)\n                        if os.path.isfile(video_fn):\n                            video_id = os.path.splitext(fn)[0]\n                            video_id_to_path[video_id] = video_fn\n    (video_path, feature_path) = ([], [])\n    valid_ext = set()\n    for (idx, video_id) in enumerate(video_id_to_path):\n        video_path.append(video_id_to_path[video_id])\n        if ext is None:\n            video_id_to_path[video_id]\n            path = urllib.parse.urlparse(video_id_to_path[video_id]).path\n            ext = os.path.splitext(path)[1]\n        if ext not in valid_ext:\n            valid_ext.add(ext)\n            print('adding', ext)\n        if shards:\n            shard_id = str(idx % shards)\n            feature_fn = os.path.join(feature_dir, shard_id, video_id + ext)\n        else:\n            feature_fn = os.path.join(feature_dir, video_id + ext)\n        feature_path.append(feature_fn)\n    print('targeting', len(feature_path), 'videos')\n    meta = {'video_path': video_path, 'feature_path': feature_path}\n    with open(meta_fn, 'w') as fw:\n        json.dump(meta, fw)\n    if split is not None:\n        splits = split.split('/')\n        assert len(splits) == 2\n        (cur, total) = (int(splits[0]), int(splits[1]))\n        assert cur < total\n        import math\n        chunk = math.ceil(len(meta['video_path']) / total)\n        start = cur * chunk\n        end = (cur + 1) * chunk\n        meta = {'video_path': meta['video_path'][start:end], 'feature_path': meta['feature_path'][start:end]}\n    return meta"
        ]
    }
]
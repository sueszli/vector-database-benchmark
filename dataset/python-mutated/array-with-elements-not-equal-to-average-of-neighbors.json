[
    {
        "func_name": "tri_partition",
        "original": "def tri_partition(nums, left, right, target, compare):\n    mid = left\n    while mid <= right:\n        if nums[mid] == target:\n            mid += 1\n        elif compare(nums[mid], target):\n            (nums[left], nums[mid]) = (nums[mid], nums[left])\n            left += 1\n            mid += 1\n        else:\n            (nums[mid], nums[right]) = (nums[right], nums[mid])\n            right -= 1\n    return (left, right)",
        "mutated": [
            "def tri_partition(nums, left, right, target, compare):\n    if False:\n        i = 10\n    mid = left\n    while mid <= right:\n        if nums[mid] == target:\n            mid += 1\n        elif compare(nums[mid], target):\n            (nums[left], nums[mid]) = (nums[mid], nums[left])\n            left += 1\n            mid += 1\n        else:\n            (nums[mid], nums[right]) = (nums[right], nums[mid])\n            right -= 1\n    return (left, right)",
            "def tri_partition(nums, left, right, target, compare):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    mid = left\n    while mid <= right:\n        if nums[mid] == target:\n            mid += 1\n        elif compare(nums[mid], target):\n            (nums[left], nums[mid]) = (nums[mid], nums[left])\n            left += 1\n            mid += 1\n        else:\n            (nums[mid], nums[right]) = (nums[right], nums[mid])\n            right -= 1\n    return (left, right)",
            "def tri_partition(nums, left, right, target, compare):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    mid = left\n    while mid <= right:\n        if nums[mid] == target:\n            mid += 1\n        elif compare(nums[mid], target):\n            (nums[left], nums[mid]) = (nums[mid], nums[left])\n            left += 1\n            mid += 1\n        else:\n            (nums[mid], nums[right]) = (nums[right], nums[mid])\n            right -= 1\n    return (left, right)",
            "def tri_partition(nums, left, right, target, compare):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    mid = left\n    while mid <= right:\n        if nums[mid] == target:\n            mid += 1\n        elif compare(nums[mid], target):\n            (nums[left], nums[mid]) = (nums[mid], nums[left])\n            left += 1\n            mid += 1\n        else:\n            (nums[mid], nums[right]) = (nums[right], nums[mid])\n            right -= 1\n    return (left, right)",
            "def tri_partition(nums, left, right, target, compare):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    mid = left\n    while mid <= right:\n        if nums[mid] == target:\n            mid += 1\n        elif compare(nums[mid], target):\n            (nums[left], nums[mid]) = (nums[mid], nums[left])\n            left += 1\n            mid += 1\n        else:\n            (nums[mid], nums[right]) = (nums[right], nums[mid])\n            right -= 1\n    return (left, right)"
        ]
    },
    {
        "func_name": "nth_element",
        "original": "def nth_element(nums, n, compare=lambda a, b: a < b):\n\n    def tri_partition(nums, left, right, target, compare):\n        mid = left\n        while mid <= right:\n            if nums[mid] == target:\n                mid += 1\n            elif compare(nums[mid], target):\n                (nums[left], nums[mid]) = (nums[mid], nums[left])\n                left += 1\n                mid += 1\n            else:\n                (nums[mid], nums[right]) = (nums[right], nums[mid])\n                right -= 1\n        return (left, right)\n    (left, right) = (0, len(nums) - 1)\n    while left <= right:\n        pivot_idx = randint(left, right)\n        (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n        if pivot_left <= n <= pivot_right:\n            return\n        elif pivot_left > n:\n            right = pivot_left - 1\n        else:\n            left = pivot_right + 1",
        "mutated": [
            "def nth_element(nums, n, compare=lambda a, b: a < b):\n    if False:\n        i = 10\n\n    def tri_partition(nums, left, right, target, compare):\n        mid = left\n        while mid <= right:\n            if nums[mid] == target:\n                mid += 1\n            elif compare(nums[mid], target):\n                (nums[left], nums[mid]) = (nums[mid], nums[left])\n                left += 1\n                mid += 1\n            else:\n                (nums[mid], nums[right]) = (nums[right], nums[mid])\n                right -= 1\n        return (left, right)\n    (left, right) = (0, len(nums) - 1)\n    while left <= right:\n        pivot_idx = randint(left, right)\n        (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n        if pivot_left <= n <= pivot_right:\n            return\n        elif pivot_left > n:\n            right = pivot_left - 1\n        else:\n            left = pivot_right + 1",
            "def nth_element(nums, n, compare=lambda a, b: a < b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    def tri_partition(nums, left, right, target, compare):\n        mid = left\n        while mid <= right:\n            if nums[mid] == target:\n                mid += 1\n            elif compare(nums[mid], target):\n                (nums[left], nums[mid]) = (nums[mid], nums[left])\n                left += 1\n                mid += 1\n            else:\n                (nums[mid], nums[right]) = (nums[right], nums[mid])\n                right -= 1\n        return (left, right)\n    (left, right) = (0, len(nums) - 1)\n    while left <= right:\n        pivot_idx = randint(left, right)\n        (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n        if pivot_left <= n <= pivot_right:\n            return\n        elif pivot_left > n:\n            right = pivot_left - 1\n        else:\n            left = pivot_right + 1",
            "def nth_element(nums, n, compare=lambda a, b: a < b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    def tri_partition(nums, left, right, target, compare):\n        mid = left\n        while mid <= right:\n            if nums[mid] == target:\n                mid += 1\n            elif compare(nums[mid], target):\n                (nums[left], nums[mid]) = (nums[mid], nums[left])\n                left += 1\n                mid += 1\n            else:\n                (nums[mid], nums[right]) = (nums[right], nums[mid])\n                right -= 1\n        return (left, right)\n    (left, right) = (0, len(nums) - 1)\n    while left <= right:\n        pivot_idx = randint(left, right)\n        (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n        if pivot_left <= n <= pivot_right:\n            return\n        elif pivot_left > n:\n            right = pivot_left - 1\n        else:\n            left = pivot_right + 1",
            "def nth_element(nums, n, compare=lambda a, b: a < b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    def tri_partition(nums, left, right, target, compare):\n        mid = left\n        while mid <= right:\n            if nums[mid] == target:\n                mid += 1\n            elif compare(nums[mid], target):\n                (nums[left], nums[mid]) = (nums[mid], nums[left])\n                left += 1\n                mid += 1\n            else:\n                (nums[mid], nums[right]) = (nums[right], nums[mid])\n                right -= 1\n        return (left, right)\n    (left, right) = (0, len(nums) - 1)\n    while left <= right:\n        pivot_idx = randint(left, right)\n        (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n        if pivot_left <= n <= pivot_right:\n            return\n        elif pivot_left > n:\n            right = pivot_left - 1\n        else:\n            left = pivot_right + 1",
            "def nth_element(nums, n, compare=lambda a, b: a < b):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    def tri_partition(nums, left, right, target, compare):\n        mid = left\n        while mid <= right:\n            if nums[mid] == target:\n                mid += 1\n            elif compare(nums[mid], target):\n                (nums[left], nums[mid]) = (nums[mid], nums[left])\n                left += 1\n                mid += 1\n            else:\n                (nums[mid], nums[right]) = (nums[right], nums[mid])\n                right -= 1\n        return (left, right)\n    (left, right) = (0, len(nums) - 1)\n    while left <= right:\n        pivot_idx = randint(left, right)\n        (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n        if pivot_left <= n <= pivot_right:\n            return\n        elif pivot_left > n:\n            right = pivot_left - 1\n        else:\n            left = pivot_right + 1"
        ]
    },
    {
        "func_name": "idx",
        "original": "def idx(i, N):\n    return (1 + 2 * i) % N",
        "mutated": [
            "def idx(i, N):\n    if False:\n        i = 10\n    return (1 + 2 * i) % N",
            "def idx(i, N):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    return (1 + 2 * i) % N",
            "def idx(i, N):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    return (1 + 2 * i) % N",
            "def idx(i, N):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    return (1 + 2 * i) % N",
            "def idx(i, N):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    return (1 + 2 * i) % N"
        ]
    },
    {
        "func_name": "reversedTriPartitionWithVI",
        "original": "def reversedTriPartitionWithVI(nums, val):\n\n    def idx(i, N):\n        return (1 + 2 * i) % N\n    N = len(nums) // 2 * 2 + 1\n    (i, j, n) = (0, 0, len(nums) - 1)\n    while j <= n:\n        if nums[idx(j, N)] > val:\n            (nums[idx(i, N)], nums[idx(j, N)]) = (nums[idx(j, N)], nums[idx(i, N)])\n            i += 1\n            j += 1\n        elif nums[idx(j, N)] < val:\n            (nums[idx(j, N)], nums[idx(n, N)]) = (nums[idx(n, N)], nums[idx(j, N)])\n            n -= 1\n        else:\n            j += 1",
        "mutated": [
            "def reversedTriPartitionWithVI(nums, val):\n    if False:\n        i = 10\n\n    def idx(i, N):\n        return (1 + 2 * i) % N\n    N = len(nums) // 2 * 2 + 1\n    (i, j, n) = (0, 0, len(nums) - 1)\n    while j <= n:\n        if nums[idx(j, N)] > val:\n            (nums[idx(i, N)], nums[idx(j, N)]) = (nums[idx(j, N)], nums[idx(i, N)])\n            i += 1\n            j += 1\n        elif nums[idx(j, N)] < val:\n            (nums[idx(j, N)], nums[idx(n, N)]) = (nums[idx(n, N)], nums[idx(j, N)])\n            n -= 1\n        else:\n            j += 1",
            "def reversedTriPartitionWithVI(nums, val):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n\n    def idx(i, N):\n        return (1 + 2 * i) % N\n    N = len(nums) // 2 * 2 + 1\n    (i, j, n) = (0, 0, len(nums) - 1)\n    while j <= n:\n        if nums[idx(j, N)] > val:\n            (nums[idx(i, N)], nums[idx(j, N)]) = (nums[idx(j, N)], nums[idx(i, N)])\n            i += 1\n            j += 1\n        elif nums[idx(j, N)] < val:\n            (nums[idx(j, N)], nums[idx(n, N)]) = (nums[idx(n, N)], nums[idx(j, N)])\n            n -= 1\n        else:\n            j += 1",
            "def reversedTriPartitionWithVI(nums, val):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n    def idx(i, N):\n        return (1 + 2 * i) % N\n    N = len(nums) // 2 * 2 + 1\n    (i, j, n) = (0, 0, len(nums) - 1)\n    while j <= n:\n        if nums[idx(j, N)] > val:\n            (nums[idx(i, N)], nums[idx(j, N)]) = (nums[idx(j, N)], nums[idx(i, N)])\n            i += 1\n            j += 1\n        elif nums[idx(j, N)] < val:\n            (nums[idx(j, N)], nums[idx(n, N)]) = (nums[idx(n, N)], nums[idx(j, N)])\n            n -= 1\n        else:\n            j += 1",
            "def reversedTriPartitionWithVI(nums, val):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n\n    def idx(i, N):\n        return (1 + 2 * i) % N\n    N = len(nums) // 2 * 2 + 1\n    (i, j, n) = (0, 0, len(nums) - 1)\n    while j <= n:\n        if nums[idx(j, N)] > val:\n            (nums[idx(i, N)], nums[idx(j, N)]) = (nums[idx(j, N)], nums[idx(i, N)])\n            i += 1\n            j += 1\n        elif nums[idx(j, N)] < val:\n            (nums[idx(j, N)], nums[idx(n, N)]) = (nums[idx(n, N)], nums[idx(j, N)])\n            n -= 1\n        else:\n            j += 1",
            "def reversedTriPartitionWithVI(nums, val):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n\n    def idx(i, N):\n        return (1 + 2 * i) % N\n    N = len(nums) // 2 * 2 + 1\n    (i, j, n) = (0, 0, len(nums) - 1)\n    while j <= n:\n        if nums[idx(j, N)] > val:\n            (nums[idx(i, N)], nums[idx(j, N)]) = (nums[idx(j, N)], nums[idx(i, N)])\n            i += 1\n            j += 1\n        elif nums[idx(j, N)] < val:\n            (nums[idx(j, N)], nums[idx(n, N)]) = (nums[idx(n, N)], nums[idx(j, N)])\n            n -= 1\n        else:\n            j += 1"
        ]
    },
    {
        "func_name": "rearrangeArray",
        "original": "def rearrangeArray(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n\n    def nth_element(nums, n, compare=lambda a, b: a < b):\n\n        def tri_partition(nums, left, right, target, compare):\n            mid = left\n            while mid <= right:\n                if nums[mid] == target:\n                    mid += 1\n                elif compare(nums[mid], target):\n                    (nums[left], nums[mid]) = (nums[mid], nums[left])\n                    left += 1\n                    mid += 1\n                else:\n                    (nums[mid], nums[right]) = (nums[right], nums[mid])\n                    right -= 1\n            return (left, right)\n        (left, right) = (0, len(nums) - 1)\n        while left <= right:\n            pivot_idx = randint(left, right)\n            (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n            if pivot_left <= n <= pivot_right:\n                return\n            elif pivot_left > n:\n                right = pivot_left - 1\n            else:\n                left = pivot_right + 1\n\n    def reversedTriPartitionWithVI(nums, val):\n\n        def idx(i, N):\n            return (1 + 2 * i) % N\n        N = len(nums) // 2 * 2 + 1\n        (i, j, n) = (0, 0, len(nums) - 1)\n        while j <= n:\n            if nums[idx(j, N)] > val:\n                (nums[idx(i, N)], nums[idx(j, N)]) = (nums[idx(j, N)], nums[idx(i, N)])\n                i += 1\n                j += 1\n            elif nums[idx(j, N)] < val:\n                (nums[idx(j, N)], nums[idx(n, N)]) = (nums[idx(n, N)], nums[idx(j, N)])\n                n -= 1\n            else:\n                j += 1\n    mid = (len(nums) - 1) // 2\n    nth_element(nums, mid)\n    reversedTriPartitionWithVI(nums, nums[mid])\n    return nums",
        "mutated": [
            "def rearrangeArray(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n\n    def nth_element(nums, n, compare=lambda a, b: a < b):\n\n        def tri_partition(nums, left, right, target, compare):\n            mid = left\n            while mid <= right:\n                if nums[mid] == target:\n                    mid += 1\n                elif compare(nums[mid], target):\n                    (nums[left], nums[mid]) = (nums[mid], nums[left])\n                    left += 1\n                    mid += 1\n                else:\n                    (nums[mid], nums[right]) = (nums[right], nums[mid])\n                    right -= 1\n            return (left, right)\n        (left, right) = (0, len(nums) - 1)\n        while left <= right:\n            pivot_idx = randint(left, right)\n            (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n            if pivot_left <= n <= pivot_right:\n                return\n            elif pivot_left > n:\n                right = pivot_left - 1\n            else:\n                left = pivot_right + 1\n\n    def reversedTriPartitionWithVI(nums, val):\n\n        def idx(i, N):\n            return (1 + 2 * i) % N\n        N = len(nums) // 2 * 2 + 1\n        (i, j, n) = (0, 0, len(nums) - 1)\n        while j <= n:\n            if nums[idx(j, N)] > val:\n                (nums[idx(i, N)], nums[idx(j, N)]) = (nums[idx(j, N)], nums[idx(i, N)])\n                i += 1\n                j += 1\n            elif nums[idx(j, N)] < val:\n                (nums[idx(j, N)], nums[idx(n, N)]) = (nums[idx(n, N)], nums[idx(j, N)])\n                n -= 1\n            else:\n                j += 1\n    mid = (len(nums) - 1) // 2\n    nth_element(nums, mid)\n    reversedTriPartitionWithVI(nums, nums[mid])\n    return nums",
            "def rearrangeArray(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n\n    def nth_element(nums, n, compare=lambda a, b: a < b):\n\n        def tri_partition(nums, left, right, target, compare):\n            mid = left\n            while mid <= right:\n                if nums[mid] == target:\n                    mid += 1\n                elif compare(nums[mid], target):\n                    (nums[left], nums[mid]) = (nums[mid], nums[left])\n                    left += 1\n                    mid += 1\n                else:\n                    (nums[mid], nums[right]) = (nums[right], nums[mid])\n                    right -= 1\n            return (left, right)\n        (left, right) = (0, len(nums) - 1)\n        while left <= right:\n            pivot_idx = randint(left, right)\n            (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n            if pivot_left <= n <= pivot_right:\n                return\n            elif pivot_left > n:\n                right = pivot_left - 1\n            else:\n                left = pivot_right + 1\n\n    def reversedTriPartitionWithVI(nums, val):\n\n        def idx(i, N):\n            return (1 + 2 * i) % N\n        N = len(nums) // 2 * 2 + 1\n        (i, j, n) = (0, 0, len(nums) - 1)\n        while j <= n:\n            if nums[idx(j, N)] > val:\n                (nums[idx(i, N)], nums[idx(j, N)]) = (nums[idx(j, N)], nums[idx(i, N)])\n                i += 1\n                j += 1\n            elif nums[idx(j, N)] < val:\n                (nums[idx(j, N)], nums[idx(n, N)]) = (nums[idx(n, N)], nums[idx(j, N)])\n                n -= 1\n            else:\n                j += 1\n    mid = (len(nums) - 1) // 2\n    nth_element(nums, mid)\n    reversedTriPartitionWithVI(nums, nums[mid])\n    return nums",
            "def rearrangeArray(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n\n    def nth_element(nums, n, compare=lambda a, b: a < b):\n\n        def tri_partition(nums, left, right, target, compare):\n            mid = left\n            while mid <= right:\n                if nums[mid] == target:\n                    mid += 1\n                elif compare(nums[mid], target):\n                    (nums[left], nums[mid]) = (nums[mid], nums[left])\n                    left += 1\n                    mid += 1\n                else:\n                    (nums[mid], nums[right]) = (nums[right], nums[mid])\n                    right -= 1\n            return (left, right)\n        (left, right) = (0, len(nums) - 1)\n        while left <= right:\n            pivot_idx = randint(left, right)\n            (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n            if pivot_left <= n <= pivot_right:\n                return\n            elif pivot_left > n:\n                right = pivot_left - 1\n            else:\n                left = pivot_right + 1\n\n    def reversedTriPartitionWithVI(nums, val):\n\n        def idx(i, N):\n            return (1 + 2 * i) % N\n        N = len(nums) // 2 * 2 + 1\n        (i, j, n) = (0, 0, len(nums) - 1)\n        while j <= n:\n            if nums[idx(j, N)] > val:\n                (nums[idx(i, N)], nums[idx(j, N)]) = (nums[idx(j, N)], nums[idx(i, N)])\n                i += 1\n                j += 1\n            elif nums[idx(j, N)] < val:\n                (nums[idx(j, N)], nums[idx(n, N)]) = (nums[idx(n, N)], nums[idx(j, N)])\n                n -= 1\n            else:\n                j += 1\n    mid = (len(nums) - 1) // 2\n    nth_element(nums, mid)\n    reversedTriPartitionWithVI(nums, nums[mid])\n    return nums",
            "def rearrangeArray(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n\n    def nth_element(nums, n, compare=lambda a, b: a < b):\n\n        def tri_partition(nums, left, right, target, compare):\n            mid = left\n            while mid <= right:\n                if nums[mid] == target:\n                    mid += 1\n                elif compare(nums[mid], target):\n                    (nums[left], nums[mid]) = (nums[mid], nums[left])\n                    left += 1\n                    mid += 1\n                else:\n                    (nums[mid], nums[right]) = (nums[right], nums[mid])\n                    right -= 1\n            return (left, right)\n        (left, right) = (0, len(nums) - 1)\n        while left <= right:\n            pivot_idx = randint(left, right)\n            (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n            if pivot_left <= n <= pivot_right:\n                return\n            elif pivot_left > n:\n                right = pivot_left - 1\n            else:\n                left = pivot_right + 1\n\n    def reversedTriPartitionWithVI(nums, val):\n\n        def idx(i, N):\n            return (1 + 2 * i) % N\n        N = len(nums) // 2 * 2 + 1\n        (i, j, n) = (0, 0, len(nums) - 1)\n        while j <= n:\n            if nums[idx(j, N)] > val:\n                (nums[idx(i, N)], nums[idx(j, N)]) = (nums[idx(j, N)], nums[idx(i, N)])\n                i += 1\n                j += 1\n            elif nums[idx(j, N)] < val:\n                (nums[idx(j, N)], nums[idx(n, N)]) = (nums[idx(n, N)], nums[idx(j, N)])\n                n -= 1\n            else:\n                j += 1\n    mid = (len(nums) - 1) // 2\n    nth_element(nums, mid)\n    reversedTriPartitionWithVI(nums, nums[mid])\n    return nums",
            "def rearrangeArray(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n\n    def nth_element(nums, n, compare=lambda a, b: a < b):\n\n        def tri_partition(nums, left, right, target, compare):\n            mid = left\n            while mid <= right:\n                if nums[mid] == target:\n                    mid += 1\n                elif compare(nums[mid], target):\n                    (nums[left], nums[mid]) = (nums[mid], nums[left])\n                    left += 1\n                    mid += 1\n                else:\n                    (nums[mid], nums[right]) = (nums[right], nums[mid])\n                    right -= 1\n            return (left, right)\n        (left, right) = (0, len(nums) - 1)\n        while left <= right:\n            pivot_idx = randint(left, right)\n            (pivot_left, pivot_right) = tri_partition(nums, left, right, nums[pivot_idx], compare)\n            if pivot_left <= n <= pivot_right:\n                return\n            elif pivot_left > n:\n                right = pivot_left - 1\n            else:\n                left = pivot_right + 1\n\n    def reversedTriPartitionWithVI(nums, val):\n\n        def idx(i, N):\n            return (1 + 2 * i) % N\n        N = len(nums) // 2 * 2 + 1\n        (i, j, n) = (0, 0, len(nums) - 1)\n        while j <= n:\n            if nums[idx(j, N)] > val:\n                (nums[idx(i, N)], nums[idx(j, N)]) = (nums[idx(j, N)], nums[idx(i, N)])\n                i += 1\n                j += 1\n            elif nums[idx(j, N)] < val:\n                (nums[idx(j, N)], nums[idx(n, N)]) = (nums[idx(n, N)], nums[idx(j, N)])\n                n -= 1\n            else:\n                j += 1\n    mid = (len(nums) - 1) // 2\n    nth_element(nums, mid)\n    reversedTriPartitionWithVI(nums, nums[mid])\n    return nums"
        ]
    },
    {
        "func_name": "rearrangeArray",
        "original": "def rearrangeArray(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n    nums.sort()\n    mid = (len(nums) - 1) // 2\n    (nums[::2], nums[1::2]) = (nums[mid::-1], nums[:mid:-1])\n    return nums",
        "mutated": [
            "def rearrangeArray(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n    nums.sort()\n    mid = (len(nums) - 1) // 2\n    (nums[::2], nums[1::2]) = (nums[mid::-1], nums[:mid:-1])\n    return nums",
            "def rearrangeArray(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n    nums.sort()\n    mid = (len(nums) - 1) // 2\n    (nums[::2], nums[1::2]) = (nums[mid::-1], nums[:mid:-1])\n    return nums",
            "def rearrangeArray(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n    nums.sort()\n    mid = (len(nums) - 1) // 2\n    (nums[::2], nums[1::2]) = (nums[mid::-1], nums[:mid:-1])\n    return nums",
            "def rearrangeArray(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n    nums.sort()\n    mid = (len(nums) - 1) // 2\n    (nums[::2], nums[1::2]) = (nums[mid::-1], nums[:mid:-1])\n    return nums",
            "def rearrangeArray(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: List[int]\\n        '\n    nums.sort()\n    mid = (len(nums) - 1) // 2\n    (nums[::2], nums[1::2]) = (nums[mid::-1], nums[:mid:-1])\n    return nums"
        ]
    }
]
[
    {
        "func_name": "audio_delay",
        "original": "@audio_video_fx\ndef audio_delay(clip, offset=0.2, n_repeats=8, decay=1):\n    \"\"\"Repeats audio certain number of times at constant intervals multiplying\n    their volume levels using a linear space in the range 1 to ``decay`` argument\n    value.\n\n    Parameters\n    ----------\n\n    offset : float, optional\n      Gap between repetitions start times, in seconds.\n\n    n_repeats : int, optional\n      Number of repetitions (without including the clip itself).\n\n    decay : float, optional\n      Multiplication factor for the volume level of the last repetition. Each\n      repetition will have a value in the linear function between 1 and this value,\n      increasing or decreasing constantly. Keep in mind that the last repetition\n      will be muted if this is 0, and if is greater than 1, the volume will increase\n      for each repetition.\n\n    Examples\n    --------\n\n    >>> from moviepy import *\n    >>> videoclip = AudioFileClip('myaudio.wav').fx(\n    ...     audio_delay, offset=.2, n_repeats=10, decayment=.2\n    ... )\n\n    >>> # stereo A note\n    >>> make_frame = lambda t: np.array(\n    ...     [np.sin(440 * 2 * np.pi * t), np.sin(880 * 2 * np.pi * t)]\n    ... ).T\n    ... clip = AudioClip(make_frame=make_frame, duration=0.1, fps=44100)\n    ... clip = audio_delay(clip, offset=.2, n_repeats=11, decay=0)\n    \"\"\"\n    decayments = np.linspace(1, max(0, decay), n_repeats + 1)\n    return CompositeAudioClip([clip.copy(), *[multiply_volume(clip.with_start((rep + 1) * offset), decayments[rep + 1]) for rep in range(n_repeats)]])",
        "mutated": [
            "@audio_video_fx\ndef audio_delay(clip, offset=0.2, n_repeats=8, decay=1):\n    if False:\n        i = 10\n    \"Repeats audio certain number of times at constant intervals multiplying\\n    their volume levels using a linear space in the range 1 to ``decay`` argument\\n    value.\\n\\n    Parameters\\n    ----------\\n\\n    offset : float, optional\\n      Gap between repetitions start times, in seconds.\\n\\n    n_repeats : int, optional\\n      Number of repetitions (without including the clip itself).\\n\\n    decay : float, optional\\n      Multiplication factor for the volume level of the last repetition. Each\\n      repetition will have a value in the linear function between 1 and this value,\\n      increasing or decreasing constantly. Keep in mind that the last repetition\\n      will be muted if this is 0, and if is greater than 1, the volume will increase\\n      for each repetition.\\n\\n    Examples\\n    --------\\n\\n    >>> from moviepy import *\\n    >>> videoclip = AudioFileClip('myaudio.wav').fx(\\n    ...     audio_delay, offset=.2, n_repeats=10, decayment=.2\\n    ... )\\n\\n    >>> # stereo A note\\n    >>> make_frame = lambda t: np.array(\\n    ...     [np.sin(440 * 2 * np.pi * t), np.sin(880 * 2 * np.pi * t)]\\n    ... ).T\\n    ... clip = AudioClip(make_frame=make_frame, duration=0.1, fps=44100)\\n    ... clip = audio_delay(clip, offset=.2, n_repeats=11, decay=0)\\n    \"\n    decayments = np.linspace(1, max(0, decay), n_repeats + 1)\n    return CompositeAudioClip([clip.copy(), *[multiply_volume(clip.with_start((rep + 1) * offset), decayments[rep + 1]) for rep in range(n_repeats)]])",
            "@audio_video_fx\ndef audio_delay(clip, offset=0.2, n_repeats=8, decay=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    \"Repeats audio certain number of times at constant intervals multiplying\\n    their volume levels using a linear space in the range 1 to ``decay`` argument\\n    value.\\n\\n    Parameters\\n    ----------\\n\\n    offset : float, optional\\n      Gap between repetitions start times, in seconds.\\n\\n    n_repeats : int, optional\\n      Number of repetitions (without including the clip itself).\\n\\n    decay : float, optional\\n      Multiplication factor for the volume level of the last repetition. Each\\n      repetition will have a value in the linear function between 1 and this value,\\n      increasing or decreasing constantly. Keep in mind that the last repetition\\n      will be muted if this is 0, and if is greater than 1, the volume will increase\\n      for each repetition.\\n\\n    Examples\\n    --------\\n\\n    >>> from moviepy import *\\n    >>> videoclip = AudioFileClip('myaudio.wav').fx(\\n    ...     audio_delay, offset=.2, n_repeats=10, decayment=.2\\n    ... )\\n\\n    >>> # stereo A note\\n    >>> make_frame = lambda t: np.array(\\n    ...     [np.sin(440 * 2 * np.pi * t), np.sin(880 * 2 * np.pi * t)]\\n    ... ).T\\n    ... clip = AudioClip(make_frame=make_frame, duration=0.1, fps=44100)\\n    ... clip = audio_delay(clip, offset=.2, n_repeats=11, decay=0)\\n    \"\n    decayments = np.linspace(1, max(0, decay), n_repeats + 1)\n    return CompositeAudioClip([clip.copy(), *[multiply_volume(clip.with_start((rep + 1) * offset), decayments[rep + 1]) for rep in range(n_repeats)]])",
            "@audio_video_fx\ndef audio_delay(clip, offset=0.2, n_repeats=8, decay=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    \"Repeats audio certain number of times at constant intervals multiplying\\n    their volume levels using a linear space in the range 1 to ``decay`` argument\\n    value.\\n\\n    Parameters\\n    ----------\\n\\n    offset : float, optional\\n      Gap between repetitions start times, in seconds.\\n\\n    n_repeats : int, optional\\n      Number of repetitions (without including the clip itself).\\n\\n    decay : float, optional\\n      Multiplication factor for the volume level of the last repetition. Each\\n      repetition will have a value in the linear function between 1 and this value,\\n      increasing or decreasing constantly. Keep in mind that the last repetition\\n      will be muted if this is 0, and if is greater than 1, the volume will increase\\n      for each repetition.\\n\\n    Examples\\n    --------\\n\\n    >>> from moviepy import *\\n    >>> videoclip = AudioFileClip('myaudio.wav').fx(\\n    ...     audio_delay, offset=.2, n_repeats=10, decayment=.2\\n    ... )\\n\\n    >>> # stereo A note\\n    >>> make_frame = lambda t: np.array(\\n    ...     [np.sin(440 * 2 * np.pi * t), np.sin(880 * 2 * np.pi * t)]\\n    ... ).T\\n    ... clip = AudioClip(make_frame=make_frame, duration=0.1, fps=44100)\\n    ... clip = audio_delay(clip, offset=.2, n_repeats=11, decay=0)\\n    \"\n    decayments = np.linspace(1, max(0, decay), n_repeats + 1)\n    return CompositeAudioClip([clip.copy(), *[multiply_volume(clip.with_start((rep + 1) * offset), decayments[rep + 1]) for rep in range(n_repeats)]])",
            "@audio_video_fx\ndef audio_delay(clip, offset=0.2, n_repeats=8, decay=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    \"Repeats audio certain number of times at constant intervals multiplying\\n    their volume levels using a linear space in the range 1 to ``decay`` argument\\n    value.\\n\\n    Parameters\\n    ----------\\n\\n    offset : float, optional\\n      Gap between repetitions start times, in seconds.\\n\\n    n_repeats : int, optional\\n      Number of repetitions (without including the clip itself).\\n\\n    decay : float, optional\\n      Multiplication factor for the volume level of the last repetition. Each\\n      repetition will have a value in the linear function between 1 and this value,\\n      increasing or decreasing constantly. Keep in mind that the last repetition\\n      will be muted if this is 0, and if is greater than 1, the volume will increase\\n      for each repetition.\\n\\n    Examples\\n    --------\\n\\n    >>> from moviepy import *\\n    >>> videoclip = AudioFileClip('myaudio.wav').fx(\\n    ...     audio_delay, offset=.2, n_repeats=10, decayment=.2\\n    ... )\\n\\n    >>> # stereo A note\\n    >>> make_frame = lambda t: np.array(\\n    ...     [np.sin(440 * 2 * np.pi * t), np.sin(880 * 2 * np.pi * t)]\\n    ... ).T\\n    ... clip = AudioClip(make_frame=make_frame, duration=0.1, fps=44100)\\n    ... clip = audio_delay(clip, offset=.2, n_repeats=11, decay=0)\\n    \"\n    decayments = np.linspace(1, max(0, decay), n_repeats + 1)\n    return CompositeAudioClip([clip.copy(), *[multiply_volume(clip.with_start((rep + 1) * offset), decayments[rep + 1]) for rep in range(n_repeats)]])",
            "@audio_video_fx\ndef audio_delay(clip, offset=0.2, n_repeats=8, decay=1):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    \"Repeats audio certain number of times at constant intervals multiplying\\n    their volume levels using a linear space in the range 1 to ``decay`` argument\\n    value.\\n\\n    Parameters\\n    ----------\\n\\n    offset : float, optional\\n      Gap between repetitions start times, in seconds.\\n\\n    n_repeats : int, optional\\n      Number of repetitions (without including the clip itself).\\n\\n    decay : float, optional\\n      Multiplication factor for the volume level of the last repetition. Each\\n      repetition will have a value in the linear function between 1 and this value,\\n      increasing or decreasing constantly. Keep in mind that the last repetition\\n      will be muted if this is 0, and if is greater than 1, the volume will increase\\n      for each repetition.\\n\\n    Examples\\n    --------\\n\\n    >>> from moviepy import *\\n    >>> videoclip = AudioFileClip('myaudio.wav').fx(\\n    ...     audio_delay, offset=.2, n_repeats=10, decayment=.2\\n    ... )\\n\\n    >>> # stereo A note\\n    >>> make_frame = lambda t: np.array(\\n    ...     [np.sin(440 * 2 * np.pi * t), np.sin(880 * 2 * np.pi * t)]\\n    ... ).T\\n    ... clip = AudioClip(make_frame=make_frame, duration=0.1, fps=44100)\\n    ... clip = audio_delay(clip, offset=.2, n_repeats=11, decay=0)\\n    \"\n    decayments = np.linspace(1, max(0, decay), n_repeats + 1)\n    return CompositeAudioClip([clip.copy(), *[multiply_volume(clip.with_start((rep + 1) * offset), decayments[rep + 1]) for rep in range(n_repeats)]])"
        ]
    }
]
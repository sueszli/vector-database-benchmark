[
    {
        "func_name": "__init__",
        "original": "def __init__(self):\n    EfiSectionClassObject.__init__(self)",
        "mutated": [
            "def __init__(self):\n    if False:\n        i = 10\n    EfiSectionClassObject.__init__(self)",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    EfiSectionClassObject.__init__(self)",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    EfiSectionClassObject.__init__(self)",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    EfiSectionClassObject.__init__(self)",
            "def __init__(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    EfiSectionClassObject.__init__(self)"
        ]
    },
    {
        "func_name": "GenSection",
        "original": "def GenSection(self, OutputPath, ModuleName, SecNum, KeyStringList, FfsInf=None, Dict=None, IsMakefile=False):\n    if self.FileName is not None and self.FileName.startswith('PCD('):\n        self.FileName = GenFdsGlobalVariable.GetPcdValue(self.FileName)\n    'Prepare the parameter of GenSection'\n    if FfsInf is not None:\n        InfFileName = FfsInf.InfFileName\n        SectionType = FfsInf.__ExtendMacro__(self.SectionType)\n        Filename = FfsInf.__ExtendMacro__(self.FileName)\n        BuildNum = FfsInf.__ExtendMacro__(self.BuildNum)\n        StringData = FfsInf.__ExtendMacro__(self.StringData)\n        ModuleNameStr = FfsInf.__ExtendMacro__('$(MODULE_NAME)')\n        NoStrip = True\n        if FfsInf.ModuleType in (SUP_MODULE_SEC, SUP_MODULE_PEI_CORE, SUP_MODULE_PEIM, SUP_MODULE_MM_CORE_STANDALONE) and SectionType in (BINARY_FILE_TYPE_TE, BINARY_FILE_TYPE_PE32):\n            if FfsInf.KeepReloc is not None:\n                NoStrip = FfsInf.KeepReloc\n            elif FfsInf.KeepRelocFromRule is not None:\n                NoStrip = FfsInf.KeepRelocFromRule\n            elif self.KeepReloc is not None:\n                NoStrip = self.KeepReloc\n            elif FfsInf.ShadowFromInfFile is not None:\n                NoStrip = FfsInf.ShadowFromInfFile\n    else:\n        EdkLogger.error('GenFds', GENFDS_ERROR, 'Module %s apply rule for None!' % ModuleName)\n    'If the file name was pointed out, add it in FileList'\n    FileList = []\n    if Dict is None:\n        Dict = {}\n    if Filename is not None:\n        Filename = GenFdsGlobalVariable.MacroExtend(Filename, Dict)\n        if os.path.isabs(Filename):\n            Filename = os.path.normpath(Filename)\n        else:\n            Filename = os.path.normpath(os.path.join(FfsInf.EfiOutputPath, Filename))\n        if not self.Optional:\n            FileList.append(Filename)\n        elif os.path.exists(Filename):\n            FileList.append(Filename)\n        elif IsMakefile:\n            SuffixMap = FfsInf.GetFinalTargetSuffixMap()\n            if '.depex' in SuffixMap:\n                FileList.append(Filename)\n    else:\n        (FileList, IsSect) = Section.Section.GetFileList(FfsInf, self.FileType, self.FileExtension, Dict, IsMakefile=IsMakefile, SectionType=SectionType)\n        if IsSect:\n            return (FileList, self.Alignment)\n    Index = 0\n    Align = self.Alignment\n    \" If Section type is 'VERSION'\"\n    OutputFileList = []\n    if SectionType == 'VERSION':\n        InfOverrideVerString = False\n        if FfsInf.Version is not None:\n            BuildNum = FfsInf.Version\n            InfOverrideVerString = True\n        if InfOverrideVerString:\n            if BuildNum is not None and BuildNum != '':\n                BuildNumTuple = ('-j', BuildNum)\n            else:\n                BuildNumTuple = tuple()\n            Num = SecNum\n            OutputFile = os.path.join(OutputPath, ModuleName + SUP_MODULE_SEC + str(Num) + SectionSuffix.get(SectionType))\n            GenFdsGlobalVariable.GenerateSection(OutputFile, [], 'EFI_SECTION_VERSION', Ver=BuildNum, IsMakefile=IsMakefile)\n            OutputFileList.append(OutputFile)\n        elif FileList != []:\n            for File in FileList:\n                Index = Index + 1\n                Num = '%s.%d' % (SecNum, Index)\n                OutputFile = os.path.join(OutputPath, ModuleName + SUP_MODULE_SEC + Num + SectionSuffix.get(SectionType))\n                f = open(File, 'r')\n                VerString = f.read()\n                f.close()\n                BuildNum = VerString\n                if BuildNum is not None and BuildNum != '':\n                    BuildNumTuple = ('-j', BuildNum)\n                GenFdsGlobalVariable.GenerateSection(OutputFile, [], 'EFI_SECTION_VERSION', Ver=BuildNum, IsMakefile=IsMakefile)\n                OutputFileList.append(OutputFile)\n        else:\n            BuildNum = StringData\n            if BuildNum is not None and BuildNum != '':\n                BuildNumTuple = ('-j', BuildNum)\n            else:\n                BuildNumTuple = tuple()\n            BuildNumString = ' ' + ' '.join(BuildNumTuple)\n            if BuildNumString == '':\n                if self.Optional == True:\n                    GenFdsGlobalVariable.VerboseLogger(\"Optional Section don't exist!\")\n                    return ([], None)\n                else:\n                    EdkLogger.error('GenFds', GENFDS_ERROR, 'File: %s miss Version Section value' % InfFileName)\n            Num = SecNum\n            OutputFile = os.path.join(OutputPath, ModuleName + SUP_MODULE_SEC + str(Num) + SectionSuffix.get(SectionType))\n            GenFdsGlobalVariable.GenerateSection(OutputFile, [], 'EFI_SECTION_VERSION', Ver=BuildNum, IsMakefile=IsMakefile)\n            OutputFileList.append(OutputFile)\n    elif SectionType == BINARY_FILE_TYPE_UI:\n        InfOverrideUiString = False\n        if FfsInf.Ui is not None:\n            StringData = FfsInf.Ui\n            InfOverrideUiString = True\n        if InfOverrideUiString:\n            Num = SecNum\n            if IsMakefile and StringData == ModuleNameStr:\n                StringData = '$(MODULE_NAME)'\n            OutputFile = os.path.join(OutputPath, ModuleName + SUP_MODULE_SEC + str(Num) + SectionSuffix.get(SectionType))\n            GenFdsGlobalVariable.GenerateSection(OutputFile, [], 'EFI_SECTION_USER_INTERFACE', Ui=StringData, IsMakefile=IsMakefile)\n            OutputFileList.append(OutputFile)\n        elif FileList != []:\n            for File in FileList:\n                Index = Index + 1\n                Num = '%s.%d' % (SecNum, Index)\n                OutputFile = os.path.join(OutputPath, ModuleName + SUP_MODULE_SEC + Num + SectionSuffix.get(SectionType))\n                f = open(File, 'r')\n                UiString = f.read()\n                f.close()\n                if IsMakefile and UiString == ModuleNameStr:\n                    UiString = '$(MODULE_NAME)'\n                GenFdsGlobalVariable.GenerateSection(OutputFile, [], 'EFI_SECTION_USER_INTERFACE', Ui=UiString, IsMakefile=IsMakefile)\n                OutputFileList.append(OutputFile)\n        else:\n            if StringData is not None and len(StringData) > 0:\n                UiTuple = ('-n', '\"' + StringData + '\"')\n            else:\n                UiTuple = tuple()\n                if self.Optional == True:\n                    GenFdsGlobalVariable.VerboseLogger(\"Optional Section don't exist!\")\n                    return ('', None)\n                else:\n                    EdkLogger.error('GenFds', GENFDS_ERROR, 'File: %s miss UI Section value' % InfFileName)\n            Num = SecNum\n            if IsMakefile and StringData == ModuleNameStr:\n                StringData = '$(MODULE_NAME)'\n            OutputFile = os.path.join(OutputPath, ModuleName + SUP_MODULE_SEC + str(Num) + SectionSuffix.get(SectionType))\n            GenFdsGlobalVariable.GenerateSection(OutputFile, [], 'EFI_SECTION_USER_INTERFACE', Ui=StringData, IsMakefile=IsMakefile)\n            OutputFileList.append(OutputFile)\n    elif SectionType == BINARY_FILE_TYPE_RAW:\n        'If File List is empty'\n        if FileList == []:\n            if self.Optional == True:\n                GenFdsGlobalVariable.VerboseLogger(\"Optional Section don't exist!\")\n                return ([], None)\n            else:\n                EdkLogger.error('GenFds', GENFDS_ERROR, 'Output file for %s section could not be found for %s' % (SectionType, InfFileName))\n        elif len(FileList) > 1:\n            EdkLogger.error('GenFds', GENFDS_ERROR, 'Files suffixed with %s are not allowed to have more than one file in %s[Binaries] section' % (self.FileExtension, InfFileName))\n        else:\n            for File in FileList:\n                File = GenFdsGlobalVariable.MacroExtend(File, Dict)\n                OutputFileList.append(File)\n    else:\n        'If File List is empty'\n        if FileList == []:\n            if self.Optional == True:\n                GenFdsGlobalVariable.VerboseLogger(\"Optional Section don't exist!\")\n                return ([], None)\n            else:\n                EdkLogger.error('GenFds', GENFDS_ERROR, 'Output file for %s section could not be found for %s' % (SectionType, InfFileName))\n        else:\n            'Convert the File to Section file one by one '\n            for File in FileList:\n                ' Copy Map file to FFS output path '\n                Index = Index + 1\n                Num = '%s.%d' % (SecNum, Index)\n                OutputFile = os.path.join(OutputPath, ModuleName + SUP_MODULE_SEC + Num + SectionSuffix.get(SectionType))\n                File = GenFdsGlobalVariable.MacroExtend(File, Dict)\n                if self.Alignment == 'Auto' and (SectionType == BINARY_FILE_TYPE_PE32 or SectionType == BINARY_FILE_TYPE_TE):\n                    Align = '0'\n                if File[len(File) - 4:] == '.efi' and FfsInf.InfModule.BaseName == os.path.basename(File)[:-4]:\n                    MapFile = File.replace('.efi', '.map')\n                    CopyMapFile = os.path.join(OutputPath, ModuleName + '.map')\n                    if IsMakefile:\n                        if GenFdsGlobalVariable.CopyList == []:\n                            GenFdsGlobalVariable.CopyList = [(MapFile, CopyMapFile)]\n                        else:\n                            GenFdsGlobalVariable.CopyList.append((MapFile, CopyMapFile))\n                    elif os.path.exists(MapFile):\n                        if not os.path.exists(CopyMapFile) or os.path.getmtime(MapFile) > os.path.getmtime(CopyMapFile):\n                            CopyLongFilePath(MapFile, CopyMapFile)\n                if not NoStrip:\n                    FileBeforeStrip = os.path.join(OutputPath, ModuleName + '.efi')\n                    if IsMakefile:\n                        if GenFdsGlobalVariable.CopyList == []:\n                            GenFdsGlobalVariable.CopyList = [(File, FileBeforeStrip)]\n                        else:\n                            GenFdsGlobalVariable.CopyList.append((File, FileBeforeStrip))\n                    elif not os.path.exists(FileBeforeStrip) or os.path.getmtime(File) > os.path.getmtime(FileBeforeStrip):\n                        CopyLongFilePath(File, FileBeforeStrip)\n                    StrippedFile = os.path.join(OutputPath, ModuleName + '.stripped')\n                    GenFdsGlobalVariable.GenerateFirmwareImage(StrippedFile, [File], Strip=True, IsMakefile=IsMakefile)\n                    File = StrippedFile\n                'For TE Section call GenFw to generate TE image'\n                if SectionType == BINARY_FILE_TYPE_TE:\n                    TeFile = os.path.join(OutputPath, ModuleName + 'Te.raw')\n                    GenFdsGlobalVariable.GenerateFirmwareImage(TeFile, [File], Type='te', IsMakefile=IsMakefile)\n                    File = TeFile\n                'Call GenSection'\n                GenFdsGlobalVariable.GenerateSection(OutputFile, [File], Section.Section.SectionType.get(SectionType), IsMakefile=IsMakefile)\n                OutputFileList.append(OutputFile)\n    return (OutputFileList, Align)",
        "mutated": [
            "def GenSection(self, OutputPath, ModuleName, SecNum, KeyStringList, FfsInf=None, Dict=None, IsMakefile=False):\n    if False:\n        i = 10\n    if self.FileName is not None and self.FileName.startswith('PCD('):\n        self.FileName = GenFdsGlobalVariable.GetPcdValue(self.FileName)\n    'Prepare the parameter of GenSection'\n    if FfsInf is not None:\n        InfFileName = FfsInf.InfFileName\n        SectionType = FfsInf.__ExtendMacro__(self.SectionType)\n        Filename = FfsInf.__ExtendMacro__(self.FileName)\n        BuildNum = FfsInf.__ExtendMacro__(self.BuildNum)\n        StringData = FfsInf.__ExtendMacro__(self.StringData)\n        ModuleNameStr = FfsInf.__ExtendMacro__('$(MODULE_NAME)')\n        NoStrip = True\n        if FfsInf.ModuleType in (SUP_MODULE_SEC, SUP_MODULE_PEI_CORE, SUP_MODULE_PEIM, SUP_MODULE_MM_CORE_STANDALONE) and SectionType in (BINARY_FILE_TYPE_TE, BINARY_FILE_TYPE_PE32):\n            if FfsInf.KeepReloc is not None:\n                NoStrip = FfsInf.KeepReloc\n            elif FfsInf.KeepRelocFromRule is not None:\n                NoStrip = FfsInf.KeepRelocFromRule\n            elif self.KeepReloc is not None:\n                NoStrip = self.KeepReloc\n            elif FfsInf.ShadowFromInfFile is not None:\n                NoStrip = FfsInf.ShadowFromInfFile\n    else:\n        EdkLogger.error('GenFds', GENFDS_ERROR, 'Module %s apply rule for None!' % ModuleName)\n    'If the file name was pointed out, add it in FileList'\n    FileList = []\n    if Dict is None:\n        Dict = {}\n    if Filename is not None:\n        Filename = GenFdsGlobalVariable.MacroExtend(Filename, Dict)\n        if os.path.isabs(Filename):\n            Filename = os.path.normpath(Filename)\n        else:\n            Filename = os.path.normpath(os.path.join(FfsInf.EfiOutputPath, Filename))\n        if not self.Optional:\n            FileList.append(Filename)\n        elif os.path.exists(Filename):\n            FileList.append(Filename)\n        elif IsMakefile:\n            SuffixMap = FfsInf.GetFinalTargetSuffixMap()\n            if '.depex' in SuffixMap:\n                FileList.append(Filename)\n    else:\n        (FileList, IsSect) = Section.Section.GetFileList(FfsInf, self.FileType, self.FileExtension, Dict, IsMakefile=IsMakefile, SectionType=SectionType)\n        if IsSect:\n            return (FileList, self.Alignment)\n    Index = 0\n    Align = self.Alignment\n    \" If Section type is 'VERSION'\"\n    OutputFileList = []\n    if SectionType == 'VERSION':\n        InfOverrideVerString = False\n        if FfsInf.Version is not None:\n            BuildNum = FfsInf.Version\n            InfOverrideVerString = True\n        if InfOverrideVerString:\n            if BuildNum is not None and BuildNum != '':\n                BuildNumTuple = ('-j', BuildNum)\n            else:\n                BuildNumTuple = tuple()\n            Num = SecNum\n            OutputFile = os.path.join(OutputPath, ModuleName + SUP_MODULE_SEC + str(Num) + SectionSuffix.get(SectionType))\n            GenFdsGlobalVariable.GenerateSection(OutputFile, [], 'EFI_SECTION_VERSION', Ver=BuildNum, IsMakefile=IsMakefile)\n            OutputFileList.append(OutputFile)\n        elif FileList != []:\n            for File in FileList:\n                Index = Index + 1\n                Num = '%s.%d' % (SecNum, Index)\n                OutputFile = os.path.join(OutputPath, ModuleName + SUP_MODULE_SEC + Num + SectionSuffix.get(SectionType))\n                f = open(File, 'r')\n                VerString = f.read()\n                f.close()\n                BuildNum = VerString\n                if BuildNum is not None and BuildNum != '':\n                    BuildNumTuple = ('-j', BuildNum)\n                GenFdsGlobalVariable.GenerateSection(OutputFile, [], 'EFI_SECTION_VERSION', Ver=BuildNum, IsMakefile=IsMakefile)\n                OutputFileList.append(OutputFile)\n        else:\n            BuildNum = StringData\n            if BuildNum is not None and BuildNum != '':\n                BuildNumTuple = ('-j', BuildNum)\n            else:\n                BuildNumTuple = tuple()\n            BuildNumString = ' ' + ' '.join(BuildNumTuple)\n            if BuildNumString == '':\n                if self.Optional == True:\n                    GenFdsGlobalVariable.VerboseLogger(\"Optional Section don't exist!\")\n                    return ([], None)\n                else:\n                    EdkLogger.error('GenFds', GENFDS_ERROR, 'File: %s miss Version Section value' % InfFileName)\n            Num = SecNum\n            OutputFile = os.path.join(OutputPath, ModuleName + SUP_MODULE_SEC + str(Num) + SectionSuffix.get(SectionType))\n            GenFdsGlobalVariable.GenerateSection(OutputFile, [], 'EFI_SECTION_VERSION', Ver=BuildNum, IsMakefile=IsMakefile)\n            OutputFileList.append(OutputFile)\n    elif SectionType == BINARY_FILE_TYPE_UI:\n        InfOverrideUiString = False\n        if FfsInf.Ui is not None:\n            StringData = FfsInf.Ui\n            InfOverrideUiString = True\n        if InfOverrideUiString:\n            Num = SecNum\n            if IsMakefile and StringData == ModuleNameStr:\n                StringData = '$(MODULE_NAME)'\n            OutputFile = os.path.join(OutputPath, ModuleName + SUP_MODULE_SEC + str(Num) + SectionSuffix.get(SectionType))\n            GenFdsGlobalVariable.GenerateSection(OutputFile, [], 'EFI_SECTION_USER_INTERFACE', Ui=StringData, IsMakefile=IsMakefile)\n            OutputFileList.append(OutputFile)\n        elif FileList != []:\n            for File in FileList:\n                Index = Index + 1\n                Num = '%s.%d' % (SecNum, Index)\n                OutputFile = os.path.join(OutputPath, ModuleName + SUP_MODULE_SEC + Num + SectionSuffix.get(SectionType))\n                f = open(File, 'r')\n                UiString = f.read()\n                f.close()\n                if IsMakefile and UiString == ModuleNameStr:\n                    UiString = '$(MODULE_NAME)'\n                GenFdsGlobalVariable.GenerateSection(OutputFile, [], 'EFI_SECTION_USER_INTERFACE', Ui=UiString, IsMakefile=IsMakefile)\n                OutputFileList.append(OutputFile)\n        else:\n            if StringData is not None and len(StringData) > 0:\n                UiTuple = ('-n', '\"' + StringData + '\"')\n            else:\n                UiTuple = tuple()\n                if self.Optional == True:\n                    GenFdsGlobalVariable.VerboseLogger(\"Optional Section don't exist!\")\n                    return ('', None)\n                else:\n                    EdkLogger.error('GenFds', GENFDS_ERROR, 'File: %s miss UI Section value' % InfFileName)\n            Num = SecNum\n            if IsMakefile and StringData == ModuleNameStr:\n                StringData = '$(MODULE_NAME)'\n            OutputFile = os.path.join(OutputPath, ModuleName + SUP_MODULE_SEC + str(Num) + SectionSuffix.get(SectionType))\n            GenFdsGlobalVariable.GenerateSection(OutputFile, [], 'EFI_SECTION_USER_INTERFACE', Ui=StringData, IsMakefile=IsMakefile)\n            OutputFileList.append(OutputFile)\n    elif SectionType == BINARY_FILE_TYPE_RAW:\n        'If File List is empty'\n        if FileList == []:\n            if self.Optional == True:\n                GenFdsGlobalVariable.VerboseLogger(\"Optional Section don't exist!\")\n                return ([], None)\n            else:\n                EdkLogger.error('GenFds', GENFDS_ERROR, 'Output file for %s section could not be found for %s' % (SectionType, InfFileName))\n        elif len(FileList) > 1:\n            EdkLogger.error('GenFds', GENFDS_ERROR, 'Files suffixed with %s are not allowed to have more than one file in %s[Binaries] section' % (self.FileExtension, InfFileName))\n        else:\n            for File in FileList:\n                File = GenFdsGlobalVariable.MacroExtend(File, Dict)\n                OutputFileList.append(File)\n    else:\n        'If File List is empty'\n        if FileList == []:\n            if self.Optional == True:\n                GenFdsGlobalVariable.VerboseLogger(\"Optional Section don't exist!\")\n                return ([], None)\n            else:\n                EdkLogger.error('GenFds', GENFDS_ERROR, 'Output file for %s section could not be found for %s' % (SectionType, InfFileName))\n        else:\n            'Convert the File to Section file one by one '\n            for File in FileList:\n                ' Copy Map file to FFS output path '\n                Index = Index + 1\n                Num = '%s.%d' % (SecNum, Index)\n                OutputFile = os.path.join(OutputPath, ModuleName + SUP_MODULE_SEC + Num + SectionSuffix.get(SectionType))\n                File = GenFdsGlobalVariable.MacroExtend(File, Dict)\n                if self.Alignment == 'Auto' and (SectionType == BINARY_FILE_TYPE_PE32 or SectionType == BINARY_FILE_TYPE_TE):\n                    Align = '0'\n                if File[len(File) - 4:] == '.efi' and FfsInf.InfModule.BaseName == os.path.basename(File)[:-4]:\n                    MapFile = File.replace('.efi', '.map')\n                    CopyMapFile = os.path.join(OutputPath, ModuleName + '.map')\n                    if IsMakefile:\n                        if GenFdsGlobalVariable.CopyList == []:\n                            GenFdsGlobalVariable.CopyList = [(MapFile, CopyMapFile)]\n                        else:\n                            GenFdsGlobalVariable.CopyList.append((MapFile, CopyMapFile))\n                    elif os.path.exists(MapFile):\n                        if not os.path.exists(CopyMapFile) or os.path.getmtime(MapFile) > os.path.getmtime(CopyMapFile):\n                            CopyLongFilePath(MapFile, CopyMapFile)\n                if not NoStrip:\n                    FileBeforeStrip = os.path.join(OutputPath, ModuleName + '.efi')\n                    if IsMakefile:\n                        if GenFdsGlobalVariable.CopyList == []:\n                            GenFdsGlobalVariable.CopyList = [(File, FileBeforeStrip)]\n                        else:\n                            GenFdsGlobalVariable.CopyList.append((File, FileBeforeStrip))\n                    elif not os.path.exists(FileBeforeStrip) or os.path.getmtime(File) > os.path.getmtime(FileBeforeStrip):\n                        CopyLongFilePath(File, FileBeforeStrip)\n                    StrippedFile = os.path.join(OutputPath, ModuleName + '.stripped')\n                    GenFdsGlobalVariable.GenerateFirmwareImage(StrippedFile, [File], Strip=True, IsMakefile=IsMakefile)\n                    File = StrippedFile\n                'For TE Section call GenFw to generate TE image'\n                if SectionType == BINARY_FILE_TYPE_TE:\n                    TeFile = os.path.join(OutputPath, ModuleName + 'Te.raw')\n                    GenFdsGlobalVariable.GenerateFirmwareImage(TeFile, [File], Type='te', IsMakefile=IsMakefile)\n                    File = TeFile\n                'Call GenSection'\n                GenFdsGlobalVariable.GenerateSection(OutputFile, [File], Section.Section.SectionType.get(SectionType), IsMakefile=IsMakefile)\n                OutputFileList.append(OutputFile)\n    return (OutputFileList, Align)",
            "def GenSection(self, OutputPath, ModuleName, SecNum, KeyStringList, FfsInf=None, Dict=None, IsMakefile=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if self.FileName is not None and self.FileName.startswith('PCD('):\n        self.FileName = GenFdsGlobalVariable.GetPcdValue(self.FileName)\n    'Prepare the parameter of GenSection'\n    if FfsInf is not None:\n        InfFileName = FfsInf.InfFileName\n        SectionType = FfsInf.__ExtendMacro__(self.SectionType)\n        Filename = FfsInf.__ExtendMacro__(self.FileName)\n        BuildNum = FfsInf.__ExtendMacro__(self.BuildNum)\n        StringData = FfsInf.__ExtendMacro__(self.StringData)\n        ModuleNameStr = FfsInf.__ExtendMacro__('$(MODULE_NAME)')\n        NoStrip = True\n        if FfsInf.ModuleType in (SUP_MODULE_SEC, SUP_MODULE_PEI_CORE, SUP_MODULE_PEIM, SUP_MODULE_MM_CORE_STANDALONE) and SectionType in (BINARY_FILE_TYPE_TE, BINARY_FILE_TYPE_PE32):\n            if FfsInf.KeepReloc is not None:\n                NoStrip = FfsInf.KeepReloc\n            elif FfsInf.KeepRelocFromRule is not None:\n                NoStrip = FfsInf.KeepRelocFromRule\n            elif self.KeepReloc is not None:\n                NoStrip = self.KeepReloc\n            elif FfsInf.ShadowFromInfFile is not None:\n                NoStrip = FfsInf.ShadowFromInfFile\n    else:\n        EdkLogger.error('GenFds', GENFDS_ERROR, 'Module %s apply rule for None!' % ModuleName)\n    'If the file name was pointed out, add it in FileList'\n    FileList = []\n    if Dict is None:\n        Dict = {}\n    if Filename is not None:\n        Filename = GenFdsGlobalVariable.MacroExtend(Filename, Dict)\n        if os.path.isabs(Filename):\n            Filename = os.path.normpath(Filename)\n        else:\n            Filename = os.path.normpath(os.path.join(FfsInf.EfiOutputPath, Filename))\n        if not self.Optional:\n            FileList.append(Filename)\n        elif os.path.exists(Filename):\n            FileList.append(Filename)\n        elif IsMakefile:\n            SuffixMap = FfsInf.GetFinalTargetSuffixMap()\n            if '.depex' in SuffixMap:\n                FileList.append(Filename)\n    else:\n        (FileList, IsSect) = Section.Section.GetFileList(FfsInf, self.FileType, self.FileExtension, Dict, IsMakefile=IsMakefile, SectionType=SectionType)\n        if IsSect:\n            return (FileList, self.Alignment)\n    Index = 0\n    Align = self.Alignment\n    \" If Section type is 'VERSION'\"\n    OutputFileList = []\n    if SectionType == 'VERSION':\n        InfOverrideVerString = False\n        if FfsInf.Version is not None:\n            BuildNum = FfsInf.Version\n            InfOverrideVerString = True\n        if InfOverrideVerString:\n            if BuildNum is not None and BuildNum != '':\n                BuildNumTuple = ('-j', BuildNum)\n            else:\n                BuildNumTuple = tuple()\n            Num = SecNum\n            OutputFile = os.path.join(OutputPath, ModuleName + SUP_MODULE_SEC + str(Num) + SectionSuffix.get(SectionType))\n            GenFdsGlobalVariable.GenerateSection(OutputFile, [], 'EFI_SECTION_VERSION', Ver=BuildNum, IsMakefile=IsMakefile)\n            OutputFileList.append(OutputFile)\n        elif FileList != []:\n            for File in FileList:\n                Index = Index + 1\n                Num = '%s.%d' % (SecNum, Index)\n                OutputFile = os.path.join(OutputPath, ModuleName + SUP_MODULE_SEC + Num + SectionSuffix.get(SectionType))\n                f = open(File, 'r')\n                VerString = f.read()\n                f.close()\n                BuildNum = VerString\n                if BuildNum is not None and BuildNum != '':\n                    BuildNumTuple = ('-j', BuildNum)\n                GenFdsGlobalVariable.GenerateSection(OutputFile, [], 'EFI_SECTION_VERSION', Ver=BuildNum, IsMakefile=IsMakefile)\n                OutputFileList.append(OutputFile)\n        else:\n            BuildNum = StringData\n            if BuildNum is not None and BuildNum != '':\n                BuildNumTuple = ('-j', BuildNum)\n            else:\n                BuildNumTuple = tuple()\n            BuildNumString = ' ' + ' '.join(BuildNumTuple)\n            if BuildNumString == '':\n                if self.Optional == True:\n                    GenFdsGlobalVariable.VerboseLogger(\"Optional Section don't exist!\")\n                    return ([], None)\n                else:\n                    EdkLogger.error('GenFds', GENFDS_ERROR, 'File: %s miss Version Section value' % InfFileName)\n            Num = SecNum\n            OutputFile = os.path.join(OutputPath, ModuleName + SUP_MODULE_SEC + str(Num) + SectionSuffix.get(SectionType))\n            GenFdsGlobalVariable.GenerateSection(OutputFile, [], 'EFI_SECTION_VERSION', Ver=BuildNum, IsMakefile=IsMakefile)\n            OutputFileList.append(OutputFile)\n    elif SectionType == BINARY_FILE_TYPE_UI:\n        InfOverrideUiString = False\n        if FfsInf.Ui is not None:\n            StringData = FfsInf.Ui\n            InfOverrideUiString = True\n        if InfOverrideUiString:\n            Num = SecNum\n            if IsMakefile and StringData == ModuleNameStr:\n                StringData = '$(MODULE_NAME)'\n            OutputFile = os.path.join(OutputPath, ModuleName + SUP_MODULE_SEC + str(Num) + SectionSuffix.get(SectionType))\n            GenFdsGlobalVariable.GenerateSection(OutputFile, [], 'EFI_SECTION_USER_INTERFACE', Ui=StringData, IsMakefile=IsMakefile)\n            OutputFileList.append(OutputFile)\n        elif FileList != []:\n            for File in FileList:\n                Index = Index + 1\n                Num = '%s.%d' % (SecNum, Index)\n                OutputFile = os.path.join(OutputPath, ModuleName + SUP_MODULE_SEC + Num + SectionSuffix.get(SectionType))\n                f = open(File, 'r')\n                UiString = f.read()\n                f.close()\n                if IsMakefile and UiString == ModuleNameStr:\n                    UiString = '$(MODULE_NAME)'\n                GenFdsGlobalVariable.GenerateSection(OutputFile, [], 'EFI_SECTION_USER_INTERFACE', Ui=UiString, IsMakefile=IsMakefile)\n                OutputFileList.append(OutputFile)\n        else:\n            if StringData is not None and len(StringData) > 0:\n                UiTuple = ('-n', '\"' + StringData + '\"')\n            else:\n                UiTuple = tuple()\n                if self.Optional == True:\n                    GenFdsGlobalVariable.VerboseLogger(\"Optional Section don't exist!\")\n                    return ('', None)\n                else:\n                    EdkLogger.error('GenFds', GENFDS_ERROR, 'File: %s miss UI Section value' % InfFileName)\n            Num = SecNum\n            if IsMakefile and StringData == ModuleNameStr:\n                StringData = '$(MODULE_NAME)'\n            OutputFile = os.path.join(OutputPath, ModuleName + SUP_MODULE_SEC + str(Num) + SectionSuffix.get(SectionType))\n            GenFdsGlobalVariable.GenerateSection(OutputFile, [], 'EFI_SECTION_USER_INTERFACE', Ui=StringData, IsMakefile=IsMakefile)\n            OutputFileList.append(OutputFile)\n    elif SectionType == BINARY_FILE_TYPE_RAW:\n        'If File List is empty'\n        if FileList == []:\n            if self.Optional == True:\n                GenFdsGlobalVariable.VerboseLogger(\"Optional Section don't exist!\")\n                return ([], None)\n            else:\n                EdkLogger.error('GenFds', GENFDS_ERROR, 'Output file for %s section could not be found for %s' % (SectionType, InfFileName))\n        elif len(FileList) > 1:\n            EdkLogger.error('GenFds', GENFDS_ERROR, 'Files suffixed with %s are not allowed to have more than one file in %s[Binaries] section' % (self.FileExtension, InfFileName))\n        else:\n            for File in FileList:\n                File = GenFdsGlobalVariable.MacroExtend(File, Dict)\n                OutputFileList.append(File)\n    else:\n        'If File List is empty'\n        if FileList == []:\n            if self.Optional == True:\n                GenFdsGlobalVariable.VerboseLogger(\"Optional Section don't exist!\")\n                return ([], None)\n            else:\n                EdkLogger.error('GenFds', GENFDS_ERROR, 'Output file for %s section could not be found for %s' % (SectionType, InfFileName))\n        else:\n            'Convert the File to Section file one by one '\n            for File in FileList:\n                ' Copy Map file to FFS output path '\n                Index = Index + 1\n                Num = '%s.%d' % (SecNum, Index)\n                OutputFile = os.path.join(OutputPath, ModuleName + SUP_MODULE_SEC + Num + SectionSuffix.get(SectionType))\n                File = GenFdsGlobalVariable.MacroExtend(File, Dict)\n                if self.Alignment == 'Auto' and (SectionType == BINARY_FILE_TYPE_PE32 or SectionType == BINARY_FILE_TYPE_TE):\n                    Align = '0'\n                if File[len(File) - 4:] == '.efi' and FfsInf.InfModule.BaseName == os.path.basename(File)[:-4]:\n                    MapFile = File.replace('.efi', '.map')\n                    CopyMapFile = os.path.join(OutputPath, ModuleName + '.map')\n                    if IsMakefile:\n                        if GenFdsGlobalVariable.CopyList == []:\n                            GenFdsGlobalVariable.CopyList = [(MapFile, CopyMapFile)]\n                        else:\n                            GenFdsGlobalVariable.CopyList.append((MapFile, CopyMapFile))\n                    elif os.path.exists(MapFile):\n                        if not os.path.exists(CopyMapFile) or os.path.getmtime(MapFile) > os.path.getmtime(CopyMapFile):\n                            CopyLongFilePath(MapFile, CopyMapFile)\n                if not NoStrip:\n                    FileBeforeStrip = os.path.join(OutputPath, ModuleName + '.efi')\n                    if IsMakefile:\n                        if GenFdsGlobalVariable.CopyList == []:\n                            GenFdsGlobalVariable.CopyList = [(File, FileBeforeStrip)]\n                        else:\n                            GenFdsGlobalVariable.CopyList.append((File, FileBeforeStrip))\n                    elif not os.path.exists(FileBeforeStrip) or os.path.getmtime(File) > os.path.getmtime(FileBeforeStrip):\n                        CopyLongFilePath(File, FileBeforeStrip)\n                    StrippedFile = os.path.join(OutputPath, ModuleName + '.stripped')\n                    GenFdsGlobalVariable.GenerateFirmwareImage(StrippedFile, [File], Strip=True, IsMakefile=IsMakefile)\n                    File = StrippedFile\n                'For TE Section call GenFw to generate TE image'\n                if SectionType == BINARY_FILE_TYPE_TE:\n                    TeFile = os.path.join(OutputPath, ModuleName + 'Te.raw')\n                    GenFdsGlobalVariable.GenerateFirmwareImage(TeFile, [File], Type='te', IsMakefile=IsMakefile)\n                    File = TeFile\n                'Call GenSection'\n                GenFdsGlobalVariable.GenerateSection(OutputFile, [File], Section.Section.SectionType.get(SectionType), IsMakefile=IsMakefile)\n                OutputFileList.append(OutputFile)\n    return (OutputFileList, Align)",
            "def GenSection(self, OutputPath, ModuleName, SecNum, KeyStringList, FfsInf=None, Dict=None, IsMakefile=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if self.FileName is not None and self.FileName.startswith('PCD('):\n        self.FileName = GenFdsGlobalVariable.GetPcdValue(self.FileName)\n    'Prepare the parameter of GenSection'\n    if FfsInf is not None:\n        InfFileName = FfsInf.InfFileName\n        SectionType = FfsInf.__ExtendMacro__(self.SectionType)\n        Filename = FfsInf.__ExtendMacro__(self.FileName)\n        BuildNum = FfsInf.__ExtendMacro__(self.BuildNum)\n        StringData = FfsInf.__ExtendMacro__(self.StringData)\n        ModuleNameStr = FfsInf.__ExtendMacro__('$(MODULE_NAME)')\n        NoStrip = True\n        if FfsInf.ModuleType in (SUP_MODULE_SEC, SUP_MODULE_PEI_CORE, SUP_MODULE_PEIM, SUP_MODULE_MM_CORE_STANDALONE) and SectionType in (BINARY_FILE_TYPE_TE, BINARY_FILE_TYPE_PE32):\n            if FfsInf.KeepReloc is not None:\n                NoStrip = FfsInf.KeepReloc\n            elif FfsInf.KeepRelocFromRule is not None:\n                NoStrip = FfsInf.KeepRelocFromRule\n            elif self.KeepReloc is not None:\n                NoStrip = self.KeepReloc\n            elif FfsInf.ShadowFromInfFile is not None:\n                NoStrip = FfsInf.ShadowFromInfFile\n    else:\n        EdkLogger.error('GenFds', GENFDS_ERROR, 'Module %s apply rule for None!' % ModuleName)\n    'If the file name was pointed out, add it in FileList'\n    FileList = []\n    if Dict is None:\n        Dict = {}\n    if Filename is not None:\n        Filename = GenFdsGlobalVariable.MacroExtend(Filename, Dict)\n        if os.path.isabs(Filename):\n            Filename = os.path.normpath(Filename)\n        else:\n            Filename = os.path.normpath(os.path.join(FfsInf.EfiOutputPath, Filename))\n        if not self.Optional:\n            FileList.append(Filename)\n        elif os.path.exists(Filename):\n            FileList.append(Filename)\n        elif IsMakefile:\n            SuffixMap = FfsInf.GetFinalTargetSuffixMap()\n            if '.depex' in SuffixMap:\n                FileList.append(Filename)\n    else:\n        (FileList, IsSect) = Section.Section.GetFileList(FfsInf, self.FileType, self.FileExtension, Dict, IsMakefile=IsMakefile, SectionType=SectionType)\n        if IsSect:\n            return (FileList, self.Alignment)\n    Index = 0\n    Align = self.Alignment\n    \" If Section type is 'VERSION'\"\n    OutputFileList = []\n    if SectionType == 'VERSION':\n        InfOverrideVerString = False\n        if FfsInf.Version is not None:\n            BuildNum = FfsInf.Version\n            InfOverrideVerString = True\n        if InfOverrideVerString:\n            if BuildNum is not None and BuildNum != '':\n                BuildNumTuple = ('-j', BuildNum)\n            else:\n                BuildNumTuple = tuple()\n            Num = SecNum\n            OutputFile = os.path.join(OutputPath, ModuleName + SUP_MODULE_SEC + str(Num) + SectionSuffix.get(SectionType))\n            GenFdsGlobalVariable.GenerateSection(OutputFile, [], 'EFI_SECTION_VERSION', Ver=BuildNum, IsMakefile=IsMakefile)\n            OutputFileList.append(OutputFile)\n        elif FileList != []:\n            for File in FileList:\n                Index = Index + 1\n                Num = '%s.%d' % (SecNum, Index)\n                OutputFile = os.path.join(OutputPath, ModuleName + SUP_MODULE_SEC + Num + SectionSuffix.get(SectionType))\n                f = open(File, 'r')\n                VerString = f.read()\n                f.close()\n                BuildNum = VerString\n                if BuildNum is not None and BuildNum != '':\n                    BuildNumTuple = ('-j', BuildNum)\n                GenFdsGlobalVariable.GenerateSection(OutputFile, [], 'EFI_SECTION_VERSION', Ver=BuildNum, IsMakefile=IsMakefile)\n                OutputFileList.append(OutputFile)\n        else:\n            BuildNum = StringData\n            if BuildNum is not None and BuildNum != '':\n                BuildNumTuple = ('-j', BuildNum)\n            else:\n                BuildNumTuple = tuple()\n            BuildNumString = ' ' + ' '.join(BuildNumTuple)\n            if BuildNumString == '':\n                if self.Optional == True:\n                    GenFdsGlobalVariable.VerboseLogger(\"Optional Section don't exist!\")\n                    return ([], None)\n                else:\n                    EdkLogger.error('GenFds', GENFDS_ERROR, 'File: %s miss Version Section value' % InfFileName)\n            Num = SecNum\n            OutputFile = os.path.join(OutputPath, ModuleName + SUP_MODULE_SEC + str(Num) + SectionSuffix.get(SectionType))\n            GenFdsGlobalVariable.GenerateSection(OutputFile, [], 'EFI_SECTION_VERSION', Ver=BuildNum, IsMakefile=IsMakefile)\n            OutputFileList.append(OutputFile)\n    elif SectionType == BINARY_FILE_TYPE_UI:\n        InfOverrideUiString = False\n        if FfsInf.Ui is not None:\n            StringData = FfsInf.Ui\n            InfOverrideUiString = True\n        if InfOverrideUiString:\n            Num = SecNum\n            if IsMakefile and StringData == ModuleNameStr:\n                StringData = '$(MODULE_NAME)'\n            OutputFile = os.path.join(OutputPath, ModuleName + SUP_MODULE_SEC + str(Num) + SectionSuffix.get(SectionType))\n            GenFdsGlobalVariable.GenerateSection(OutputFile, [], 'EFI_SECTION_USER_INTERFACE', Ui=StringData, IsMakefile=IsMakefile)\n            OutputFileList.append(OutputFile)\n        elif FileList != []:\n            for File in FileList:\n                Index = Index + 1\n                Num = '%s.%d' % (SecNum, Index)\n                OutputFile = os.path.join(OutputPath, ModuleName + SUP_MODULE_SEC + Num + SectionSuffix.get(SectionType))\n                f = open(File, 'r')\n                UiString = f.read()\n                f.close()\n                if IsMakefile and UiString == ModuleNameStr:\n                    UiString = '$(MODULE_NAME)'\n                GenFdsGlobalVariable.GenerateSection(OutputFile, [], 'EFI_SECTION_USER_INTERFACE', Ui=UiString, IsMakefile=IsMakefile)\n                OutputFileList.append(OutputFile)\n        else:\n            if StringData is not None and len(StringData) > 0:\n                UiTuple = ('-n', '\"' + StringData + '\"')\n            else:\n                UiTuple = tuple()\n                if self.Optional == True:\n                    GenFdsGlobalVariable.VerboseLogger(\"Optional Section don't exist!\")\n                    return ('', None)\n                else:\n                    EdkLogger.error('GenFds', GENFDS_ERROR, 'File: %s miss UI Section value' % InfFileName)\n            Num = SecNum\n            if IsMakefile and StringData == ModuleNameStr:\n                StringData = '$(MODULE_NAME)'\n            OutputFile = os.path.join(OutputPath, ModuleName + SUP_MODULE_SEC + str(Num) + SectionSuffix.get(SectionType))\n            GenFdsGlobalVariable.GenerateSection(OutputFile, [], 'EFI_SECTION_USER_INTERFACE', Ui=StringData, IsMakefile=IsMakefile)\n            OutputFileList.append(OutputFile)\n    elif SectionType == BINARY_FILE_TYPE_RAW:\n        'If File List is empty'\n        if FileList == []:\n            if self.Optional == True:\n                GenFdsGlobalVariable.VerboseLogger(\"Optional Section don't exist!\")\n                return ([], None)\n            else:\n                EdkLogger.error('GenFds', GENFDS_ERROR, 'Output file for %s section could not be found for %s' % (SectionType, InfFileName))\n        elif len(FileList) > 1:\n            EdkLogger.error('GenFds', GENFDS_ERROR, 'Files suffixed with %s are not allowed to have more than one file in %s[Binaries] section' % (self.FileExtension, InfFileName))\n        else:\n            for File in FileList:\n                File = GenFdsGlobalVariable.MacroExtend(File, Dict)\n                OutputFileList.append(File)\n    else:\n        'If File List is empty'\n        if FileList == []:\n            if self.Optional == True:\n                GenFdsGlobalVariable.VerboseLogger(\"Optional Section don't exist!\")\n                return ([], None)\n            else:\n                EdkLogger.error('GenFds', GENFDS_ERROR, 'Output file for %s section could not be found for %s' % (SectionType, InfFileName))\n        else:\n            'Convert the File to Section file one by one '\n            for File in FileList:\n                ' Copy Map file to FFS output path '\n                Index = Index + 1\n                Num = '%s.%d' % (SecNum, Index)\n                OutputFile = os.path.join(OutputPath, ModuleName + SUP_MODULE_SEC + Num + SectionSuffix.get(SectionType))\n                File = GenFdsGlobalVariable.MacroExtend(File, Dict)\n                if self.Alignment == 'Auto' and (SectionType == BINARY_FILE_TYPE_PE32 or SectionType == BINARY_FILE_TYPE_TE):\n                    Align = '0'\n                if File[len(File) - 4:] == '.efi' and FfsInf.InfModule.BaseName == os.path.basename(File)[:-4]:\n                    MapFile = File.replace('.efi', '.map')\n                    CopyMapFile = os.path.join(OutputPath, ModuleName + '.map')\n                    if IsMakefile:\n                        if GenFdsGlobalVariable.CopyList == []:\n                            GenFdsGlobalVariable.CopyList = [(MapFile, CopyMapFile)]\n                        else:\n                            GenFdsGlobalVariable.CopyList.append((MapFile, CopyMapFile))\n                    elif os.path.exists(MapFile):\n                        if not os.path.exists(CopyMapFile) or os.path.getmtime(MapFile) > os.path.getmtime(CopyMapFile):\n                            CopyLongFilePath(MapFile, CopyMapFile)\n                if not NoStrip:\n                    FileBeforeStrip = os.path.join(OutputPath, ModuleName + '.efi')\n                    if IsMakefile:\n                        if GenFdsGlobalVariable.CopyList == []:\n                            GenFdsGlobalVariable.CopyList = [(File, FileBeforeStrip)]\n                        else:\n                            GenFdsGlobalVariable.CopyList.append((File, FileBeforeStrip))\n                    elif not os.path.exists(FileBeforeStrip) or os.path.getmtime(File) > os.path.getmtime(FileBeforeStrip):\n                        CopyLongFilePath(File, FileBeforeStrip)\n                    StrippedFile = os.path.join(OutputPath, ModuleName + '.stripped')\n                    GenFdsGlobalVariable.GenerateFirmwareImage(StrippedFile, [File], Strip=True, IsMakefile=IsMakefile)\n                    File = StrippedFile\n                'For TE Section call GenFw to generate TE image'\n                if SectionType == BINARY_FILE_TYPE_TE:\n                    TeFile = os.path.join(OutputPath, ModuleName + 'Te.raw')\n                    GenFdsGlobalVariable.GenerateFirmwareImage(TeFile, [File], Type='te', IsMakefile=IsMakefile)\n                    File = TeFile\n                'Call GenSection'\n                GenFdsGlobalVariable.GenerateSection(OutputFile, [File], Section.Section.SectionType.get(SectionType), IsMakefile=IsMakefile)\n                OutputFileList.append(OutputFile)\n    return (OutputFileList, Align)",
            "def GenSection(self, OutputPath, ModuleName, SecNum, KeyStringList, FfsInf=None, Dict=None, IsMakefile=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if self.FileName is not None and self.FileName.startswith('PCD('):\n        self.FileName = GenFdsGlobalVariable.GetPcdValue(self.FileName)\n    'Prepare the parameter of GenSection'\n    if FfsInf is not None:\n        InfFileName = FfsInf.InfFileName\n        SectionType = FfsInf.__ExtendMacro__(self.SectionType)\n        Filename = FfsInf.__ExtendMacro__(self.FileName)\n        BuildNum = FfsInf.__ExtendMacro__(self.BuildNum)\n        StringData = FfsInf.__ExtendMacro__(self.StringData)\n        ModuleNameStr = FfsInf.__ExtendMacro__('$(MODULE_NAME)')\n        NoStrip = True\n        if FfsInf.ModuleType in (SUP_MODULE_SEC, SUP_MODULE_PEI_CORE, SUP_MODULE_PEIM, SUP_MODULE_MM_CORE_STANDALONE) and SectionType in (BINARY_FILE_TYPE_TE, BINARY_FILE_TYPE_PE32):\n            if FfsInf.KeepReloc is not None:\n                NoStrip = FfsInf.KeepReloc\n            elif FfsInf.KeepRelocFromRule is not None:\n                NoStrip = FfsInf.KeepRelocFromRule\n            elif self.KeepReloc is not None:\n                NoStrip = self.KeepReloc\n            elif FfsInf.ShadowFromInfFile is not None:\n                NoStrip = FfsInf.ShadowFromInfFile\n    else:\n        EdkLogger.error('GenFds', GENFDS_ERROR, 'Module %s apply rule for None!' % ModuleName)\n    'If the file name was pointed out, add it in FileList'\n    FileList = []\n    if Dict is None:\n        Dict = {}\n    if Filename is not None:\n        Filename = GenFdsGlobalVariable.MacroExtend(Filename, Dict)\n        if os.path.isabs(Filename):\n            Filename = os.path.normpath(Filename)\n        else:\n            Filename = os.path.normpath(os.path.join(FfsInf.EfiOutputPath, Filename))\n        if not self.Optional:\n            FileList.append(Filename)\n        elif os.path.exists(Filename):\n            FileList.append(Filename)\n        elif IsMakefile:\n            SuffixMap = FfsInf.GetFinalTargetSuffixMap()\n            if '.depex' in SuffixMap:\n                FileList.append(Filename)\n    else:\n        (FileList, IsSect) = Section.Section.GetFileList(FfsInf, self.FileType, self.FileExtension, Dict, IsMakefile=IsMakefile, SectionType=SectionType)\n        if IsSect:\n            return (FileList, self.Alignment)\n    Index = 0\n    Align = self.Alignment\n    \" If Section type is 'VERSION'\"\n    OutputFileList = []\n    if SectionType == 'VERSION':\n        InfOverrideVerString = False\n        if FfsInf.Version is not None:\n            BuildNum = FfsInf.Version\n            InfOverrideVerString = True\n        if InfOverrideVerString:\n            if BuildNum is not None and BuildNum != '':\n                BuildNumTuple = ('-j', BuildNum)\n            else:\n                BuildNumTuple = tuple()\n            Num = SecNum\n            OutputFile = os.path.join(OutputPath, ModuleName + SUP_MODULE_SEC + str(Num) + SectionSuffix.get(SectionType))\n            GenFdsGlobalVariable.GenerateSection(OutputFile, [], 'EFI_SECTION_VERSION', Ver=BuildNum, IsMakefile=IsMakefile)\n            OutputFileList.append(OutputFile)\n        elif FileList != []:\n            for File in FileList:\n                Index = Index + 1\n                Num = '%s.%d' % (SecNum, Index)\n                OutputFile = os.path.join(OutputPath, ModuleName + SUP_MODULE_SEC + Num + SectionSuffix.get(SectionType))\n                f = open(File, 'r')\n                VerString = f.read()\n                f.close()\n                BuildNum = VerString\n                if BuildNum is not None and BuildNum != '':\n                    BuildNumTuple = ('-j', BuildNum)\n                GenFdsGlobalVariable.GenerateSection(OutputFile, [], 'EFI_SECTION_VERSION', Ver=BuildNum, IsMakefile=IsMakefile)\n                OutputFileList.append(OutputFile)\n        else:\n            BuildNum = StringData\n            if BuildNum is not None and BuildNum != '':\n                BuildNumTuple = ('-j', BuildNum)\n            else:\n                BuildNumTuple = tuple()\n            BuildNumString = ' ' + ' '.join(BuildNumTuple)\n            if BuildNumString == '':\n                if self.Optional == True:\n                    GenFdsGlobalVariable.VerboseLogger(\"Optional Section don't exist!\")\n                    return ([], None)\n                else:\n                    EdkLogger.error('GenFds', GENFDS_ERROR, 'File: %s miss Version Section value' % InfFileName)\n            Num = SecNum\n            OutputFile = os.path.join(OutputPath, ModuleName + SUP_MODULE_SEC + str(Num) + SectionSuffix.get(SectionType))\n            GenFdsGlobalVariable.GenerateSection(OutputFile, [], 'EFI_SECTION_VERSION', Ver=BuildNum, IsMakefile=IsMakefile)\n            OutputFileList.append(OutputFile)\n    elif SectionType == BINARY_FILE_TYPE_UI:\n        InfOverrideUiString = False\n        if FfsInf.Ui is not None:\n            StringData = FfsInf.Ui\n            InfOverrideUiString = True\n        if InfOverrideUiString:\n            Num = SecNum\n            if IsMakefile and StringData == ModuleNameStr:\n                StringData = '$(MODULE_NAME)'\n            OutputFile = os.path.join(OutputPath, ModuleName + SUP_MODULE_SEC + str(Num) + SectionSuffix.get(SectionType))\n            GenFdsGlobalVariable.GenerateSection(OutputFile, [], 'EFI_SECTION_USER_INTERFACE', Ui=StringData, IsMakefile=IsMakefile)\n            OutputFileList.append(OutputFile)\n        elif FileList != []:\n            for File in FileList:\n                Index = Index + 1\n                Num = '%s.%d' % (SecNum, Index)\n                OutputFile = os.path.join(OutputPath, ModuleName + SUP_MODULE_SEC + Num + SectionSuffix.get(SectionType))\n                f = open(File, 'r')\n                UiString = f.read()\n                f.close()\n                if IsMakefile and UiString == ModuleNameStr:\n                    UiString = '$(MODULE_NAME)'\n                GenFdsGlobalVariable.GenerateSection(OutputFile, [], 'EFI_SECTION_USER_INTERFACE', Ui=UiString, IsMakefile=IsMakefile)\n                OutputFileList.append(OutputFile)\n        else:\n            if StringData is not None and len(StringData) > 0:\n                UiTuple = ('-n', '\"' + StringData + '\"')\n            else:\n                UiTuple = tuple()\n                if self.Optional == True:\n                    GenFdsGlobalVariable.VerboseLogger(\"Optional Section don't exist!\")\n                    return ('', None)\n                else:\n                    EdkLogger.error('GenFds', GENFDS_ERROR, 'File: %s miss UI Section value' % InfFileName)\n            Num = SecNum\n            if IsMakefile and StringData == ModuleNameStr:\n                StringData = '$(MODULE_NAME)'\n            OutputFile = os.path.join(OutputPath, ModuleName + SUP_MODULE_SEC + str(Num) + SectionSuffix.get(SectionType))\n            GenFdsGlobalVariable.GenerateSection(OutputFile, [], 'EFI_SECTION_USER_INTERFACE', Ui=StringData, IsMakefile=IsMakefile)\n            OutputFileList.append(OutputFile)\n    elif SectionType == BINARY_FILE_TYPE_RAW:\n        'If File List is empty'\n        if FileList == []:\n            if self.Optional == True:\n                GenFdsGlobalVariable.VerboseLogger(\"Optional Section don't exist!\")\n                return ([], None)\n            else:\n                EdkLogger.error('GenFds', GENFDS_ERROR, 'Output file for %s section could not be found for %s' % (SectionType, InfFileName))\n        elif len(FileList) > 1:\n            EdkLogger.error('GenFds', GENFDS_ERROR, 'Files suffixed with %s are not allowed to have more than one file in %s[Binaries] section' % (self.FileExtension, InfFileName))\n        else:\n            for File in FileList:\n                File = GenFdsGlobalVariable.MacroExtend(File, Dict)\n                OutputFileList.append(File)\n    else:\n        'If File List is empty'\n        if FileList == []:\n            if self.Optional == True:\n                GenFdsGlobalVariable.VerboseLogger(\"Optional Section don't exist!\")\n                return ([], None)\n            else:\n                EdkLogger.error('GenFds', GENFDS_ERROR, 'Output file for %s section could not be found for %s' % (SectionType, InfFileName))\n        else:\n            'Convert the File to Section file one by one '\n            for File in FileList:\n                ' Copy Map file to FFS output path '\n                Index = Index + 1\n                Num = '%s.%d' % (SecNum, Index)\n                OutputFile = os.path.join(OutputPath, ModuleName + SUP_MODULE_SEC + Num + SectionSuffix.get(SectionType))\n                File = GenFdsGlobalVariable.MacroExtend(File, Dict)\n                if self.Alignment == 'Auto' and (SectionType == BINARY_FILE_TYPE_PE32 or SectionType == BINARY_FILE_TYPE_TE):\n                    Align = '0'\n                if File[len(File) - 4:] == '.efi' and FfsInf.InfModule.BaseName == os.path.basename(File)[:-4]:\n                    MapFile = File.replace('.efi', '.map')\n                    CopyMapFile = os.path.join(OutputPath, ModuleName + '.map')\n                    if IsMakefile:\n                        if GenFdsGlobalVariable.CopyList == []:\n                            GenFdsGlobalVariable.CopyList = [(MapFile, CopyMapFile)]\n                        else:\n                            GenFdsGlobalVariable.CopyList.append((MapFile, CopyMapFile))\n                    elif os.path.exists(MapFile):\n                        if not os.path.exists(CopyMapFile) or os.path.getmtime(MapFile) > os.path.getmtime(CopyMapFile):\n                            CopyLongFilePath(MapFile, CopyMapFile)\n                if not NoStrip:\n                    FileBeforeStrip = os.path.join(OutputPath, ModuleName + '.efi')\n                    if IsMakefile:\n                        if GenFdsGlobalVariable.CopyList == []:\n                            GenFdsGlobalVariable.CopyList = [(File, FileBeforeStrip)]\n                        else:\n                            GenFdsGlobalVariable.CopyList.append((File, FileBeforeStrip))\n                    elif not os.path.exists(FileBeforeStrip) or os.path.getmtime(File) > os.path.getmtime(FileBeforeStrip):\n                        CopyLongFilePath(File, FileBeforeStrip)\n                    StrippedFile = os.path.join(OutputPath, ModuleName + '.stripped')\n                    GenFdsGlobalVariable.GenerateFirmwareImage(StrippedFile, [File], Strip=True, IsMakefile=IsMakefile)\n                    File = StrippedFile\n                'For TE Section call GenFw to generate TE image'\n                if SectionType == BINARY_FILE_TYPE_TE:\n                    TeFile = os.path.join(OutputPath, ModuleName + 'Te.raw')\n                    GenFdsGlobalVariable.GenerateFirmwareImage(TeFile, [File], Type='te', IsMakefile=IsMakefile)\n                    File = TeFile\n                'Call GenSection'\n                GenFdsGlobalVariable.GenerateSection(OutputFile, [File], Section.Section.SectionType.get(SectionType), IsMakefile=IsMakefile)\n                OutputFileList.append(OutputFile)\n    return (OutputFileList, Align)",
            "def GenSection(self, OutputPath, ModuleName, SecNum, KeyStringList, FfsInf=None, Dict=None, IsMakefile=False):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if self.FileName is not None and self.FileName.startswith('PCD('):\n        self.FileName = GenFdsGlobalVariable.GetPcdValue(self.FileName)\n    'Prepare the parameter of GenSection'\n    if FfsInf is not None:\n        InfFileName = FfsInf.InfFileName\n        SectionType = FfsInf.__ExtendMacro__(self.SectionType)\n        Filename = FfsInf.__ExtendMacro__(self.FileName)\n        BuildNum = FfsInf.__ExtendMacro__(self.BuildNum)\n        StringData = FfsInf.__ExtendMacro__(self.StringData)\n        ModuleNameStr = FfsInf.__ExtendMacro__('$(MODULE_NAME)')\n        NoStrip = True\n        if FfsInf.ModuleType in (SUP_MODULE_SEC, SUP_MODULE_PEI_CORE, SUP_MODULE_PEIM, SUP_MODULE_MM_CORE_STANDALONE) and SectionType in (BINARY_FILE_TYPE_TE, BINARY_FILE_TYPE_PE32):\n            if FfsInf.KeepReloc is not None:\n                NoStrip = FfsInf.KeepReloc\n            elif FfsInf.KeepRelocFromRule is not None:\n                NoStrip = FfsInf.KeepRelocFromRule\n            elif self.KeepReloc is not None:\n                NoStrip = self.KeepReloc\n            elif FfsInf.ShadowFromInfFile is not None:\n                NoStrip = FfsInf.ShadowFromInfFile\n    else:\n        EdkLogger.error('GenFds', GENFDS_ERROR, 'Module %s apply rule for None!' % ModuleName)\n    'If the file name was pointed out, add it in FileList'\n    FileList = []\n    if Dict is None:\n        Dict = {}\n    if Filename is not None:\n        Filename = GenFdsGlobalVariable.MacroExtend(Filename, Dict)\n        if os.path.isabs(Filename):\n            Filename = os.path.normpath(Filename)\n        else:\n            Filename = os.path.normpath(os.path.join(FfsInf.EfiOutputPath, Filename))\n        if not self.Optional:\n            FileList.append(Filename)\n        elif os.path.exists(Filename):\n            FileList.append(Filename)\n        elif IsMakefile:\n            SuffixMap = FfsInf.GetFinalTargetSuffixMap()\n            if '.depex' in SuffixMap:\n                FileList.append(Filename)\n    else:\n        (FileList, IsSect) = Section.Section.GetFileList(FfsInf, self.FileType, self.FileExtension, Dict, IsMakefile=IsMakefile, SectionType=SectionType)\n        if IsSect:\n            return (FileList, self.Alignment)\n    Index = 0\n    Align = self.Alignment\n    \" If Section type is 'VERSION'\"\n    OutputFileList = []\n    if SectionType == 'VERSION':\n        InfOverrideVerString = False\n        if FfsInf.Version is not None:\n            BuildNum = FfsInf.Version\n            InfOverrideVerString = True\n        if InfOverrideVerString:\n            if BuildNum is not None and BuildNum != '':\n                BuildNumTuple = ('-j', BuildNum)\n            else:\n                BuildNumTuple = tuple()\n            Num = SecNum\n            OutputFile = os.path.join(OutputPath, ModuleName + SUP_MODULE_SEC + str(Num) + SectionSuffix.get(SectionType))\n            GenFdsGlobalVariable.GenerateSection(OutputFile, [], 'EFI_SECTION_VERSION', Ver=BuildNum, IsMakefile=IsMakefile)\n            OutputFileList.append(OutputFile)\n        elif FileList != []:\n            for File in FileList:\n                Index = Index + 1\n                Num = '%s.%d' % (SecNum, Index)\n                OutputFile = os.path.join(OutputPath, ModuleName + SUP_MODULE_SEC + Num + SectionSuffix.get(SectionType))\n                f = open(File, 'r')\n                VerString = f.read()\n                f.close()\n                BuildNum = VerString\n                if BuildNum is not None and BuildNum != '':\n                    BuildNumTuple = ('-j', BuildNum)\n                GenFdsGlobalVariable.GenerateSection(OutputFile, [], 'EFI_SECTION_VERSION', Ver=BuildNum, IsMakefile=IsMakefile)\n                OutputFileList.append(OutputFile)\n        else:\n            BuildNum = StringData\n            if BuildNum is not None and BuildNum != '':\n                BuildNumTuple = ('-j', BuildNum)\n            else:\n                BuildNumTuple = tuple()\n            BuildNumString = ' ' + ' '.join(BuildNumTuple)\n            if BuildNumString == '':\n                if self.Optional == True:\n                    GenFdsGlobalVariable.VerboseLogger(\"Optional Section don't exist!\")\n                    return ([], None)\n                else:\n                    EdkLogger.error('GenFds', GENFDS_ERROR, 'File: %s miss Version Section value' % InfFileName)\n            Num = SecNum\n            OutputFile = os.path.join(OutputPath, ModuleName + SUP_MODULE_SEC + str(Num) + SectionSuffix.get(SectionType))\n            GenFdsGlobalVariable.GenerateSection(OutputFile, [], 'EFI_SECTION_VERSION', Ver=BuildNum, IsMakefile=IsMakefile)\n            OutputFileList.append(OutputFile)\n    elif SectionType == BINARY_FILE_TYPE_UI:\n        InfOverrideUiString = False\n        if FfsInf.Ui is not None:\n            StringData = FfsInf.Ui\n            InfOverrideUiString = True\n        if InfOverrideUiString:\n            Num = SecNum\n            if IsMakefile and StringData == ModuleNameStr:\n                StringData = '$(MODULE_NAME)'\n            OutputFile = os.path.join(OutputPath, ModuleName + SUP_MODULE_SEC + str(Num) + SectionSuffix.get(SectionType))\n            GenFdsGlobalVariable.GenerateSection(OutputFile, [], 'EFI_SECTION_USER_INTERFACE', Ui=StringData, IsMakefile=IsMakefile)\n            OutputFileList.append(OutputFile)\n        elif FileList != []:\n            for File in FileList:\n                Index = Index + 1\n                Num = '%s.%d' % (SecNum, Index)\n                OutputFile = os.path.join(OutputPath, ModuleName + SUP_MODULE_SEC + Num + SectionSuffix.get(SectionType))\n                f = open(File, 'r')\n                UiString = f.read()\n                f.close()\n                if IsMakefile and UiString == ModuleNameStr:\n                    UiString = '$(MODULE_NAME)'\n                GenFdsGlobalVariable.GenerateSection(OutputFile, [], 'EFI_SECTION_USER_INTERFACE', Ui=UiString, IsMakefile=IsMakefile)\n                OutputFileList.append(OutputFile)\n        else:\n            if StringData is not None and len(StringData) > 0:\n                UiTuple = ('-n', '\"' + StringData + '\"')\n            else:\n                UiTuple = tuple()\n                if self.Optional == True:\n                    GenFdsGlobalVariable.VerboseLogger(\"Optional Section don't exist!\")\n                    return ('', None)\n                else:\n                    EdkLogger.error('GenFds', GENFDS_ERROR, 'File: %s miss UI Section value' % InfFileName)\n            Num = SecNum\n            if IsMakefile and StringData == ModuleNameStr:\n                StringData = '$(MODULE_NAME)'\n            OutputFile = os.path.join(OutputPath, ModuleName + SUP_MODULE_SEC + str(Num) + SectionSuffix.get(SectionType))\n            GenFdsGlobalVariable.GenerateSection(OutputFile, [], 'EFI_SECTION_USER_INTERFACE', Ui=StringData, IsMakefile=IsMakefile)\n            OutputFileList.append(OutputFile)\n    elif SectionType == BINARY_FILE_TYPE_RAW:\n        'If File List is empty'\n        if FileList == []:\n            if self.Optional == True:\n                GenFdsGlobalVariable.VerboseLogger(\"Optional Section don't exist!\")\n                return ([], None)\n            else:\n                EdkLogger.error('GenFds', GENFDS_ERROR, 'Output file for %s section could not be found for %s' % (SectionType, InfFileName))\n        elif len(FileList) > 1:\n            EdkLogger.error('GenFds', GENFDS_ERROR, 'Files suffixed with %s are not allowed to have more than one file in %s[Binaries] section' % (self.FileExtension, InfFileName))\n        else:\n            for File in FileList:\n                File = GenFdsGlobalVariable.MacroExtend(File, Dict)\n                OutputFileList.append(File)\n    else:\n        'If File List is empty'\n        if FileList == []:\n            if self.Optional == True:\n                GenFdsGlobalVariable.VerboseLogger(\"Optional Section don't exist!\")\n                return ([], None)\n            else:\n                EdkLogger.error('GenFds', GENFDS_ERROR, 'Output file for %s section could not be found for %s' % (SectionType, InfFileName))\n        else:\n            'Convert the File to Section file one by one '\n            for File in FileList:\n                ' Copy Map file to FFS output path '\n                Index = Index + 1\n                Num = '%s.%d' % (SecNum, Index)\n                OutputFile = os.path.join(OutputPath, ModuleName + SUP_MODULE_SEC + Num + SectionSuffix.get(SectionType))\n                File = GenFdsGlobalVariable.MacroExtend(File, Dict)\n                if self.Alignment == 'Auto' and (SectionType == BINARY_FILE_TYPE_PE32 or SectionType == BINARY_FILE_TYPE_TE):\n                    Align = '0'\n                if File[len(File) - 4:] == '.efi' and FfsInf.InfModule.BaseName == os.path.basename(File)[:-4]:\n                    MapFile = File.replace('.efi', '.map')\n                    CopyMapFile = os.path.join(OutputPath, ModuleName + '.map')\n                    if IsMakefile:\n                        if GenFdsGlobalVariable.CopyList == []:\n                            GenFdsGlobalVariable.CopyList = [(MapFile, CopyMapFile)]\n                        else:\n                            GenFdsGlobalVariable.CopyList.append((MapFile, CopyMapFile))\n                    elif os.path.exists(MapFile):\n                        if not os.path.exists(CopyMapFile) or os.path.getmtime(MapFile) > os.path.getmtime(CopyMapFile):\n                            CopyLongFilePath(MapFile, CopyMapFile)\n                if not NoStrip:\n                    FileBeforeStrip = os.path.join(OutputPath, ModuleName + '.efi')\n                    if IsMakefile:\n                        if GenFdsGlobalVariable.CopyList == []:\n                            GenFdsGlobalVariable.CopyList = [(File, FileBeforeStrip)]\n                        else:\n                            GenFdsGlobalVariable.CopyList.append((File, FileBeforeStrip))\n                    elif not os.path.exists(FileBeforeStrip) or os.path.getmtime(File) > os.path.getmtime(FileBeforeStrip):\n                        CopyLongFilePath(File, FileBeforeStrip)\n                    StrippedFile = os.path.join(OutputPath, ModuleName + '.stripped')\n                    GenFdsGlobalVariable.GenerateFirmwareImage(StrippedFile, [File], Strip=True, IsMakefile=IsMakefile)\n                    File = StrippedFile\n                'For TE Section call GenFw to generate TE image'\n                if SectionType == BINARY_FILE_TYPE_TE:\n                    TeFile = os.path.join(OutputPath, ModuleName + 'Te.raw')\n                    GenFdsGlobalVariable.GenerateFirmwareImage(TeFile, [File], Type='te', IsMakefile=IsMakefile)\n                    File = TeFile\n                'Call GenSection'\n                GenFdsGlobalVariable.GenerateSection(OutputFile, [File], Section.Section.SectionType.get(SectionType), IsMakefile=IsMakefile)\n                OutputFileList.append(OutputFile)\n    return (OutputFileList, Align)"
        ]
    }
]
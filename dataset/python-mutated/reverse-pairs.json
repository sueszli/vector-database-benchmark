[
    {
        "func_name": "merge",
        "original": "def merge(nums, start, mid, end):\n    r = mid + 1\n    tmp = []\n    for i in xrange(start, mid + 1):\n        while r <= end and nums[i] > nums[r]:\n            tmp.append(nums[r])\n            r += 1\n        tmp.append(nums[i])\n    nums[start:start + len(tmp)] = tmp",
        "mutated": [
            "def merge(nums, start, mid, end):\n    if False:\n        i = 10\n    r = mid + 1\n    tmp = []\n    for i in xrange(start, mid + 1):\n        while r <= end and nums[i] > nums[r]:\n            tmp.append(nums[r])\n            r += 1\n        tmp.append(nums[i])\n    nums[start:start + len(tmp)] = tmp",
            "def merge(nums, start, mid, end):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    r = mid + 1\n    tmp = []\n    for i in xrange(start, mid + 1):\n        while r <= end and nums[i] > nums[r]:\n            tmp.append(nums[r])\n            r += 1\n        tmp.append(nums[i])\n    nums[start:start + len(tmp)] = tmp",
            "def merge(nums, start, mid, end):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    r = mid + 1\n    tmp = []\n    for i in xrange(start, mid + 1):\n        while r <= end and nums[i] > nums[r]:\n            tmp.append(nums[r])\n            r += 1\n        tmp.append(nums[i])\n    nums[start:start + len(tmp)] = tmp",
            "def merge(nums, start, mid, end):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    r = mid + 1\n    tmp = []\n    for i in xrange(start, mid + 1):\n        while r <= end and nums[i] > nums[r]:\n            tmp.append(nums[r])\n            r += 1\n        tmp.append(nums[i])\n    nums[start:start + len(tmp)] = tmp",
            "def merge(nums, start, mid, end):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    r = mid + 1\n    tmp = []\n    for i in xrange(start, mid + 1):\n        while r <= end and nums[i] > nums[r]:\n            tmp.append(nums[r])\n            r += 1\n        tmp.append(nums[i])\n    nums[start:start + len(tmp)] = tmp"
        ]
    },
    {
        "func_name": "countAndMergeSort",
        "original": "def countAndMergeSort(nums, start, end):\n    if end - start <= 0:\n        return 0\n    mid = start + (end - start) / 2\n    count = countAndMergeSort(nums, start, mid) + countAndMergeSort(nums, mid + 1, end)\n    r = mid + 1\n    for i in xrange(start, mid + 1):\n        while r <= end and nums[i] > nums[r] * 2:\n            r += 1\n        count += r - (mid + 1)\n    merge(nums, start, mid, end)\n    return count",
        "mutated": [
            "def countAndMergeSort(nums, start, end):\n    if False:\n        i = 10\n    if end - start <= 0:\n        return 0\n    mid = start + (end - start) / 2\n    count = countAndMergeSort(nums, start, mid) + countAndMergeSort(nums, mid + 1, end)\n    r = mid + 1\n    for i in xrange(start, mid + 1):\n        while r <= end and nums[i] > nums[r] * 2:\n            r += 1\n        count += r - (mid + 1)\n    merge(nums, start, mid, end)\n    return count",
            "def countAndMergeSort(nums, start, end):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if end - start <= 0:\n        return 0\n    mid = start + (end - start) / 2\n    count = countAndMergeSort(nums, start, mid) + countAndMergeSort(nums, mid + 1, end)\n    r = mid + 1\n    for i in xrange(start, mid + 1):\n        while r <= end and nums[i] > nums[r] * 2:\n            r += 1\n        count += r - (mid + 1)\n    merge(nums, start, mid, end)\n    return count",
            "def countAndMergeSort(nums, start, end):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if end - start <= 0:\n        return 0\n    mid = start + (end - start) / 2\n    count = countAndMergeSort(nums, start, mid) + countAndMergeSort(nums, mid + 1, end)\n    r = mid + 1\n    for i in xrange(start, mid + 1):\n        while r <= end and nums[i] > nums[r] * 2:\n            r += 1\n        count += r - (mid + 1)\n    merge(nums, start, mid, end)\n    return count",
            "def countAndMergeSort(nums, start, end):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if end - start <= 0:\n        return 0\n    mid = start + (end - start) / 2\n    count = countAndMergeSort(nums, start, mid) + countAndMergeSort(nums, mid + 1, end)\n    r = mid + 1\n    for i in xrange(start, mid + 1):\n        while r <= end and nums[i] > nums[r] * 2:\n            r += 1\n        count += r - (mid + 1)\n    merge(nums, start, mid, end)\n    return count",
            "def countAndMergeSort(nums, start, end):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if end - start <= 0:\n        return 0\n    mid = start + (end - start) / 2\n    count = countAndMergeSort(nums, start, mid) + countAndMergeSort(nums, mid + 1, end)\n    r = mid + 1\n    for i in xrange(start, mid + 1):\n        while r <= end and nums[i] > nums[r] * 2:\n            r += 1\n        count += r - (mid + 1)\n    merge(nums, start, mid, end)\n    return count"
        ]
    },
    {
        "func_name": "reversePairs",
        "original": "def reversePairs(self, nums):\n    \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n\n    def merge(nums, start, mid, end):\n        r = mid + 1\n        tmp = []\n        for i in xrange(start, mid + 1):\n            while r <= end and nums[i] > nums[r]:\n                tmp.append(nums[r])\n                r += 1\n            tmp.append(nums[i])\n        nums[start:start + len(tmp)] = tmp\n\n    def countAndMergeSort(nums, start, end):\n        if end - start <= 0:\n            return 0\n        mid = start + (end - start) / 2\n        count = countAndMergeSort(nums, start, mid) + countAndMergeSort(nums, mid + 1, end)\n        r = mid + 1\n        for i in xrange(start, mid + 1):\n            while r <= end and nums[i] > nums[r] * 2:\n                r += 1\n            count += r - (mid + 1)\n        merge(nums, start, mid, end)\n        return count\n    return countAndMergeSort(nums, 0, len(nums) - 1)",
        "mutated": [
            "def reversePairs(self, nums):\n    if False:\n        i = 10\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n\n    def merge(nums, start, mid, end):\n        r = mid + 1\n        tmp = []\n        for i in xrange(start, mid + 1):\n            while r <= end and nums[i] > nums[r]:\n                tmp.append(nums[r])\n                r += 1\n            tmp.append(nums[i])\n        nums[start:start + len(tmp)] = tmp\n\n    def countAndMergeSort(nums, start, end):\n        if end - start <= 0:\n            return 0\n        mid = start + (end - start) / 2\n        count = countAndMergeSort(nums, start, mid) + countAndMergeSort(nums, mid + 1, end)\n        r = mid + 1\n        for i in xrange(start, mid + 1):\n            while r <= end and nums[i] > nums[r] * 2:\n                r += 1\n            count += r - (mid + 1)\n        merge(nums, start, mid, end)\n        return count\n    return countAndMergeSort(nums, 0, len(nums) - 1)",
            "def reversePairs(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n\n    def merge(nums, start, mid, end):\n        r = mid + 1\n        tmp = []\n        for i in xrange(start, mid + 1):\n            while r <= end and nums[i] > nums[r]:\n                tmp.append(nums[r])\n                r += 1\n            tmp.append(nums[i])\n        nums[start:start + len(tmp)] = tmp\n\n    def countAndMergeSort(nums, start, end):\n        if end - start <= 0:\n            return 0\n        mid = start + (end - start) / 2\n        count = countAndMergeSort(nums, start, mid) + countAndMergeSort(nums, mid + 1, end)\n        r = mid + 1\n        for i in xrange(start, mid + 1):\n            while r <= end and nums[i] > nums[r] * 2:\n                r += 1\n            count += r - (mid + 1)\n        merge(nums, start, mid, end)\n        return count\n    return countAndMergeSort(nums, 0, len(nums) - 1)",
            "def reversePairs(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n\n    def merge(nums, start, mid, end):\n        r = mid + 1\n        tmp = []\n        for i in xrange(start, mid + 1):\n            while r <= end and nums[i] > nums[r]:\n                tmp.append(nums[r])\n                r += 1\n            tmp.append(nums[i])\n        nums[start:start + len(tmp)] = tmp\n\n    def countAndMergeSort(nums, start, end):\n        if end - start <= 0:\n            return 0\n        mid = start + (end - start) / 2\n        count = countAndMergeSort(nums, start, mid) + countAndMergeSort(nums, mid + 1, end)\n        r = mid + 1\n        for i in xrange(start, mid + 1):\n            while r <= end and nums[i] > nums[r] * 2:\n                r += 1\n            count += r - (mid + 1)\n        merge(nums, start, mid, end)\n        return count\n    return countAndMergeSort(nums, 0, len(nums) - 1)",
            "def reversePairs(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n\n    def merge(nums, start, mid, end):\n        r = mid + 1\n        tmp = []\n        for i in xrange(start, mid + 1):\n            while r <= end and nums[i] > nums[r]:\n                tmp.append(nums[r])\n                r += 1\n            tmp.append(nums[i])\n        nums[start:start + len(tmp)] = tmp\n\n    def countAndMergeSort(nums, start, end):\n        if end - start <= 0:\n            return 0\n        mid = start + (end - start) / 2\n        count = countAndMergeSort(nums, start, mid) + countAndMergeSort(nums, mid + 1, end)\n        r = mid + 1\n        for i in xrange(start, mid + 1):\n            while r <= end and nums[i] > nums[r] * 2:\n                r += 1\n            count += r - (mid + 1)\n        merge(nums, start, mid, end)\n        return count\n    return countAndMergeSort(nums, 0, len(nums) - 1)",
            "def reversePairs(self, nums):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type nums: List[int]\\n        :rtype: int\\n        '\n\n    def merge(nums, start, mid, end):\n        r = mid + 1\n        tmp = []\n        for i in xrange(start, mid + 1):\n            while r <= end and nums[i] > nums[r]:\n                tmp.append(nums[r])\n                r += 1\n            tmp.append(nums[i])\n        nums[start:start + len(tmp)] = tmp\n\n    def countAndMergeSort(nums, start, end):\n        if end - start <= 0:\n            return 0\n        mid = start + (end - start) / 2\n        count = countAndMergeSort(nums, start, mid) + countAndMergeSort(nums, mid + 1, end)\n        r = mid + 1\n        for i in xrange(start, mid + 1):\n            while r <= end and nums[i] > nums[r] * 2:\n                r += 1\n            count += r - (mid + 1)\n        merge(nums, start, mid, end)\n        return count\n    return countAndMergeSort(nums, 0, len(nums) - 1)"
        ]
    }
]
[
    {
        "func_name": "isPathCrossing",
        "original": "def isPathCrossing(self, path):\n    \"\"\"\n        :type path: str\n        :rtype: bool\n        \"\"\"\n    x = y = 0\n    lookup = {(0, 0)}\n    for c in path:\n        if c == 'E':\n            x += 1\n        elif c == 'W':\n            x -= 1\n        elif c == 'N':\n            y += 1\n        elif c == 'S':\n            y -= 1\n        if (x, y) in lookup:\n            return True\n        lookup.add((x, y))\n    return False",
        "mutated": [
            "def isPathCrossing(self, path):\n    if False:\n        i = 10\n    '\\n        :type path: str\\n        :rtype: bool\\n        '\n    x = y = 0\n    lookup = {(0, 0)}\n    for c in path:\n        if c == 'E':\n            x += 1\n        elif c == 'W':\n            x -= 1\n        elif c == 'N':\n            y += 1\n        elif c == 'S':\n            y -= 1\n        if (x, y) in lookup:\n            return True\n        lookup.add((x, y))\n    return False",
            "def isPathCrossing(self, path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type path: str\\n        :rtype: bool\\n        '\n    x = y = 0\n    lookup = {(0, 0)}\n    for c in path:\n        if c == 'E':\n            x += 1\n        elif c == 'W':\n            x -= 1\n        elif c == 'N':\n            y += 1\n        elif c == 'S':\n            y -= 1\n        if (x, y) in lookup:\n            return True\n        lookup.add((x, y))\n    return False",
            "def isPathCrossing(self, path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type path: str\\n        :rtype: bool\\n        '\n    x = y = 0\n    lookup = {(0, 0)}\n    for c in path:\n        if c == 'E':\n            x += 1\n        elif c == 'W':\n            x -= 1\n        elif c == 'N':\n            y += 1\n        elif c == 'S':\n            y -= 1\n        if (x, y) in lookup:\n            return True\n        lookup.add((x, y))\n    return False",
            "def isPathCrossing(self, path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type path: str\\n        :rtype: bool\\n        '\n    x = y = 0\n    lookup = {(0, 0)}\n    for c in path:\n        if c == 'E':\n            x += 1\n        elif c == 'W':\n            x -= 1\n        elif c == 'N':\n            y += 1\n        elif c == 'S':\n            y -= 1\n        if (x, y) in lookup:\n            return True\n        lookup.add((x, y))\n    return False",
            "def isPathCrossing(self, path):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type path: str\\n        :rtype: bool\\n        '\n    x = y = 0\n    lookup = {(0, 0)}\n    for c in path:\n        if c == 'E':\n            x += 1\n        elif c == 'W':\n            x -= 1\n        elif c == 'N':\n            y += 1\n        elif c == 'S':\n            y -= 1\n        if (x, y) in lookup:\n            return True\n        lookup.add((x, y))\n    return False"
        ]
    }
]
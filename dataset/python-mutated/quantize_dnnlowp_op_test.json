[
    {
        "func_name": "test_dnnlowp_quantize",
        "original": "@given(size=st.integers(1024, 2048), is_empty=st.booleans(), absorb=st.booleans(), **hu.gcs_cpu_only)\n@settings(max_examples=10, deadline=None)\ndef test_dnnlowp_quantize(self, size, is_empty, absorb, gc, dc):\n    if is_empty:\n        size = 0\n    min_ = -10.0\n    max_ = 20.0\n    X = (np.random.rand(size) * (max_ - min_) + min_).astype(np.float32)\n    X_min = 0 if X.size == 0 else X.min()\n    X_max = 1 if X.size == 0 else X.max()\n    X_scale = (max(X_max, 0) - min(X_min, 0)) / 255\n    X_zero = np.round(-X_min / X_scale)\n    op_type_list = ['Quantize', 'Int8Quantize']\n    engine = 'DNNLOWP'\n    for op_type in op_type_list:\n        net = core.Net('test_net')\n        quantize = core.CreateOperator(op_type, ['X'], ['X_q'], engine=engine, device_option=gc)\n        net.Proto().op.extend([quantize])\n        dnnlowp_pybind11.CreateInt8QuantParamsBlob('quant_param', float(X_scale), int(X_zero))\n        quantize_2 = core.CreateOperator(op_type, ['X', 'quant_param'], ['X_q_2'], engine=engine, device_option=gc)\n        net.Proto().op.extend([quantize_2])\n        if absorb:\n            net_str = dnnlowp_pybind11.freeze_quantization_params(net.Proto().SerializeToString())\n            net.Proto().ParseFromString(net_str)\n        workspace.FeedBlob('X', X, device_option=gc)\n        workspace.RunNetOnce(net)\n        X_q = workspace.FetchInt8Blob('X_q')[0]\n        X_q_2 = workspace.FetchInt8Blob('X_q_2')[0]\n        X_dq = X_scale * (X_q - X_zero)\n        X_dq_2 = X_scale * (X_q_2 - X_zero)\n        atol = X_scale / 1.9\n        np.testing.assert_allclose(X_dq, X, atol=atol, rtol=0)\n        np.testing.assert_allclose(X_dq_2, X, atol=atol, rtol=0)",
        "mutated": [
            "@given(size=st.integers(1024, 2048), is_empty=st.booleans(), absorb=st.booleans(), **hu.gcs_cpu_only)\n@settings(max_examples=10, deadline=None)\ndef test_dnnlowp_quantize(self, size, is_empty, absorb, gc, dc):\n    if False:\n        i = 10\n    if is_empty:\n        size = 0\n    min_ = -10.0\n    max_ = 20.0\n    X = (np.random.rand(size) * (max_ - min_) + min_).astype(np.float32)\n    X_min = 0 if X.size == 0 else X.min()\n    X_max = 1 if X.size == 0 else X.max()\n    X_scale = (max(X_max, 0) - min(X_min, 0)) / 255\n    X_zero = np.round(-X_min / X_scale)\n    op_type_list = ['Quantize', 'Int8Quantize']\n    engine = 'DNNLOWP'\n    for op_type in op_type_list:\n        net = core.Net('test_net')\n        quantize = core.CreateOperator(op_type, ['X'], ['X_q'], engine=engine, device_option=gc)\n        net.Proto().op.extend([quantize])\n        dnnlowp_pybind11.CreateInt8QuantParamsBlob('quant_param', float(X_scale), int(X_zero))\n        quantize_2 = core.CreateOperator(op_type, ['X', 'quant_param'], ['X_q_2'], engine=engine, device_option=gc)\n        net.Proto().op.extend([quantize_2])\n        if absorb:\n            net_str = dnnlowp_pybind11.freeze_quantization_params(net.Proto().SerializeToString())\n            net.Proto().ParseFromString(net_str)\n        workspace.FeedBlob('X', X, device_option=gc)\n        workspace.RunNetOnce(net)\n        X_q = workspace.FetchInt8Blob('X_q')[0]\n        X_q_2 = workspace.FetchInt8Blob('X_q_2')[0]\n        X_dq = X_scale * (X_q - X_zero)\n        X_dq_2 = X_scale * (X_q_2 - X_zero)\n        atol = X_scale / 1.9\n        np.testing.assert_allclose(X_dq, X, atol=atol, rtol=0)\n        np.testing.assert_allclose(X_dq_2, X, atol=atol, rtol=0)",
            "@given(size=st.integers(1024, 2048), is_empty=st.booleans(), absorb=st.booleans(), **hu.gcs_cpu_only)\n@settings(max_examples=10, deadline=None)\ndef test_dnnlowp_quantize(self, size, is_empty, absorb, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    if is_empty:\n        size = 0\n    min_ = -10.0\n    max_ = 20.0\n    X = (np.random.rand(size) * (max_ - min_) + min_).astype(np.float32)\n    X_min = 0 if X.size == 0 else X.min()\n    X_max = 1 if X.size == 0 else X.max()\n    X_scale = (max(X_max, 0) - min(X_min, 0)) / 255\n    X_zero = np.round(-X_min / X_scale)\n    op_type_list = ['Quantize', 'Int8Quantize']\n    engine = 'DNNLOWP'\n    for op_type in op_type_list:\n        net = core.Net('test_net')\n        quantize = core.CreateOperator(op_type, ['X'], ['X_q'], engine=engine, device_option=gc)\n        net.Proto().op.extend([quantize])\n        dnnlowp_pybind11.CreateInt8QuantParamsBlob('quant_param', float(X_scale), int(X_zero))\n        quantize_2 = core.CreateOperator(op_type, ['X', 'quant_param'], ['X_q_2'], engine=engine, device_option=gc)\n        net.Proto().op.extend([quantize_2])\n        if absorb:\n            net_str = dnnlowp_pybind11.freeze_quantization_params(net.Proto().SerializeToString())\n            net.Proto().ParseFromString(net_str)\n        workspace.FeedBlob('X', X, device_option=gc)\n        workspace.RunNetOnce(net)\n        X_q = workspace.FetchInt8Blob('X_q')[0]\n        X_q_2 = workspace.FetchInt8Blob('X_q_2')[0]\n        X_dq = X_scale * (X_q - X_zero)\n        X_dq_2 = X_scale * (X_q_2 - X_zero)\n        atol = X_scale / 1.9\n        np.testing.assert_allclose(X_dq, X, atol=atol, rtol=0)\n        np.testing.assert_allclose(X_dq_2, X, atol=atol, rtol=0)",
            "@given(size=st.integers(1024, 2048), is_empty=st.booleans(), absorb=st.booleans(), **hu.gcs_cpu_only)\n@settings(max_examples=10, deadline=None)\ndef test_dnnlowp_quantize(self, size, is_empty, absorb, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    if is_empty:\n        size = 0\n    min_ = -10.0\n    max_ = 20.0\n    X = (np.random.rand(size) * (max_ - min_) + min_).astype(np.float32)\n    X_min = 0 if X.size == 0 else X.min()\n    X_max = 1 if X.size == 0 else X.max()\n    X_scale = (max(X_max, 0) - min(X_min, 0)) / 255\n    X_zero = np.round(-X_min / X_scale)\n    op_type_list = ['Quantize', 'Int8Quantize']\n    engine = 'DNNLOWP'\n    for op_type in op_type_list:\n        net = core.Net('test_net')\n        quantize = core.CreateOperator(op_type, ['X'], ['X_q'], engine=engine, device_option=gc)\n        net.Proto().op.extend([quantize])\n        dnnlowp_pybind11.CreateInt8QuantParamsBlob('quant_param', float(X_scale), int(X_zero))\n        quantize_2 = core.CreateOperator(op_type, ['X', 'quant_param'], ['X_q_2'], engine=engine, device_option=gc)\n        net.Proto().op.extend([quantize_2])\n        if absorb:\n            net_str = dnnlowp_pybind11.freeze_quantization_params(net.Proto().SerializeToString())\n            net.Proto().ParseFromString(net_str)\n        workspace.FeedBlob('X', X, device_option=gc)\n        workspace.RunNetOnce(net)\n        X_q = workspace.FetchInt8Blob('X_q')[0]\n        X_q_2 = workspace.FetchInt8Blob('X_q_2')[0]\n        X_dq = X_scale * (X_q - X_zero)\n        X_dq_2 = X_scale * (X_q_2 - X_zero)\n        atol = X_scale / 1.9\n        np.testing.assert_allclose(X_dq, X, atol=atol, rtol=0)\n        np.testing.assert_allclose(X_dq_2, X, atol=atol, rtol=0)",
            "@given(size=st.integers(1024, 2048), is_empty=st.booleans(), absorb=st.booleans(), **hu.gcs_cpu_only)\n@settings(max_examples=10, deadline=None)\ndef test_dnnlowp_quantize(self, size, is_empty, absorb, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    if is_empty:\n        size = 0\n    min_ = -10.0\n    max_ = 20.0\n    X = (np.random.rand(size) * (max_ - min_) + min_).astype(np.float32)\n    X_min = 0 if X.size == 0 else X.min()\n    X_max = 1 if X.size == 0 else X.max()\n    X_scale = (max(X_max, 0) - min(X_min, 0)) / 255\n    X_zero = np.round(-X_min / X_scale)\n    op_type_list = ['Quantize', 'Int8Quantize']\n    engine = 'DNNLOWP'\n    for op_type in op_type_list:\n        net = core.Net('test_net')\n        quantize = core.CreateOperator(op_type, ['X'], ['X_q'], engine=engine, device_option=gc)\n        net.Proto().op.extend([quantize])\n        dnnlowp_pybind11.CreateInt8QuantParamsBlob('quant_param', float(X_scale), int(X_zero))\n        quantize_2 = core.CreateOperator(op_type, ['X', 'quant_param'], ['X_q_2'], engine=engine, device_option=gc)\n        net.Proto().op.extend([quantize_2])\n        if absorb:\n            net_str = dnnlowp_pybind11.freeze_quantization_params(net.Proto().SerializeToString())\n            net.Proto().ParseFromString(net_str)\n        workspace.FeedBlob('X', X, device_option=gc)\n        workspace.RunNetOnce(net)\n        X_q = workspace.FetchInt8Blob('X_q')[0]\n        X_q_2 = workspace.FetchInt8Blob('X_q_2')[0]\n        X_dq = X_scale * (X_q - X_zero)\n        X_dq_2 = X_scale * (X_q_2 - X_zero)\n        atol = X_scale / 1.9\n        np.testing.assert_allclose(X_dq, X, atol=atol, rtol=0)\n        np.testing.assert_allclose(X_dq_2, X, atol=atol, rtol=0)",
            "@given(size=st.integers(1024, 2048), is_empty=st.booleans(), absorb=st.booleans(), **hu.gcs_cpu_only)\n@settings(max_examples=10, deadline=None)\ndef test_dnnlowp_quantize(self, size, is_empty, absorb, gc, dc):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    if is_empty:\n        size = 0\n    min_ = -10.0\n    max_ = 20.0\n    X = (np.random.rand(size) * (max_ - min_) + min_).astype(np.float32)\n    X_min = 0 if X.size == 0 else X.min()\n    X_max = 1 if X.size == 0 else X.max()\n    X_scale = (max(X_max, 0) - min(X_min, 0)) / 255\n    X_zero = np.round(-X_min / X_scale)\n    op_type_list = ['Quantize', 'Int8Quantize']\n    engine = 'DNNLOWP'\n    for op_type in op_type_list:\n        net = core.Net('test_net')\n        quantize = core.CreateOperator(op_type, ['X'], ['X_q'], engine=engine, device_option=gc)\n        net.Proto().op.extend([quantize])\n        dnnlowp_pybind11.CreateInt8QuantParamsBlob('quant_param', float(X_scale), int(X_zero))\n        quantize_2 = core.CreateOperator(op_type, ['X', 'quant_param'], ['X_q_2'], engine=engine, device_option=gc)\n        net.Proto().op.extend([quantize_2])\n        if absorb:\n            net_str = dnnlowp_pybind11.freeze_quantization_params(net.Proto().SerializeToString())\n            net.Proto().ParseFromString(net_str)\n        workspace.FeedBlob('X', X, device_option=gc)\n        workspace.RunNetOnce(net)\n        X_q = workspace.FetchInt8Blob('X_q')[0]\n        X_q_2 = workspace.FetchInt8Blob('X_q_2')[0]\n        X_dq = X_scale * (X_q - X_zero)\n        X_dq_2 = X_scale * (X_q_2 - X_zero)\n        atol = X_scale / 1.9\n        np.testing.assert_allclose(X_dq, X, atol=atol, rtol=0)\n        np.testing.assert_allclose(X_dq_2, X, atol=atol, rtol=0)"
        ]
    }
]
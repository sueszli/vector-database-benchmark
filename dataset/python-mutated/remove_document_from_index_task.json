[
    {
        "func_name": "remove_document_from_index_task",
        "original": "@shared_task(queue='dataset')\ndef remove_document_from_index_task(document_id: str):\n    \"\"\"\n    Async Remove document from index\n    :param document_id: document id\n\n    Usage: remove_document_from_index.delay(document_id)\n    \"\"\"\n    logging.info(click.style('Start remove document segments from index: {}'.format(document_id), fg='green'))\n    start_at = time.perf_counter()\n    document = db.session.query(Document).filter(Document.id == document_id).first()\n    if not document:\n        raise NotFound('Document not found')\n    if document.indexing_status != 'completed':\n        return\n    indexing_cache_key = 'document_{}_indexing'.format(document.id)\n    try:\n        dataset = document.dataset\n        if not dataset:\n            raise Exception('Document has no dataset')\n        vector_index = IndexBuilder.get_index(dataset, 'high_quality')\n        kw_index = IndexBuilder.get_index(dataset, 'economy')\n        if vector_index:\n            vector_index.delete_by_document_id(document.id)\n        segments = db.session.query(DocumentSegment).filter(DocumentSegment.document_id == document.id).all()\n        index_node_ids = [segment.index_node_id for segment in segments]\n        if index_node_ids:\n            kw_index.delete_by_ids(index_node_ids)\n        end_at = time.perf_counter()\n        logging.info(click.style('Document removed from index: {} latency: {}'.format(document.id, end_at - start_at), fg='green'))\n    except Exception:\n        logging.exception('remove document from index failed')\n        if not document.archived:\n            document.enabled = True\n            db.session.commit()\n    finally:\n        redis_client.delete(indexing_cache_key)",
        "mutated": [
            "@shared_task(queue='dataset')\ndef remove_document_from_index_task(document_id: str):\n    if False:\n        i = 10\n    '\\n    Async Remove document from index\\n    :param document_id: document id\\n\\n    Usage: remove_document_from_index.delay(document_id)\\n    '\n    logging.info(click.style('Start remove document segments from index: {}'.format(document_id), fg='green'))\n    start_at = time.perf_counter()\n    document = db.session.query(Document).filter(Document.id == document_id).first()\n    if not document:\n        raise NotFound('Document not found')\n    if document.indexing_status != 'completed':\n        return\n    indexing_cache_key = 'document_{}_indexing'.format(document.id)\n    try:\n        dataset = document.dataset\n        if not dataset:\n            raise Exception('Document has no dataset')\n        vector_index = IndexBuilder.get_index(dataset, 'high_quality')\n        kw_index = IndexBuilder.get_index(dataset, 'economy')\n        if vector_index:\n            vector_index.delete_by_document_id(document.id)\n        segments = db.session.query(DocumentSegment).filter(DocumentSegment.document_id == document.id).all()\n        index_node_ids = [segment.index_node_id for segment in segments]\n        if index_node_ids:\n            kw_index.delete_by_ids(index_node_ids)\n        end_at = time.perf_counter()\n        logging.info(click.style('Document removed from index: {} latency: {}'.format(document.id, end_at - start_at), fg='green'))\n    except Exception:\n        logging.exception('remove document from index failed')\n        if not document.archived:\n            document.enabled = True\n            db.session.commit()\n    finally:\n        redis_client.delete(indexing_cache_key)",
            "@shared_task(queue='dataset')\ndef remove_document_from_index_task(document_id: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n    Async Remove document from index\\n    :param document_id: document id\\n\\n    Usage: remove_document_from_index.delay(document_id)\\n    '\n    logging.info(click.style('Start remove document segments from index: {}'.format(document_id), fg='green'))\n    start_at = time.perf_counter()\n    document = db.session.query(Document).filter(Document.id == document_id).first()\n    if not document:\n        raise NotFound('Document not found')\n    if document.indexing_status != 'completed':\n        return\n    indexing_cache_key = 'document_{}_indexing'.format(document.id)\n    try:\n        dataset = document.dataset\n        if not dataset:\n            raise Exception('Document has no dataset')\n        vector_index = IndexBuilder.get_index(dataset, 'high_quality')\n        kw_index = IndexBuilder.get_index(dataset, 'economy')\n        if vector_index:\n            vector_index.delete_by_document_id(document.id)\n        segments = db.session.query(DocumentSegment).filter(DocumentSegment.document_id == document.id).all()\n        index_node_ids = [segment.index_node_id for segment in segments]\n        if index_node_ids:\n            kw_index.delete_by_ids(index_node_ids)\n        end_at = time.perf_counter()\n        logging.info(click.style('Document removed from index: {} latency: {}'.format(document.id, end_at - start_at), fg='green'))\n    except Exception:\n        logging.exception('remove document from index failed')\n        if not document.archived:\n            document.enabled = True\n            db.session.commit()\n    finally:\n        redis_client.delete(indexing_cache_key)",
            "@shared_task(queue='dataset')\ndef remove_document_from_index_task(document_id: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n    Async Remove document from index\\n    :param document_id: document id\\n\\n    Usage: remove_document_from_index.delay(document_id)\\n    '\n    logging.info(click.style('Start remove document segments from index: {}'.format(document_id), fg='green'))\n    start_at = time.perf_counter()\n    document = db.session.query(Document).filter(Document.id == document_id).first()\n    if not document:\n        raise NotFound('Document not found')\n    if document.indexing_status != 'completed':\n        return\n    indexing_cache_key = 'document_{}_indexing'.format(document.id)\n    try:\n        dataset = document.dataset\n        if not dataset:\n            raise Exception('Document has no dataset')\n        vector_index = IndexBuilder.get_index(dataset, 'high_quality')\n        kw_index = IndexBuilder.get_index(dataset, 'economy')\n        if vector_index:\n            vector_index.delete_by_document_id(document.id)\n        segments = db.session.query(DocumentSegment).filter(DocumentSegment.document_id == document.id).all()\n        index_node_ids = [segment.index_node_id for segment in segments]\n        if index_node_ids:\n            kw_index.delete_by_ids(index_node_ids)\n        end_at = time.perf_counter()\n        logging.info(click.style('Document removed from index: {} latency: {}'.format(document.id, end_at - start_at), fg='green'))\n    except Exception:\n        logging.exception('remove document from index failed')\n        if not document.archived:\n            document.enabled = True\n            db.session.commit()\n    finally:\n        redis_client.delete(indexing_cache_key)",
            "@shared_task(queue='dataset')\ndef remove_document_from_index_task(document_id: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n    Async Remove document from index\\n    :param document_id: document id\\n\\n    Usage: remove_document_from_index.delay(document_id)\\n    '\n    logging.info(click.style('Start remove document segments from index: {}'.format(document_id), fg='green'))\n    start_at = time.perf_counter()\n    document = db.session.query(Document).filter(Document.id == document_id).first()\n    if not document:\n        raise NotFound('Document not found')\n    if document.indexing_status != 'completed':\n        return\n    indexing_cache_key = 'document_{}_indexing'.format(document.id)\n    try:\n        dataset = document.dataset\n        if not dataset:\n            raise Exception('Document has no dataset')\n        vector_index = IndexBuilder.get_index(dataset, 'high_quality')\n        kw_index = IndexBuilder.get_index(dataset, 'economy')\n        if vector_index:\n            vector_index.delete_by_document_id(document.id)\n        segments = db.session.query(DocumentSegment).filter(DocumentSegment.document_id == document.id).all()\n        index_node_ids = [segment.index_node_id for segment in segments]\n        if index_node_ids:\n            kw_index.delete_by_ids(index_node_ids)\n        end_at = time.perf_counter()\n        logging.info(click.style('Document removed from index: {} latency: {}'.format(document.id, end_at - start_at), fg='green'))\n    except Exception:\n        logging.exception('remove document from index failed')\n        if not document.archived:\n            document.enabled = True\n            db.session.commit()\n    finally:\n        redis_client.delete(indexing_cache_key)",
            "@shared_task(queue='dataset')\ndef remove_document_from_index_task(document_id: str):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n    Async Remove document from index\\n    :param document_id: document id\\n\\n    Usage: remove_document_from_index.delay(document_id)\\n    '\n    logging.info(click.style('Start remove document segments from index: {}'.format(document_id), fg='green'))\n    start_at = time.perf_counter()\n    document = db.session.query(Document).filter(Document.id == document_id).first()\n    if not document:\n        raise NotFound('Document not found')\n    if document.indexing_status != 'completed':\n        return\n    indexing_cache_key = 'document_{}_indexing'.format(document.id)\n    try:\n        dataset = document.dataset\n        if not dataset:\n            raise Exception('Document has no dataset')\n        vector_index = IndexBuilder.get_index(dataset, 'high_quality')\n        kw_index = IndexBuilder.get_index(dataset, 'economy')\n        if vector_index:\n            vector_index.delete_by_document_id(document.id)\n        segments = db.session.query(DocumentSegment).filter(DocumentSegment.document_id == document.id).all()\n        index_node_ids = [segment.index_node_id for segment in segments]\n        if index_node_ids:\n            kw_index.delete_by_ids(index_node_ids)\n        end_at = time.perf_counter()\n        logging.info(click.style('Document removed from index: {} latency: {}'.format(document.id, end_at - start_at), fg='green'))\n    except Exception:\n        logging.exception('remove document from index failed')\n        if not document.archived:\n            document.enabled = True\n            db.session.commit()\n    finally:\n        redis_client.delete(indexing_cache_key)"
        ]
    }
]
[
    {
        "func_name": "do_post_build",
        "original": "def do_post_build(self, builder: UefiBuilder) -> int:\n    \"\"\"CodeQL analysis post-build functionality.\n\n        Args:\n            builder (UefiBuilder): A UEFI builder object for this build.\n\n        Returns:\n            int: The number of CodeQL errors found. Zero indicates that\n            AuditOnly mode is enabled or no failures were found.\n        \"\"\"\n    self.builder = builder\n    self.package = builder.edk2path.GetContainingPackage(builder.edk2path.GetAbsolutePathOnThisSystemFromEdk2RelativePath(builder.env.GetValue('ACTIVE_PLATFORM')))\n    self.package_path = Path(builder.edk2path.GetAbsolutePathOnThisSystemFromEdk2RelativePath(self.package))\n    self.target = builder.env.GetValue('TARGET')\n    self.codeql_db_path = codeql_plugin.get_codeql_db_path(builder.ws, self.package, self.target, new_path=False)\n    self.codeql_path = codeql_plugin.get_codeql_cli_path()\n    if not self.codeql_path:\n        logging.critical('CodeQL build enabled but CodeQL CLI application not found.')\n        return -1\n    codeql_sarif_dir_path = self.codeql_db_path[:self.codeql_db_path.rindex('-')]\n    codeql_sarif_dir_path = codeql_sarif_dir_path.replace('-db-', '-analysis-')\n    self.codeql_sarif_path = os.path.join(codeql_sarif_dir_path, os.path.basename(self.codeql_db_path) + '.sarif')\n    edk2_logging.log_progress(f'Analyzing {self.package} ({self.target}) CodeQL database at:\\n           {self.codeql_db_path}')\n    edk2_logging.log_progress(f'Results will be written to:\\n           {self.codeql_sarif_path}')\n    audit_only = False\n    query_specifiers = None\n    package_config_file = Path(os.path.join(self.package_path, self.package + '.ci.yaml'))\n    plugin_data = None\n    if package_config_file.is_file():\n        with open(package_config_file, 'r') as cf:\n            package_config_file_data = yaml.safe_load(cf)\n            if 'CodeQlAnalyze' in package_config_file_data:\n                plugin_data = package_config_file_data['CodeQlAnalyze']\n                if 'AuditOnly' in plugin_data:\n                    audit_only = plugin_data['AuditOnly']\n                if 'QuerySpecifiers' in plugin_data:\n                    logging.debug(f'Loading CodeQL query specifiers in {str(package_config_file)}')\n                    query_specifiers = plugin_data['QuerySpecifiers']\n    global_audit_only = builder.env.GetValue('STUART_CODEQL_AUDIT_ONLY')\n    if global_audit_only:\n        if global_audit_only.strip().lower() == 'true':\n            audit_only = True\n    if audit_only:\n        logging.info(f'CodeQL Analyze plugin is in audit only mode for {self.package} ({self.target}).')\n    if not query_specifiers:\n        query_specifiers = builder.env.GetValue('STUART_CODEQL_QUERY_SPECIFIERS')\n    plugin_query_set = Path(Path(__file__).parent, 'CodeQlQueries.qls')\n    if not query_specifiers and plugin_query_set.is_file():\n        query_specifiers = str(plugin_query_set.resolve())\n    if not query_specifiers:\n        logging.warning('Skipping CodeQL analysis since no CodeQL query specifiers were provided.')\n        return 0\n    codeql_params = f'database analyze {self.codeql_db_path} {query_specifiers} --format=sarifv2.1.0 --output={self.codeql_sarif_path} --download --threads=0'\n    Path(self.codeql_sarif_path).parent.mkdir(exist_ok=True, parents=True)\n    cmd_ret = RunCmd(self.codeql_path, codeql_params)\n    if cmd_ret != 0:\n        logging.critical(f'CodeQL CLI analysis failed with return code {cmd_ret}.')\n    if not os.path.isfile(self.codeql_sarif_path):\n        logging.critical(f'The sarif file {self.codeql_sarif_path} was not created. Analysis cannot continue.')\n        return -1\n    filter_pattern_data = []\n    global_filter_file_value = builder.env.GetValue('STUART_CODEQL_FILTER_FILES')\n    if global_filter_file_value:\n        global_filter_files = global_filter_file_value.strip().split(',')\n        global_filter_files = [Path(f) for f in global_filter_files]\n        for global_filter_file in global_filter_files:\n            if global_filter_file.is_file():\n                with open(global_filter_file, 'r') as ff:\n                    global_filter_file_data = yaml.safe_load(ff)\n                    if 'Filters' in global_filter_file_data:\n                        current_pattern_data = global_filter_file_data['Filters']\n                        if type(current_pattern_data) is not list:\n                            logging.critical(f'CodeQL pattern data must be a list of strings. Data in {str(global_filter_file.resolve())} is invalid. CodeQL analysis is incomplete.')\n                            return -1\n                        filter_pattern_data += current_pattern_data\n                    else:\n                        logging.critical(f'CodeQL global filter file {str(global_filter_file.resolve())} is  malformed. Missing Filters section. CodeQL analysis is incomplete.')\n                        return -1\n            else:\n                logging.critical(f'CodeQL global filter file {str(global_filter_file.resolve())} was not found. CodeQL analysis is incomplete.')\n                return -1\n    if plugin_data and 'Filters' in plugin_data:\n        if type(plugin_data['Filters']) is not list:\n            logging.critical('CodeQL pattern data must be a list of strings. CodeQL analysis is incomplete.')\n            return -1\n        filter_pattern_data.extend(plugin_data['Filters'])\n    if filter_pattern_data:\n        logging.info('Applying CodeQL SARIF result filters.')\n        analyze_filter.filter_sarif(self.codeql_sarif_path, self.codeql_sarif_path, filter_pattern_data, split_lines=False)\n    with open(self.codeql_sarif_path, 'r') as sf:\n        sarif_file_data = json.load(sf)\n    try:\n        total_errors = 0\n        for run in sarif_file_data['runs']:\n            total_errors += len(run['results'])\n    except KeyError:\n        logging.critical('Sarif file does not contain expected data. Analysis cannot continue.')\n        return -1\n    if total_errors > 0:\n        if audit_only:\n            logging.warning(f'{self.package} ({self.target}) CodeQL analysis ignored {total_errors} errors due to audit mode being enabled.')\n            return 0\n        else:\n            logging.error(f'{self.package} ({self.target}) CodeQL analysis failed with {total_errors} errors.')\n    return total_errors",
        "mutated": [
            "def do_post_build(self, builder: UefiBuilder) -> int:\n    if False:\n        i = 10\n    'CodeQL analysis post-build functionality.\\n\\n        Args:\\n            builder (UefiBuilder): A UEFI builder object for this build.\\n\\n        Returns:\\n            int: The number of CodeQL errors found. Zero indicates that\\n            AuditOnly mode is enabled or no failures were found.\\n        '\n    self.builder = builder\n    self.package = builder.edk2path.GetContainingPackage(builder.edk2path.GetAbsolutePathOnThisSystemFromEdk2RelativePath(builder.env.GetValue('ACTIVE_PLATFORM')))\n    self.package_path = Path(builder.edk2path.GetAbsolutePathOnThisSystemFromEdk2RelativePath(self.package))\n    self.target = builder.env.GetValue('TARGET')\n    self.codeql_db_path = codeql_plugin.get_codeql_db_path(builder.ws, self.package, self.target, new_path=False)\n    self.codeql_path = codeql_plugin.get_codeql_cli_path()\n    if not self.codeql_path:\n        logging.critical('CodeQL build enabled but CodeQL CLI application not found.')\n        return -1\n    codeql_sarif_dir_path = self.codeql_db_path[:self.codeql_db_path.rindex('-')]\n    codeql_sarif_dir_path = codeql_sarif_dir_path.replace('-db-', '-analysis-')\n    self.codeql_sarif_path = os.path.join(codeql_sarif_dir_path, os.path.basename(self.codeql_db_path) + '.sarif')\n    edk2_logging.log_progress(f'Analyzing {self.package} ({self.target}) CodeQL database at:\\n           {self.codeql_db_path}')\n    edk2_logging.log_progress(f'Results will be written to:\\n           {self.codeql_sarif_path}')\n    audit_only = False\n    query_specifiers = None\n    package_config_file = Path(os.path.join(self.package_path, self.package + '.ci.yaml'))\n    plugin_data = None\n    if package_config_file.is_file():\n        with open(package_config_file, 'r') as cf:\n            package_config_file_data = yaml.safe_load(cf)\n            if 'CodeQlAnalyze' in package_config_file_data:\n                plugin_data = package_config_file_data['CodeQlAnalyze']\n                if 'AuditOnly' in plugin_data:\n                    audit_only = plugin_data['AuditOnly']\n                if 'QuerySpecifiers' in plugin_data:\n                    logging.debug(f'Loading CodeQL query specifiers in {str(package_config_file)}')\n                    query_specifiers = plugin_data['QuerySpecifiers']\n    global_audit_only = builder.env.GetValue('STUART_CODEQL_AUDIT_ONLY')\n    if global_audit_only:\n        if global_audit_only.strip().lower() == 'true':\n            audit_only = True\n    if audit_only:\n        logging.info(f'CodeQL Analyze plugin is in audit only mode for {self.package} ({self.target}).')\n    if not query_specifiers:\n        query_specifiers = builder.env.GetValue('STUART_CODEQL_QUERY_SPECIFIERS')\n    plugin_query_set = Path(Path(__file__).parent, 'CodeQlQueries.qls')\n    if not query_specifiers and plugin_query_set.is_file():\n        query_specifiers = str(plugin_query_set.resolve())\n    if not query_specifiers:\n        logging.warning('Skipping CodeQL analysis since no CodeQL query specifiers were provided.')\n        return 0\n    codeql_params = f'database analyze {self.codeql_db_path} {query_specifiers} --format=sarifv2.1.0 --output={self.codeql_sarif_path} --download --threads=0'\n    Path(self.codeql_sarif_path).parent.mkdir(exist_ok=True, parents=True)\n    cmd_ret = RunCmd(self.codeql_path, codeql_params)\n    if cmd_ret != 0:\n        logging.critical(f'CodeQL CLI analysis failed with return code {cmd_ret}.')\n    if not os.path.isfile(self.codeql_sarif_path):\n        logging.critical(f'The sarif file {self.codeql_sarif_path} was not created. Analysis cannot continue.')\n        return -1\n    filter_pattern_data = []\n    global_filter_file_value = builder.env.GetValue('STUART_CODEQL_FILTER_FILES')\n    if global_filter_file_value:\n        global_filter_files = global_filter_file_value.strip().split(',')\n        global_filter_files = [Path(f) for f in global_filter_files]\n        for global_filter_file in global_filter_files:\n            if global_filter_file.is_file():\n                with open(global_filter_file, 'r') as ff:\n                    global_filter_file_data = yaml.safe_load(ff)\n                    if 'Filters' in global_filter_file_data:\n                        current_pattern_data = global_filter_file_data['Filters']\n                        if type(current_pattern_data) is not list:\n                            logging.critical(f'CodeQL pattern data must be a list of strings. Data in {str(global_filter_file.resolve())} is invalid. CodeQL analysis is incomplete.')\n                            return -1\n                        filter_pattern_data += current_pattern_data\n                    else:\n                        logging.critical(f'CodeQL global filter file {str(global_filter_file.resolve())} is  malformed. Missing Filters section. CodeQL analysis is incomplete.')\n                        return -1\n            else:\n                logging.critical(f'CodeQL global filter file {str(global_filter_file.resolve())} was not found. CodeQL analysis is incomplete.')\n                return -1\n    if plugin_data and 'Filters' in plugin_data:\n        if type(plugin_data['Filters']) is not list:\n            logging.critical('CodeQL pattern data must be a list of strings. CodeQL analysis is incomplete.')\n            return -1\n        filter_pattern_data.extend(plugin_data['Filters'])\n    if filter_pattern_data:\n        logging.info('Applying CodeQL SARIF result filters.')\n        analyze_filter.filter_sarif(self.codeql_sarif_path, self.codeql_sarif_path, filter_pattern_data, split_lines=False)\n    with open(self.codeql_sarif_path, 'r') as sf:\n        sarif_file_data = json.load(sf)\n    try:\n        total_errors = 0\n        for run in sarif_file_data['runs']:\n            total_errors += len(run['results'])\n    except KeyError:\n        logging.critical('Sarif file does not contain expected data. Analysis cannot continue.')\n        return -1\n    if total_errors > 0:\n        if audit_only:\n            logging.warning(f'{self.package} ({self.target}) CodeQL analysis ignored {total_errors} errors due to audit mode being enabled.')\n            return 0\n        else:\n            logging.error(f'{self.package} ({self.target}) CodeQL analysis failed with {total_errors} errors.')\n    return total_errors",
            "def do_post_build(self, builder: UefiBuilder) -> int:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    'CodeQL analysis post-build functionality.\\n\\n        Args:\\n            builder (UefiBuilder): A UEFI builder object for this build.\\n\\n        Returns:\\n            int: The number of CodeQL errors found. Zero indicates that\\n            AuditOnly mode is enabled or no failures were found.\\n        '\n    self.builder = builder\n    self.package = builder.edk2path.GetContainingPackage(builder.edk2path.GetAbsolutePathOnThisSystemFromEdk2RelativePath(builder.env.GetValue('ACTIVE_PLATFORM')))\n    self.package_path = Path(builder.edk2path.GetAbsolutePathOnThisSystemFromEdk2RelativePath(self.package))\n    self.target = builder.env.GetValue('TARGET')\n    self.codeql_db_path = codeql_plugin.get_codeql_db_path(builder.ws, self.package, self.target, new_path=False)\n    self.codeql_path = codeql_plugin.get_codeql_cli_path()\n    if not self.codeql_path:\n        logging.critical('CodeQL build enabled but CodeQL CLI application not found.')\n        return -1\n    codeql_sarif_dir_path = self.codeql_db_path[:self.codeql_db_path.rindex('-')]\n    codeql_sarif_dir_path = codeql_sarif_dir_path.replace('-db-', '-analysis-')\n    self.codeql_sarif_path = os.path.join(codeql_sarif_dir_path, os.path.basename(self.codeql_db_path) + '.sarif')\n    edk2_logging.log_progress(f'Analyzing {self.package} ({self.target}) CodeQL database at:\\n           {self.codeql_db_path}')\n    edk2_logging.log_progress(f'Results will be written to:\\n           {self.codeql_sarif_path}')\n    audit_only = False\n    query_specifiers = None\n    package_config_file = Path(os.path.join(self.package_path, self.package + '.ci.yaml'))\n    plugin_data = None\n    if package_config_file.is_file():\n        with open(package_config_file, 'r') as cf:\n            package_config_file_data = yaml.safe_load(cf)\n            if 'CodeQlAnalyze' in package_config_file_data:\n                plugin_data = package_config_file_data['CodeQlAnalyze']\n                if 'AuditOnly' in plugin_data:\n                    audit_only = plugin_data['AuditOnly']\n                if 'QuerySpecifiers' in plugin_data:\n                    logging.debug(f'Loading CodeQL query specifiers in {str(package_config_file)}')\n                    query_specifiers = plugin_data['QuerySpecifiers']\n    global_audit_only = builder.env.GetValue('STUART_CODEQL_AUDIT_ONLY')\n    if global_audit_only:\n        if global_audit_only.strip().lower() == 'true':\n            audit_only = True\n    if audit_only:\n        logging.info(f'CodeQL Analyze plugin is in audit only mode for {self.package} ({self.target}).')\n    if not query_specifiers:\n        query_specifiers = builder.env.GetValue('STUART_CODEQL_QUERY_SPECIFIERS')\n    plugin_query_set = Path(Path(__file__).parent, 'CodeQlQueries.qls')\n    if not query_specifiers and plugin_query_set.is_file():\n        query_specifiers = str(plugin_query_set.resolve())\n    if not query_specifiers:\n        logging.warning('Skipping CodeQL analysis since no CodeQL query specifiers were provided.')\n        return 0\n    codeql_params = f'database analyze {self.codeql_db_path} {query_specifiers} --format=sarifv2.1.0 --output={self.codeql_sarif_path} --download --threads=0'\n    Path(self.codeql_sarif_path).parent.mkdir(exist_ok=True, parents=True)\n    cmd_ret = RunCmd(self.codeql_path, codeql_params)\n    if cmd_ret != 0:\n        logging.critical(f'CodeQL CLI analysis failed with return code {cmd_ret}.')\n    if not os.path.isfile(self.codeql_sarif_path):\n        logging.critical(f'The sarif file {self.codeql_sarif_path} was not created. Analysis cannot continue.')\n        return -1\n    filter_pattern_data = []\n    global_filter_file_value = builder.env.GetValue('STUART_CODEQL_FILTER_FILES')\n    if global_filter_file_value:\n        global_filter_files = global_filter_file_value.strip().split(',')\n        global_filter_files = [Path(f) for f in global_filter_files]\n        for global_filter_file in global_filter_files:\n            if global_filter_file.is_file():\n                with open(global_filter_file, 'r') as ff:\n                    global_filter_file_data = yaml.safe_load(ff)\n                    if 'Filters' in global_filter_file_data:\n                        current_pattern_data = global_filter_file_data['Filters']\n                        if type(current_pattern_data) is not list:\n                            logging.critical(f'CodeQL pattern data must be a list of strings. Data in {str(global_filter_file.resolve())} is invalid. CodeQL analysis is incomplete.')\n                            return -1\n                        filter_pattern_data += current_pattern_data\n                    else:\n                        logging.critical(f'CodeQL global filter file {str(global_filter_file.resolve())} is  malformed. Missing Filters section. CodeQL analysis is incomplete.')\n                        return -1\n            else:\n                logging.critical(f'CodeQL global filter file {str(global_filter_file.resolve())} was not found. CodeQL analysis is incomplete.')\n                return -1\n    if plugin_data and 'Filters' in plugin_data:\n        if type(plugin_data['Filters']) is not list:\n            logging.critical('CodeQL pattern data must be a list of strings. CodeQL analysis is incomplete.')\n            return -1\n        filter_pattern_data.extend(plugin_data['Filters'])\n    if filter_pattern_data:\n        logging.info('Applying CodeQL SARIF result filters.')\n        analyze_filter.filter_sarif(self.codeql_sarif_path, self.codeql_sarif_path, filter_pattern_data, split_lines=False)\n    with open(self.codeql_sarif_path, 'r') as sf:\n        sarif_file_data = json.load(sf)\n    try:\n        total_errors = 0\n        for run in sarif_file_data['runs']:\n            total_errors += len(run['results'])\n    except KeyError:\n        logging.critical('Sarif file does not contain expected data. Analysis cannot continue.')\n        return -1\n    if total_errors > 0:\n        if audit_only:\n            logging.warning(f'{self.package} ({self.target}) CodeQL analysis ignored {total_errors} errors due to audit mode being enabled.')\n            return 0\n        else:\n            logging.error(f'{self.package} ({self.target}) CodeQL analysis failed with {total_errors} errors.')\n    return total_errors",
            "def do_post_build(self, builder: UefiBuilder) -> int:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    'CodeQL analysis post-build functionality.\\n\\n        Args:\\n            builder (UefiBuilder): A UEFI builder object for this build.\\n\\n        Returns:\\n            int: The number of CodeQL errors found. Zero indicates that\\n            AuditOnly mode is enabled or no failures were found.\\n        '\n    self.builder = builder\n    self.package = builder.edk2path.GetContainingPackage(builder.edk2path.GetAbsolutePathOnThisSystemFromEdk2RelativePath(builder.env.GetValue('ACTIVE_PLATFORM')))\n    self.package_path = Path(builder.edk2path.GetAbsolutePathOnThisSystemFromEdk2RelativePath(self.package))\n    self.target = builder.env.GetValue('TARGET')\n    self.codeql_db_path = codeql_plugin.get_codeql_db_path(builder.ws, self.package, self.target, new_path=False)\n    self.codeql_path = codeql_plugin.get_codeql_cli_path()\n    if not self.codeql_path:\n        logging.critical('CodeQL build enabled but CodeQL CLI application not found.')\n        return -1\n    codeql_sarif_dir_path = self.codeql_db_path[:self.codeql_db_path.rindex('-')]\n    codeql_sarif_dir_path = codeql_sarif_dir_path.replace('-db-', '-analysis-')\n    self.codeql_sarif_path = os.path.join(codeql_sarif_dir_path, os.path.basename(self.codeql_db_path) + '.sarif')\n    edk2_logging.log_progress(f'Analyzing {self.package} ({self.target}) CodeQL database at:\\n           {self.codeql_db_path}')\n    edk2_logging.log_progress(f'Results will be written to:\\n           {self.codeql_sarif_path}')\n    audit_only = False\n    query_specifiers = None\n    package_config_file = Path(os.path.join(self.package_path, self.package + '.ci.yaml'))\n    plugin_data = None\n    if package_config_file.is_file():\n        with open(package_config_file, 'r') as cf:\n            package_config_file_data = yaml.safe_load(cf)\n            if 'CodeQlAnalyze' in package_config_file_data:\n                plugin_data = package_config_file_data['CodeQlAnalyze']\n                if 'AuditOnly' in plugin_data:\n                    audit_only = plugin_data['AuditOnly']\n                if 'QuerySpecifiers' in plugin_data:\n                    logging.debug(f'Loading CodeQL query specifiers in {str(package_config_file)}')\n                    query_specifiers = plugin_data['QuerySpecifiers']\n    global_audit_only = builder.env.GetValue('STUART_CODEQL_AUDIT_ONLY')\n    if global_audit_only:\n        if global_audit_only.strip().lower() == 'true':\n            audit_only = True\n    if audit_only:\n        logging.info(f'CodeQL Analyze plugin is in audit only mode for {self.package} ({self.target}).')\n    if not query_specifiers:\n        query_specifiers = builder.env.GetValue('STUART_CODEQL_QUERY_SPECIFIERS')\n    plugin_query_set = Path(Path(__file__).parent, 'CodeQlQueries.qls')\n    if not query_specifiers and plugin_query_set.is_file():\n        query_specifiers = str(plugin_query_set.resolve())\n    if not query_specifiers:\n        logging.warning('Skipping CodeQL analysis since no CodeQL query specifiers were provided.')\n        return 0\n    codeql_params = f'database analyze {self.codeql_db_path} {query_specifiers} --format=sarifv2.1.0 --output={self.codeql_sarif_path} --download --threads=0'\n    Path(self.codeql_sarif_path).parent.mkdir(exist_ok=True, parents=True)\n    cmd_ret = RunCmd(self.codeql_path, codeql_params)\n    if cmd_ret != 0:\n        logging.critical(f'CodeQL CLI analysis failed with return code {cmd_ret}.')\n    if not os.path.isfile(self.codeql_sarif_path):\n        logging.critical(f'The sarif file {self.codeql_sarif_path} was not created. Analysis cannot continue.')\n        return -1\n    filter_pattern_data = []\n    global_filter_file_value = builder.env.GetValue('STUART_CODEQL_FILTER_FILES')\n    if global_filter_file_value:\n        global_filter_files = global_filter_file_value.strip().split(',')\n        global_filter_files = [Path(f) for f in global_filter_files]\n        for global_filter_file in global_filter_files:\n            if global_filter_file.is_file():\n                with open(global_filter_file, 'r') as ff:\n                    global_filter_file_data = yaml.safe_load(ff)\n                    if 'Filters' in global_filter_file_data:\n                        current_pattern_data = global_filter_file_data['Filters']\n                        if type(current_pattern_data) is not list:\n                            logging.critical(f'CodeQL pattern data must be a list of strings. Data in {str(global_filter_file.resolve())} is invalid. CodeQL analysis is incomplete.')\n                            return -1\n                        filter_pattern_data += current_pattern_data\n                    else:\n                        logging.critical(f'CodeQL global filter file {str(global_filter_file.resolve())} is  malformed. Missing Filters section. CodeQL analysis is incomplete.')\n                        return -1\n            else:\n                logging.critical(f'CodeQL global filter file {str(global_filter_file.resolve())} was not found. CodeQL analysis is incomplete.')\n                return -1\n    if plugin_data and 'Filters' in plugin_data:\n        if type(plugin_data['Filters']) is not list:\n            logging.critical('CodeQL pattern data must be a list of strings. CodeQL analysis is incomplete.')\n            return -1\n        filter_pattern_data.extend(plugin_data['Filters'])\n    if filter_pattern_data:\n        logging.info('Applying CodeQL SARIF result filters.')\n        analyze_filter.filter_sarif(self.codeql_sarif_path, self.codeql_sarif_path, filter_pattern_data, split_lines=False)\n    with open(self.codeql_sarif_path, 'r') as sf:\n        sarif_file_data = json.load(sf)\n    try:\n        total_errors = 0\n        for run in sarif_file_data['runs']:\n            total_errors += len(run['results'])\n    except KeyError:\n        logging.critical('Sarif file does not contain expected data. Analysis cannot continue.')\n        return -1\n    if total_errors > 0:\n        if audit_only:\n            logging.warning(f'{self.package} ({self.target}) CodeQL analysis ignored {total_errors} errors due to audit mode being enabled.')\n            return 0\n        else:\n            logging.error(f'{self.package} ({self.target}) CodeQL analysis failed with {total_errors} errors.')\n    return total_errors",
            "def do_post_build(self, builder: UefiBuilder) -> int:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    'CodeQL analysis post-build functionality.\\n\\n        Args:\\n            builder (UefiBuilder): A UEFI builder object for this build.\\n\\n        Returns:\\n            int: The number of CodeQL errors found. Zero indicates that\\n            AuditOnly mode is enabled or no failures were found.\\n        '\n    self.builder = builder\n    self.package = builder.edk2path.GetContainingPackage(builder.edk2path.GetAbsolutePathOnThisSystemFromEdk2RelativePath(builder.env.GetValue('ACTIVE_PLATFORM')))\n    self.package_path = Path(builder.edk2path.GetAbsolutePathOnThisSystemFromEdk2RelativePath(self.package))\n    self.target = builder.env.GetValue('TARGET')\n    self.codeql_db_path = codeql_plugin.get_codeql_db_path(builder.ws, self.package, self.target, new_path=False)\n    self.codeql_path = codeql_plugin.get_codeql_cli_path()\n    if not self.codeql_path:\n        logging.critical('CodeQL build enabled but CodeQL CLI application not found.')\n        return -1\n    codeql_sarif_dir_path = self.codeql_db_path[:self.codeql_db_path.rindex('-')]\n    codeql_sarif_dir_path = codeql_sarif_dir_path.replace('-db-', '-analysis-')\n    self.codeql_sarif_path = os.path.join(codeql_sarif_dir_path, os.path.basename(self.codeql_db_path) + '.sarif')\n    edk2_logging.log_progress(f'Analyzing {self.package} ({self.target}) CodeQL database at:\\n           {self.codeql_db_path}')\n    edk2_logging.log_progress(f'Results will be written to:\\n           {self.codeql_sarif_path}')\n    audit_only = False\n    query_specifiers = None\n    package_config_file = Path(os.path.join(self.package_path, self.package + '.ci.yaml'))\n    plugin_data = None\n    if package_config_file.is_file():\n        with open(package_config_file, 'r') as cf:\n            package_config_file_data = yaml.safe_load(cf)\n            if 'CodeQlAnalyze' in package_config_file_data:\n                plugin_data = package_config_file_data['CodeQlAnalyze']\n                if 'AuditOnly' in plugin_data:\n                    audit_only = plugin_data['AuditOnly']\n                if 'QuerySpecifiers' in plugin_data:\n                    logging.debug(f'Loading CodeQL query specifiers in {str(package_config_file)}')\n                    query_specifiers = plugin_data['QuerySpecifiers']\n    global_audit_only = builder.env.GetValue('STUART_CODEQL_AUDIT_ONLY')\n    if global_audit_only:\n        if global_audit_only.strip().lower() == 'true':\n            audit_only = True\n    if audit_only:\n        logging.info(f'CodeQL Analyze plugin is in audit only mode for {self.package} ({self.target}).')\n    if not query_specifiers:\n        query_specifiers = builder.env.GetValue('STUART_CODEQL_QUERY_SPECIFIERS')\n    plugin_query_set = Path(Path(__file__).parent, 'CodeQlQueries.qls')\n    if not query_specifiers and plugin_query_set.is_file():\n        query_specifiers = str(plugin_query_set.resolve())\n    if not query_specifiers:\n        logging.warning('Skipping CodeQL analysis since no CodeQL query specifiers were provided.')\n        return 0\n    codeql_params = f'database analyze {self.codeql_db_path} {query_specifiers} --format=sarifv2.1.0 --output={self.codeql_sarif_path} --download --threads=0'\n    Path(self.codeql_sarif_path).parent.mkdir(exist_ok=True, parents=True)\n    cmd_ret = RunCmd(self.codeql_path, codeql_params)\n    if cmd_ret != 0:\n        logging.critical(f'CodeQL CLI analysis failed with return code {cmd_ret}.')\n    if not os.path.isfile(self.codeql_sarif_path):\n        logging.critical(f'The sarif file {self.codeql_sarif_path} was not created. Analysis cannot continue.')\n        return -1\n    filter_pattern_data = []\n    global_filter_file_value = builder.env.GetValue('STUART_CODEQL_FILTER_FILES')\n    if global_filter_file_value:\n        global_filter_files = global_filter_file_value.strip().split(',')\n        global_filter_files = [Path(f) for f in global_filter_files]\n        for global_filter_file in global_filter_files:\n            if global_filter_file.is_file():\n                with open(global_filter_file, 'r') as ff:\n                    global_filter_file_data = yaml.safe_load(ff)\n                    if 'Filters' in global_filter_file_data:\n                        current_pattern_data = global_filter_file_data['Filters']\n                        if type(current_pattern_data) is not list:\n                            logging.critical(f'CodeQL pattern data must be a list of strings. Data in {str(global_filter_file.resolve())} is invalid. CodeQL analysis is incomplete.')\n                            return -1\n                        filter_pattern_data += current_pattern_data\n                    else:\n                        logging.critical(f'CodeQL global filter file {str(global_filter_file.resolve())} is  malformed. Missing Filters section. CodeQL analysis is incomplete.')\n                        return -1\n            else:\n                logging.critical(f'CodeQL global filter file {str(global_filter_file.resolve())} was not found. CodeQL analysis is incomplete.')\n                return -1\n    if plugin_data and 'Filters' in plugin_data:\n        if type(plugin_data['Filters']) is not list:\n            logging.critical('CodeQL pattern data must be a list of strings. CodeQL analysis is incomplete.')\n            return -1\n        filter_pattern_data.extend(plugin_data['Filters'])\n    if filter_pattern_data:\n        logging.info('Applying CodeQL SARIF result filters.')\n        analyze_filter.filter_sarif(self.codeql_sarif_path, self.codeql_sarif_path, filter_pattern_data, split_lines=False)\n    with open(self.codeql_sarif_path, 'r') as sf:\n        sarif_file_data = json.load(sf)\n    try:\n        total_errors = 0\n        for run in sarif_file_data['runs']:\n            total_errors += len(run['results'])\n    except KeyError:\n        logging.critical('Sarif file does not contain expected data. Analysis cannot continue.')\n        return -1\n    if total_errors > 0:\n        if audit_only:\n            logging.warning(f'{self.package} ({self.target}) CodeQL analysis ignored {total_errors} errors due to audit mode being enabled.')\n            return 0\n        else:\n            logging.error(f'{self.package} ({self.target}) CodeQL analysis failed with {total_errors} errors.')\n    return total_errors",
            "def do_post_build(self, builder: UefiBuilder) -> int:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    'CodeQL analysis post-build functionality.\\n\\n        Args:\\n            builder (UefiBuilder): A UEFI builder object for this build.\\n\\n        Returns:\\n            int: The number of CodeQL errors found. Zero indicates that\\n            AuditOnly mode is enabled or no failures were found.\\n        '\n    self.builder = builder\n    self.package = builder.edk2path.GetContainingPackage(builder.edk2path.GetAbsolutePathOnThisSystemFromEdk2RelativePath(builder.env.GetValue('ACTIVE_PLATFORM')))\n    self.package_path = Path(builder.edk2path.GetAbsolutePathOnThisSystemFromEdk2RelativePath(self.package))\n    self.target = builder.env.GetValue('TARGET')\n    self.codeql_db_path = codeql_plugin.get_codeql_db_path(builder.ws, self.package, self.target, new_path=False)\n    self.codeql_path = codeql_plugin.get_codeql_cli_path()\n    if not self.codeql_path:\n        logging.critical('CodeQL build enabled but CodeQL CLI application not found.')\n        return -1\n    codeql_sarif_dir_path = self.codeql_db_path[:self.codeql_db_path.rindex('-')]\n    codeql_sarif_dir_path = codeql_sarif_dir_path.replace('-db-', '-analysis-')\n    self.codeql_sarif_path = os.path.join(codeql_sarif_dir_path, os.path.basename(self.codeql_db_path) + '.sarif')\n    edk2_logging.log_progress(f'Analyzing {self.package} ({self.target}) CodeQL database at:\\n           {self.codeql_db_path}')\n    edk2_logging.log_progress(f'Results will be written to:\\n           {self.codeql_sarif_path}')\n    audit_only = False\n    query_specifiers = None\n    package_config_file = Path(os.path.join(self.package_path, self.package + '.ci.yaml'))\n    plugin_data = None\n    if package_config_file.is_file():\n        with open(package_config_file, 'r') as cf:\n            package_config_file_data = yaml.safe_load(cf)\n            if 'CodeQlAnalyze' in package_config_file_data:\n                plugin_data = package_config_file_data['CodeQlAnalyze']\n                if 'AuditOnly' in plugin_data:\n                    audit_only = plugin_data['AuditOnly']\n                if 'QuerySpecifiers' in plugin_data:\n                    logging.debug(f'Loading CodeQL query specifiers in {str(package_config_file)}')\n                    query_specifiers = plugin_data['QuerySpecifiers']\n    global_audit_only = builder.env.GetValue('STUART_CODEQL_AUDIT_ONLY')\n    if global_audit_only:\n        if global_audit_only.strip().lower() == 'true':\n            audit_only = True\n    if audit_only:\n        logging.info(f'CodeQL Analyze plugin is in audit only mode for {self.package} ({self.target}).')\n    if not query_specifiers:\n        query_specifiers = builder.env.GetValue('STUART_CODEQL_QUERY_SPECIFIERS')\n    plugin_query_set = Path(Path(__file__).parent, 'CodeQlQueries.qls')\n    if not query_specifiers and plugin_query_set.is_file():\n        query_specifiers = str(plugin_query_set.resolve())\n    if not query_specifiers:\n        logging.warning('Skipping CodeQL analysis since no CodeQL query specifiers were provided.')\n        return 0\n    codeql_params = f'database analyze {self.codeql_db_path} {query_specifiers} --format=sarifv2.1.0 --output={self.codeql_sarif_path} --download --threads=0'\n    Path(self.codeql_sarif_path).parent.mkdir(exist_ok=True, parents=True)\n    cmd_ret = RunCmd(self.codeql_path, codeql_params)\n    if cmd_ret != 0:\n        logging.critical(f'CodeQL CLI analysis failed with return code {cmd_ret}.')\n    if not os.path.isfile(self.codeql_sarif_path):\n        logging.critical(f'The sarif file {self.codeql_sarif_path} was not created. Analysis cannot continue.')\n        return -1\n    filter_pattern_data = []\n    global_filter_file_value = builder.env.GetValue('STUART_CODEQL_FILTER_FILES')\n    if global_filter_file_value:\n        global_filter_files = global_filter_file_value.strip().split(',')\n        global_filter_files = [Path(f) for f in global_filter_files]\n        for global_filter_file in global_filter_files:\n            if global_filter_file.is_file():\n                with open(global_filter_file, 'r') as ff:\n                    global_filter_file_data = yaml.safe_load(ff)\n                    if 'Filters' in global_filter_file_data:\n                        current_pattern_data = global_filter_file_data['Filters']\n                        if type(current_pattern_data) is not list:\n                            logging.critical(f'CodeQL pattern data must be a list of strings. Data in {str(global_filter_file.resolve())} is invalid. CodeQL analysis is incomplete.')\n                            return -1\n                        filter_pattern_data += current_pattern_data\n                    else:\n                        logging.critical(f'CodeQL global filter file {str(global_filter_file.resolve())} is  malformed. Missing Filters section. CodeQL analysis is incomplete.')\n                        return -1\n            else:\n                logging.critical(f'CodeQL global filter file {str(global_filter_file.resolve())} was not found. CodeQL analysis is incomplete.')\n                return -1\n    if plugin_data and 'Filters' in plugin_data:\n        if type(plugin_data['Filters']) is not list:\n            logging.critical('CodeQL pattern data must be a list of strings. CodeQL analysis is incomplete.')\n            return -1\n        filter_pattern_data.extend(plugin_data['Filters'])\n    if filter_pattern_data:\n        logging.info('Applying CodeQL SARIF result filters.')\n        analyze_filter.filter_sarif(self.codeql_sarif_path, self.codeql_sarif_path, filter_pattern_data, split_lines=False)\n    with open(self.codeql_sarif_path, 'r') as sf:\n        sarif_file_data = json.load(sf)\n    try:\n        total_errors = 0\n        for run in sarif_file_data['runs']:\n            total_errors += len(run['results'])\n    except KeyError:\n        logging.critical('Sarif file does not contain expected data. Analysis cannot continue.')\n        return -1\n    if total_errors > 0:\n        if audit_only:\n            logging.warning(f'{self.package} ({self.target}) CodeQL analysis ignored {total_errors} errors due to audit mode being enabled.')\n            return 0\n        else:\n            logging.error(f'{self.package} ({self.target}) CodeQL analysis failed with {total_errors} errors.')\n    return total_errors"
        ]
    }
]
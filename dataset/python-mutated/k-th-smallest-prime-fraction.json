[
    {
        "func_name": "check",
        "original": "def check(mid, A, K, result):\n    tmp = [0] * 2\n    count = 0\n    j = 0\n    for i in xrange(len(A)):\n        while j < len(A):\n            if i < j and A[i] < A[j] * mid:\n                if tmp[0] == 0 or tmp[0] * A[j] < tmp[1] * A[i]:\n                    tmp[0] = A[i]\n                    tmp[1] = A[j]\n                break\n            j += 1\n        count += len(A) - j\n    if count == K:\n        result[:] = tmp\n    return count >= K",
        "mutated": [
            "def check(mid, A, K, result):\n    if False:\n        i = 10\n    tmp = [0] * 2\n    count = 0\n    j = 0\n    for i in xrange(len(A)):\n        while j < len(A):\n            if i < j and A[i] < A[j] * mid:\n                if tmp[0] == 0 or tmp[0] * A[j] < tmp[1] * A[i]:\n                    tmp[0] = A[i]\n                    tmp[1] = A[j]\n                break\n            j += 1\n        count += len(A) - j\n    if count == K:\n        result[:] = tmp\n    return count >= K",
            "def check(mid, A, K, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    tmp = [0] * 2\n    count = 0\n    j = 0\n    for i in xrange(len(A)):\n        while j < len(A):\n            if i < j and A[i] < A[j] * mid:\n                if tmp[0] == 0 or tmp[0] * A[j] < tmp[1] * A[i]:\n                    tmp[0] = A[i]\n                    tmp[1] = A[j]\n                break\n            j += 1\n        count += len(A) - j\n    if count == K:\n        result[:] = tmp\n    return count >= K",
            "def check(mid, A, K, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    tmp = [0] * 2\n    count = 0\n    j = 0\n    for i in xrange(len(A)):\n        while j < len(A):\n            if i < j and A[i] < A[j] * mid:\n                if tmp[0] == 0 or tmp[0] * A[j] < tmp[1] * A[i]:\n                    tmp[0] = A[i]\n                    tmp[1] = A[j]\n                break\n            j += 1\n        count += len(A) - j\n    if count == K:\n        result[:] = tmp\n    return count >= K",
            "def check(mid, A, K, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    tmp = [0] * 2\n    count = 0\n    j = 0\n    for i in xrange(len(A)):\n        while j < len(A):\n            if i < j and A[i] < A[j] * mid:\n                if tmp[0] == 0 or tmp[0] * A[j] < tmp[1] * A[i]:\n                    tmp[0] = A[i]\n                    tmp[1] = A[j]\n                break\n            j += 1\n        count += len(A) - j\n    if count == K:\n        result[:] = tmp\n    return count >= K",
            "def check(mid, A, K, result):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    tmp = [0] * 2\n    count = 0\n    j = 0\n    for i in xrange(len(A)):\n        while j < len(A):\n            if i < j and A[i] < A[j] * mid:\n                if tmp[0] == 0 or tmp[0] * A[j] < tmp[1] * A[i]:\n                    tmp[0] = A[i]\n                    tmp[1] = A[j]\n                break\n            j += 1\n        count += len(A) - j\n    if count == K:\n        result[:] = tmp\n    return count >= K"
        ]
    },
    {
        "func_name": "kthSmallestPrimeFraction",
        "original": "def kthSmallestPrimeFraction(self, A, K):\n    \"\"\"\n        :type A: List[int]\n        :type K: int\n        :rtype: List[int]\n        \"\"\"\n\n    def check(mid, A, K, result):\n        tmp = [0] * 2\n        count = 0\n        j = 0\n        for i in xrange(len(A)):\n            while j < len(A):\n                if i < j and A[i] < A[j] * mid:\n                    if tmp[0] == 0 or tmp[0] * A[j] < tmp[1] * A[i]:\n                        tmp[0] = A[i]\n                        tmp[1] = A[j]\n                    break\n                j += 1\n            count += len(A) - j\n        if count == K:\n            result[:] = tmp\n        return count >= K\n    result = []\n    (left, right) = (0.0, 1.0)\n    while right - left > 1e-08:\n        mid = left + (right - left) / 2.0\n        if check(mid, A, K, result):\n            right = mid\n        else:\n            left = mid\n        if result:\n            break\n    return result",
        "mutated": [
            "def kthSmallestPrimeFraction(self, A, K):\n    if False:\n        i = 10\n    '\\n        :type A: List[int]\\n        :type K: int\\n        :rtype: List[int]\\n        '\n\n    def check(mid, A, K, result):\n        tmp = [0] * 2\n        count = 0\n        j = 0\n        for i in xrange(len(A)):\n            while j < len(A):\n                if i < j and A[i] < A[j] * mid:\n                    if tmp[0] == 0 or tmp[0] * A[j] < tmp[1] * A[i]:\n                        tmp[0] = A[i]\n                        tmp[1] = A[j]\n                    break\n                j += 1\n            count += len(A) - j\n        if count == K:\n            result[:] = tmp\n        return count >= K\n    result = []\n    (left, right) = (0.0, 1.0)\n    while right - left > 1e-08:\n        mid = left + (right - left) / 2.0\n        if check(mid, A, K, result):\n            right = mid\n        else:\n            left = mid\n        if result:\n            break\n    return result",
            "def kthSmallestPrimeFraction(self, A, K):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    '\\n        :type A: List[int]\\n        :type K: int\\n        :rtype: List[int]\\n        '\n\n    def check(mid, A, K, result):\n        tmp = [0] * 2\n        count = 0\n        j = 0\n        for i in xrange(len(A)):\n            while j < len(A):\n                if i < j and A[i] < A[j] * mid:\n                    if tmp[0] == 0 or tmp[0] * A[j] < tmp[1] * A[i]:\n                        tmp[0] = A[i]\n                        tmp[1] = A[j]\n                    break\n                j += 1\n            count += len(A) - j\n        if count == K:\n            result[:] = tmp\n        return count >= K\n    result = []\n    (left, right) = (0.0, 1.0)\n    while right - left > 1e-08:\n        mid = left + (right - left) / 2.0\n        if check(mid, A, K, result):\n            right = mid\n        else:\n            left = mid\n        if result:\n            break\n    return result",
            "def kthSmallestPrimeFraction(self, A, K):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    '\\n        :type A: List[int]\\n        :type K: int\\n        :rtype: List[int]\\n        '\n\n    def check(mid, A, K, result):\n        tmp = [0] * 2\n        count = 0\n        j = 0\n        for i in xrange(len(A)):\n            while j < len(A):\n                if i < j and A[i] < A[j] * mid:\n                    if tmp[0] == 0 or tmp[0] * A[j] < tmp[1] * A[i]:\n                        tmp[0] = A[i]\n                        tmp[1] = A[j]\n                    break\n                j += 1\n            count += len(A) - j\n        if count == K:\n            result[:] = tmp\n        return count >= K\n    result = []\n    (left, right) = (0.0, 1.0)\n    while right - left > 1e-08:\n        mid = left + (right - left) / 2.0\n        if check(mid, A, K, result):\n            right = mid\n        else:\n            left = mid\n        if result:\n            break\n    return result",
            "def kthSmallestPrimeFraction(self, A, K):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    '\\n        :type A: List[int]\\n        :type K: int\\n        :rtype: List[int]\\n        '\n\n    def check(mid, A, K, result):\n        tmp = [0] * 2\n        count = 0\n        j = 0\n        for i in xrange(len(A)):\n            while j < len(A):\n                if i < j and A[i] < A[j] * mid:\n                    if tmp[0] == 0 or tmp[0] * A[j] < tmp[1] * A[i]:\n                        tmp[0] = A[i]\n                        tmp[1] = A[j]\n                    break\n                j += 1\n            count += len(A) - j\n        if count == K:\n            result[:] = tmp\n        return count >= K\n    result = []\n    (left, right) = (0.0, 1.0)\n    while right - left > 1e-08:\n        mid = left + (right - left) / 2.0\n        if check(mid, A, K, result):\n            right = mid\n        else:\n            left = mid\n        if result:\n            break\n    return result",
            "def kthSmallestPrimeFraction(self, A, K):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    '\\n        :type A: List[int]\\n        :type K: int\\n        :rtype: List[int]\\n        '\n\n    def check(mid, A, K, result):\n        tmp = [0] * 2\n        count = 0\n        j = 0\n        for i in xrange(len(A)):\n            while j < len(A):\n                if i < j and A[i] < A[j] * mid:\n                    if tmp[0] == 0 or tmp[0] * A[j] < tmp[1] * A[i]:\n                        tmp[0] = A[i]\n                        tmp[1] = A[j]\n                    break\n                j += 1\n            count += len(A) - j\n        if count == K:\n            result[:] = tmp\n        return count >= K\n    result = []\n    (left, right) = (0.0, 1.0)\n    while right - left > 1e-08:\n        mid = left + (right - left) / 2.0\n        if check(mid, A, K, result):\n            right = mid\n        else:\n            left = mid\n        if result:\n            break\n    return result"
        ]
    }
]
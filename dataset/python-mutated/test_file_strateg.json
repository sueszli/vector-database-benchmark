[
    {
        "func_name": "_gen_orders",
        "original": "def _gen_orders(self, dealt_num_for_1000) -> pd.DataFrame:\n    headers = ['datetime', 'instrument', 'amount', 'direction']\n    orders = [['20200103', self.TEST_INST, '1000', 'buy'], ['20200106', self.TEST_INST, '1', 'buy'], ['20200107', self.TEST_INST, '1000', 'sell'], ['20200108', self.TEST_INST, '1000', 'buy'], ['20200109', self.TEST_INST, '1', 'sell'], ['20200110', self.TEST_INST, str(dealt_num_for_1000), 'sell']]\n    return pd.DataFrame(orders, columns=headers).set_index(['datetime', 'instrument'])",
        "mutated": [
            "def _gen_orders(self, dealt_num_for_1000) -> pd.DataFrame:\n    if False:\n        i = 10\n    headers = ['datetime', 'instrument', 'amount', 'direction']\n    orders = [['20200103', self.TEST_INST, '1000', 'buy'], ['20200106', self.TEST_INST, '1', 'buy'], ['20200107', self.TEST_INST, '1000', 'sell'], ['20200108', self.TEST_INST, '1000', 'buy'], ['20200109', self.TEST_INST, '1', 'sell'], ['20200110', self.TEST_INST, str(dealt_num_for_1000), 'sell']]\n    return pd.DataFrame(orders, columns=headers).set_index(['datetime', 'instrument'])",
            "def _gen_orders(self, dealt_num_for_1000) -> pd.DataFrame:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    headers = ['datetime', 'instrument', 'amount', 'direction']\n    orders = [['20200103', self.TEST_INST, '1000', 'buy'], ['20200106', self.TEST_INST, '1', 'buy'], ['20200107', self.TEST_INST, '1000', 'sell'], ['20200108', self.TEST_INST, '1000', 'buy'], ['20200109', self.TEST_INST, '1', 'sell'], ['20200110', self.TEST_INST, str(dealt_num_for_1000), 'sell']]\n    return pd.DataFrame(orders, columns=headers).set_index(['datetime', 'instrument'])",
            "def _gen_orders(self, dealt_num_for_1000) -> pd.DataFrame:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    headers = ['datetime', 'instrument', 'amount', 'direction']\n    orders = [['20200103', self.TEST_INST, '1000', 'buy'], ['20200106', self.TEST_INST, '1', 'buy'], ['20200107', self.TEST_INST, '1000', 'sell'], ['20200108', self.TEST_INST, '1000', 'buy'], ['20200109', self.TEST_INST, '1', 'sell'], ['20200110', self.TEST_INST, str(dealt_num_for_1000), 'sell']]\n    return pd.DataFrame(orders, columns=headers).set_index(['datetime', 'instrument'])",
            "def _gen_orders(self, dealt_num_for_1000) -> pd.DataFrame:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    headers = ['datetime', 'instrument', 'amount', 'direction']\n    orders = [['20200103', self.TEST_INST, '1000', 'buy'], ['20200106', self.TEST_INST, '1', 'buy'], ['20200107', self.TEST_INST, '1000', 'sell'], ['20200108', self.TEST_INST, '1000', 'buy'], ['20200109', self.TEST_INST, '1', 'sell'], ['20200110', self.TEST_INST, str(dealt_num_for_1000), 'sell']]\n    return pd.DataFrame(orders, columns=headers).set_index(['datetime', 'instrument'])",
            "def _gen_orders(self, dealt_num_for_1000) -> pd.DataFrame:\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    headers = ['datetime', 'instrument', 'amount', 'direction']\n    orders = [['20200103', self.TEST_INST, '1000', 'buy'], ['20200106', self.TEST_INST, '1', 'buy'], ['20200107', self.TEST_INST, '1000', 'sell'], ['20200108', self.TEST_INST, '1000', 'buy'], ['20200109', self.TEST_INST, '1', 'sell'], ['20200110', self.TEST_INST, str(dealt_num_for_1000), 'sell']]\n    return pd.DataFrame(orders, columns=headers).set_index(['datetime', 'instrument'])"
        ]
    },
    {
        "func_name": "test_file_str",
        "original": "def test_file_str(self):\n    account_money = 150000\n    df = D.features([self.TEST_INST], ['$close', '$factor'], start_time='20200103', end_time='20200103')\n    price = df['$close'].item()\n    factor = df['$factor'].item()\n    price_unit = price / factor * 100\n    dealt_num_for_1000 = account_money // price_unit * (100 / factor)\n    print(price, factor, price_unit, dealt_num_for_1000)\n    orders = self._gen_orders(dealt_num_for_1000)\n    orders.to_csv(self.EXAMPLE_FILE)\n    print(orders)\n    strategy_config = {'class': 'FileOrderStrategy', 'module_path': 'qlib.contrib.strategy.rule_strategy', 'kwargs': {'file': self.EXAMPLE_FILE}}\n    freq = 'day'\n    start_time = '2020-01-01'\n    end_time = '2020-01-16'\n    codes = [self.TEST_INST]\n    backtest_config = {'start_time': start_time, 'end_time': end_time, 'account': account_money, 'benchmark': None, 'exchange_kwargs': {'freq': freq, 'limit_threshold': 0.095, 'deal_price': 'close', 'open_cost': 0.0005, 'close_cost': 0.0015, 'min_cost': 500, 'codes': codes, 'trade_unit': 100}}\n    executor_config = {'class': 'SimulatorExecutor', 'module_path': 'qlib.backtest.executor', 'kwargs': {'time_per_step': freq, 'generate_portfolio_metrics': False, 'verbose': True, 'indicator_config': {'show_indicator': False}}}\n    (report_dict, indicator_dict) = backtest(executor=executor_config, strategy=strategy_config, **backtest_config)\n    ffr_dict = indicator_dict['1day'][0]['ffr'].to_dict()\n    ffr_dict = {str(date).split()[0]: ffr_dict[date] for date in ffr_dict}\n    assert np.isclose(ffr_dict['2020-01-03'], dealt_num_for_1000 / 1000)\n    assert np.isclose(ffr_dict['2020-01-06'], 0)\n    assert np.isclose(ffr_dict['2020-01-07'], dealt_num_for_1000 / 1000)\n    assert np.isclose(ffr_dict['2020-01-08'], dealt_num_for_1000 / 1000)\n    assert np.isclose(ffr_dict['2020-01-09'], 0)\n    assert np.isclose(ffr_dict['2020-01-10'], 1)\n    self.EXAMPLE_FILE.unlink()",
        "mutated": [
            "def test_file_str(self):\n    if False:\n        i = 10\n    account_money = 150000\n    df = D.features([self.TEST_INST], ['$close', '$factor'], start_time='20200103', end_time='20200103')\n    price = df['$close'].item()\n    factor = df['$factor'].item()\n    price_unit = price / factor * 100\n    dealt_num_for_1000 = account_money // price_unit * (100 / factor)\n    print(price, factor, price_unit, dealt_num_for_1000)\n    orders = self._gen_orders(dealt_num_for_1000)\n    orders.to_csv(self.EXAMPLE_FILE)\n    print(orders)\n    strategy_config = {'class': 'FileOrderStrategy', 'module_path': 'qlib.contrib.strategy.rule_strategy', 'kwargs': {'file': self.EXAMPLE_FILE}}\n    freq = 'day'\n    start_time = '2020-01-01'\n    end_time = '2020-01-16'\n    codes = [self.TEST_INST]\n    backtest_config = {'start_time': start_time, 'end_time': end_time, 'account': account_money, 'benchmark': None, 'exchange_kwargs': {'freq': freq, 'limit_threshold': 0.095, 'deal_price': 'close', 'open_cost': 0.0005, 'close_cost': 0.0015, 'min_cost': 500, 'codes': codes, 'trade_unit': 100}}\n    executor_config = {'class': 'SimulatorExecutor', 'module_path': 'qlib.backtest.executor', 'kwargs': {'time_per_step': freq, 'generate_portfolio_metrics': False, 'verbose': True, 'indicator_config': {'show_indicator': False}}}\n    (report_dict, indicator_dict) = backtest(executor=executor_config, strategy=strategy_config, **backtest_config)\n    ffr_dict = indicator_dict['1day'][0]['ffr'].to_dict()\n    ffr_dict = {str(date).split()[0]: ffr_dict[date] for date in ffr_dict}\n    assert np.isclose(ffr_dict['2020-01-03'], dealt_num_for_1000 / 1000)\n    assert np.isclose(ffr_dict['2020-01-06'], 0)\n    assert np.isclose(ffr_dict['2020-01-07'], dealt_num_for_1000 / 1000)\n    assert np.isclose(ffr_dict['2020-01-08'], dealt_num_for_1000 / 1000)\n    assert np.isclose(ffr_dict['2020-01-09'], 0)\n    assert np.isclose(ffr_dict['2020-01-10'], 1)\n    self.EXAMPLE_FILE.unlink()",
            "def test_file_str(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    account_money = 150000\n    df = D.features([self.TEST_INST], ['$close', '$factor'], start_time='20200103', end_time='20200103')\n    price = df['$close'].item()\n    factor = df['$factor'].item()\n    price_unit = price / factor * 100\n    dealt_num_for_1000 = account_money // price_unit * (100 / factor)\n    print(price, factor, price_unit, dealt_num_for_1000)\n    orders = self._gen_orders(dealt_num_for_1000)\n    orders.to_csv(self.EXAMPLE_FILE)\n    print(orders)\n    strategy_config = {'class': 'FileOrderStrategy', 'module_path': 'qlib.contrib.strategy.rule_strategy', 'kwargs': {'file': self.EXAMPLE_FILE}}\n    freq = 'day'\n    start_time = '2020-01-01'\n    end_time = '2020-01-16'\n    codes = [self.TEST_INST]\n    backtest_config = {'start_time': start_time, 'end_time': end_time, 'account': account_money, 'benchmark': None, 'exchange_kwargs': {'freq': freq, 'limit_threshold': 0.095, 'deal_price': 'close', 'open_cost': 0.0005, 'close_cost': 0.0015, 'min_cost': 500, 'codes': codes, 'trade_unit': 100}}\n    executor_config = {'class': 'SimulatorExecutor', 'module_path': 'qlib.backtest.executor', 'kwargs': {'time_per_step': freq, 'generate_portfolio_metrics': False, 'verbose': True, 'indicator_config': {'show_indicator': False}}}\n    (report_dict, indicator_dict) = backtest(executor=executor_config, strategy=strategy_config, **backtest_config)\n    ffr_dict = indicator_dict['1day'][0]['ffr'].to_dict()\n    ffr_dict = {str(date).split()[0]: ffr_dict[date] for date in ffr_dict}\n    assert np.isclose(ffr_dict['2020-01-03'], dealt_num_for_1000 / 1000)\n    assert np.isclose(ffr_dict['2020-01-06'], 0)\n    assert np.isclose(ffr_dict['2020-01-07'], dealt_num_for_1000 / 1000)\n    assert np.isclose(ffr_dict['2020-01-08'], dealt_num_for_1000 / 1000)\n    assert np.isclose(ffr_dict['2020-01-09'], 0)\n    assert np.isclose(ffr_dict['2020-01-10'], 1)\n    self.EXAMPLE_FILE.unlink()",
            "def test_file_str(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    account_money = 150000\n    df = D.features([self.TEST_INST], ['$close', '$factor'], start_time='20200103', end_time='20200103')\n    price = df['$close'].item()\n    factor = df['$factor'].item()\n    price_unit = price / factor * 100\n    dealt_num_for_1000 = account_money // price_unit * (100 / factor)\n    print(price, factor, price_unit, dealt_num_for_1000)\n    orders = self._gen_orders(dealt_num_for_1000)\n    orders.to_csv(self.EXAMPLE_FILE)\n    print(orders)\n    strategy_config = {'class': 'FileOrderStrategy', 'module_path': 'qlib.contrib.strategy.rule_strategy', 'kwargs': {'file': self.EXAMPLE_FILE}}\n    freq = 'day'\n    start_time = '2020-01-01'\n    end_time = '2020-01-16'\n    codes = [self.TEST_INST]\n    backtest_config = {'start_time': start_time, 'end_time': end_time, 'account': account_money, 'benchmark': None, 'exchange_kwargs': {'freq': freq, 'limit_threshold': 0.095, 'deal_price': 'close', 'open_cost': 0.0005, 'close_cost': 0.0015, 'min_cost': 500, 'codes': codes, 'trade_unit': 100}}\n    executor_config = {'class': 'SimulatorExecutor', 'module_path': 'qlib.backtest.executor', 'kwargs': {'time_per_step': freq, 'generate_portfolio_metrics': False, 'verbose': True, 'indicator_config': {'show_indicator': False}}}\n    (report_dict, indicator_dict) = backtest(executor=executor_config, strategy=strategy_config, **backtest_config)\n    ffr_dict = indicator_dict['1day'][0]['ffr'].to_dict()\n    ffr_dict = {str(date).split()[0]: ffr_dict[date] for date in ffr_dict}\n    assert np.isclose(ffr_dict['2020-01-03'], dealt_num_for_1000 / 1000)\n    assert np.isclose(ffr_dict['2020-01-06'], 0)\n    assert np.isclose(ffr_dict['2020-01-07'], dealt_num_for_1000 / 1000)\n    assert np.isclose(ffr_dict['2020-01-08'], dealt_num_for_1000 / 1000)\n    assert np.isclose(ffr_dict['2020-01-09'], 0)\n    assert np.isclose(ffr_dict['2020-01-10'], 1)\n    self.EXAMPLE_FILE.unlink()",
            "def test_file_str(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    account_money = 150000\n    df = D.features([self.TEST_INST], ['$close', '$factor'], start_time='20200103', end_time='20200103')\n    price = df['$close'].item()\n    factor = df['$factor'].item()\n    price_unit = price / factor * 100\n    dealt_num_for_1000 = account_money // price_unit * (100 / factor)\n    print(price, factor, price_unit, dealt_num_for_1000)\n    orders = self._gen_orders(dealt_num_for_1000)\n    orders.to_csv(self.EXAMPLE_FILE)\n    print(orders)\n    strategy_config = {'class': 'FileOrderStrategy', 'module_path': 'qlib.contrib.strategy.rule_strategy', 'kwargs': {'file': self.EXAMPLE_FILE}}\n    freq = 'day'\n    start_time = '2020-01-01'\n    end_time = '2020-01-16'\n    codes = [self.TEST_INST]\n    backtest_config = {'start_time': start_time, 'end_time': end_time, 'account': account_money, 'benchmark': None, 'exchange_kwargs': {'freq': freq, 'limit_threshold': 0.095, 'deal_price': 'close', 'open_cost': 0.0005, 'close_cost': 0.0015, 'min_cost': 500, 'codes': codes, 'trade_unit': 100}}\n    executor_config = {'class': 'SimulatorExecutor', 'module_path': 'qlib.backtest.executor', 'kwargs': {'time_per_step': freq, 'generate_portfolio_metrics': False, 'verbose': True, 'indicator_config': {'show_indicator': False}}}\n    (report_dict, indicator_dict) = backtest(executor=executor_config, strategy=strategy_config, **backtest_config)\n    ffr_dict = indicator_dict['1day'][0]['ffr'].to_dict()\n    ffr_dict = {str(date).split()[0]: ffr_dict[date] for date in ffr_dict}\n    assert np.isclose(ffr_dict['2020-01-03'], dealt_num_for_1000 / 1000)\n    assert np.isclose(ffr_dict['2020-01-06'], 0)\n    assert np.isclose(ffr_dict['2020-01-07'], dealt_num_for_1000 / 1000)\n    assert np.isclose(ffr_dict['2020-01-08'], dealt_num_for_1000 / 1000)\n    assert np.isclose(ffr_dict['2020-01-09'], 0)\n    assert np.isclose(ffr_dict['2020-01-10'], 1)\n    self.EXAMPLE_FILE.unlink()",
            "def test_file_str(self):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    account_money = 150000\n    df = D.features([self.TEST_INST], ['$close', '$factor'], start_time='20200103', end_time='20200103')\n    price = df['$close'].item()\n    factor = df['$factor'].item()\n    price_unit = price / factor * 100\n    dealt_num_for_1000 = account_money // price_unit * (100 / factor)\n    print(price, factor, price_unit, dealt_num_for_1000)\n    orders = self._gen_orders(dealt_num_for_1000)\n    orders.to_csv(self.EXAMPLE_FILE)\n    print(orders)\n    strategy_config = {'class': 'FileOrderStrategy', 'module_path': 'qlib.contrib.strategy.rule_strategy', 'kwargs': {'file': self.EXAMPLE_FILE}}\n    freq = 'day'\n    start_time = '2020-01-01'\n    end_time = '2020-01-16'\n    codes = [self.TEST_INST]\n    backtest_config = {'start_time': start_time, 'end_time': end_time, 'account': account_money, 'benchmark': None, 'exchange_kwargs': {'freq': freq, 'limit_threshold': 0.095, 'deal_price': 'close', 'open_cost': 0.0005, 'close_cost': 0.0015, 'min_cost': 500, 'codes': codes, 'trade_unit': 100}}\n    executor_config = {'class': 'SimulatorExecutor', 'module_path': 'qlib.backtest.executor', 'kwargs': {'time_per_step': freq, 'generate_portfolio_metrics': False, 'verbose': True, 'indicator_config': {'show_indicator': False}}}\n    (report_dict, indicator_dict) = backtest(executor=executor_config, strategy=strategy_config, **backtest_config)\n    ffr_dict = indicator_dict['1day'][0]['ffr'].to_dict()\n    ffr_dict = {str(date).split()[0]: ffr_dict[date] for date in ffr_dict}\n    assert np.isclose(ffr_dict['2020-01-03'], dealt_num_for_1000 / 1000)\n    assert np.isclose(ffr_dict['2020-01-06'], 0)\n    assert np.isclose(ffr_dict['2020-01-07'], dealt_num_for_1000 / 1000)\n    assert np.isclose(ffr_dict['2020-01-08'], dealt_num_for_1000 / 1000)\n    assert np.isclose(ffr_dict['2020-01-09'], 0)\n    assert np.isclose(ffr_dict['2020-01-10'], 1)\n    self.EXAMPLE_FILE.unlink()"
        ]
    }
]
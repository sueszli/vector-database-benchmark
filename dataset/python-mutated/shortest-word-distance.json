[
    {
        "func_name": "shortestDistance",
        "original": "def shortestDistance(self, words, word1, word2):\n    dist = float('inf')\n    (i, index1, index2) = (0, None, None)\n    while i < len(words):\n        if words[i] == word1:\n            index1 = i\n        elif words[i] == word2:\n            index2 = i\n        if index1 is not None and index2 is not None:\n            dist = min(dist, abs(index1 - index2))\n        i += 1\n    return dist",
        "mutated": [
            "def shortestDistance(self, words, word1, word2):\n    if False:\n        i = 10\n    dist = float('inf')\n    (i, index1, index2) = (0, None, None)\n    while i < len(words):\n        if words[i] == word1:\n            index1 = i\n        elif words[i] == word2:\n            index2 = i\n        if index1 is not None and index2 is not None:\n            dist = min(dist, abs(index1 - index2))\n        i += 1\n    return dist",
            "def shortestDistance(self, words, word1, word2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    dist = float('inf')\n    (i, index1, index2) = (0, None, None)\n    while i < len(words):\n        if words[i] == word1:\n            index1 = i\n        elif words[i] == word2:\n            index2 = i\n        if index1 is not None and index2 is not None:\n            dist = min(dist, abs(index1 - index2))\n        i += 1\n    return dist",
            "def shortestDistance(self, words, word1, word2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    dist = float('inf')\n    (i, index1, index2) = (0, None, None)\n    while i < len(words):\n        if words[i] == word1:\n            index1 = i\n        elif words[i] == word2:\n            index2 = i\n        if index1 is not None and index2 is not None:\n            dist = min(dist, abs(index1 - index2))\n        i += 1\n    return dist",
            "def shortestDistance(self, words, word1, word2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    dist = float('inf')\n    (i, index1, index2) = (0, None, None)\n    while i < len(words):\n        if words[i] == word1:\n            index1 = i\n        elif words[i] == word2:\n            index2 = i\n        if index1 is not None and index2 is not None:\n            dist = min(dist, abs(index1 - index2))\n        i += 1\n    return dist",
            "def shortestDistance(self, words, word1, word2):\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    dist = float('inf')\n    (i, index1, index2) = (0, None, None)\n    while i < len(words):\n        if words[i] == word1:\n            index1 = i\n        elif words[i] == word2:\n            index2 = i\n        if index1 is not None and index2 is not None:\n            dist = min(dist, abs(index1 - index2))\n        i += 1\n    return dist"
        ]
    }
]
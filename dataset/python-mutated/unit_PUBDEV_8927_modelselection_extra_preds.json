[
    {
        "func_name": "test_modelselection_drop_redundant_columns",
        "original": "def test_modelselection_drop_redundant_columns():\n    d = h2o.import_file(pyunit_utils.locate('smalldata/glm_test/gaussian_20Cols_10kRows_3Extra.csv'))\n    d2 = h2o.import_file(path=pyunit_utils.locate('smalldata/glm_test/gaussian_20cols_10000Rows.csv'))\n    d['C1'] = d['C1'].asfactor()\n    d['C2'] = d['C2'].asfactor()\n    d['C3'] = d['C3'].asfactor()\n    d['C4'] = d['C4'].asfactor()\n    d['C5'] = d['C5'].asfactor()\n    d['C6'] = d['C6'].asfactor()\n    d['C7'] = d['C7'].asfactor()\n    d['C8'] = d['C8'].asfactor()\n    d['C9'] = d['C9'].asfactor()\n    d['C10'] = d['C10'].asfactor()\n    d['C110'] = d['C110'].asfactor()\n    d2['C1'] = d2['C1'].asfactor()\n    d2['C2'] = d2['C2'].asfactor()\n    d2['C3'] = d2['C3'].asfactor()\n    d2['C4'] = d2['C4'].asfactor()\n    d2['C5'] = d2['C5'].asfactor()\n    d2['C6'] = d2['C6'].asfactor()\n    d2['C7'] = d2['C7'].asfactor()\n    d2['C8'] = d2['C8'].asfactor()\n    d2['C9'] = d2['C9'].asfactor()\n    d2['C10'] = d2['C10'].asfactor()\n    my_y = 'C21'\n    my_x = d.names\n    my_x.remove(my_y)\n    my_x2 = d2.names\n    my_x2.remove(my_y)\n    model_extra = modelSelection(seed=12345, mode='backward', remove_collinear_columns=True)\n    model_extra.train(training_frame=d, x=my_x, y=my_y)\n    model = modelSelection(seed=12345, mode='backward', remove_collinear_columns=True)\n    model.train(training_frame=d2, x=my_x2, y=my_y)\n    model_coefs = model.coef()\n    model_extra_coefs = model_extra.coef()\n    dropped_predictors = model.get_predictors_removed_per_step()\n    dropped_extra_predictors = model_extra.get_predictors_removed_per_step()\n    assert len(dropped_extra_predictors[len(dropped_extra_predictors) - 1]) > 1, 'Dropped columns for redundant columns should exceed 1.'\n    lastInd = len(model_coefs) - 1\n    for index in range(0, len(model_coefs)):\n        model_coef = model_coefs[index]\n        model_extra_coef = model_extra_coefs[index]\n        keys = model_coef.keys()\n        for oneKey in keys:\n            assert abs(model_coef[oneKey] - model_extra_coef[oneKey]) < 1e-06, 'Expected coefficient {0}: {1}, Actual coefficient {0}: {3}. They are different'.format(oneKey, model_coef[oneKey], model_extra_coefs[oneKey])\n        if index < lastInd:\n            assert dropped_predictors[index] == dropped_extra_predictors[index], 'Expected dropped predictor: {0}, actual dropped predictor: {1}.  They are different'.format(dropped_predictors[index], dropped_extra_predictors[index])",
        "mutated": [
            "def test_modelselection_drop_redundant_columns():\n    if False:\n        i = 10\n    d = h2o.import_file(pyunit_utils.locate('smalldata/glm_test/gaussian_20Cols_10kRows_3Extra.csv'))\n    d2 = h2o.import_file(path=pyunit_utils.locate('smalldata/glm_test/gaussian_20cols_10000Rows.csv'))\n    d['C1'] = d['C1'].asfactor()\n    d['C2'] = d['C2'].asfactor()\n    d['C3'] = d['C3'].asfactor()\n    d['C4'] = d['C4'].asfactor()\n    d['C5'] = d['C5'].asfactor()\n    d['C6'] = d['C6'].asfactor()\n    d['C7'] = d['C7'].asfactor()\n    d['C8'] = d['C8'].asfactor()\n    d['C9'] = d['C9'].asfactor()\n    d['C10'] = d['C10'].asfactor()\n    d['C110'] = d['C110'].asfactor()\n    d2['C1'] = d2['C1'].asfactor()\n    d2['C2'] = d2['C2'].asfactor()\n    d2['C3'] = d2['C3'].asfactor()\n    d2['C4'] = d2['C4'].asfactor()\n    d2['C5'] = d2['C5'].asfactor()\n    d2['C6'] = d2['C6'].asfactor()\n    d2['C7'] = d2['C7'].asfactor()\n    d2['C8'] = d2['C8'].asfactor()\n    d2['C9'] = d2['C9'].asfactor()\n    d2['C10'] = d2['C10'].asfactor()\n    my_y = 'C21'\n    my_x = d.names\n    my_x.remove(my_y)\n    my_x2 = d2.names\n    my_x2.remove(my_y)\n    model_extra = modelSelection(seed=12345, mode='backward', remove_collinear_columns=True)\n    model_extra.train(training_frame=d, x=my_x, y=my_y)\n    model = modelSelection(seed=12345, mode='backward', remove_collinear_columns=True)\n    model.train(training_frame=d2, x=my_x2, y=my_y)\n    model_coefs = model.coef()\n    model_extra_coefs = model_extra.coef()\n    dropped_predictors = model.get_predictors_removed_per_step()\n    dropped_extra_predictors = model_extra.get_predictors_removed_per_step()\n    assert len(dropped_extra_predictors[len(dropped_extra_predictors) - 1]) > 1, 'Dropped columns for redundant columns should exceed 1.'\n    lastInd = len(model_coefs) - 1\n    for index in range(0, len(model_coefs)):\n        model_coef = model_coefs[index]\n        model_extra_coef = model_extra_coefs[index]\n        keys = model_coef.keys()\n        for oneKey in keys:\n            assert abs(model_coef[oneKey] - model_extra_coef[oneKey]) < 1e-06, 'Expected coefficient {0}: {1}, Actual coefficient {0}: {3}. They are different'.format(oneKey, model_coef[oneKey], model_extra_coefs[oneKey])\n        if index < lastInd:\n            assert dropped_predictors[index] == dropped_extra_predictors[index], 'Expected dropped predictor: {0}, actual dropped predictor: {1}.  They are different'.format(dropped_predictors[index], dropped_extra_predictors[index])",
            "def test_modelselection_drop_redundant_columns():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n    d = h2o.import_file(pyunit_utils.locate('smalldata/glm_test/gaussian_20Cols_10kRows_3Extra.csv'))\n    d2 = h2o.import_file(path=pyunit_utils.locate('smalldata/glm_test/gaussian_20cols_10000Rows.csv'))\n    d['C1'] = d['C1'].asfactor()\n    d['C2'] = d['C2'].asfactor()\n    d['C3'] = d['C3'].asfactor()\n    d['C4'] = d['C4'].asfactor()\n    d['C5'] = d['C5'].asfactor()\n    d['C6'] = d['C6'].asfactor()\n    d['C7'] = d['C7'].asfactor()\n    d['C8'] = d['C8'].asfactor()\n    d['C9'] = d['C9'].asfactor()\n    d['C10'] = d['C10'].asfactor()\n    d['C110'] = d['C110'].asfactor()\n    d2['C1'] = d2['C1'].asfactor()\n    d2['C2'] = d2['C2'].asfactor()\n    d2['C3'] = d2['C3'].asfactor()\n    d2['C4'] = d2['C4'].asfactor()\n    d2['C5'] = d2['C5'].asfactor()\n    d2['C6'] = d2['C6'].asfactor()\n    d2['C7'] = d2['C7'].asfactor()\n    d2['C8'] = d2['C8'].asfactor()\n    d2['C9'] = d2['C9'].asfactor()\n    d2['C10'] = d2['C10'].asfactor()\n    my_y = 'C21'\n    my_x = d.names\n    my_x.remove(my_y)\n    my_x2 = d2.names\n    my_x2.remove(my_y)\n    model_extra = modelSelection(seed=12345, mode='backward', remove_collinear_columns=True)\n    model_extra.train(training_frame=d, x=my_x, y=my_y)\n    model = modelSelection(seed=12345, mode='backward', remove_collinear_columns=True)\n    model.train(training_frame=d2, x=my_x2, y=my_y)\n    model_coefs = model.coef()\n    model_extra_coefs = model_extra.coef()\n    dropped_predictors = model.get_predictors_removed_per_step()\n    dropped_extra_predictors = model_extra.get_predictors_removed_per_step()\n    assert len(dropped_extra_predictors[len(dropped_extra_predictors) - 1]) > 1, 'Dropped columns for redundant columns should exceed 1.'\n    lastInd = len(model_coefs) - 1\n    for index in range(0, len(model_coefs)):\n        model_coef = model_coefs[index]\n        model_extra_coef = model_extra_coefs[index]\n        keys = model_coef.keys()\n        for oneKey in keys:\n            assert abs(model_coef[oneKey] - model_extra_coef[oneKey]) < 1e-06, 'Expected coefficient {0}: {1}, Actual coefficient {0}: {3}. They are different'.format(oneKey, model_coef[oneKey], model_extra_coefs[oneKey])\n        if index < lastInd:\n            assert dropped_predictors[index] == dropped_extra_predictors[index], 'Expected dropped predictor: {0}, actual dropped predictor: {1}.  They are different'.format(dropped_predictors[index], dropped_extra_predictors[index])",
            "def test_modelselection_drop_redundant_columns():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n    d = h2o.import_file(pyunit_utils.locate('smalldata/glm_test/gaussian_20Cols_10kRows_3Extra.csv'))\n    d2 = h2o.import_file(path=pyunit_utils.locate('smalldata/glm_test/gaussian_20cols_10000Rows.csv'))\n    d['C1'] = d['C1'].asfactor()\n    d['C2'] = d['C2'].asfactor()\n    d['C3'] = d['C3'].asfactor()\n    d['C4'] = d['C4'].asfactor()\n    d['C5'] = d['C5'].asfactor()\n    d['C6'] = d['C6'].asfactor()\n    d['C7'] = d['C7'].asfactor()\n    d['C8'] = d['C8'].asfactor()\n    d['C9'] = d['C9'].asfactor()\n    d['C10'] = d['C10'].asfactor()\n    d['C110'] = d['C110'].asfactor()\n    d2['C1'] = d2['C1'].asfactor()\n    d2['C2'] = d2['C2'].asfactor()\n    d2['C3'] = d2['C3'].asfactor()\n    d2['C4'] = d2['C4'].asfactor()\n    d2['C5'] = d2['C5'].asfactor()\n    d2['C6'] = d2['C6'].asfactor()\n    d2['C7'] = d2['C7'].asfactor()\n    d2['C8'] = d2['C8'].asfactor()\n    d2['C9'] = d2['C9'].asfactor()\n    d2['C10'] = d2['C10'].asfactor()\n    my_y = 'C21'\n    my_x = d.names\n    my_x.remove(my_y)\n    my_x2 = d2.names\n    my_x2.remove(my_y)\n    model_extra = modelSelection(seed=12345, mode='backward', remove_collinear_columns=True)\n    model_extra.train(training_frame=d, x=my_x, y=my_y)\n    model = modelSelection(seed=12345, mode='backward', remove_collinear_columns=True)\n    model.train(training_frame=d2, x=my_x2, y=my_y)\n    model_coefs = model.coef()\n    model_extra_coefs = model_extra.coef()\n    dropped_predictors = model.get_predictors_removed_per_step()\n    dropped_extra_predictors = model_extra.get_predictors_removed_per_step()\n    assert len(dropped_extra_predictors[len(dropped_extra_predictors) - 1]) > 1, 'Dropped columns for redundant columns should exceed 1.'\n    lastInd = len(model_coefs) - 1\n    for index in range(0, len(model_coefs)):\n        model_coef = model_coefs[index]\n        model_extra_coef = model_extra_coefs[index]\n        keys = model_coef.keys()\n        for oneKey in keys:\n            assert abs(model_coef[oneKey] - model_extra_coef[oneKey]) < 1e-06, 'Expected coefficient {0}: {1}, Actual coefficient {0}: {3}. They are different'.format(oneKey, model_coef[oneKey], model_extra_coefs[oneKey])\n        if index < lastInd:\n            assert dropped_predictors[index] == dropped_extra_predictors[index], 'Expected dropped predictor: {0}, actual dropped predictor: {1}.  They are different'.format(dropped_predictors[index], dropped_extra_predictors[index])",
            "def test_modelselection_drop_redundant_columns():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        n = 10\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n    d = h2o.import_file(pyunit_utils.locate('smalldata/glm_test/gaussian_20Cols_10kRows_3Extra.csv'))\n    d2 = h2o.import_file(path=pyunit_utils.locate('smalldata/glm_test/gaussian_20cols_10000Rows.csv'))\n    d['C1'] = d['C1'].asfactor()\n    d['C2'] = d['C2'].asfactor()\n    d['C3'] = d['C3'].asfactor()\n    d['C4'] = d['C4'].asfactor()\n    d['C5'] = d['C5'].asfactor()\n    d['C6'] = d['C6'].asfactor()\n    d['C7'] = d['C7'].asfactor()\n    d['C8'] = d['C8'].asfactor()\n    d['C9'] = d['C9'].asfactor()\n    d['C10'] = d['C10'].asfactor()\n    d['C110'] = d['C110'].asfactor()\n    d2['C1'] = d2['C1'].asfactor()\n    d2['C2'] = d2['C2'].asfactor()\n    d2['C3'] = d2['C3'].asfactor()\n    d2['C4'] = d2['C4'].asfactor()\n    d2['C5'] = d2['C5'].asfactor()\n    d2['C6'] = d2['C6'].asfactor()\n    d2['C7'] = d2['C7'].asfactor()\n    d2['C8'] = d2['C8'].asfactor()\n    d2['C9'] = d2['C9'].asfactor()\n    d2['C10'] = d2['C10'].asfactor()\n    my_y = 'C21'\n    my_x = d.names\n    my_x.remove(my_y)\n    my_x2 = d2.names\n    my_x2.remove(my_y)\n    model_extra = modelSelection(seed=12345, mode='backward', remove_collinear_columns=True)\n    model_extra.train(training_frame=d, x=my_x, y=my_y)\n    model = modelSelection(seed=12345, mode='backward', remove_collinear_columns=True)\n    model.train(training_frame=d2, x=my_x2, y=my_y)\n    model_coefs = model.coef()\n    model_extra_coefs = model_extra.coef()\n    dropped_predictors = model.get_predictors_removed_per_step()\n    dropped_extra_predictors = model_extra.get_predictors_removed_per_step()\n    assert len(dropped_extra_predictors[len(dropped_extra_predictors) - 1]) > 1, 'Dropped columns for redundant columns should exceed 1.'\n    lastInd = len(model_coefs) - 1\n    for index in range(0, len(model_coefs)):\n        model_coef = model_coefs[index]\n        model_extra_coef = model_extra_coefs[index]\n        keys = model_coef.keys()\n        for oneKey in keys:\n            assert abs(model_coef[oneKey] - model_extra_coef[oneKey]) < 1e-06, 'Expected coefficient {0}: {1}, Actual coefficient {0}: {3}. They are different'.format(oneKey, model_coef[oneKey], model_extra_coefs[oneKey])\n        if index < lastInd:\n            assert dropped_predictors[index] == dropped_extra_predictors[index], 'Expected dropped predictor: {0}, actual dropped predictor: {1}.  They are different'.format(dropped_predictors[index], dropped_extra_predictors[index])",
            "def test_modelselection_drop_redundant_columns():\n    if False:\n        i = 10\n        while True:\n            print('Mutation')\n        dp = [0, 1]\n        for i in range(2, n + 1):\n            dp.append(dp[i - 1] + dp[i - 2])\n        print(dp[n])\n\n        def dfs(node):\n            if node == None:\n                return []\n            left = dfs(node.left)\n            right = dfs(node.right)\n        length = 15\n        if length <= 0:\n            return []\n        elif length == 1:\n            return [0]\n        sequence = [0, 1]\n        while len(sequence) < length:\n            next_value = sequence[-1] + sequence[-2]\n            sequence.append(next_value)\n        return sequence\n    d = h2o.import_file(pyunit_utils.locate('smalldata/glm_test/gaussian_20Cols_10kRows_3Extra.csv'))\n    d2 = h2o.import_file(path=pyunit_utils.locate('smalldata/glm_test/gaussian_20cols_10000Rows.csv'))\n    d['C1'] = d['C1'].asfactor()\n    d['C2'] = d['C2'].asfactor()\n    d['C3'] = d['C3'].asfactor()\n    d['C4'] = d['C4'].asfactor()\n    d['C5'] = d['C5'].asfactor()\n    d['C6'] = d['C6'].asfactor()\n    d['C7'] = d['C7'].asfactor()\n    d['C8'] = d['C8'].asfactor()\n    d['C9'] = d['C9'].asfactor()\n    d['C10'] = d['C10'].asfactor()\n    d['C110'] = d['C110'].asfactor()\n    d2['C1'] = d2['C1'].asfactor()\n    d2['C2'] = d2['C2'].asfactor()\n    d2['C3'] = d2['C3'].asfactor()\n    d2['C4'] = d2['C4'].asfactor()\n    d2['C5'] = d2['C5'].asfactor()\n    d2['C6'] = d2['C6'].asfactor()\n    d2['C7'] = d2['C7'].asfactor()\n    d2['C8'] = d2['C8'].asfactor()\n    d2['C9'] = d2['C9'].asfactor()\n    d2['C10'] = d2['C10'].asfactor()\n    my_y = 'C21'\n    my_x = d.names\n    my_x.remove(my_y)\n    my_x2 = d2.names\n    my_x2.remove(my_y)\n    model_extra = modelSelection(seed=12345, mode='backward', remove_collinear_columns=True)\n    model_extra.train(training_frame=d, x=my_x, y=my_y)\n    model = modelSelection(seed=12345, mode='backward', remove_collinear_columns=True)\n    model.train(training_frame=d2, x=my_x2, y=my_y)\n    model_coefs = model.coef()\n    model_extra_coefs = model_extra.coef()\n    dropped_predictors = model.get_predictors_removed_per_step()\n    dropped_extra_predictors = model_extra.get_predictors_removed_per_step()\n    assert len(dropped_extra_predictors[len(dropped_extra_predictors) - 1]) > 1, 'Dropped columns for redundant columns should exceed 1.'\n    lastInd = len(model_coefs) - 1\n    for index in range(0, len(model_coefs)):\n        model_coef = model_coefs[index]\n        model_extra_coef = model_extra_coefs[index]\n        keys = model_coef.keys()\n        for oneKey in keys:\n            assert abs(model_coef[oneKey] - model_extra_coef[oneKey]) < 1e-06, 'Expected coefficient {0}: {1}, Actual coefficient {0}: {3}. They are different'.format(oneKey, model_coef[oneKey], model_extra_coefs[oneKey])\n        if index < lastInd:\n            assert dropped_predictors[index] == dropped_extra_predictors[index], 'Expected dropped predictor: {0}, actual dropped predictor: {1}.  They are different'.format(dropped_predictors[index], dropped_extra_predictors[index])"
        ]
    }
]